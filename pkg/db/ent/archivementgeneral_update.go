// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/inspire-middleware/pkg/db/ent/archivementgeneral"
	"github.com/NpoolPlatform/inspire-middleware/pkg/db/ent/predicate"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// ArchivementGeneralUpdate is the builder for updating ArchivementGeneral entities.
type ArchivementGeneralUpdate struct {
	config
	hooks     []Hook
	mutation  *ArchivementGeneralMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the ArchivementGeneralUpdate builder.
func (agu *ArchivementGeneralUpdate) Where(ps ...predicate.ArchivementGeneral) *ArchivementGeneralUpdate {
	agu.mutation.Where(ps...)
	return agu
}

// SetCreatedAt sets the "created_at" field.
func (agu *ArchivementGeneralUpdate) SetCreatedAt(u uint32) *ArchivementGeneralUpdate {
	agu.mutation.ResetCreatedAt()
	agu.mutation.SetCreatedAt(u)
	return agu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (agu *ArchivementGeneralUpdate) SetNillableCreatedAt(u *uint32) *ArchivementGeneralUpdate {
	if u != nil {
		agu.SetCreatedAt(*u)
	}
	return agu
}

// AddCreatedAt adds u to the "created_at" field.
func (agu *ArchivementGeneralUpdate) AddCreatedAt(u int32) *ArchivementGeneralUpdate {
	agu.mutation.AddCreatedAt(u)
	return agu
}

// SetUpdatedAt sets the "updated_at" field.
func (agu *ArchivementGeneralUpdate) SetUpdatedAt(u uint32) *ArchivementGeneralUpdate {
	agu.mutation.ResetUpdatedAt()
	agu.mutation.SetUpdatedAt(u)
	return agu
}

// AddUpdatedAt adds u to the "updated_at" field.
func (agu *ArchivementGeneralUpdate) AddUpdatedAt(u int32) *ArchivementGeneralUpdate {
	agu.mutation.AddUpdatedAt(u)
	return agu
}

// SetDeletedAt sets the "deleted_at" field.
func (agu *ArchivementGeneralUpdate) SetDeletedAt(u uint32) *ArchivementGeneralUpdate {
	agu.mutation.ResetDeletedAt()
	agu.mutation.SetDeletedAt(u)
	return agu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (agu *ArchivementGeneralUpdate) SetNillableDeletedAt(u *uint32) *ArchivementGeneralUpdate {
	if u != nil {
		agu.SetDeletedAt(*u)
	}
	return agu
}

// AddDeletedAt adds u to the "deleted_at" field.
func (agu *ArchivementGeneralUpdate) AddDeletedAt(u int32) *ArchivementGeneralUpdate {
	agu.mutation.AddDeletedAt(u)
	return agu
}

// SetAppID sets the "app_id" field.
func (agu *ArchivementGeneralUpdate) SetAppID(u uuid.UUID) *ArchivementGeneralUpdate {
	agu.mutation.SetAppID(u)
	return agu
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (agu *ArchivementGeneralUpdate) SetNillableAppID(u *uuid.UUID) *ArchivementGeneralUpdate {
	if u != nil {
		agu.SetAppID(*u)
	}
	return agu
}

// ClearAppID clears the value of the "app_id" field.
func (agu *ArchivementGeneralUpdate) ClearAppID() *ArchivementGeneralUpdate {
	agu.mutation.ClearAppID()
	return agu
}

// SetUserID sets the "user_id" field.
func (agu *ArchivementGeneralUpdate) SetUserID(u uuid.UUID) *ArchivementGeneralUpdate {
	agu.mutation.SetUserID(u)
	return agu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (agu *ArchivementGeneralUpdate) SetNillableUserID(u *uuid.UUID) *ArchivementGeneralUpdate {
	if u != nil {
		agu.SetUserID(*u)
	}
	return agu
}

// ClearUserID clears the value of the "user_id" field.
func (agu *ArchivementGeneralUpdate) ClearUserID() *ArchivementGeneralUpdate {
	agu.mutation.ClearUserID()
	return agu
}

// SetGoodID sets the "good_id" field.
func (agu *ArchivementGeneralUpdate) SetGoodID(u uuid.UUID) *ArchivementGeneralUpdate {
	agu.mutation.SetGoodID(u)
	return agu
}

// SetNillableGoodID sets the "good_id" field if the given value is not nil.
func (agu *ArchivementGeneralUpdate) SetNillableGoodID(u *uuid.UUID) *ArchivementGeneralUpdate {
	if u != nil {
		agu.SetGoodID(*u)
	}
	return agu
}

// ClearGoodID clears the value of the "good_id" field.
func (agu *ArchivementGeneralUpdate) ClearGoodID() *ArchivementGeneralUpdate {
	agu.mutation.ClearGoodID()
	return agu
}

// SetCoinTypeID sets the "coin_type_id" field.
func (agu *ArchivementGeneralUpdate) SetCoinTypeID(u uuid.UUID) *ArchivementGeneralUpdate {
	agu.mutation.SetCoinTypeID(u)
	return agu
}

// SetNillableCoinTypeID sets the "coin_type_id" field if the given value is not nil.
func (agu *ArchivementGeneralUpdate) SetNillableCoinTypeID(u *uuid.UUID) *ArchivementGeneralUpdate {
	if u != nil {
		agu.SetCoinTypeID(*u)
	}
	return agu
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (agu *ArchivementGeneralUpdate) ClearCoinTypeID() *ArchivementGeneralUpdate {
	agu.mutation.ClearCoinTypeID()
	return agu
}

// SetTotalUnitsV1 sets the "total_units_v1" field.
func (agu *ArchivementGeneralUpdate) SetTotalUnitsV1(d decimal.Decimal) *ArchivementGeneralUpdate {
	agu.mutation.SetTotalUnitsV1(d)
	return agu
}

// SetNillableTotalUnitsV1 sets the "total_units_v1" field if the given value is not nil.
func (agu *ArchivementGeneralUpdate) SetNillableTotalUnitsV1(d *decimal.Decimal) *ArchivementGeneralUpdate {
	if d != nil {
		agu.SetTotalUnitsV1(*d)
	}
	return agu
}

// ClearTotalUnitsV1 clears the value of the "total_units_v1" field.
func (agu *ArchivementGeneralUpdate) ClearTotalUnitsV1() *ArchivementGeneralUpdate {
	agu.mutation.ClearTotalUnitsV1()
	return agu
}

// SetSelfUnitsV1 sets the "self_units_v1" field.
func (agu *ArchivementGeneralUpdate) SetSelfUnitsV1(d decimal.Decimal) *ArchivementGeneralUpdate {
	agu.mutation.SetSelfUnitsV1(d)
	return agu
}

// SetNillableSelfUnitsV1 sets the "self_units_v1" field if the given value is not nil.
func (agu *ArchivementGeneralUpdate) SetNillableSelfUnitsV1(d *decimal.Decimal) *ArchivementGeneralUpdate {
	if d != nil {
		agu.SetSelfUnitsV1(*d)
	}
	return agu
}

// ClearSelfUnitsV1 clears the value of the "self_units_v1" field.
func (agu *ArchivementGeneralUpdate) ClearSelfUnitsV1() *ArchivementGeneralUpdate {
	agu.mutation.ClearSelfUnitsV1()
	return agu
}

// SetTotalAmount sets the "total_amount" field.
func (agu *ArchivementGeneralUpdate) SetTotalAmount(d decimal.Decimal) *ArchivementGeneralUpdate {
	agu.mutation.SetTotalAmount(d)
	return agu
}

// SetNillableTotalAmount sets the "total_amount" field if the given value is not nil.
func (agu *ArchivementGeneralUpdate) SetNillableTotalAmount(d *decimal.Decimal) *ArchivementGeneralUpdate {
	if d != nil {
		agu.SetTotalAmount(*d)
	}
	return agu
}

// ClearTotalAmount clears the value of the "total_amount" field.
func (agu *ArchivementGeneralUpdate) ClearTotalAmount() *ArchivementGeneralUpdate {
	agu.mutation.ClearTotalAmount()
	return agu
}

// SetSelfAmount sets the "self_amount" field.
func (agu *ArchivementGeneralUpdate) SetSelfAmount(d decimal.Decimal) *ArchivementGeneralUpdate {
	agu.mutation.SetSelfAmount(d)
	return agu
}

// SetNillableSelfAmount sets the "self_amount" field if the given value is not nil.
func (agu *ArchivementGeneralUpdate) SetNillableSelfAmount(d *decimal.Decimal) *ArchivementGeneralUpdate {
	if d != nil {
		agu.SetSelfAmount(*d)
	}
	return agu
}

// ClearSelfAmount clears the value of the "self_amount" field.
func (agu *ArchivementGeneralUpdate) ClearSelfAmount() *ArchivementGeneralUpdate {
	agu.mutation.ClearSelfAmount()
	return agu
}

// SetTotalCommission sets the "total_commission" field.
func (agu *ArchivementGeneralUpdate) SetTotalCommission(d decimal.Decimal) *ArchivementGeneralUpdate {
	agu.mutation.SetTotalCommission(d)
	return agu
}

// SetNillableTotalCommission sets the "total_commission" field if the given value is not nil.
func (agu *ArchivementGeneralUpdate) SetNillableTotalCommission(d *decimal.Decimal) *ArchivementGeneralUpdate {
	if d != nil {
		agu.SetTotalCommission(*d)
	}
	return agu
}

// ClearTotalCommission clears the value of the "total_commission" field.
func (agu *ArchivementGeneralUpdate) ClearTotalCommission() *ArchivementGeneralUpdate {
	agu.mutation.ClearTotalCommission()
	return agu
}

// SetSelfCommission sets the "self_commission" field.
func (agu *ArchivementGeneralUpdate) SetSelfCommission(d decimal.Decimal) *ArchivementGeneralUpdate {
	agu.mutation.SetSelfCommission(d)
	return agu
}

// SetNillableSelfCommission sets the "self_commission" field if the given value is not nil.
func (agu *ArchivementGeneralUpdate) SetNillableSelfCommission(d *decimal.Decimal) *ArchivementGeneralUpdate {
	if d != nil {
		agu.SetSelfCommission(*d)
	}
	return agu
}

// ClearSelfCommission clears the value of the "self_commission" field.
func (agu *ArchivementGeneralUpdate) ClearSelfCommission() *ArchivementGeneralUpdate {
	agu.mutation.ClearSelfCommission()
	return agu
}

// Mutation returns the ArchivementGeneralMutation object of the builder.
func (agu *ArchivementGeneralUpdate) Mutation() *ArchivementGeneralMutation {
	return agu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (agu *ArchivementGeneralUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if err := agu.defaults(); err != nil {
		return 0, err
	}
	if len(agu.hooks) == 0 {
		affected, err = agu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ArchivementGeneralMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			agu.mutation = mutation
			affected, err = agu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(agu.hooks) - 1; i >= 0; i-- {
			if agu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = agu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, agu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (agu *ArchivementGeneralUpdate) SaveX(ctx context.Context) int {
	affected, err := agu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (agu *ArchivementGeneralUpdate) Exec(ctx context.Context) error {
	_, err := agu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (agu *ArchivementGeneralUpdate) ExecX(ctx context.Context) {
	if err := agu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (agu *ArchivementGeneralUpdate) defaults() error {
	if _, ok := agu.mutation.UpdatedAt(); !ok {
		if archivementgeneral.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized archivementgeneral.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := archivementgeneral.UpdateDefaultUpdatedAt()
		agu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (agu *ArchivementGeneralUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ArchivementGeneralUpdate {
	agu.modifiers = append(agu.modifiers, modifiers...)
	return agu
}

func (agu *ArchivementGeneralUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   archivementgeneral.Table,
			Columns: archivementgeneral.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: archivementgeneral.FieldID,
			},
		},
	}
	if ps := agu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := agu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: archivementgeneral.FieldCreatedAt,
		})
	}
	if value, ok := agu.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: archivementgeneral.FieldCreatedAt,
		})
	}
	if value, ok := agu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: archivementgeneral.FieldUpdatedAt,
		})
	}
	if value, ok := agu.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: archivementgeneral.FieldUpdatedAt,
		})
	}
	if value, ok := agu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: archivementgeneral.FieldDeletedAt,
		})
	}
	if value, ok := agu.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: archivementgeneral.FieldDeletedAt,
		})
	}
	if value, ok := agu.mutation.AppID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: archivementgeneral.FieldAppID,
		})
	}
	if agu.mutation.AppIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: archivementgeneral.FieldAppID,
		})
	}
	if value, ok := agu.mutation.UserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: archivementgeneral.FieldUserID,
		})
	}
	if agu.mutation.UserIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: archivementgeneral.FieldUserID,
		})
	}
	if value, ok := agu.mutation.GoodID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: archivementgeneral.FieldGoodID,
		})
	}
	if agu.mutation.GoodIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: archivementgeneral.FieldGoodID,
		})
	}
	if value, ok := agu.mutation.CoinTypeID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: archivementgeneral.FieldCoinTypeID,
		})
	}
	if agu.mutation.CoinTypeIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: archivementgeneral.FieldCoinTypeID,
		})
	}
	if value, ok := agu.mutation.TotalUnitsV1(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: archivementgeneral.FieldTotalUnitsV1,
		})
	}
	if agu.mutation.TotalUnitsV1Cleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Column: archivementgeneral.FieldTotalUnitsV1,
		})
	}
	if value, ok := agu.mutation.SelfUnitsV1(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: archivementgeneral.FieldSelfUnitsV1,
		})
	}
	if agu.mutation.SelfUnitsV1Cleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Column: archivementgeneral.FieldSelfUnitsV1,
		})
	}
	if value, ok := agu.mutation.TotalAmount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: archivementgeneral.FieldTotalAmount,
		})
	}
	if agu.mutation.TotalAmountCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Column: archivementgeneral.FieldTotalAmount,
		})
	}
	if value, ok := agu.mutation.SelfAmount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: archivementgeneral.FieldSelfAmount,
		})
	}
	if agu.mutation.SelfAmountCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Column: archivementgeneral.FieldSelfAmount,
		})
	}
	if value, ok := agu.mutation.TotalCommission(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: archivementgeneral.FieldTotalCommission,
		})
	}
	if agu.mutation.TotalCommissionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Column: archivementgeneral.FieldTotalCommission,
		})
	}
	if value, ok := agu.mutation.SelfCommission(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: archivementgeneral.FieldSelfCommission,
		})
	}
	if agu.mutation.SelfCommissionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Column: archivementgeneral.FieldSelfCommission,
		})
	}
	_spec.Modifiers = agu.modifiers
	if n, err = sqlgraph.UpdateNodes(ctx, agu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{archivementgeneral.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// ArchivementGeneralUpdateOne is the builder for updating a single ArchivementGeneral entity.
type ArchivementGeneralUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *ArchivementGeneralMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetCreatedAt sets the "created_at" field.
func (aguo *ArchivementGeneralUpdateOne) SetCreatedAt(u uint32) *ArchivementGeneralUpdateOne {
	aguo.mutation.ResetCreatedAt()
	aguo.mutation.SetCreatedAt(u)
	return aguo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (aguo *ArchivementGeneralUpdateOne) SetNillableCreatedAt(u *uint32) *ArchivementGeneralUpdateOne {
	if u != nil {
		aguo.SetCreatedAt(*u)
	}
	return aguo
}

// AddCreatedAt adds u to the "created_at" field.
func (aguo *ArchivementGeneralUpdateOne) AddCreatedAt(u int32) *ArchivementGeneralUpdateOne {
	aguo.mutation.AddCreatedAt(u)
	return aguo
}

// SetUpdatedAt sets the "updated_at" field.
func (aguo *ArchivementGeneralUpdateOne) SetUpdatedAt(u uint32) *ArchivementGeneralUpdateOne {
	aguo.mutation.ResetUpdatedAt()
	aguo.mutation.SetUpdatedAt(u)
	return aguo
}

// AddUpdatedAt adds u to the "updated_at" field.
func (aguo *ArchivementGeneralUpdateOne) AddUpdatedAt(u int32) *ArchivementGeneralUpdateOne {
	aguo.mutation.AddUpdatedAt(u)
	return aguo
}

// SetDeletedAt sets the "deleted_at" field.
func (aguo *ArchivementGeneralUpdateOne) SetDeletedAt(u uint32) *ArchivementGeneralUpdateOne {
	aguo.mutation.ResetDeletedAt()
	aguo.mutation.SetDeletedAt(u)
	return aguo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (aguo *ArchivementGeneralUpdateOne) SetNillableDeletedAt(u *uint32) *ArchivementGeneralUpdateOne {
	if u != nil {
		aguo.SetDeletedAt(*u)
	}
	return aguo
}

// AddDeletedAt adds u to the "deleted_at" field.
func (aguo *ArchivementGeneralUpdateOne) AddDeletedAt(u int32) *ArchivementGeneralUpdateOne {
	aguo.mutation.AddDeletedAt(u)
	return aguo
}

// SetAppID sets the "app_id" field.
func (aguo *ArchivementGeneralUpdateOne) SetAppID(u uuid.UUID) *ArchivementGeneralUpdateOne {
	aguo.mutation.SetAppID(u)
	return aguo
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (aguo *ArchivementGeneralUpdateOne) SetNillableAppID(u *uuid.UUID) *ArchivementGeneralUpdateOne {
	if u != nil {
		aguo.SetAppID(*u)
	}
	return aguo
}

// ClearAppID clears the value of the "app_id" field.
func (aguo *ArchivementGeneralUpdateOne) ClearAppID() *ArchivementGeneralUpdateOne {
	aguo.mutation.ClearAppID()
	return aguo
}

// SetUserID sets the "user_id" field.
func (aguo *ArchivementGeneralUpdateOne) SetUserID(u uuid.UUID) *ArchivementGeneralUpdateOne {
	aguo.mutation.SetUserID(u)
	return aguo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (aguo *ArchivementGeneralUpdateOne) SetNillableUserID(u *uuid.UUID) *ArchivementGeneralUpdateOne {
	if u != nil {
		aguo.SetUserID(*u)
	}
	return aguo
}

// ClearUserID clears the value of the "user_id" field.
func (aguo *ArchivementGeneralUpdateOne) ClearUserID() *ArchivementGeneralUpdateOne {
	aguo.mutation.ClearUserID()
	return aguo
}

// SetGoodID sets the "good_id" field.
func (aguo *ArchivementGeneralUpdateOne) SetGoodID(u uuid.UUID) *ArchivementGeneralUpdateOne {
	aguo.mutation.SetGoodID(u)
	return aguo
}

// SetNillableGoodID sets the "good_id" field if the given value is not nil.
func (aguo *ArchivementGeneralUpdateOne) SetNillableGoodID(u *uuid.UUID) *ArchivementGeneralUpdateOne {
	if u != nil {
		aguo.SetGoodID(*u)
	}
	return aguo
}

// ClearGoodID clears the value of the "good_id" field.
func (aguo *ArchivementGeneralUpdateOne) ClearGoodID() *ArchivementGeneralUpdateOne {
	aguo.mutation.ClearGoodID()
	return aguo
}

// SetCoinTypeID sets the "coin_type_id" field.
func (aguo *ArchivementGeneralUpdateOne) SetCoinTypeID(u uuid.UUID) *ArchivementGeneralUpdateOne {
	aguo.mutation.SetCoinTypeID(u)
	return aguo
}

// SetNillableCoinTypeID sets the "coin_type_id" field if the given value is not nil.
func (aguo *ArchivementGeneralUpdateOne) SetNillableCoinTypeID(u *uuid.UUID) *ArchivementGeneralUpdateOne {
	if u != nil {
		aguo.SetCoinTypeID(*u)
	}
	return aguo
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (aguo *ArchivementGeneralUpdateOne) ClearCoinTypeID() *ArchivementGeneralUpdateOne {
	aguo.mutation.ClearCoinTypeID()
	return aguo
}

// SetTotalUnitsV1 sets the "total_units_v1" field.
func (aguo *ArchivementGeneralUpdateOne) SetTotalUnitsV1(d decimal.Decimal) *ArchivementGeneralUpdateOne {
	aguo.mutation.SetTotalUnitsV1(d)
	return aguo
}

// SetNillableTotalUnitsV1 sets the "total_units_v1" field if the given value is not nil.
func (aguo *ArchivementGeneralUpdateOne) SetNillableTotalUnitsV1(d *decimal.Decimal) *ArchivementGeneralUpdateOne {
	if d != nil {
		aguo.SetTotalUnitsV1(*d)
	}
	return aguo
}

// ClearTotalUnitsV1 clears the value of the "total_units_v1" field.
func (aguo *ArchivementGeneralUpdateOne) ClearTotalUnitsV1() *ArchivementGeneralUpdateOne {
	aguo.mutation.ClearTotalUnitsV1()
	return aguo
}

// SetSelfUnitsV1 sets the "self_units_v1" field.
func (aguo *ArchivementGeneralUpdateOne) SetSelfUnitsV1(d decimal.Decimal) *ArchivementGeneralUpdateOne {
	aguo.mutation.SetSelfUnitsV1(d)
	return aguo
}

// SetNillableSelfUnitsV1 sets the "self_units_v1" field if the given value is not nil.
func (aguo *ArchivementGeneralUpdateOne) SetNillableSelfUnitsV1(d *decimal.Decimal) *ArchivementGeneralUpdateOne {
	if d != nil {
		aguo.SetSelfUnitsV1(*d)
	}
	return aguo
}

// ClearSelfUnitsV1 clears the value of the "self_units_v1" field.
func (aguo *ArchivementGeneralUpdateOne) ClearSelfUnitsV1() *ArchivementGeneralUpdateOne {
	aguo.mutation.ClearSelfUnitsV1()
	return aguo
}

// SetTotalAmount sets the "total_amount" field.
func (aguo *ArchivementGeneralUpdateOne) SetTotalAmount(d decimal.Decimal) *ArchivementGeneralUpdateOne {
	aguo.mutation.SetTotalAmount(d)
	return aguo
}

// SetNillableTotalAmount sets the "total_amount" field if the given value is not nil.
func (aguo *ArchivementGeneralUpdateOne) SetNillableTotalAmount(d *decimal.Decimal) *ArchivementGeneralUpdateOne {
	if d != nil {
		aguo.SetTotalAmount(*d)
	}
	return aguo
}

// ClearTotalAmount clears the value of the "total_amount" field.
func (aguo *ArchivementGeneralUpdateOne) ClearTotalAmount() *ArchivementGeneralUpdateOne {
	aguo.mutation.ClearTotalAmount()
	return aguo
}

// SetSelfAmount sets the "self_amount" field.
func (aguo *ArchivementGeneralUpdateOne) SetSelfAmount(d decimal.Decimal) *ArchivementGeneralUpdateOne {
	aguo.mutation.SetSelfAmount(d)
	return aguo
}

// SetNillableSelfAmount sets the "self_amount" field if the given value is not nil.
func (aguo *ArchivementGeneralUpdateOne) SetNillableSelfAmount(d *decimal.Decimal) *ArchivementGeneralUpdateOne {
	if d != nil {
		aguo.SetSelfAmount(*d)
	}
	return aguo
}

// ClearSelfAmount clears the value of the "self_amount" field.
func (aguo *ArchivementGeneralUpdateOne) ClearSelfAmount() *ArchivementGeneralUpdateOne {
	aguo.mutation.ClearSelfAmount()
	return aguo
}

// SetTotalCommission sets the "total_commission" field.
func (aguo *ArchivementGeneralUpdateOne) SetTotalCommission(d decimal.Decimal) *ArchivementGeneralUpdateOne {
	aguo.mutation.SetTotalCommission(d)
	return aguo
}

// SetNillableTotalCommission sets the "total_commission" field if the given value is not nil.
func (aguo *ArchivementGeneralUpdateOne) SetNillableTotalCommission(d *decimal.Decimal) *ArchivementGeneralUpdateOne {
	if d != nil {
		aguo.SetTotalCommission(*d)
	}
	return aguo
}

// ClearTotalCommission clears the value of the "total_commission" field.
func (aguo *ArchivementGeneralUpdateOne) ClearTotalCommission() *ArchivementGeneralUpdateOne {
	aguo.mutation.ClearTotalCommission()
	return aguo
}

// SetSelfCommission sets the "self_commission" field.
func (aguo *ArchivementGeneralUpdateOne) SetSelfCommission(d decimal.Decimal) *ArchivementGeneralUpdateOne {
	aguo.mutation.SetSelfCommission(d)
	return aguo
}

// SetNillableSelfCommission sets the "self_commission" field if the given value is not nil.
func (aguo *ArchivementGeneralUpdateOne) SetNillableSelfCommission(d *decimal.Decimal) *ArchivementGeneralUpdateOne {
	if d != nil {
		aguo.SetSelfCommission(*d)
	}
	return aguo
}

// ClearSelfCommission clears the value of the "self_commission" field.
func (aguo *ArchivementGeneralUpdateOne) ClearSelfCommission() *ArchivementGeneralUpdateOne {
	aguo.mutation.ClearSelfCommission()
	return aguo
}

// Mutation returns the ArchivementGeneralMutation object of the builder.
func (aguo *ArchivementGeneralUpdateOne) Mutation() *ArchivementGeneralMutation {
	return aguo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (aguo *ArchivementGeneralUpdateOne) Select(field string, fields ...string) *ArchivementGeneralUpdateOne {
	aguo.fields = append([]string{field}, fields...)
	return aguo
}

// Save executes the query and returns the updated ArchivementGeneral entity.
func (aguo *ArchivementGeneralUpdateOne) Save(ctx context.Context) (*ArchivementGeneral, error) {
	var (
		err  error
		node *ArchivementGeneral
	)
	if err := aguo.defaults(); err != nil {
		return nil, err
	}
	if len(aguo.hooks) == 0 {
		node, err = aguo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ArchivementGeneralMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			aguo.mutation = mutation
			node, err = aguo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(aguo.hooks) - 1; i >= 0; i-- {
			if aguo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = aguo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, aguo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*ArchivementGeneral)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from ArchivementGeneralMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (aguo *ArchivementGeneralUpdateOne) SaveX(ctx context.Context) *ArchivementGeneral {
	node, err := aguo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (aguo *ArchivementGeneralUpdateOne) Exec(ctx context.Context) error {
	_, err := aguo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aguo *ArchivementGeneralUpdateOne) ExecX(ctx context.Context) {
	if err := aguo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (aguo *ArchivementGeneralUpdateOne) defaults() error {
	if _, ok := aguo.mutation.UpdatedAt(); !ok {
		if archivementgeneral.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized archivementgeneral.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := archivementgeneral.UpdateDefaultUpdatedAt()
		aguo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (aguo *ArchivementGeneralUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ArchivementGeneralUpdateOne {
	aguo.modifiers = append(aguo.modifiers, modifiers...)
	return aguo
}

func (aguo *ArchivementGeneralUpdateOne) sqlSave(ctx context.Context) (_node *ArchivementGeneral, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   archivementgeneral.Table,
			Columns: archivementgeneral.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: archivementgeneral.FieldID,
			},
		},
	}
	id, ok := aguo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ArchivementGeneral.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := aguo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, archivementgeneral.FieldID)
		for _, f := range fields {
			if !archivementgeneral.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != archivementgeneral.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := aguo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := aguo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: archivementgeneral.FieldCreatedAt,
		})
	}
	if value, ok := aguo.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: archivementgeneral.FieldCreatedAt,
		})
	}
	if value, ok := aguo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: archivementgeneral.FieldUpdatedAt,
		})
	}
	if value, ok := aguo.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: archivementgeneral.FieldUpdatedAt,
		})
	}
	if value, ok := aguo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: archivementgeneral.FieldDeletedAt,
		})
	}
	if value, ok := aguo.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: archivementgeneral.FieldDeletedAt,
		})
	}
	if value, ok := aguo.mutation.AppID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: archivementgeneral.FieldAppID,
		})
	}
	if aguo.mutation.AppIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: archivementgeneral.FieldAppID,
		})
	}
	if value, ok := aguo.mutation.UserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: archivementgeneral.FieldUserID,
		})
	}
	if aguo.mutation.UserIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: archivementgeneral.FieldUserID,
		})
	}
	if value, ok := aguo.mutation.GoodID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: archivementgeneral.FieldGoodID,
		})
	}
	if aguo.mutation.GoodIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: archivementgeneral.FieldGoodID,
		})
	}
	if value, ok := aguo.mutation.CoinTypeID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: archivementgeneral.FieldCoinTypeID,
		})
	}
	if aguo.mutation.CoinTypeIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: archivementgeneral.FieldCoinTypeID,
		})
	}
	if value, ok := aguo.mutation.TotalUnitsV1(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: archivementgeneral.FieldTotalUnitsV1,
		})
	}
	if aguo.mutation.TotalUnitsV1Cleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Column: archivementgeneral.FieldTotalUnitsV1,
		})
	}
	if value, ok := aguo.mutation.SelfUnitsV1(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: archivementgeneral.FieldSelfUnitsV1,
		})
	}
	if aguo.mutation.SelfUnitsV1Cleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Column: archivementgeneral.FieldSelfUnitsV1,
		})
	}
	if value, ok := aguo.mutation.TotalAmount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: archivementgeneral.FieldTotalAmount,
		})
	}
	if aguo.mutation.TotalAmountCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Column: archivementgeneral.FieldTotalAmount,
		})
	}
	if value, ok := aguo.mutation.SelfAmount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: archivementgeneral.FieldSelfAmount,
		})
	}
	if aguo.mutation.SelfAmountCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Column: archivementgeneral.FieldSelfAmount,
		})
	}
	if value, ok := aguo.mutation.TotalCommission(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: archivementgeneral.FieldTotalCommission,
		})
	}
	if aguo.mutation.TotalCommissionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Column: archivementgeneral.FieldTotalCommission,
		})
	}
	if value, ok := aguo.mutation.SelfCommission(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: archivementgeneral.FieldSelfCommission,
		})
	}
	if aguo.mutation.SelfCommissionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Column: archivementgeneral.FieldSelfCommission,
		})
	}
	_spec.Modifiers = aguo.modifiers
	_node = &ArchivementGeneral{config: aguo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, aguo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{archivementgeneral.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
