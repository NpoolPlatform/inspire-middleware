// Code generated by ent, DO NOT EDIT.

package appgoodscope

import (
	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/inspire-middleware/pkg/db/ent/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.AppGoodScope {
	return predicate.AppGoodScope(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.AppGoodScope {
	return predicate.AppGoodScope(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.AppGoodScope {
	return predicate.AppGoodScope(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.AppGoodScope {
	return predicate.AppGoodScope(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.AppGoodScope {
	return predicate.AppGoodScope(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.AppGoodScope {
	return predicate.AppGoodScope(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.AppGoodScope {
	return predicate.AppGoodScope(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.AppGoodScope {
	return predicate.AppGoodScope(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.AppGoodScope {
	return predicate.AppGoodScope(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v uint32) predicate.AppGoodScope {
	return predicate.AppGoodScope(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v uint32) predicate.AppGoodScope {
	return predicate.AppGoodScope(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v uint32) predicate.AppGoodScope {
	return predicate.AppGoodScope(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// AppID applies equality check predicate on the "app_id" field. It's identical to AppIDEQ.
func AppID(v uuid.UUID) predicate.AppGoodScope {
	return predicate.AppGoodScope(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAppID), v))
	})
}

// ScopeID applies equality check predicate on the "scope_id" field. It's identical to ScopeIDEQ.
func ScopeID(v uuid.UUID) predicate.AppGoodScope {
	return predicate.AppGoodScope(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldScopeID), v))
	})
}

// AppGoodID applies equality check predicate on the "app_good_id" field. It's identical to AppGoodIDEQ.
func AppGoodID(v uuid.UUID) predicate.AppGoodScope {
	return predicate.AppGoodScope(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAppGoodID), v))
	})
}

// CouponID applies equality check predicate on the "coupon_id" field. It's identical to CouponIDEQ.
func CouponID(v uuid.UUID) predicate.AppGoodScope {
	return predicate.AppGoodScope(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCouponID), v))
	})
}

// CouponScope applies equality check predicate on the "coupon_scope" field. It's identical to CouponScopeEQ.
func CouponScope(v string) predicate.AppGoodScope {
	return predicate.AppGoodScope(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCouponScope), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v uint32) predicate.AppGoodScope {
	return predicate.AppGoodScope(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v uint32) predicate.AppGoodScope {
	return predicate.AppGoodScope(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...uint32) predicate.AppGoodScope {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppGoodScope(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...uint32) predicate.AppGoodScope {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppGoodScope(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v uint32) predicate.AppGoodScope {
	return predicate.AppGoodScope(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v uint32) predicate.AppGoodScope {
	return predicate.AppGoodScope(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v uint32) predicate.AppGoodScope {
	return predicate.AppGoodScope(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v uint32) predicate.AppGoodScope {
	return predicate.AppGoodScope(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v uint32) predicate.AppGoodScope {
	return predicate.AppGoodScope(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v uint32) predicate.AppGoodScope {
	return predicate.AppGoodScope(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...uint32) predicate.AppGoodScope {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppGoodScope(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...uint32) predicate.AppGoodScope {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppGoodScope(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v uint32) predicate.AppGoodScope {
	return predicate.AppGoodScope(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v uint32) predicate.AppGoodScope {
	return predicate.AppGoodScope(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v uint32) predicate.AppGoodScope {
	return predicate.AppGoodScope(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v uint32) predicate.AppGoodScope {
	return predicate.AppGoodScope(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v uint32) predicate.AppGoodScope {
	return predicate.AppGoodScope(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v uint32) predicate.AppGoodScope {
	return predicate.AppGoodScope(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...uint32) predicate.AppGoodScope {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppGoodScope(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...uint32) predicate.AppGoodScope {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppGoodScope(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v uint32) predicate.AppGoodScope {
	return predicate.AppGoodScope(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v uint32) predicate.AppGoodScope {
	return predicate.AppGoodScope(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v uint32) predicate.AppGoodScope {
	return predicate.AppGoodScope(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v uint32) predicate.AppGoodScope {
	return predicate.AppGoodScope(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeletedAt), v))
	})
}

// AppIDEQ applies the EQ predicate on the "app_id" field.
func AppIDEQ(v uuid.UUID) predicate.AppGoodScope {
	return predicate.AppGoodScope(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAppID), v))
	})
}

// AppIDNEQ applies the NEQ predicate on the "app_id" field.
func AppIDNEQ(v uuid.UUID) predicate.AppGoodScope {
	return predicate.AppGoodScope(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAppID), v))
	})
}

// AppIDIn applies the In predicate on the "app_id" field.
func AppIDIn(vs ...uuid.UUID) predicate.AppGoodScope {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppGoodScope(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldAppID), v...))
	})
}

// AppIDNotIn applies the NotIn predicate on the "app_id" field.
func AppIDNotIn(vs ...uuid.UUID) predicate.AppGoodScope {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppGoodScope(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldAppID), v...))
	})
}

// AppIDGT applies the GT predicate on the "app_id" field.
func AppIDGT(v uuid.UUID) predicate.AppGoodScope {
	return predicate.AppGoodScope(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAppID), v))
	})
}

// AppIDGTE applies the GTE predicate on the "app_id" field.
func AppIDGTE(v uuid.UUID) predicate.AppGoodScope {
	return predicate.AppGoodScope(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAppID), v))
	})
}

// AppIDLT applies the LT predicate on the "app_id" field.
func AppIDLT(v uuid.UUID) predicate.AppGoodScope {
	return predicate.AppGoodScope(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAppID), v))
	})
}

// AppIDLTE applies the LTE predicate on the "app_id" field.
func AppIDLTE(v uuid.UUID) predicate.AppGoodScope {
	return predicate.AppGoodScope(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAppID), v))
	})
}

// AppIDIsNil applies the IsNil predicate on the "app_id" field.
func AppIDIsNil() predicate.AppGoodScope {
	return predicate.AppGoodScope(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldAppID)))
	})
}

// AppIDNotNil applies the NotNil predicate on the "app_id" field.
func AppIDNotNil() predicate.AppGoodScope {
	return predicate.AppGoodScope(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldAppID)))
	})
}

// ScopeIDEQ applies the EQ predicate on the "scope_id" field.
func ScopeIDEQ(v uuid.UUID) predicate.AppGoodScope {
	return predicate.AppGoodScope(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldScopeID), v))
	})
}

// ScopeIDNEQ applies the NEQ predicate on the "scope_id" field.
func ScopeIDNEQ(v uuid.UUID) predicate.AppGoodScope {
	return predicate.AppGoodScope(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldScopeID), v))
	})
}

// ScopeIDIn applies the In predicate on the "scope_id" field.
func ScopeIDIn(vs ...uuid.UUID) predicate.AppGoodScope {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppGoodScope(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldScopeID), v...))
	})
}

// ScopeIDNotIn applies the NotIn predicate on the "scope_id" field.
func ScopeIDNotIn(vs ...uuid.UUID) predicate.AppGoodScope {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppGoodScope(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldScopeID), v...))
	})
}

// ScopeIDGT applies the GT predicate on the "scope_id" field.
func ScopeIDGT(v uuid.UUID) predicate.AppGoodScope {
	return predicate.AppGoodScope(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldScopeID), v))
	})
}

// ScopeIDGTE applies the GTE predicate on the "scope_id" field.
func ScopeIDGTE(v uuid.UUID) predicate.AppGoodScope {
	return predicate.AppGoodScope(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldScopeID), v))
	})
}

// ScopeIDLT applies the LT predicate on the "scope_id" field.
func ScopeIDLT(v uuid.UUID) predicate.AppGoodScope {
	return predicate.AppGoodScope(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldScopeID), v))
	})
}

// ScopeIDLTE applies the LTE predicate on the "scope_id" field.
func ScopeIDLTE(v uuid.UUID) predicate.AppGoodScope {
	return predicate.AppGoodScope(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldScopeID), v))
	})
}

// ScopeIDIsNil applies the IsNil predicate on the "scope_id" field.
func ScopeIDIsNil() predicate.AppGoodScope {
	return predicate.AppGoodScope(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldScopeID)))
	})
}

// ScopeIDNotNil applies the NotNil predicate on the "scope_id" field.
func ScopeIDNotNil() predicate.AppGoodScope {
	return predicate.AppGoodScope(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldScopeID)))
	})
}

// AppGoodIDEQ applies the EQ predicate on the "app_good_id" field.
func AppGoodIDEQ(v uuid.UUID) predicate.AppGoodScope {
	return predicate.AppGoodScope(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAppGoodID), v))
	})
}

// AppGoodIDNEQ applies the NEQ predicate on the "app_good_id" field.
func AppGoodIDNEQ(v uuid.UUID) predicate.AppGoodScope {
	return predicate.AppGoodScope(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAppGoodID), v))
	})
}

// AppGoodIDIn applies the In predicate on the "app_good_id" field.
func AppGoodIDIn(vs ...uuid.UUID) predicate.AppGoodScope {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppGoodScope(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldAppGoodID), v...))
	})
}

// AppGoodIDNotIn applies the NotIn predicate on the "app_good_id" field.
func AppGoodIDNotIn(vs ...uuid.UUID) predicate.AppGoodScope {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppGoodScope(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldAppGoodID), v...))
	})
}

// AppGoodIDGT applies the GT predicate on the "app_good_id" field.
func AppGoodIDGT(v uuid.UUID) predicate.AppGoodScope {
	return predicate.AppGoodScope(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAppGoodID), v))
	})
}

// AppGoodIDGTE applies the GTE predicate on the "app_good_id" field.
func AppGoodIDGTE(v uuid.UUID) predicate.AppGoodScope {
	return predicate.AppGoodScope(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAppGoodID), v))
	})
}

// AppGoodIDLT applies the LT predicate on the "app_good_id" field.
func AppGoodIDLT(v uuid.UUID) predicate.AppGoodScope {
	return predicate.AppGoodScope(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAppGoodID), v))
	})
}

// AppGoodIDLTE applies the LTE predicate on the "app_good_id" field.
func AppGoodIDLTE(v uuid.UUID) predicate.AppGoodScope {
	return predicate.AppGoodScope(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAppGoodID), v))
	})
}

// AppGoodIDIsNil applies the IsNil predicate on the "app_good_id" field.
func AppGoodIDIsNil() predicate.AppGoodScope {
	return predicate.AppGoodScope(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldAppGoodID)))
	})
}

// AppGoodIDNotNil applies the NotNil predicate on the "app_good_id" field.
func AppGoodIDNotNil() predicate.AppGoodScope {
	return predicate.AppGoodScope(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldAppGoodID)))
	})
}

// CouponIDEQ applies the EQ predicate on the "coupon_id" field.
func CouponIDEQ(v uuid.UUID) predicate.AppGoodScope {
	return predicate.AppGoodScope(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCouponID), v))
	})
}

// CouponIDNEQ applies the NEQ predicate on the "coupon_id" field.
func CouponIDNEQ(v uuid.UUID) predicate.AppGoodScope {
	return predicate.AppGoodScope(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCouponID), v))
	})
}

// CouponIDIn applies the In predicate on the "coupon_id" field.
func CouponIDIn(vs ...uuid.UUID) predicate.AppGoodScope {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppGoodScope(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCouponID), v...))
	})
}

// CouponIDNotIn applies the NotIn predicate on the "coupon_id" field.
func CouponIDNotIn(vs ...uuid.UUID) predicate.AppGoodScope {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppGoodScope(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCouponID), v...))
	})
}

// CouponIDGT applies the GT predicate on the "coupon_id" field.
func CouponIDGT(v uuid.UUID) predicate.AppGoodScope {
	return predicate.AppGoodScope(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCouponID), v))
	})
}

// CouponIDGTE applies the GTE predicate on the "coupon_id" field.
func CouponIDGTE(v uuid.UUID) predicate.AppGoodScope {
	return predicate.AppGoodScope(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCouponID), v))
	})
}

// CouponIDLT applies the LT predicate on the "coupon_id" field.
func CouponIDLT(v uuid.UUID) predicate.AppGoodScope {
	return predicate.AppGoodScope(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCouponID), v))
	})
}

// CouponIDLTE applies the LTE predicate on the "coupon_id" field.
func CouponIDLTE(v uuid.UUID) predicate.AppGoodScope {
	return predicate.AppGoodScope(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCouponID), v))
	})
}

// CouponIDIsNil applies the IsNil predicate on the "coupon_id" field.
func CouponIDIsNil() predicate.AppGoodScope {
	return predicate.AppGoodScope(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCouponID)))
	})
}

// CouponIDNotNil applies the NotNil predicate on the "coupon_id" field.
func CouponIDNotNil() predicate.AppGoodScope {
	return predicate.AppGoodScope(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCouponID)))
	})
}

// CouponScopeEQ applies the EQ predicate on the "coupon_scope" field.
func CouponScopeEQ(v string) predicate.AppGoodScope {
	return predicate.AppGoodScope(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCouponScope), v))
	})
}

// CouponScopeNEQ applies the NEQ predicate on the "coupon_scope" field.
func CouponScopeNEQ(v string) predicate.AppGoodScope {
	return predicate.AppGoodScope(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCouponScope), v))
	})
}

// CouponScopeIn applies the In predicate on the "coupon_scope" field.
func CouponScopeIn(vs ...string) predicate.AppGoodScope {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppGoodScope(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCouponScope), v...))
	})
}

// CouponScopeNotIn applies the NotIn predicate on the "coupon_scope" field.
func CouponScopeNotIn(vs ...string) predicate.AppGoodScope {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppGoodScope(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCouponScope), v...))
	})
}

// CouponScopeGT applies the GT predicate on the "coupon_scope" field.
func CouponScopeGT(v string) predicate.AppGoodScope {
	return predicate.AppGoodScope(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCouponScope), v))
	})
}

// CouponScopeGTE applies the GTE predicate on the "coupon_scope" field.
func CouponScopeGTE(v string) predicate.AppGoodScope {
	return predicate.AppGoodScope(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCouponScope), v))
	})
}

// CouponScopeLT applies the LT predicate on the "coupon_scope" field.
func CouponScopeLT(v string) predicate.AppGoodScope {
	return predicate.AppGoodScope(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCouponScope), v))
	})
}

// CouponScopeLTE applies the LTE predicate on the "coupon_scope" field.
func CouponScopeLTE(v string) predicate.AppGoodScope {
	return predicate.AppGoodScope(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCouponScope), v))
	})
}

// CouponScopeContains applies the Contains predicate on the "coupon_scope" field.
func CouponScopeContains(v string) predicate.AppGoodScope {
	return predicate.AppGoodScope(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCouponScope), v))
	})
}

// CouponScopeHasPrefix applies the HasPrefix predicate on the "coupon_scope" field.
func CouponScopeHasPrefix(v string) predicate.AppGoodScope {
	return predicate.AppGoodScope(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCouponScope), v))
	})
}

// CouponScopeHasSuffix applies the HasSuffix predicate on the "coupon_scope" field.
func CouponScopeHasSuffix(v string) predicate.AppGoodScope {
	return predicate.AppGoodScope(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCouponScope), v))
	})
}

// CouponScopeIsNil applies the IsNil predicate on the "coupon_scope" field.
func CouponScopeIsNil() predicate.AppGoodScope {
	return predicate.AppGoodScope(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCouponScope)))
	})
}

// CouponScopeNotNil applies the NotNil predicate on the "coupon_scope" field.
func CouponScopeNotNil() predicate.AppGoodScope {
	return predicate.AppGoodScope(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCouponScope)))
	})
}

// CouponScopeEqualFold applies the EqualFold predicate on the "coupon_scope" field.
func CouponScopeEqualFold(v string) predicate.AppGoodScope {
	return predicate.AppGoodScope(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCouponScope), v))
	})
}

// CouponScopeContainsFold applies the ContainsFold predicate on the "coupon_scope" field.
func CouponScopeContainsFold(v string) predicate.AppGoodScope {
	return predicate.AppGoodScope(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCouponScope), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.AppGoodScope) predicate.AppGoodScope {
	return predicate.AppGoodScope(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.AppGoodScope) predicate.AppGoodScope {
	return predicate.AppGoodScope(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.AppGoodScope) predicate.AppGoodScope {
	return predicate.AppGoodScope(func(s *sql.Selector) {
		p(s.Not())
	})
}
