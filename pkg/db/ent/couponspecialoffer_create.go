// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/inspire-middleware/pkg/db/ent/couponspecialoffer"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// CouponSpecialOfferCreate is the builder for creating a CouponSpecialOffer entity.
type CouponSpecialOfferCreate struct {
	config
	mutation *CouponSpecialOfferMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (csoc *CouponSpecialOfferCreate) SetCreatedAt(u uint32) *CouponSpecialOfferCreate {
	csoc.mutation.SetCreatedAt(u)
	return csoc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (csoc *CouponSpecialOfferCreate) SetNillableCreatedAt(u *uint32) *CouponSpecialOfferCreate {
	if u != nil {
		csoc.SetCreatedAt(*u)
	}
	return csoc
}

// SetUpdatedAt sets the "updated_at" field.
func (csoc *CouponSpecialOfferCreate) SetUpdatedAt(u uint32) *CouponSpecialOfferCreate {
	csoc.mutation.SetUpdatedAt(u)
	return csoc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (csoc *CouponSpecialOfferCreate) SetNillableUpdatedAt(u *uint32) *CouponSpecialOfferCreate {
	if u != nil {
		csoc.SetUpdatedAt(*u)
	}
	return csoc
}

// SetDeletedAt sets the "deleted_at" field.
func (csoc *CouponSpecialOfferCreate) SetDeletedAt(u uint32) *CouponSpecialOfferCreate {
	csoc.mutation.SetDeletedAt(u)
	return csoc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (csoc *CouponSpecialOfferCreate) SetNillableDeletedAt(u *uint32) *CouponSpecialOfferCreate {
	if u != nil {
		csoc.SetDeletedAt(*u)
	}
	return csoc
}

// SetAppID sets the "app_id" field.
func (csoc *CouponSpecialOfferCreate) SetAppID(u uuid.UUID) *CouponSpecialOfferCreate {
	csoc.mutation.SetAppID(u)
	return csoc
}

// SetUserID sets the "user_id" field.
func (csoc *CouponSpecialOfferCreate) SetUserID(u uuid.UUID) *CouponSpecialOfferCreate {
	csoc.mutation.SetUserID(u)
	return csoc
}

// SetAmount sets the "amount" field.
func (csoc *CouponSpecialOfferCreate) SetAmount(d decimal.Decimal) *CouponSpecialOfferCreate {
	csoc.mutation.SetAmount(d)
	return csoc
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (csoc *CouponSpecialOfferCreate) SetNillableAmount(d *decimal.Decimal) *CouponSpecialOfferCreate {
	if d != nil {
		csoc.SetAmount(*d)
	}
	return csoc
}

// SetReleasedByUserID sets the "released_by_user_id" field.
func (csoc *CouponSpecialOfferCreate) SetReleasedByUserID(u uuid.UUID) *CouponSpecialOfferCreate {
	csoc.mutation.SetReleasedByUserID(u)
	return csoc
}

// SetStartAt sets the "start_at" field.
func (csoc *CouponSpecialOfferCreate) SetStartAt(u uint32) *CouponSpecialOfferCreate {
	csoc.mutation.SetStartAt(u)
	return csoc
}

// SetNillableStartAt sets the "start_at" field if the given value is not nil.
func (csoc *CouponSpecialOfferCreate) SetNillableStartAt(u *uint32) *CouponSpecialOfferCreate {
	if u != nil {
		csoc.SetStartAt(*u)
	}
	return csoc
}

// SetDurationDays sets the "duration_days" field.
func (csoc *CouponSpecialOfferCreate) SetDurationDays(u uint32) *CouponSpecialOfferCreate {
	csoc.mutation.SetDurationDays(u)
	return csoc
}

// SetNillableDurationDays sets the "duration_days" field if the given value is not nil.
func (csoc *CouponSpecialOfferCreate) SetNillableDurationDays(u *uint32) *CouponSpecialOfferCreate {
	if u != nil {
		csoc.SetDurationDays(*u)
	}
	return csoc
}

// SetMessage sets the "message" field.
func (csoc *CouponSpecialOfferCreate) SetMessage(s string) *CouponSpecialOfferCreate {
	csoc.mutation.SetMessage(s)
	return csoc
}

// SetNillableMessage sets the "message" field if the given value is not nil.
func (csoc *CouponSpecialOfferCreate) SetNillableMessage(s *string) *CouponSpecialOfferCreate {
	if s != nil {
		csoc.SetMessage(*s)
	}
	return csoc
}

// SetID sets the "id" field.
func (csoc *CouponSpecialOfferCreate) SetID(u uuid.UUID) *CouponSpecialOfferCreate {
	csoc.mutation.SetID(u)
	return csoc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (csoc *CouponSpecialOfferCreate) SetNillableID(u *uuid.UUID) *CouponSpecialOfferCreate {
	if u != nil {
		csoc.SetID(*u)
	}
	return csoc
}

// Mutation returns the CouponSpecialOfferMutation object of the builder.
func (csoc *CouponSpecialOfferCreate) Mutation() *CouponSpecialOfferMutation {
	return csoc.mutation
}

// Save creates the CouponSpecialOffer in the database.
func (csoc *CouponSpecialOfferCreate) Save(ctx context.Context) (*CouponSpecialOffer, error) {
	var (
		err  error
		node *CouponSpecialOffer
	)
	if err := csoc.defaults(); err != nil {
		return nil, err
	}
	if len(csoc.hooks) == 0 {
		if err = csoc.check(); err != nil {
			return nil, err
		}
		node, err = csoc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CouponSpecialOfferMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = csoc.check(); err != nil {
				return nil, err
			}
			csoc.mutation = mutation
			if node, err = csoc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(csoc.hooks) - 1; i >= 0; i-- {
			if csoc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = csoc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, csoc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*CouponSpecialOffer)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from CouponSpecialOfferMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (csoc *CouponSpecialOfferCreate) SaveX(ctx context.Context) *CouponSpecialOffer {
	v, err := csoc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (csoc *CouponSpecialOfferCreate) Exec(ctx context.Context) error {
	_, err := csoc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (csoc *CouponSpecialOfferCreate) ExecX(ctx context.Context) {
	if err := csoc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (csoc *CouponSpecialOfferCreate) defaults() error {
	if _, ok := csoc.mutation.CreatedAt(); !ok {
		if couponspecialoffer.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized couponspecialoffer.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := couponspecialoffer.DefaultCreatedAt()
		csoc.mutation.SetCreatedAt(v)
	}
	if _, ok := csoc.mutation.UpdatedAt(); !ok {
		if couponspecialoffer.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized couponspecialoffer.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := couponspecialoffer.DefaultUpdatedAt()
		csoc.mutation.SetUpdatedAt(v)
	}
	if _, ok := csoc.mutation.DeletedAt(); !ok {
		if couponspecialoffer.DefaultDeletedAt == nil {
			return fmt.Errorf("ent: uninitialized couponspecialoffer.DefaultDeletedAt (forgotten import ent/runtime?)")
		}
		v := couponspecialoffer.DefaultDeletedAt()
		csoc.mutation.SetDeletedAt(v)
	}
	if _, ok := csoc.mutation.Amount(); !ok {
		v := couponspecialoffer.DefaultAmount
		csoc.mutation.SetAmount(v)
	}
	if _, ok := csoc.mutation.StartAt(); !ok {
		v := couponspecialoffer.DefaultStartAt
		csoc.mutation.SetStartAt(v)
	}
	if _, ok := csoc.mutation.DurationDays(); !ok {
		v := couponspecialoffer.DefaultDurationDays
		csoc.mutation.SetDurationDays(v)
	}
	if _, ok := csoc.mutation.Message(); !ok {
		v := couponspecialoffer.DefaultMessage
		csoc.mutation.SetMessage(v)
	}
	if _, ok := csoc.mutation.ID(); !ok {
		if couponspecialoffer.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized couponspecialoffer.DefaultID (forgotten import ent/runtime?)")
		}
		v := couponspecialoffer.DefaultID()
		csoc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (csoc *CouponSpecialOfferCreate) check() error {
	if _, ok := csoc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "CouponSpecialOffer.created_at"`)}
	}
	if _, ok := csoc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "CouponSpecialOffer.updated_at"`)}
	}
	if _, ok := csoc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`ent: missing required field "CouponSpecialOffer.deleted_at"`)}
	}
	if _, ok := csoc.mutation.AppID(); !ok {
		return &ValidationError{Name: "app_id", err: errors.New(`ent: missing required field "CouponSpecialOffer.app_id"`)}
	}
	if _, ok := csoc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "CouponSpecialOffer.user_id"`)}
	}
	if _, ok := csoc.mutation.ReleasedByUserID(); !ok {
		return &ValidationError{Name: "released_by_user_id", err: errors.New(`ent: missing required field "CouponSpecialOffer.released_by_user_id"`)}
	}
	return nil
}

func (csoc *CouponSpecialOfferCreate) sqlSave(ctx context.Context) (*CouponSpecialOffer, error) {
	_node, _spec := csoc.createSpec()
	if err := sqlgraph.CreateNode(ctx, csoc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (csoc *CouponSpecialOfferCreate) createSpec() (*CouponSpecialOffer, *sqlgraph.CreateSpec) {
	var (
		_node = &CouponSpecialOffer{config: csoc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: couponspecialoffer.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: couponspecialoffer.FieldID,
			},
		}
	)
	_spec.OnConflict = csoc.conflict
	if id, ok := csoc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := csoc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: couponspecialoffer.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := csoc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: couponspecialoffer.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := csoc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: couponspecialoffer.FieldDeletedAt,
		})
		_node.DeletedAt = value
	}
	if value, ok := csoc.mutation.AppID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: couponspecialoffer.FieldAppID,
		})
		_node.AppID = value
	}
	if value, ok := csoc.mutation.UserID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: couponspecialoffer.FieldUserID,
		})
		_node.UserID = value
	}
	if value, ok := csoc.mutation.Amount(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: couponspecialoffer.FieldAmount,
		})
		_node.Amount = value
	}
	if value, ok := csoc.mutation.ReleasedByUserID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: couponspecialoffer.FieldReleasedByUserID,
		})
		_node.ReleasedByUserID = value
	}
	if value, ok := csoc.mutation.StartAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: couponspecialoffer.FieldStartAt,
		})
		_node.StartAt = value
	}
	if value, ok := csoc.mutation.DurationDays(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: couponspecialoffer.FieldDurationDays,
		})
		_node.DurationDays = value
	}
	if value, ok := csoc.mutation.Message(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: couponspecialoffer.FieldMessage,
		})
		_node.Message = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.CouponSpecialOffer.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CouponSpecialOfferUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (csoc *CouponSpecialOfferCreate) OnConflict(opts ...sql.ConflictOption) *CouponSpecialOfferUpsertOne {
	csoc.conflict = opts
	return &CouponSpecialOfferUpsertOne{
		create: csoc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.CouponSpecialOffer.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (csoc *CouponSpecialOfferCreate) OnConflictColumns(columns ...string) *CouponSpecialOfferUpsertOne {
	csoc.conflict = append(csoc.conflict, sql.ConflictColumns(columns...))
	return &CouponSpecialOfferUpsertOne{
		create: csoc,
	}
}

type (
	// CouponSpecialOfferUpsertOne is the builder for "upsert"-ing
	//  one CouponSpecialOffer node.
	CouponSpecialOfferUpsertOne struct {
		create *CouponSpecialOfferCreate
	}

	// CouponSpecialOfferUpsert is the "OnConflict" setter.
	CouponSpecialOfferUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *CouponSpecialOfferUpsert) SetCreatedAt(v uint32) *CouponSpecialOfferUpsert {
	u.Set(couponspecialoffer.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *CouponSpecialOfferUpsert) UpdateCreatedAt() *CouponSpecialOfferUpsert {
	u.SetExcluded(couponspecialoffer.FieldCreatedAt)
	return u
}

// AddCreatedAt adds v to the "created_at" field.
func (u *CouponSpecialOfferUpsert) AddCreatedAt(v uint32) *CouponSpecialOfferUpsert {
	u.Add(couponspecialoffer.FieldCreatedAt, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *CouponSpecialOfferUpsert) SetUpdatedAt(v uint32) *CouponSpecialOfferUpsert {
	u.Set(couponspecialoffer.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *CouponSpecialOfferUpsert) UpdateUpdatedAt() *CouponSpecialOfferUpsert {
	u.SetExcluded(couponspecialoffer.FieldUpdatedAt)
	return u
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *CouponSpecialOfferUpsert) AddUpdatedAt(v uint32) *CouponSpecialOfferUpsert {
	u.Add(couponspecialoffer.FieldUpdatedAt, v)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *CouponSpecialOfferUpsert) SetDeletedAt(v uint32) *CouponSpecialOfferUpsert {
	u.Set(couponspecialoffer.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *CouponSpecialOfferUpsert) UpdateDeletedAt() *CouponSpecialOfferUpsert {
	u.SetExcluded(couponspecialoffer.FieldDeletedAt)
	return u
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *CouponSpecialOfferUpsert) AddDeletedAt(v uint32) *CouponSpecialOfferUpsert {
	u.Add(couponspecialoffer.FieldDeletedAt, v)
	return u
}

// SetAppID sets the "app_id" field.
func (u *CouponSpecialOfferUpsert) SetAppID(v uuid.UUID) *CouponSpecialOfferUpsert {
	u.Set(couponspecialoffer.FieldAppID, v)
	return u
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *CouponSpecialOfferUpsert) UpdateAppID() *CouponSpecialOfferUpsert {
	u.SetExcluded(couponspecialoffer.FieldAppID)
	return u
}

// SetUserID sets the "user_id" field.
func (u *CouponSpecialOfferUpsert) SetUserID(v uuid.UUID) *CouponSpecialOfferUpsert {
	u.Set(couponspecialoffer.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *CouponSpecialOfferUpsert) UpdateUserID() *CouponSpecialOfferUpsert {
	u.SetExcluded(couponspecialoffer.FieldUserID)
	return u
}

// SetAmount sets the "amount" field.
func (u *CouponSpecialOfferUpsert) SetAmount(v decimal.Decimal) *CouponSpecialOfferUpsert {
	u.Set(couponspecialoffer.FieldAmount, v)
	return u
}

// UpdateAmount sets the "amount" field to the value that was provided on create.
func (u *CouponSpecialOfferUpsert) UpdateAmount() *CouponSpecialOfferUpsert {
	u.SetExcluded(couponspecialoffer.FieldAmount)
	return u
}

// ClearAmount clears the value of the "amount" field.
func (u *CouponSpecialOfferUpsert) ClearAmount() *CouponSpecialOfferUpsert {
	u.SetNull(couponspecialoffer.FieldAmount)
	return u
}

// SetReleasedByUserID sets the "released_by_user_id" field.
func (u *CouponSpecialOfferUpsert) SetReleasedByUserID(v uuid.UUID) *CouponSpecialOfferUpsert {
	u.Set(couponspecialoffer.FieldReleasedByUserID, v)
	return u
}

// UpdateReleasedByUserID sets the "released_by_user_id" field to the value that was provided on create.
func (u *CouponSpecialOfferUpsert) UpdateReleasedByUserID() *CouponSpecialOfferUpsert {
	u.SetExcluded(couponspecialoffer.FieldReleasedByUserID)
	return u
}

// SetStartAt sets the "start_at" field.
func (u *CouponSpecialOfferUpsert) SetStartAt(v uint32) *CouponSpecialOfferUpsert {
	u.Set(couponspecialoffer.FieldStartAt, v)
	return u
}

// UpdateStartAt sets the "start_at" field to the value that was provided on create.
func (u *CouponSpecialOfferUpsert) UpdateStartAt() *CouponSpecialOfferUpsert {
	u.SetExcluded(couponspecialoffer.FieldStartAt)
	return u
}

// AddStartAt adds v to the "start_at" field.
func (u *CouponSpecialOfferUpsert) AddStartAt(v uint32) *CouponSpecialOfferUpsert {
	u.Add(couponspecialoffer.FieldStartAt, v)
	return u
}

// ClearStartAt clears the value of the "start_at" field.
func (u *CouponSpecialOfferUpsert) ClearStartAt() *CouponSpecialOfferUpsert {
	u.SetNull(couponspecialoffer.FieldStartAt)
	return u
}

// SetDurationDays sets the "duration_days" field.
func (u *CouponSpecialOfferUpsert) SetDurationDays(v uint32) *CouponSpecialOfferUpsert {
	u.Set(couponspecialoffer.FieldDurationDays, v)
	return u
}

// UpdateDurationDays sets the "duration_days" field to the value that was provided on create.
func (u *CouponSpecialOfferUpsert) UpdateDurationDays() *CouponSpecialOfferUpsert {
	u.SetExcluded(couponspecialoffer.FieldDurationDays)
	return u
}

// AddDurationDays adds v to the "duration_days" field.
func (u *CouponSpecialOfferUpsert) AddDurationDays(v uint32) *CouponSpecialOfferUpsert {
	u.Add(couponspecialoffer.FieldDurationDays, v)
	return u
}

// ClearDurationDays clears the value of the "duration_days" field.
func (u *CouponSpecialOfferUpsert) ClearDurationDays() *CouponSpecialOfferUpsert {
	u.SetNull(couponspecialoffer.FieldDurationDays)
	return u
}

// SetMessage sets the "message" field.
func (u *CouponSpecialOfferUpsert) SetMessage(v string) *CouponSpecialOfferUpsert {
	u.Set(couponspecialoffer.FieldMessage, v)
	return u
}

// UpdateMessage sets the "message" field to the value that was provided on create.
func (u *CouponSpecialOfferUpsert) UpdateMessage() *CouponSpecialOfferUpsert {
	u.SetExcluded(couponspecialoffer.FieldMessage)
	return u
}

// ClearMessage clears the value of the "message" field.
func (u *CouponSpecialOfferUpsert) ClearMessage() *CouponSpecialOfferUpsert {
	u.SetNull(couponspecialoffer.FieldMessage)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.CouponSpecialOffer.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(couponspecialoffer.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *CouponSpecialOfferUpsertOne) UpdateNewValues() *CouponSpecialOfferUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(couponspecialoffer.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.CouponSpecialOffer.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *CouponSpecialOfferUpsertOne) Ignore() *CouponSpecialOfferUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CouponSpecialOfferUpsertOne) DoNothing() *CouponSpecialOfferUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CouponSpecialOfferCreate.OnConflict
// documentation for more info.
func (u *CouponSpecialOfferUpsertOne) Update(set func(*CouponSpecialOfferUpsert)) *CouponSpecialOfferUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CouponSpecialOfferUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *CouponSpecialOfferUpsertOne) SetCreatedAt(v uint32) *CouponSpecialOfferUpsertOne {
	return u.Update(func(s *CouponSpecialOfferUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *CouponSpecialOfferUpsertOne) AddCreatedAt(v uint32) *CouponSpecialOfferUpsertOne {
	return u.Update(func(s *CouponSpecialOfferUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *CouponSpecialOfferUpsertOne) UpdateCreatedAt() *CouponSpecialOfferUpsertOne {
	return u.Update(func(s *CouponSpecialOfferUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *CouponSpecialOfferUpsertOne) SetUpdatedAt(v uint32) *CouponSpecialOfferUpsertOne {
	return u.Update(func(s *CouponSpecialOfferUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *CouponSpecialOfferUpsertOne) AddUpdatedAt(v uint32) *CouponSpecialOfferUpsertOne {
	return u.Update(func(s *CouponSpecialOfferUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *CouponSpecialOfferUpsertOne) UpdateUpdatedAt() *CouponSpecialOfferUpsertOne {
	return u.Update(func(s *CouponSpecialOfferUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *CouponSpecialOfferUpsertOne) SetDeletedAt(v uint32) *CouponSpecialOfferUpsertOne {
	return u.Update(func(s *CouponSpecialOfferUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *CouponSpecialOfferUpsertOne) AddDeletedAt(v uint32) *CouponSpecialOfferUpsertOne {
	return u.Update(func(s *CouponSpecialOfferUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *CouponSpecialOfferUpsertOne) UpdateDeletedAt() *CouponSpecialOfferUpsertOne {
	return u.Update(func(s *CouponSpecialOfferUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetAppID sets the "app_id" field.
func (u *CouponSpecialOfferUpsertOne) SetAppID(v uuid.UUID) *CouponSpecialOfferUpsertOne {
	return u.Update(func(s *CouponSpecialOfferUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *CouponSpecialOfferUpsertOne) UpdateAppID() *CouponSpecialOfferUpsertOne {
	return u.Update(func(s *CouponSpecialOfferUpsert) {
		s.UpdateAppID()
	})
}

// SetUserID sets the "user_id" field.
func (u *CouponSpecialOfferUpsertOne) SetUserID(v uuid.UUID) *CouponSpecialOfferUpsertOne {
	return u.Update(func(s *CouponSpecialOfferUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *CouponSpecialOfferUpsertOne) UpdateUserID() *CouponSpecialOfferUpsertOne {
	return u.Update(func(s *CouponSpecialOfferUpsert) {
		s.UpdateUserID()
	})
}

// SetAmount sets the "amount" field.
func (u *CouponSpecialOfferUpsertOne) SetAmount(v decimal.Decimal) *CouponSpecialOfferUpsertOne {
	return u.Update(func(s *CouponSpecialOfferUpsert) {
		s.SetAmount(v)
	})
}

// UpdateAmount sets the "amount" field to the value that was provided on create.
func (u *CouponSpecialOfferUpsertOne) UpdateAmount() *CouponSpecialOfferUpsertOne {
	return u.Update(func(s *CouponSpecialOfferUpsert) {
		s.UpdateAmount()
	})
}

// ClearAmount clears the value of the "amount" field.
func (u *CouponSpecialOfferUpsertOne) ClearAmount() *CouponSpecialOfferUpsertOne {
	return u.Update(func(s *CouponSpecialOfferUpsert) {
		s.ClearAmount()
	})
}

// SetReleasedByUserID sets the "released_by_user_id" field.
func (u *CouponSpecialOfferUpsertOne) SetReleasedByUserID(v uuid.UUID) *CouponSpecialOfferUpsertOne {
	return u.Update(func(s *CouponSpecialOfferUpsert) {
		s.SetReleasedByUserID(v)
	})
}

// UpdateReleasedByUserID sets the "released_by_user_id" field to the value that was provided on create.
func (u *CouponSpecialOfferUpsertOne) UpdateReleasedByUserID() *CouponSpecialOfferUpsertOne {
	return u.Update(func(s *CouponSpecialOfferUpsert) {
		s.UpdateReleasedByUserID()
	})
}

// SetStartAt sets the "start_at" field.
func (u *CouponSpecialOfferUpsertOne) SetStartAt(v uint32) *CouponSpecialOfferUpsertOne {
	return u.Update(func(s *CouponSpecialOfferUpsert) {
		s.SetStartAt(v)
	})
}

// AddStartAt adds v to the "start_at" field.
func (u *CouponSpecialOfferUpsertOne) AddStartAt(v uint32) *CouponSpecialOfferUpsertOne {
	return u.Update(func(s *CouponSpecialOfferUpsert) {
		s.AddStartAt(v)
	})
}

// UpdateStartAt sets the "start_at" field to the value that was provided on create.
func (u *CouponSpecialOfferUpsertOne) UpdateStartAt() *CouponSpecialOfferUpsertOne {
	return u.Update(func(s *CouponSpecialOfferUpsert) {
		s.UpdateStartAt()
	})
}

// ClearStartAt clears the value of the "start_at" field.
func (u *CouponSpecialOfferUpsertOne) ClearStartAt() *CouponSpecialOfferUpsertOne {
	return u.Update(func(s *CouponSpecialOfferUpsert) {
		s.ClearStartAt()
	})
}

// SetDurationDays sets the "duration_days" field.
func (u *CouponSpecialOfferUpsertOne) SetDurationDays(v uint32) *CouponSpecialOfferUpsertOne {
	return u.Update(func(s *CouponSpecialOfferUpsert) {
		s.SetDurationDays(v)
	})
}

// AddDurationDays adds v to the "duration_days" field.
func (u *CouponSpecialOfferUpsertOne) AddDurationDays(v uint32) *CouponSpecialOfferUpsertOne {
	return u.Update(func(s *CouponSpecialOfferUpsert) {
		s.AddDurationDays(v)
	})
}

// UpdateDurationDays sets the "duration_days" field to the value that was provided on create.
func (u *CouponSpecialOfferUpsertOne) UpdateDurationDays() *CouponSpecialOfferUpsertOne {
	return u.Update(func(s *CouponSpecialOfferUpsert) {
		s.UpdateDurationDays()
	})
}

// ClearDurationDays clears the value of the "duration_days" field.
func (u *CouponSpecialOfferUpsertOne) ClearDurationDays() *CouponSpecialOfferUpsertOne {
	return u.Update(func(s *CouponSpecialOfferUpsert) {
		s.ClearDurationDays()
	})
}

// SetMessage sets the "message" field.
func (u *CouponSpecialOfferUpsertOne) SetMessage(v string) *CouponSpecialOfferUpsertOne {
	return u.Update(func(s *CouponSpecialOfferUpsert) {
		s.SetMessage(v)
	})
}

// UpdateMessage sets the "message" field to the value that was provided on create.
func (u *CouponSpecialOfferUpsertOne) UpdateMessage() *CouponSpecialOfferUpsertOne {
	return u.Update(func(s *CouponSpecialOfferUpsert) {
		s.UpdateMessage()
	})
}

// ClearMessage clears the value of the "message" field.
func (u *CouponSpecialOfferUpsertOne) ClearMessage() *CouponSpecialOfferUpsertOne {
	return u.Update(func(s *CouponSpecialOfferUpsert) {
		s.ClearMessage()
	})
}

// Exec executes the query.
func (u *CouponSpecialOfferUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for CouponSpecialOfferCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CouponSpecialOfferUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *CouponSpecialOfferUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: CouponSpecialOfferUpsertOne.ID is not supported by MySQL driver. Use CouponSpecialOfferUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *CouponSpecialOfferUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// CouponSpecialOfferCreateBulk is the builder for creating many CouponSpecialOffer entities in bulk.
type CouponSpecialOfferCreateBulk struct {
	config
	builders []*CouponSpecialOfferCreate
	conflict []sql.ConflictOption
}

// Save creates the CouponSpecialOffer entities in the database.
func (csocb *CouponSpecialOfferCreateBulk) Save(ctx context.Context) ([]*CouponSpecialOffer, error) {
	specs := make([]*sqlgraph.CreateSpec, len(csocb.builders))
	nodes := make([]*CouponSpecialOffer, len(csocb.builders))
	mutators := make([]Mutator, len(csocb.builders))
	for i := range csocb.builders {
		func(i int, root context.Context) {
			builder := csocb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CouponSpecialOfferMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, csocb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = csocb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, csocb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, csocb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (csocb *CouponSpecialOfferCreateBulk) SaveX(ctx context.Context) []*CouponSpecialOffer {
	v, err := csocb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (csocb *CouponSpecialOfferCreateBulk) Exec(ctx context.Context) error {
	_, err := csocb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (csocb *CouponSpecialOfferCreateBulk) ExecX(ctx context.Context) {
	if err := csocb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.CouponSpecialOffer.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CouponSpecialOfferUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (csocb *CouponSpecialOfferCreateBulk) OnConflict(opts ...sql.ConflictOption) *CouponSpecialOfferUpsertBulk {
	csocb.conflict = opts
	return &CouponSpecialOfferUpsertBulk{
		create: csocb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.CouponSpecialOffer.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (csocb *CouponSpecialOfferCreateBulk) OnConflictColumns(columns ...string) *CouponSpecialOfferUpsertBulk {
	csocb.conflict = append(csocb.conflict, sql.ConflictColumns(columns...))
	return &CouponSpecialOfferUpsertBulk{
		create: csocb,
	}
}

// CouponSpecialOfferUpsertBulk is the builder for "upsert"-ing
// a bulk of CouponSpecialOffer nodes.
type CouponSpecialOfferUpsertBulk struct {
	create *CouponSpecialOfferCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.CouponSpecialOffer.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(couponspecialoffer.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *CouponSpecialOfferUpsertBulk) UpdateNewValues() *CouponSpecialOfferUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(couponspecialoffer.FieldID)
				return
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.CouponSpecialOffer.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *CouponSpecialOfferUpsertBulk) Ignore() *CouponSpecialOfferUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CouponSpecialOfferUpsertBulk) DoNothing() *CouponSpecialOfferUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CouponSpecialOfferCreateBulk.OnConflict
// documentation for more info.
func (u *CouponSpecialOfferUpsertBulk) Update(set func(*CouponSpecialOfferUpsert)) *CouponSpecialOfferUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CouponSpecialOfferUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *CouponSpecialOfferUpsertBulk) SetCreatedAt(v uint32) *CouponSpecialOfferUpsertBulk {
	return u.Update(func(s *CouponSpecialOfferUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *CouponSpecialOfferUpsertBulk) AddCreatedAt(v uint32) *CouponSpecialOfferUpsertBulk {
	return u.Update(func(s *CouponSpecialOfferUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *CouponSpecialOfferUpsertBulk) UpdateCreatedAt() *CouponSpecialOfferUpsertBulk {
	return u.Update(func(s *CouponSpecialOfferUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *CouponSpecialOfferUpsertBulk) SetUpdatedAt(v uint32) *CouponSpecialOfferUpsertBulk {
	return u.Update(func(s *CouponSpecialOfferUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *CouponSpecialOfferUpsertBulk) AddUpdatedAt(v uint32) *CouponSpecialOfferUpsertBulk {
	return u.Update(func(s *CouponSpecialOfferUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *CouponSpecialOfferUpsertBulk) UpdateUpdatedAt() *CouponSpecialOfferUpsertBulk {
	return u.Update(func(s *CouponSpecialOfferUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *CouponSpecialOfferUpsertBulk) SetDeletedAt(v uint32) *CouponSpecialOfferUpsertBulk {
	return u.Update(func(s *CouponSpecialOfferUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *CouponSpecialOfferUpsertBulk) AddDeletedAt(v uint32) *CouponSpecialOfferUpsertBulk {
	return u.Update(func(s *CouponSpecialOfferUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *CouponSpecialOfferUpsertBulk) UpdateDeletedAt() *CouponSpecialOfferUpsertBulk {
	return u.Update(func(s *CouponSpecialOfferUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetAppID sets the "app_id" field.
func (u *CouponSpecialOfferUpsertBulk) SetAppID(v uuid.UUID) *CouponSpecialOfferUpsertBulk {
	return u.Update(func(s *CouponSpecialOfferUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *CouponSpecialOfferUpsertBulk) UpdateAppID() *CouponSpecialOfferUpsertBulk {
	return u.Update(func(s *CouponSpecialOfferUpsert) {
		s.UpdateAppID()
	})
}

// SetUserID sets the "user_id" field.
func (u *CouponSpecialOfferUpsertBulk) SetUserID(v uuid.UUID) *CouponSpecialOfferUpsertBulk {
	return u.Update(func(s *CouponSpecialOfferUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *CouponSpecialOfferUpsertBulk) UpdateUserID() *CouponSpecialOfferUpsertBulk {
	return u.Update(func(s *CouponSpecialOfferUpsert) {
		s.UpdateUserID()
	})
}

// SetAmount sets the "amount" field.
func (u *CouponSpecialOfferUpsertBulk) SetAmount(v decimal.Decimal) *CouponSpecialOfferUpsertBulk {
	return u.Update(func(s *CouponSpecialOfferUpsert) {
		s.SetAmount(v)
	})
}

// UpdateAmount sets the "amount" field to the value that was provided on create.
func (u *CouponSpecialOfferUpsertBulk) UpdateAmount() *CouponSpecialOfferUpsertBulk {
	return u.Update(func(s *CouponSpecialOfferUpsert) {
		s.UpdateAmount()
	})
}

// ClearAmount clears the value of the "amount" field.
func (u *CouponSpecialOfferUpsertBulk) ClearAmount() *CouponSpecialOfferUpsertBulk {
	return u.Update(func(s *CouponSpecialOfferUpsert) {
		s.ClearAmount()
	})
}

// SetReleasedByUserID sets the "released_by_user_id" field.
func (u *CouponSpecialOfferUpsertBulk) SetReleasedByUserID(v uuid.UUID) *CouponSpecialOfferUpsertBulk {
	return u.Update(func(s *CouponSpecialOfferUpsert) {
		s.SetReleasedByUserID(v)
	})
}

// UpdateReleasedByUserID sets the "released_by_user_id" field to the value that was provided on create.
func (u *CouponSpecialOfferUpsertBulk) UpdateReleasedByUserID() *CouponSpecialOfferUpsertBulk {
	return u.Update(func(s *CouponSpecialOfferUpsert) {
		s.UpdateReleasedByUserID()
	})
}

// SetStartAt sets the "start_at" field.
func (u *CouponSpecialOfferUpsertBulk) SetStartAt(v uint32) *CouponSpecialOfferUpsertBulk {
	return u.Update(func(s *CouponSpecialOfferUpsert) {
		s.SetStartAt(v)
	})
}

// AddStartAt adds v to the "start_at" field.
func (u *CouponSpecialOfferUpsertBulk) AddStartAt(v uint32) *CouponSpecialOfferUpsertBulk {
	return u.Update(func(s *CouponSpecialOfferUpsert) {
		s.AddStartAt(v)
	})
}

// UpdateStartAt sets the "start_at" field to the value that was provided on create.
func (u *CouponSpecialOfferUpsertBulk) UpdateStartAt() *CouponSpecialOfferUpsertBulk {
	return u.Update(func(s *CouponSpecialOfferUpsert) {
		s.UpdateStartAt()
	})
}

// ClearStartAt clears the value of the "start_at" field.
func (u *CouponSpecialOfferUpsertBulk) ClearStartAt() *CouponSpecialOfferUpsertBulk {
	return u.Update(func(s *CouponSpecialOfferUpsert) {
		s.ClearStartAt()
	})
}

// SetDurationDays sets the "duration_days" field.
func (u *CouponSpecialOfferUpsertBulk) SetDurationDays(v uint32) *CouponSpecialOfferUpsertBulk {
	return u.Update(func(s *CouponSpecialOfferUpsert) {
		s.SetDurationDays(v)
	})
}

// AddDurationDays adds v to the "duration_days" field.
func (u *CouponSpecialOfferUpsertBulk) AddDurationDays(v uint32) *CouponSpecialOfferUpsertBulk {
	return u.Update(func(s *CouponSpecialOfferUpsert) {
		s.AddDurationDays(v)
	})
}

// UpdateDurationDays sets the "duration_days" field to the value that was provided on create.
func (u *CouponSpecialOfferUpsertBulk) UpdateDurationDays() *CouponSpecialOfferUpsertBulk {
	return u.Update(func(s *CouponSpecialOfferUpsert) {
		s.UpdateDurationDays()
	})
}

// ClearDurationDays clears the value of the "duration_days" field.
func (u *CouponSpecialOfferUpsertBulk) ClearDurationDays() *CouponSpecialOfferUpsertBulk {
	return u.Update(func(s *CouponSpecialOfferUpsert) {
		s.ClearDurationDays()
	})
}

// SetMessage sets the "message" field.
func (u *CouponSpecialOfferUpsertBulk) SetMessage(v string) *CouponSpecialOfferUpsertBulk {
	return u.Update(func(s *CouponSpecialOfferUpsert) {
		s.SetMessage(v)
	})
}

// UpdateMessage sets the "message" field to the value that was provided on create.
func (u *CouponSpecialOfferUpsertBulk) UpdateMessage() *CouponSpecialOfferUpsertBulk {
	return u.Update(func(s *CouponSpecialOfferUpsert) {
		s.UpdateMessage()
	})
}

// ClearMessage clears the value of the "message" field.
func (u *CouponSpecialOfferUpsertBulk) ClearMessage() *CouponSpecialOfferUpsertBulk {
	return u.Update(func(s *CouponSpecialOfferUpsert) {
		s.ClearMessage()
	})
}

// Exec executes the query.
func (u *CouponSpecialOfferUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the CouponSpecialOfferCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for CouponSpecialOfferCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CouponSpecialOfferUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
