// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/inspire-middleware/pkg/db/ent/commission"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// CommissionCreate is the builder for creating a Commission entity.
type CommissionCreate struct {
	config
	mutation *CommissionMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (cc *CommissionCreate) SetCreatedAt(u uint32) *CommissionCreate {
	cc.mutation.SetCreatedAt(u)
	return cc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cc *CommissionCreate) SetNillableCreatedAt(u *uint32) *CommissionCreate {
	if u != nil {
		cc.SetCreatedAt(*u)
	}
	return cc
}

// SetUpdatedAt sets the "updated_at" field.
func (cc *CommissionCreate) SetUpdatedAt(u uint32) *CommissionCreate {
	cc.mutation.SetUpdatedAt(u)
	return cc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (cc *CommissionCreate) SetNillableUpdatedAt(u *uint32) *CommissionCreate {
	if u != nil {
		cc.SetUpdatedAt(*u)
	}
	return cc
}

// SetDeletedAt sets the "deleted_at" field.
func (cc *CommissionCreate) SetDeletedAt(u uint32) *CommissionCreate {
	cc.mutation.SetDeletedAt(u)
	return cc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (cc *CommissionCreate) SetNillableDeletedAt(u *uint32) *CommissionCreate {
	if u != nil {
		cc.SetDeletedAt(*u)
	}
	return cc
}

// SetAppID sets the "app_id" field.
func (cc *CommissionCreate) SetAppID(u uuid.UUID) *CommissionCreate {
	cc.mutation.SetAppID(u)
	return cc
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (cc *CommissionCreate) SetNillableAppID(u *uuid.UUID) *CommissionCreate {
	if u != nil {
		cc.SetAppID(*u)
	}
	return cc
}

// SetUserID sets the "user_id" field.
func (cc *CommissionCreate) SetUserID(u uuid.UUID) *CommissionCreate {
	cc.mutation.SetUserID(u)
	return cc
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (cc *CommissionCreate) SetNillableUserID(u *uuid.UUID) *CommissionCreate {
	if u != nil {
		cc.SetUserID(*u)
	}
	return cc
}

// SetGoodID sets the "good_id" field.
func (cc *CommissionCreate) SetGoodID(u uuid.UUID) *CommissionCreate {
	cc.mutation.SetGoodID(u)
	return cc
}

// SetNillableGoodID sets the "good_id" field if the given value is not nil.
func (cc *CommissionCreate) SetNillableGoodID(u *uuid.UUID) *CommissionCreate {
	if u != nil {
		cc.SetGoodID(*u)
	}
	return cc
}

// SetPercent sets the "percent" field.
func (cc *CommissionCreate) SetPercent(d decimal.Decimal) *CommissionCreate {
	cc.mutation.SetPercent(d)
	return cc
}

// SetNillablePercent sets the "percent" field if the given value is not nil.
func (cc *CommissionCreate) SetNillablePercent(d *decimal.Decimal) *CommissionCreate {
	if d != nil {
		cc.SetPercent(*d)
	}
	return cc
}

// SetStartAt sets the "start_at" field.
func (cc *CommissionCreate) SetStartAt(u uint32) *CommissionCreate {
	cc.mutation.SetStartAt(u)
	return cc
}

// SetNillableStartAt sets the "start_at" field if the given value is not nil.
func (cc *CommissionCreate) SetNillableStartAt(u *uint32) *CommissionCreate {
	if u != nil {
		cc.SetStartAt(*u)
	}
	return cc
}

// SetEndAt sets the "end_at" field.
func (cc *CommissionCreate) SetEndAt(u uint32) *CommissionCreate {
	cc.mutation.SetEndAt(u)
	return cc
}

// SetNillableEndAt sets the "end_at" field if the given value is not nil.
func (cc *CommissionCreate) SetNillableEndAt(u *uint32) *CommissionCreate {
	if u != nil {
		cc.SetEndAt(*u)
	}
	return cc
}

// SetSettleType sets the "settle_type" field.
func (cc *CommissionCreate) SetSettleType(s string) *CommissionCreate {
	cc.mutation.SetSettleType(s)
	return cc
}

// SetNillableSettleType sets the "settle_type" field if the given value is not nil.
func (cc *CommissionCreate) SetNillableSettleType(s *string) *CommissionCreate {
	if s != nil {
		cc.SetSettleType(*s)
	}
	return cc
}

// SetSettleMode sets the "settle_mode" field.
func (cc *CommissionCreate) SetSettleMode(s string) *CommissionCreate {
	cc.mutation.SetSettleMode(s)
	return cc
}

// SetNillableSettleMode sets the "settle_mode" field if the given value is not nil.
func (cc *CommissionCreate) SetNillableSettleMode(s *string) *CommissionCreate {
	if s != nil {
		cc.SetSettleMode(*s)
	}
	return cc
}

// SetSettleInterval sets the "settle_interval" field.
func (cc *CommissionCreate) SetSettleInterval(s string) *CommissionCreate {
	cc.mutation.SetSettleInterval(s)
	return cc
}

// SetNillableSettleInterval sets the "settle_interval" field if the given value is not nil.
func (cc *CommissionCreate) SetNillableSettleInterval(s *string) *CommissionCreate {
	if s != nil {
		cc.SetSettleInterval(*s)
	}
	return cc
}

// SetID sets the "id" field.
func (cc *CommissionCreate) SetID(u uuid.UUID) *CommissionCreate {
	cc.mutation.SetID(u)
	return cc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (cc *CommissionCreate) SetNillableID(u *uuid.UUID) *CommissionCreate {
	if u != nil {
		cc.SetID(*u)
	}
	return cc
}

// Mutation returns the CommissionMutation object of the builder.
func (cc *CommissionCreate) Mutation() *CommissionMutation {
	return cc.mutation
}

// Save creates the Commission in the database.
func (cc *CommissionCreate) Save(ctx context.Context) (*Commission, error) {
	var (
		err  error
		node *Commission
	)
	if err := cc.defaults(); err != nil {
		return nil, err
	}
	if len(cc.hooks) == 0 {
		if err = cc.check(); err != nil {
			return nil, err
		}
		node, err = cc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CommissionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cc.check(); err != nil {
				return nil, err
			}
			cc.mutation = mutation
			if node, err = cc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(cc.hooks) - 1; i >= 0; i-- {
			if cc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, cc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Commission)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from CommissionMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (cc *CommissionCreate) SaveX(ctx context.Context) *Commission {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cc *CommissionCreate) Exec(ctx context.Context) error {
	_, err := cc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cc *CommissionCreate) ExecX(ctx context.Context) {
	if err := cc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cc *CommissionCreate) defaults() error {
	if _, ok := cc.mutation.CreatedAt(); !ok {
		if commission.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized commission.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := commission.DefaultCreatedAt()
		cc.mutation.SetCreatedAt(v)
	}
	if _, ok := cc.mutation.UpdatedAt(); !ok {
		if commission.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized commission.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := commission.DefaultUpdatedAt()
		cc.mutation.SetUpdatedAt(v)
	}
	if _, ok := cc.mutation.DeletedAt(); !ok {
		if commission.DefaultDeletedAt == nil {
			return fmt.Errorf("ent: uninitialized commission.DefaultDeletedAt (forgotten import ent/runtime?)")
		}
		v := commission.DefaultDeletedAt()
		cc.mutation.SetDeletedAt(v)
	}
	if _, ok := cc.mutation.AppID(); !ok {
		if commission.DefaultAppID == nil {
			return fmt.Errorf("ent: uninitialized commission.DefaultAppID (forgotten import ent/runtime?)")
		}
		v := commission.DefaultAppID()
		cc.mutation.SetAppID(v)
	}
	if _, ok := cc.mutation.UserID(); !ok {
		if commission.DefaultUserID == nil {
			return fmt.Errorf("ent: uninitialized commission.DefaultUserID (forgotten import ent/runtime?)")
		}
		v := commission.DefaultUserID()
		cc.mutation.SetUserID(v)
	}
	if _, ok := cc.mutation.GoodID(); !ok {
		if commission.DefaultGoodID == nil {
			return fmt.Errorf("ent: uninitialized commission.DefaultGoodID (forgotten import ent/runtime?)")
		}
		v := commission.DefaultGoodID()
		cc.mutation.SetGoodID(v)
	}
	if _, ok := cc.mutation.Percent(); !ok {
		v := commission.DefaultPercent
		cc.mutation.SetPercent(v)
	}
	if _, ok := cc.mutation.StartAt(); !ok {
		v := commission.DefaultStartAt
		cc.mutation.SetStartAt(v)
	}
	if _, ok := cc.mutation.EndAt(); !ok {
		v := commission.DefaultEndAt
		cc.mutation.SetEndAt(v)
	}
	if _, ok := cc.mutation.SettleType(); !ok {
		v := commission.DefaultSettleType
		cc.mutation.SetSettleType(v)
	}
	if _, ok := cc.mutation.SettleMode(); !ok {
		v := commission.DefaultSettleMode
		cc.mutation.SetSettleMode(v)
	}
	if _, ok := cc.mutation.SettleInterval(); !ok {
		v := commission.DefaultSettleInterval
		cc.mutation.SetSettleInterval(v)
	}
	if _, ok := cc.mutation.ID(); !ok {
		if commission.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized commission.DefaultID (forgotten import ent/runtime?)")
		}
		v := commission.DefaultID()
		cc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (cc *CommissionCreate) check() error {
	if _, ok := cc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Commission.created_at"`)}
	}
	if _, ok := cc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Commission.updated_at"`)}
	}
	if _, ok := cc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`ent: missing required field "Commission.deleted_at"`)}
	}
	return nil
}

func (cc *CommissionCreate) sqlSave(ctx context.Context) (*Commission, error) {
	_node, _spec := cc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (cc *CommissionCreate) createSpec() (*Commission, *sqlgraph.CreateSpec) {
	var (
		_node = &Commission{config: cc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: commission.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: commission.FieldID,
			},
		}
	)
	_spec.OnConflict = cc.conflict
	if id, ok := cc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := cc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: commission.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := cc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: commission.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := cc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: commission.FieldDeletedAt,
		})
		_node.DeletedAt = value
	}
	if value, ok := cc.mutation.AppID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: commission.FieldAppID,
		})
		_node.AppID = value
	}
	if value, ok := cc.mutation.UserID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: commission.FieldUserID,
		})
		_node.UserID = value
	}
	if value, ok := cc.mutation.GoodID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: commission.FieldGoodID,
		})
		_node.GoodID = value
	}
	if value, ok := cc.mutation.Percent(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: commission.FieldPercent,
		})
		_node.Percent = value
	}
	if value, ok := cc.mutation.StartAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: commission.FieldStartAt,
		})
		_node.StartAt = value
	}
	if value, ok := cc.mutation.EndAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: commission.FieldEndAt,
		})
		_node.EndAt = value
	}
	if value, ok := cc.mutation.SettleType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: commission.FieldSettleType,
		})
		_node.SettleType = value
	}
	if value, ok := cc.mutation.SettleMode(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: commission.FieldSettleMode,
		})
		_node.SettleMode = value
	}
	if value, ok := cc.mutation.SettleInterval(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: commission.FieldSettleInterval,
		})
		_node.SettleInterval = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Commission.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CommissionUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (cc *CommissionCreate) OnConflict(opts ...sql.ConflictOption) *CommissionUpsertOne {
	cc.conflict = opts
	return &CommissionUpsertOne{
		create: cc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Commission.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (cc *CommissionCreate) OnConflictColumns(columns ...string) *CommissionUpsertOne {
	cc.conflict = append(cc.conflict, sql.ConflictColumns(columns...))
	return &CommissionUpsertOne{
		create: cc,
	}
}

type (
	// CommissionUpsertOne is the builder for "upsert"-ing
	//  one Commission node.
	CommissionUpsertOne struct {
		create *CommissionCreate
	}

	// CommissionUpsert is the "OnConflict" setter.
	CommissionUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *CommissionUpsert) SetCreatedAt(v uint32) *CommissionUpsert {
	u.Set(commission.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *CommissionUpsert) UpdateCreatedAt() *CommissionUpsert {
	u.SetExcluded(commission.FieldCreatedAt)
	return u
}

// AddCreatedAt adds v to the "created_at" field.
func (u *CommissionUpsert) AddCreatedAt(v uint32) *CommissionUpsert {
	u.Add(commission.FieldCreatedAt, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *CommissionUpsert) SetUpdatedAt(v uint32) *CommissionUpsert {
	u.Set(commission.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *CommissionUpsert) UpdateUpdatedAt() *CommissionUpsert {
	u.SetExcluded(commission.FieldUpdatedAt)
	return u
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *CommissionUpsert) AddUpdatedAt(v uint32) *CommissionUpsert {
	u.Add(commission.FieldUpdatedAt, v)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *CommissionUpsert) SetDeletedAt(v uint32) *CommissionUpsert {
	u.Set(commission.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *CommissionUpsert) UpdateDeletedAt() *CommissionUpsert {
	u.SetExcluded(commission.FieldDeletedAt)
	return u
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *CommissionUpsert) AddDeletedAt(v uint32) *CommissionUpsert {
	u.Add(commission.FieldDeletedAt, v)
	return u
}

// SetAppID sets the "app_id" field.
func (u *CommissionUpsert) SetAppID(v uuid.UUID) *CommissionUpsert {
	u.Set(commission.FieldAppID, v)
	return u
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *CommissionUpsert) UpdateAppID() *CommissionUpsert {
	u.SetExcluded(commission.FieldAppID)
	return u
}

// ClearAppID clears the value of the "app_id" field.
func (u *CommissionUpsert) ClearAppID() *CommissionUpsert {
	u.SetNull(commission.FieldAppID)
	return u
}

// SetUserID sets the "user_id" field.
func (u *CommissionUpsert) SetUserID(v uuid.UUID) *CommissionUpsert {
	u.Set(commission.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *CommissionUpsert) UpdateUserID() *CommissionUpsert {
	u.SetExcluded(commission.FieldUserID)
	return u
}

// ClearUserID clears the value of the "user_id" field.
func (u *CommissionUpsert) ClearUserID() *CommissionUpsert {
	u.SetNull(commission.FieldUserID)
	return u
}

// SetGoodID sets the "good_id" field.
func (u *CommissionUpsert) SetGoodID(v uuid.UUID) *CommissionUpsert {
	u.Set(commission.FieldGoodID, v)
	return u
}

// UpdateGoodID sets the "good_id" field to the value that was provided on create.
func (u *CommissionUpsert) UpdateGoodID() *CommissionUpsert {
	u.SetExcluded(commission.FieldGoodID)
	return u
}

// ClearGoodID clears the value of the "good_id" field.
func (u *CommissionUpsert) ClearGoodID() *CommissionUpsert {
	u.SetNull(commission.FieldGoodID)
	return u
}

// SetPercent sets the "percent" field.
func (u *CommissionUpsert) SetPercent(v decimal.Decimal) *CommissionUpsert {
	u.Set(commission.FieldPercent, v)
	return u
}

// UpdatePercent sets the "percent" field to the value that was provided on create.
func (u *CommissionUpsert) UpdatePercent() *CommissionUpsert {
	u.SetExcluded(commission.FieldPercent)
	return u
}

// ClearPercent clears the value of the "percent" field.
func (u *CommissionUpsert) ClearPercent() *CommissionUpsert {
	u.SetNull(commission.FieldPercent)
	return u
}

// SetStartAt sets the "start_at" field.
func (u *CommissionUpsert) SetStartAt(v uint32) *CommissionUpsert {
	u.Set(commission.FieldStartAt, v)
	return u
}

// UpdateStartAt sets the "start_at" field to the value that was provided on create.
func (u *CommissionUpsert) UpdateStartAt() *CommissionUpsert {
	u.SetExcluded(commission.FieldStartAt)
	return u
}

// AddStartAt adds v to the "start_at" field.
func (u *CommissionUpsert) AddStartAt(v uint32) *CommissionUpsert {
	u.Add(commission.FieldStartAt, v)
	return u
}

// ClearStartAt clears the value of the "start_at" field.
func (u *CommissionUpsert) ClearStartAt() *CommissionUpsert {
	u.SetNull(commission.FieldStartAt)
	return u
}

// SetEndAt sets the "end_at" field.
func (u *CommissionUpsert) SetEndAt(v uint32) *CommissionUpsert {
	u.Set(commission.FieldEndAt, v)
	return u
}

// UpdateEndAt sets the "end_at" field to the value that was provided on create.
func (u *CommissionUpsert) UpdateEndAt() *CommissionUpsert {
	u.SetExcluded(commission.FieldEndAt)
	return u
}

// AddEndAt adds v to the "end_at" field.
func (u *CommissionUpsert) AddEndAt(v uint32) *CommissionUpsert {
	u.Add(commission.FieldEndAt, v)
	return u
}

// ClearEndAt clears the value of the "end_at" field.
func (u *CommissionUpsert) ClearEndAt() *CommissionUpsert {
	u.SetNull(commission.FieldEndAt)
	return u
}

// SetSettleType sets the "settle_type" field.
func (u *CommissionUpsert) SetSettleType(v string) *CommissionUpsert {
	u.Set(commission.FieldSettleType, v)
	return u
}

// UpdateSettleType sets the "settle_type" field to the value that was provided on create.
func (u *CommissionUpsert) UpdateSettleType() *CommissionUpsert {
	u.SetExcluded(commission.FieldSettleType)
	return u
}

// ClearSettleType clears the value of the "settle_type" field.
func (u *CommissionUpsert) ClearSettleType() *CommissionUpsert {
	u.SetNull(commission.FieldSettleType)
	return u
}

// SetSettleMode sets the "settle_mode" field.
func (u *CommissionUpsert) SetSettleMode(v string) *CommissionUpsert {
	u.Set(commission.FieldSettleMode, v)
	return u
}

// UpdateSettleMode sets the "settle_mode" field to the value that was provided on create.
func (u *CommissionUpsert) UpdateSettleMode() *CommissionUpsert {
	u.SetExcluded(commission.FieldSettleMode)
	return u
}

// ClearSettleMode clears the value of the "settle_mode" field.
func (u *CommissionUpsert) ClearSettleMode() *CommissionUpsert {
	u.SetNull(commission.FieldSettleMode)
	return u
}

// SetSettleInterval sets the "settle_interval" field.
func (u *CommissionUpsert) SetSettleInterval(v string) *CommissionUpsert {
	u.Set(commission.FieldSettleInterval, v)
	return u
}

// UpdateSettleInterval sets the "settle_interval" field to the value that was provided on create.
func (u *CommissionUpsert) UpdateSettleInterval() *CommissionUpsert {
	u.SetExcluded(commission.FieldSettleInterval)
	return u
}

// ClearSettleInterval clears the value of the "settle_interval" field.
func (u *CommissionUpsert) ClearSettleInterval() *CommissionUpsert {
	u.SetNull(commission.FieldSettleInterval)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Commission.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(commission.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *CommissionUpsertOne) UpdateNewValues() *CommissionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(commission.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.Commission.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *CommissionUpsertOne) Ignore() *CommissionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CommissionUpsertOne) DoNothing() *CommissionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CommissionCreate.OnConflict
// documentation for more info.
func (u *CommissionUpsertOne) Update(set func(*CommissionUpsert)) *CommissionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CommissionUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *CommissionUpsertOne) SetCreatedAt(v uint32) *CommissionUpsertOne {
	return u.Update(func(s *CommissionUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *CommissionUpsertOne) AddCreatedAt(v uint32) *CommissionUpsertOne {
	return u.Update(func(s *CommissionUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *CommissionUpsertOne) UpdateCreatedAt() *CommissionUpsertOne {
	return u.Update(func(s *CommissionUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *CommissionUpsertOne) SetUpdatedAt(v uint32) *CommissionUpsertOne {
	return u.Update(func(s *CommissionUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *CommissionUpsertOne) AddUpdatedAt(v uint32) *CommissionUpsertOne {
	return u.Update(func(s *CommissionUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *CommissionUpsertOne) UpdateUpdatedAt() *CommissionUpsertOne {
	return u.Update(func(s *CommissionUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *CommissionUpsertOne) SetDeletedAt(v uint32) *CommissionUpsertOne {
	return u.Update(func(s *CommissionUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *CommissionUpsertOne) AddDeletedAt(v uint32) *CommissionUpsertOne {
	return u.Update(func(s *CommissionUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *CommissionUpsertOne) UpdateDeletedAt() *CommissionUpsertOne {
	return u.Update(func(s *CommissionUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetAppID sets the "app_id" field.
func (u *CommissionUpsertOne) SetAppID(v uuid.UUID) *CommissionUpsertOne {
	return u.Update(func(s *CommissionUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *CommissionUpsertOne) UpdateAppID() *CommissionUpsertOne {
	return u.Update(func(s *CommissionUpsert) {
		s.UpdateAppID()
	})
}

// ClearAppID clears the value of the "app_id" field.
func (u *CommissionUpsertOne) ClearAppID() *CommissionUpsertOne {
	return u.Update(func(s *CommissionUpsert) {
		s.ClearAppID()
	})
}

// SetUserID sets the "user_id" field.
func (u *CommissionUpsertOne) SetUserID(v uuid.UUID) *CommissionUpsertOne {
	return u.Update(func(s *CommissionUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *CommissionUpsertOne) UpdateUserID() *CommissionUpsertOne {
	return u.Update(func(s *CommissionUpsert) {
		s.UpdateUserID()
	})
}

// ClearUserID clears the value of the "user_id" field.
func (u *CommissionUpsertOne) ClearUserID() *CommissionUpsertOne {
	return u.Update(func(s *CommissionUpsert) {
		s.ClearUserID()
	})
}

// SetGoodID sets the "good_id" field.
func (u *CommissionUpsertOne) SetGoodID(v uuid.UUID) *CommissionUpsertOne {
	return u.Update(func(s *CommissionUpsert) {
		s.SetGoodID(v)
	})
}

// UpdateGoodID sets the "good_id" field to the value that was provided on create.
func (u *CommissionUpsertOne) UpdateGoodID() *CommissionUpsertOne {
	return u.Update(func(s *CommissionUpsert) {
		s.UpdateGoodID()
	})
}

// ClearGoodID clears the value of the "good_id" field.
func (u *CommissionUpsertOne) ClearGoodID() *CommissionUpsertOne {
	return u.Update(func(s *CommissionUpsert) {
		s.ClearGoodID()
	})
}

// SetPercent sets the "percent" field.
func (u *CommissionUpsertOne) SetPercent(v decimal.Decimal) *CommissionUpsertOne {
	return u.Update(func(s *CommissionUpsert) {
		s.SetPercent(v)
	})
}

// UpdatePercent sets the "percent" field to the value that was provided on create.
func (u *CommissionUpsertOne) UpdatePercent() *CommissionUpsertOne {
	return u.Update(func(s *CommissionUpsert) {
		s.UpdatePercent()
	})
}

// ClearPercent clears the value of the "percent" field.
func (u *CommissionUpsertOne) ClearPercent() *CommissionUpsertOne {
	return u.Update(func(s *CommissionUpsert) {
		s.ClearPercent()
	})
}

// SetStartAt sets the "start_at" field.
func (u *CommissionUpsertOne) SetStartAt(v uint32) *CommissionUpsertOne {
	return u.Update(func(s *CommissionUpsert) {
		s.SetStartAt(v)
	})
}

// AddStartAt adds v to the "start_at" field.
func (u *CommissionUpsertOne) AddStartAt(v uint32) *CommissionUpsertOne {
	return u.Update(func(s *CommissionUpsert) {
		s.AddStartAt(v)
	})
}

// UpdateStartAt sets the "start_at" field to the value that was provided on create.
func (u *CommissionUpsertOne) UpdateStartAt() *CommissionUpsertOne {
	return u.Update(func(s *CommissionUpsert) {
		s.UpdateStartAt()
	})
}

// ClearStartAt clears the value of the "start_at" field.
func (u *CommissionUpsertOne) ClearStartAt() *CommissionUpsertOne {
	return u.Update(func(s *CommissionUpsert) {
		s.ClearStartAt()
	})
}

// SetEndAt sets the "end_at" field.
func (u *CommissionUpsertOne) SetEndAt(v uint32) *CommissionUpsertOne {
	return u.Update(func(s *CommissionUpsert) {
		s.SetEndAt(v)
	})
}

// AddEndAt adds v to the "end_at" field.
func (u *CommissionUpsertOne) AddEndAt(v uint32) *CommissionUpsertOne {
	return u.Update(func(s *CommissionUpsert) {
		s.AddEndAt(v)
	})
}

// UpdateEndAt sets the "end_at" field to the value that was provided on create.
func (u *CommissionUpsertOne) UpdateEndAt() *CommissionUpsertOne {
	return u.Update(func(s *CommissionUpsert) {
		s.UpdateEndAt()
	})
}

// ClearEndAt clears the value of the "end_at" field.
func (u *CommissionUpsertOne) ClearEndAt() *CommissionUpsertOne {
	return u.Update(func(s *CommissionUpsert) {
		s.ClearEndAt()
	})
}

// SetSettleType sets the "settle_type" field.
func (u *CommissionUpsertOne) SetSettleType(v string) *CommissionUpsertOne {
	return u.Update(func(s *CommissionUpsert) {
		s.SetSettleType(v)
	})
}

// UpdateSettleType sets the "settle_type" field to the value that was provided on create.
func (u *CommissionUpsertOne) UpdateSettleType() *CommissionUpsertOne {
	return u.Update(func(s *CommissionUpsert) {
		s.UpdateSettleType()
	})
}

// ClearSettleType clears the value of the "settle_type" field.
func (u *CommissionUpsertOne) ClearSettleType() *CommissionUpsertOne {
	return u.Update(func(s *CommissionUpsert) {
		s.ClearSettleType()
	})
}

// SetSettleMode sets the "settle_mode" field.
func (u *CommissionUpsertOne) SetSettleMode(v string) *CommissionUpsertOne {
	return u.Update(func(s *CommissionUpsert) {
		s.SetSettleMode(v)
	})
}

// UpdateSettleMode sets the "settle_mode" field to the value that was provided on create.
func (u *CommissionUpsertOne) UpdateSettleMode() *CommissionUpsertOne {
	return u.Update(func(s *CommissionUpsert) {
		s.UpdateSettleMode()
	})
}

// ClearSettleMode clears the value of the "settle_mode" field.
func (u *CommissionUpsertOne) ClearSettleMode() *CommissionUpsertOne {
	return u.Update(func(s *CommissionUpsert) {
		s.ClearSettleMode()
	})
}

// SetSettleInterval sets the "settle_interval" field.
func (u *CommissionUpsertOne) SetSettleInterval(v string) *CommissionUpsertOne {
	return u.Update(func(s *CommissionUpsert) {
		s.SetSettleInterval(v)
	})
}

// UpdateSettleInterval sets the "settle_interval" field to the value that was provided on create.
func (u *CommissionUpsertOne) UpdateSettleInterval() *CommissionUpsertOne {
	return u.Update(func(s *CommissionUpsert) {
		s.UpdateSettleInterval()
	})
}

// ClearSettleInterval clears the value of the "settle_interval" field.
func (u *CommissionUpsertOne) ClearSettleInterval() *CommissionUpsertOne {
	return u.Update(func(s *CommissionUpsert) {
		s.ClearSettleInterval()
	})
}

// Exec executes the query.
func (u *CommissionUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for CommissionCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CommissionUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *CommissionUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: CommissionUpsertOne.ID is not supported by MySQL driver. Use CommissionUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *CommissionUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// CommissionCreateBulk is the builder for creating many Commission entities in bulk.
type CommissionCreateBulk struct {
	config
	builders []*CommissionCreate
	conflict []sql.ConflictOption
}

// Save creates the Commission entities in the database.
func (ccb *CommissionCreateBulk) Save(ctx context.Context) ([]*Commission, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ccb.builders))
	nodes := make([]*Commission, len(ccb.builders))
	mutators := make([]Mutator, len(ccb.builders))
	for i := range ccb.builders {
		func(i int, root context.Context) {
			builder := ccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CommissionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ccb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ccb *CommissionCreateBulk) SaveX(ctx context.Context) []*Commission {
	v, err := ccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccb *CommissionCreateBulk) Exec(ctx context.Context) error {
	_, err := ccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccb *CommissionCreateBulk) ExecX(ctx context.Context) {
	if err := ccb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Commission.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CommissionUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (ccb *CommissionCreateBulk) OnConflict(opts ...sql.ConflictOption) *CommissionUpsertBulk {
	ccb.conflict = opts
	return &CommissionUpsertBulk{
		create: ccb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Commission.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (ccb *CommissionCreateBulk) OnConflictColumns(columns ...string) *CommissionUpsertBulk {
	ccb.conflict = append(ccb.conflict, sql.ConflictColumns(columns...))
	return &CommissionUpsertBulk{
		create: ccb,
	}
}

// CommissionUpsertBulk is the builder for "upsert"-ing
// a bulk of Commission nodes.
type CommissionUpsertBulk struct {
	create *CommissionCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Commission.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(commission.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *CommissionUpsertBulk) UpdateNewValues() *CommissionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(commission.FieldID)
				return
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Commission.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *CommissionUpsertBulk) Ignore() *CommissionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CommissionUpsertBulk) DoNothing() *CommissionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CommissionCreateBulk.OnConflict
// documentation for more info.
func (u *CommissionUpsertBulk) Update(set func(*CommissionUpsert)) *CommissionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CommissionUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *CommissionUpsertBulk) SetCreatedAt(v uint32) *CommissionUpsertBulk {
	return u.Update(func(s *CommissionUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *CommissionUpsertBulk) AddCreatedAt(v uint32) *CommissionUpsertBulk {
	return u.Update(func(s *CommissionUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *CommissionUpsertBulk) UpdateCreatedAt() *CommissionUpsertBulk {
	return u.Update(func(s *CommissionUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *CommissionUpsertBulk) SetUpdatedAt(v uint32) *CommissionUpsertBulk {
	return u.Update(func(s *CommissionUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *CommissionUpsertBulk) AddUpdatedAt(v uint32) *CommissionUpsertBulk {
	return u.Update(func(s *CommissionUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *CommissionUpsertBulk) UpdateUpdatedAt() *CommissionUpsertBulk {
	return u.Update(func(s *CommissionUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *CommissionUpsertBulk) SetDeletedAt(v uint32) *CommissionUpsertBulk {
	return u.Update(func(s *CommissionUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *CommissionUpsertBulk) AddDeletedAt(v uint32) *CommissionUpsertBulk {
	return u.Update(func(s *CommissionUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *CommissionUpsertBulk) UpdateDeletedAt() *CommissionUpsertBulk {
	return u.Update(func(s *CommissionUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetAppID sets the "app_id" field.
func (u *CommissionUpsertBulk) SetAppID(v uuid.UUID) *CommissionUpsertBulk {
	return u.Update(func(s *CommissionUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *CommissionUpsertBulk) UpdateAppID() *CommissionUpsertBulk {
	return u.Update(func(s *CommissionUpsert) {
		s.UpdateAppID()
	})
}

// ClearAppID clears the value of the "app_id" field.
func (u *CommissionUpsertBulk) ClearAppID() *CommissionUpsertBulk {
	return u.Update(func(s *CommissionUpsert) {
		s.ClearAppID()
	})
}

// SetUserID sets the "user_id" field.
func (u *CommissionUpsertBulk) SetUserID(v uuid.UUID) *CommissionUpsertBulk {
	return u.Update(func(s *CommissionUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *CommissionUpsertBulk) UpdateUserID() *CommissionUpsertBulk {
	return u.Update(func(s *CommissionUpsert) {
		s.UpdateUserID()
	})
}

// ClearUserID clears the value of the "user_id" field.
func (u *CommissionUpsertBulk) ClearUserID() *CommissionUpsertBulk {
	return u.Update(func(s *CommissionUpsert) {
		s.ClearUserID()
	})
}

// SetGoodID sets the "good_id" field.
func (u *CommissionUpsertBulk) SetGoodID(v uuid.UUID) *CommissionUpsertBulk {
	return u.Update(func(s *CommissionUpsert) {
		s.SetGoodID(v)
	})
}

// UpdateGoodID sets the "good_id" field to the value that was provided on create.
func (u *CommissionUpsertBulk) UpdateGoodID() *CommissionUpsertBulk {
	return u.Update(func(s *CommissionUpsert) {
		s.UpdateGoodID()
	})
}

// ClearGoodID clears the value of the "good_id" field.
func (u *CommissionUpsertBulk) ClearGoodID() *CommissionUpsertBulk {
	return u.Update(func(s *CommissionUpsert) {
		s.ClearGoodID()
	})
}

// SetPercent sets the "percent" field.
func (u *CommissionUpsertBulk) SetPercent(v decimal.Decimal) *CommissionUpsertBulk {
	return u.Update(func(s *CommissionUpsert) {
		s.SetPercent(v)
	})
}

// UpdatePercent sets the "percent" field to the value that was provided on create.
func (u *CommissionUpsertBulk) UpdatePercent() *CommissionUpsertBulk {
	return u.Update(func(s *CommissionUpsert) {
		s.UpdatePercent()
	})
}

// ClearPercent clears the value of the "percent" field.
func (u *CommissionUpsertBulk) ClearPercent() *CommissionUpsertBulk {
	return u.Update(func(s *CommissionUpsert) {
		s.ClearPercent()
	})
}

// SetStartAt sets the "start_at" field.
func (u *CommissionUpsertBulk) SetStartAt(v uint32) *CommissionUpsertBulk {
	return u.Update(func(s *CommissionUpsert) {
		s.SetStartAt(v)
	})
}

// AddStartAt adds v to the "start_at" field.
func (u *CommissionUpsertBulk) AddStartAt(v uint32) *CommissionUpsertBulk {
	return u.Update(func(s *CommissionUpsert) {
		s.AddStartAt(v)
	})
}

// UpdateStartAt sets the "start_at" field to the value that was provided on create.
func (u *CommissionUpsertBulk) UpdateStartAt() *CommissionUpsertBulk {
	return u.Update(func(s *CommissionUpsert) {
		s.UpdateStartAt()
	})
}

// ClearStartAt clears the value of the "start_at" field.
func (u *CommissionUpsertBulk) ClearStartAt() *CommissionUpsertBulk {
	return u.Update(func(s *CommissionUpsert) {
		s.ClearStartAt()
	})
}

// SetEndAt sets the "end_at" field.
func (u *CommissionUpsertBulk) SetEndAt(v uint32) *CommissionUpsertBulk {
	return u.Update(func(s *CommissionUpsert) {
		s.SetEndAt(v)
	})
}

// AddEndAt adds v to the "end_at" field.
func (u *CommissionUpsertBulk) AddEndAt(v uint32) *CommissionUpsertBulk {
	return u.Update(func(s *CommissionUpsert) {
		s.AddEndAt(v)
	})
}

// UpdateEndAt sets the "end_at" field to the value that was provided on create.
func (u *CommissionUpsertBulk) UpdateEndAt() *CommissionUpsertBulk {
	return u.Update(func(s *CommissionUpsert) {
		s.UpdateEndAt()
	})
}

// ClearEndAt clears the value of the "end_at" field.
func (u *CommissionUpsertBulk) ClearEndAt() *CommissionUpsertBulk {
	return u.Update(func(s *CommissionUpsert) {
		s.ClearEndAt()
	})
}

// SetSettleType sets the "settle_type" field.
func (u *CommissionUpsertBulk) SetSettleType(v string) *CommissionUpsertBulk {
	return u.Update(func(s *CommissionUpsert) {
		s.SetSettleType(v)
	})
}

// UpdateSettleType sets the "settle_type" field to the value that was provided on create.
func (u *CommissionUpsertBulk) UpdateSettleType() *CommissionUpsertBulk {
	return u.Update(func(s *CommissionUpsert) {
		s.UpdateSettleType()
	})
}

// ClearSettleType clears the value of the "settle_type" field.
func (u *CommissionUpsertBulk) ClearSettleType() *CommissionUpsertBulk {
	return u.Update(func(s *CommissionUpsert) {
		s.ClearSettleType()
	})
}

// SetSettleMode sets the "settle_mode" field.
func (u *CommissionUpsertBulk) SetSettleMode(v string) *CommissionUpsertBulk {
	return u.Update(func(s *CommissionUpsert) {
		s.SetSettleMode(v)
	})
}

// UpdateSettleMode sets the "settle_mode" field to the value that was provided on create.
func (u *CommissionUpsertBulk) UpdateSettleMode() *CommissionUpsertBulk {
	return u.Update(func(s *CommissionUpsert) {
		s.UpdateSettleMode()
	})
}

// ClearSettleMode clears the value of the "settle_mode" field.
func (u *CommissionUpsertBulk) ClearSettleMode() *CommissionUpsertBulk {
	return u.Update(func(s *CommissionUpsert) {
		s.ClearSettleMode()
	})
}

// SetSettleInterval sets the "settle_interval" field.
func (u *CommissionUpsertBulk) SetSettleInterval(v string) *CommissionUpsertBulk {
	return u.Update(func(s *CommissionUpsert) {
		s.SetSettleInterval(v)
	})
}

// UpdateSettleInterval sets the "settle_interval" field to the value that was provided on create.
func (u *CommissionUpsertBulk) UpdateSettleInterval() *CommissionUpsertBulk {
	return u.Update(func(s *CommissionUpsert) {
		s.UpdateSettleInterval()
	})
}

// ClearSettleInterval clears the value of the "settle_interval" field.
func (u *CommissionUpsertBulk) ClearSettleInterval() *CommissionUpsertBulk {
	return u.Update(func(s *CommissionUpsert) {
		s.ClearSettleInterval()
	})
}

// Exec executes the query.
func (u *CommissionUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the CommissionCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for CommissionCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CommissionUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
