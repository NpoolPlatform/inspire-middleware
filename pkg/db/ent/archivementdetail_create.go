// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/inspire-middleware/pkg/db/ent/archivementdetail"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// ArchivementDetailCreate is the builder for creating a ArchivementDetail entity.
type ArchivementDetailCreate struct {
	config
	mutation *ArchivementDetailMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (adc *ArchivementDetailCreate) SetCreatedAt(u uint32) *ArchivementDetailCreate {
	adc.mutation.SetCreatedAt(u)
	return adc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (adc *ArchivementDetailCreate) SetNillableCreatedAt(u *uint32) *ArchivementDetailCreate {
	if u != nil {
		adc.SetCreatedAt(*u)
	}
	return adc
}

// SetUpdatedAt sets the "updated_at" field.
func (adc *ArchivementDetailCreate) SetUpdatedAt(u uint32) *ArchivementDetailCreate {
	adc.mutation.SetUpdatedAt(u)
	return adc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (adc *ArchivementDetailCreate) SetNillableUpdatedAt(u *uint32) *ArchivementDetailCreate {
	if u != nil {
		adc.SetUpdatedAt(*u)
	}
	return adc
}

// SetDeletedAt sets the "deleted_at" field.
func (adc *ArchivementDetailCreate) SetDeletedAt(u uint32) *ArchivementDetailCreate {
	adc.mutation.SetDeletedAt(u)
	return adc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (adc *ArchivementDetailCreate) SetNillableDeletedAt(u *uint32) *ArchivementDetailCreate {
	if u != nil {
		adc.SetDeletedAt(*u)
	}
	return adc
}

// SetAppID sets the "app_id" field.
func (adc *ArchivementDetailCreate) SetAppID(u uuid.UUID) *ArchivementDetailCreate {
	adc.mutation.SetAppID(u)
	return adc
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (adc *ArchivementDetailCreate) SetNillableAppID(u *uuid.UUID) *ArchivementDetailCreate {
	if u != nil {
		adc.SetAppID(*u)
	}
	return adc
}

// SetUserID sets the "user_id" field.
func (adc *ArchivementDetailCreate) SetUserID(u uuid.UUID) *ArchivementDetailCreate {
	adc.mutation.SetUserID(u)
	return adc
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (adc *ArchivementDetailCreate) SetNillableUserID(u *uuid.UUID) *ArchivementDetailCreate {
	if u != nil {
		adc.SetUserID(*u)
	}
	return adc
}

// SetDirectContributorID sets the "direct_contributor_id" field.
func (adc *ArchivementDetailCreate) SetDirectContributorID(u uuid.UUID) *ArchivementDetailCreate {
	adc.mutation.SetDirectContributorID(u)
	return adc
}

// SetNillableDirectContributorID sets the "direct_contributor_id" field if the given value is not nil.
func (adc *ArchivementDetailCreate) SetNillableDirectContributorID(u *uuid.UUID) *ArchivementDetailCreate {
	if u != nil {
		adc.SetDirectContributorID(*u)
	}
	return adc
}

// SetGoodID sets the "good_id" field.
func (adc *ArchivementDetailCreate) SetGoodID(u uuid.UUID) *ArchivementDetailCreate {
	adc.mutation.SetGoodID(u)
	return adc
}

// SetNillableGoodID sets the "good_id" field if the given value is not nil.
func (adc *ArchivementDetailCreate) SetNillableGoodID(u *uuid.UUID) *ArchivementDetailCreate {
	if u != nil {
		adc.SetGoodID(*u)
	}
	return adc
}

// SetOrderID sets the "order_id" field.
func (adc *ArchivementDetailCreate) SetOrderID(u uuid.UUID) *ArchivementDetailCreate {
	adc.mutation.SetOrderID(u)
	return adc
}

// SetNillableOrderID sets the "order_id" field if the given value is not nil.
func (adc *ArchivementDetailCreate) SetNillableOrderID(u *uuid.UUID) *ArchivementDetailCreate {
	if u != nil {
		adc.SetOrderID(*u)
	}
	return adc
}

// SetSelfOrder sets the "self_order" field.
func (adc *ArchivementDetailCreate) SetSelfOrder(b bool) *ArchivementDetailCreate {
	adc.mutation.SetSelfOrder(b)
	return adc
}

// SetNillableSelfOrder sets the "self_order" field if the given value is not nil.
func (adc *ArchivementDetailCreate) SetNillableSelfOrder(b *bool) *ArchivementDetailCreate {
	if b != nil {
		adc.SetSelfOrder(*b)
	}
	return adc
}

// SetPaymentID sets the "payment_id" field.
func (adc *ArchivementDetailCreate) SetPaymentID(u uuid.UUID) *ArchivementDetailCreate {
	adc.mutation.SetPaymentID(u)
	return adc
}

// SetNillablePaymentID sets the "payment_id" field if the given value is not nil.
func (adc *ArchivementDetailCreate) SetNillablePaymentID(u *uuid.UUID) *ArchivementDetailCreate {
	if u != nil {
		adc.SetPaymentID(*u)
	}
	return adc
}

// SetCoinTypeID sets the "coin_type_id" field.
func (adc *ArchivementDetailCreate) SetCoinTypeID(u uuid.UUID) *ArchivementDetailCreate {
	adc.mutation.SetCoinTypeID(u)
	return adc
}

// SetNillableCoinTypeID sets the "coin_type_id" field if the given value is not nil.
func (adc *ArchivementDetailCreate) SetNillableCoinTypeID(u *uuid.UUID) *ArchivementDetailCreate {
	if u != nil {
		adc.SetCoinTypeID(*u)
	}
	return adc
}

// SetPaymentCoinTypeID sets the "payment_coin_type_id" field.
func (adc *ArchivementDetailCreate) SetPaymentCoinTypeID(u uuid.UUID) *ArchivementDetailCreate {
	adc.mutation.SetPaymentCoinTypeID(u)
	return adc
}

// SetNillablePaymentCoinTypeID sets the "payment_coin_type_id" field if the given value is not nil.
func (adc *ArchivementDetailCreate) SetNillablePaymentCoinTypeID(u *uuid.UUID) *ArchivementDetailCreate {
	if u != nil {
		adc.SetPaymentCoinTypeID(*u)
	}
	return adc
}

// SetPaymentCoinUsdCurrency sets the "payment_coin_usd_currency" field.
func (adc *ArchivementDetailCreate) SetPaymentCoinUsdCurrency(d decimal.Decimal) *ArchivementDetailCreate {
	adc.mutation.SetPaymentCoinUsdCurrency(d)
	return adc
}

// SetNillablePaymentCoinUsdCurrency sets the "payment_coin_usd_currency" field if the given value is not nil.
func (adc *ArchivementDetailCreate) SetNillablePaymentCoinUsdCurrency(d *decimal.Decimal) *ArchivementDetailCreate {
	if d != nil {
		adc.SetPaymentCoinUsdCurrency(*d)
	}
	return adc
}

// SetUnits sets the "units" field.
func (adc *ArchivementDetailCreate) SetUnits(u uint32) *ArchivementDetailCreate {
	adc.mutation.SetUnits(u)
	return adc
}

// SetNillableUnits sets the "units" field if the given value is not nil.
func (adc *ArchivementDetailCreate) SetNillableUnits(u *uint32) *ArchivementDetailCreate {
	if u != nil {
		adc.SetUnits(*u)
	}
	return adc
}

// SetUnitsV1 sets the "units_v1" field.
func (adc *ArchivementDetailCreate) SetUnitsV1(d decimal.Decimal) *ArchivementDetailCreate {
	adc.mutation.SetUnitsV1(d)
	return adc
}

// SetNillableUnitsV1 sets the "units_v1" field if the given value is not nil.
func (adc *ArchivementDetailCreate) SetNillableUnitsV1(d *decimal.Decimal) *ArchivementDetailCreate {
	if d != nil {
		adc.SetUnitsV1(*d)
	}
	return adc
}

// SetAmount sets the "amount" field.
func (adc *ArchivementDetailCreate) SetAmount(d decimal.Decimal) *ArchivementDetailCreate {
	adc.mutation.SetAmount(d)
	return adc
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (adc *ArchivementDetailCreate) SetNillableAmount(d *decimal.Decimal) *ArchivementDetailCreate {
	if d != nil {
		adc.SetAmount(*d)
	}
	return adc
}

// SetUsdAmount sets the "usd_amount" field.
func (adc *ArchivementDetailCreate) SetUsdAmount(d decimal.Decimal) *ArchivementDetailCreate {
	adc.mutation.SetUsdAmount(d)
	return adc
}

// SetNillableUsdAmount sets the "usd_amount" field if the given value is not nil.
func (adc *ArchivementDetailCreate) SetNillableUsdAmount(d *decimal.Decimal) *ArchivementDetailCreate {
	if d != nil {
		adc.SetUsdAmount(*d)
	}
	return adc
}

// SetCommission sets the "commission" field.
func (adc *ArchivementDetailCreate) SetCommission(d decimal.Decimal) *ArchivementDetailCreate {
	adc.mutation.SetCommission(d)
	return adc
}

// SetNillableCommission sets the "commission" field if the given value is not nil.
func (adc *ArchivementDetailCreate) SetNillableCommission(d *decimal.Decimal) *ArchivementDetailCreate {
	if d != nil {
		adc.SetCommission(*d)
	}
	return adc
}

// SetID sets the "id" field.
func (adc *ArchivementDetailCreate) SetID(u uuid.UUID) *ArchivementDetailCreate {
	adc.mutation.SetID(u)
	return adc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (adc *ArchivementDetailCreate) SetNillableID(u *uuid.UUID) *ArchivementDetailCreate {
	if u != nil {
		adc.SetID(*u)
	}
	return adc
}

// Mutation returns the ArchivementDetailMutation object of the builder.
func (adc *ArchivementDetailCreate) Mutation() *ArchivementDetailMutation {
	return adc.mutation
}

// Save creates the ArchivementDetail in the database.
func (adc *ArchivementDetailCreate) Save(ctx context.Context) (*ArchivementDetail, error) {
	var (
		err  error
		node *ArchivementDetail
	)
	if err := adc.defaults(); err != nil {
		return nil, err
	}
	if len(adc.hooks) == 0 {
		if err = adc.check(); err != nil {
			return nil, err
		}
		node, err = adc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ArchivementDetailMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = adc.check(); err != nil {
				return nil, err
			}
			adc.mutation = mutation
			if node, err = adc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(adc.hooks) - 1; i >= 0; i-- {
			if adc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = adc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, adc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*ArchivementDetail)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from ArchivementDetailMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (adc *ArchivementDetailCreate) SaveX(ctx context.Context) *ArchivementDetail {
	v, err := adc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (adc *ArchivementDetailCreate) Exec(ctx context.Context) error {
	_, err := adc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (adc *ArchivementDetailCreate) ExecX(ctx context.Context) {
	if err := adc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (adc *ArchivementDetailCreate) defaults() error {
	if _, ok := adc.mutation.CreatedAt(); !ok {
		if archivementdetail.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized archivementdetail.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := archivementdetail.DefaultCreatedAt()
		adc.mutation.SetCreatedAt(v)
	}
	if _, ok := adc.mutation.UpdatedAt(); !ok {
		if archivementdetail.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized archivementdetail.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := archivementdetail.DefaultUpdatedAt()
		adc.mutation.SetUpdatedAt(v)
	}
	if _, ok := adc.mutation.DeletedAt(); !ok {
		if archivementdetail.DefaultDeletedAt == nil {
			return fmt.Errorf("ent: uninitialized archivementdetail.DefaultDeletedAt (forgotten import ent/runtime?)")
		}
		v := archivementdetail.DefaultDeletedAt()
		adc.mutation.SetDeletedAt(v)
	}
	if _, ok := adc.mutation.AppID(); !ok {
		if archivementdetail.DefaultAppID == nil {
			return fmt.Errorf("ent: uninitialized archivementdetail.DefaultAppID (forgotten import ent/runtime?)")
		}
		v := archivementdetail.DefaultAppID()
		adc.mutation.SetAppID(v)
	}
	if _, ok := adc.mutation.UserID(); !ok {
		if archivementdetail.DefaultUserID == nil {
			return fmt.Errorf("ent: uninitialized archivementdetail.DefaultUserID (forgotten import ent/runtime?)")
		}
		v := archivementdetail.DefaultUserID()
		adc.mutation.SetUserID(v)
	}
	if _, ok := adc.mutation.DirectContributorID(); !ok {
		if archivementdetail.DefaultDirectContributorID == nil {
			return fmt.Errorf("ent: uninitialized archivementdetail.DefaultDirectContributorID (forgotten import ent/runtime?)")
		}
		v := archivementdetail.DefaultDirectContributorID()
		adc.mutation.SetDirectContributorID(v)
	}
	if _, ok := adc.mutation.GoodID(); !ok {
		if archivementdetail.DefaultGoodID == nil {
			return fmt.Errorf("ent: uninitialized archivementdetail.DefaultGoodID (forgotten import ent/runtime?)")
		}
		v := archivementdetail.DefaultGoodID()
		adc.mutation.SetGoodID(v)
	}
	if _, ok := adc.mutation.OrderID(); !ok {
		if archivementdetail.DefaultOrderID == nil {
			return fmt.Errorf("ent: uninitialized archivementdetail.DefaultOrderID (forgotten import ent/runtime?)")
		}
		v := archivementdetail.DefaultOrderID()
		adc.mutation.SetOrderID(v)
	}
	if _, ok := adc.mutation.SelfOrder(); !ok {
		v := archivementdetail.DefaultSelfOrder
		adc.mutation.SetSelfOrder(v)
	}
	if _, ok := adc.mutation.PaymentID(); !ok {
		if archivementdetail.DefaultPaymentID == nil {
			return fmt.Errorf("ent: uninitialized archivementdetail.DefaultPaymentID (forgotten import ent/runtime?)")
		}
		v := archivementdetail.DefaultPaymentID()
		adc.mutation.SetPaymentID(v)
	}
	if _, ok := adc.mutation.CoinTypeID(); !ok {
		if archivementdetail.DefaultCoinTypeID == nil {
			return fmt.Errorf("ent: uninitialized archivementdetail.DefaultCoinTypeID (forgotten import ent/runtime?)")
		}
		v := archivementdetail.DefaultCoinTypeID()
		adc.mutation.SetCoinTypeID(v)
	}
	if _, ok := adc.mutation.PaymentCoinTypeID(); !ok {
		if archivementdetail.DefaultPaymentCoinTypeID == nil {
			return fmt.Errorf("ent: uninitialized archivementdetail.DefaultPaymentCoinTypeID (forgotten import ent/runtime?)")
		}
		v := archivementdetail.DefaultPaymentCoinTypeID()
		adc.mutation.SetPaymentCoinTypeID(v)
	}
	if _, ok := adc.mutation.PaymentCoinUsdCurrency(); !ok {
		v := archivementdetail.DefaultPaymentCoinUsdCurrency
		adc.mutation.SetPaymentCoinUsdCurrency(v)
	}
	if _, ok := adc.mutation.Units(); !ok {
		v := archivementdetail.DefaultUnits
		adc.mutation.SetUnits(v)
	}
	if _, ok := adc.mutation.UnitsV1(); !ok {
		v := archivementdetail.DefaultUnitsV1
		adc.mutation.SetUnitsV1(v)
	}
	if _, ok := adc.mutation.Amount(); !ok {
		v := archivementdetail.DefaultAmount
		adc.mutation.SetAmount(v)
	}
	if _, ok := adc.mutation.UsdAmount(); !ok {
		v := archivementdetail.DefaultUsdAmount
		adc.mutation.SetUsdAmount(v)
	}
	if _, ok := adc.mutation.Commission(); !ok {
		v := archivementdetail.DefaultCommission
		adc.mutation.SetCommission(v)
	}
	if _, ok := adc.mutation.ID(); !ok {
		if archivementdetail.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized archivementdetail.DefaultID (forgotten import ent/runtime?)")
		}
		v := archivementdetail.DefaultID()
		adc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (adc *ArchivementDetailCreate) check() error {
	if _, ok := adc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "ArchivementDetail.created_at"`)}
	}
	if _, ok := adc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "ArchivementDetail.updated_at"`)}
	}
	if _, ok := adc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`ent: missing required field "ArchivementDetail.deleted_at"`)}
	}
	return nil
}

func (adc *ArchivementDetailCreate) sqlSave(ctx context.Context) (*ArchivementDetail, error) {
	_node, _spec := adc.createSpec()
	if err := sqlgraph.CreateNode(ctx, adc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (adc *ArchivementDetailCreate) createSpec() (*ArchivementDetail, *sqlgraph.CreateSpec) {
	var (
		_node = &ArchivementDetail{config: adc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: archivementdetail.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: archivementdetail.FieldID,
			},
		}
	)
	_spec.OnConflict = adc.conflict
	if id, ok := adc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := adc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: archivementdetail.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := adc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: archivementdetail.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := adc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: archivementdetail.FieldDeletedAt,
		})
		_node.DeletedAt = value
	}
	if value, ok := adc.mutation.AppID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: archivementdetail.FieldAppID,
		})
		_node.AppID = value
	}
	if value, ok := adc.mutation.UserID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: archivementdetail.FieldUserID,
		})
		_node.UserID = value
	}
	if value, ok := adc.mutation.DirectContributorID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: archivementdetail.FieldDirectContributorID,
		})
		_node.DirectContributorID = value
	}
	if value, ok := adc.mutation.GoodID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: archivementdetail.FieldGoodID,
		})
		_node.GoodID = value
	}
	if value, ok := adc.mutation.OrderID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: archivementdetail.FieldOrderID,
		})
		_node.OrderID = value
	}
	if value, ok := adc.mutation.SelfOrder(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: archivementdetail.FieldSelfOrder,
		})
		_node.SelfOrder = value
	}
	if value, ok := adc.mutation.PaymentID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: archivementdetail.FieldPaymentID,
		})
		_node.PaymentID = value
	}
	if value, ok := adc.mutation.CoinTypeID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: archivementdetail.FieldCoinTypeID,
		})
		_node.CoinTypeID = value
	}
	if value, ok := adc.mutation.PaymentCoinTypeID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: archivementdetail.FieldPaymentCoinTypeID,
		})
		_node.PaymentCoinTypeID = value
	}
	if value, ok := adc.mutation.PaymentCoinUsdCurrency(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: archivementdetail.FieldPaymentCoinUsdCurrency,
		})
		_node.PaymentCoinUsdCurrency = value
	}
	if value, ok := adc.mutation.Units(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: archivementdetail.FieldUnits,
		})
		_node.Units = value
	}
	if value, ok := adc.mutation.UnitsV1(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: archivementdetail.FieldUnitsV1,
		})
		_node.UnitsV1 = value
	}
	if value, ok := adc.mutation.Amount(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: archivementdetail.FieldAmount,
		})
		_node.Amount = value
	}
	if value, ok := adc.mutation.UsdAmount(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: archivementdetail.FieldUsdAmount,
		})
		_node.UsdAmount = value
	}
	if value, ok := adc.mutation.Commission(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: archivementdetail.FieldCommission,
		})
		_node.Commission = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ArchivementDetail.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ArchivementDetailUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (adc *ArchivementDetailCreate) OnConflict(opts ...sql.ConflictOption) *ArchivementDetailUpsertOne {
	adc.conflict = opts
	return &ArchivementDetailUpsertOne{
		create: adc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ArchivementDetail.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (adc *ArchivementDetailCreate) OnConflictColumns(columns ...string) *ArchivementDetailUpsertOne {
	adc.conflict = append(adc.conflict, sql.ConflictColumns(columns...))
	return &ArchivementDetailUpsertOne{
		create: adc,
	}
}

type (
	// ArchivementDetailUpsertOne is the builder for "upsert"-ing
	//  one ArchivementDetail node.
	ArchivementDetailUpsertOne struct {
		create *ArchivementDetailCreate
	}

	// ArchivementDetailUpsert is the "OnConflict" setter.
	ArchivementDetailUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *ArchivementDetailUpsert) SetCreatedAt(v uint32) *ArchivementDetailUpsert {
	u.Set(archivementdetail.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *ArchivementDetailUpsert) UpdateCreatedAt() *ArchivementDetailUpsert {
	u.SetExcluded(archivementdetail.FieldCreatedAt)
	return u
}

// AddCreatedAt adds v to the "created_at" field.
func (u *ArchivementDetailUpsert) AddCreatedAt(v uint32) *ArchivementDetailUpsert {
	u.Add(archivementdetail.FieldCreatedAt, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ArchivementDetailUpsert) SetUpdatedAt(v uint32) *ArchivementDetailUpsert {
	u.Set(archivementdetail.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ArchivementDetailUpsert) UpdateUpdatedAt() *ArchivementDetailUpsert {
	u.SetExcluded(archivementdetail.FieldUpdatedAt)
	return u
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *ArchivementDetailUpsert) AddUpdatedAt(v uint32) *ArchivementDetailUpsert {
	u.Add(archivementdetail.FieldUpdatedAt, v)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *ArchivementDetailUpsert) SetDeletedAt(v uint32) *ArchivementDetailUpsert {
	u.Set(archivementdetail.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *ArchivementDetailUpsert) UpdateDeletedAt() *ArchivementDetailUpsert {
	u.SetExcluded(archivementdetail.FieldDeletedAt)
	return u
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *ArchivementDetailUpsert) AddDeletedAt(v uint32) *ArchivementDetailUpsert {
	u.Add(archivementdetail.FieldDeletedAt, v)
	return u
}

// SetAppID sets the "app_id" field.
func (u *ArchivementDetailUpsert) SetAppID(v uuid.UUID) *ArchivementDetailUpsert {
	u.Set(archivementdetail.FieldAppID, v)
	return u
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *ArchivementDetailUpsert) UpdateAppID() *ArchivementDetailUpsert {
	u.SetExcluded(archivementdetail.FieldAppID)
	return u
}

// ClearAppID clears the value of the "app_id" field.
func (u *ArchivementDetailUpsert) ClearAppID() *ArchivementDetailUpsert {
	u.SetNull(archivementdetail.FieldAppID)
	return u
}

// SetUserID sets the "user_id" field.
func (u *ArchivementDetailUpsert) SetUserID(v uuid.UUID) *ArchivementDetailUpsert {
	u.Set(archivementdetail.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *ArchivementDetailUpsert) UpdateUserID() *ArchivementDetailUpsert {
	u.SetExcluded(archivementdetail.FieldUserID)
	return u
}

// ClearUserID clears the value of the "user_id" field.
func (u *ArchivementDetailUpsert) ClearUserID() *ArchivementDetailUpsert {
	u.SetNull(archivementdetail.FieldUserID)
	return u
}

// SetDirectContributorID sets the "direct_contributor_id" field.
func (u *ArchivementDetailUpsert) SetDirectContributorID(v uuid.UUID) *ArchivementDetailUpsert {
	u.Set(archivementdetail.FieldDirectContributorID, v)
	return u
}

// UpdateDirectContributorID sets the "direct_contributor_id" field to the value that was provided on create.
func (u *ArchivementDetailUpsert) UpdateDirectContributorID() *ArchivementDetailUpsert {
	u.SetExcluded(archivementdetail.FieldDirectContributorID)
	return u
}

// ClearDirectContributorID clears the value of the "direct_contributor_id" field.
func (u *ArchivementDetailUpsert) ClearDirectContributorID() *ArchivementDetailUpsert {
	u.SetNull(archivementdetail.FieldDirectContributorID)
	return u
}

// SetGoodID sets the "good_id" field.
func (u *ArchivementDetailUpsert) SetGoodID(v uuid.UUID) *ArchivementDetailUpsert {
	u.Set(archivementdetail.FieldGoodID, v)
	return u
}

// UpdateGoodID sets the "good_id" field to the value that was provided on create.
func (u *ArchivementDetailUpsert) UpdateGoodID() *ArchivementDetailUpsert {
	u.SetExcluded(archivementdetail.FieldGoodID)
	return u
}

// ClearGoodID clears the value of the "good_id" field.
func (u *ArchivementDetailUpsert) ClearGoodID() *ArchivementDetailUpsert {
	u.SetNull(archivementdetail.FieldGoodID)
	return u
}

// SetOrderID sets the "order_id" field.
func (u *ArchivementDetailUpsert) SetOrderID(v uuid.UUID) *ArchivementDetailUpsert {
	u.Set(archivementdetail.FieldOrderID, v)
	return u
}

// UpdateOrderID sets the "order_id" field to the value that was provided on create.
func (u *ArchivementDetailUpsert) UpdateOrderID() *ArchivementDetailUpsert {
	u.SetExcluded(archivementdetail.FieldOrderID)
	return u
}

// ClearOrderID clears the value of the "order_id" field.
func (u *ArchivementDetailUpsert) ClearOrderID() *ArchivementDetailUpsert {
	u.SetNull(archivementdetail.FieldOrderID)
	return u
}

// SetSelfOrder sets the "self_order" field.
func (u *ArchivementDetailUpsert) SetSelfOrder(v bool) *ArchivementDetailUpsert {
	u.Set(archivementdetail.FieldSelfOrder, v)
	return u
}

// UpdateSelfOrder sets the "self_order" field to the value that was provided on create.
func (u *ArchivementDetailUpsert) UpdateSelfOrder() *ArchivementDetailUpsert {
	u.SetExcluded(archivementdetail.FieldSelfOrder)
	return u
}

// ClearSelfOrder clears the value of the "self_order" field.
func (u *ArchivementDetailUpsert) ClearSelfOrder() *ArchivementDetailUpsert {
	u.SetNull(archivementdetail.FieldSelfOrder)
	return u
}

// SetPaymentID sets the "payment_id" field.
func (u *ArchivementDetailUpsert) SetPaymentID(v uuid.UUID) *ArchivementDetailUpsert {
	u.Set(archivementdetail.FieldPaymentID, v)
	return u
}

// UpdatePaymentID sets the "payment_id" field to the value that was provided on create.
func (u *ArchivementDetailUpsert) UpdatePaymentID() *ArchivementDetailUpsert {
	u.SetExcluded(archivementdetail.FieldPaymentID)
	return u
}

// ClearPaymentID clears the value of the "payment_id" field.
func (u *ArchivementDetailUpsert) ClearPaymentID() *ArchivementDetailUpsert {
	u.SetNull(archivementdetail.FieldPaymentID)
	return u
}

// SetCoinTypeID sets the "coin_type_id" field.
func (u *ArchivementDetailUpsert) SetCoinTypeID(v uuid.UUID) *ArchivementDetailUpsert {
	u.Set(archivementdetail.FieldCoinTypeID, v)
	return u
}

// UpdateCoinTypeID sets the "coin_type_id" field to the value that was provided on create.
func (u *ArchivementDetailUpsert) UpdateCoinTypeID() *ArchivementDetailUpsert {
	u.SetExcluded(archivementdetail.FieldCoinTypeID)
	return u
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (u *ArchivementDetailUpsert) ClearCoinTypeID() *ArchivementDetailUpsert {
	u.SetNull(archivementdetail.FieldCoinTypeID)
	return u
}

// SetPaymentCoinTypeID sets the "payment_coin_type_id" field.
func (u *ArchivementDetailUpsert) SetPaymentCoinTypeID(v uuid.UUID) *ArchivementDetailUpsert {
	u.Set(archivementdetail.FieldPaymentCoinTypeID, v)
	return u
}

// UpdatePaymentCoinTypeID sets the "payment_coin_type_id" field to the value that was provided on create.
func (u *ArchivementDetailUpsert) UpdatePaymentCoinTypeID() *ArchivementDetailUpsert {
	u.SetExcluded(archivementdetail.FieldPaymentCoinTypeID)
	return u
}

// ClearPaymentCoinTypeID clears the value of the "payment_coin_type_id" field.
func (u *ArchivementDetailUpsert) ClearPaymentCoinTypeID() *ArchivementDetailUpsert {
	u.SetNull(archivementdetail.FieldPaymentCoinTypeID)
	return u
}

// SetPaymentCoinUsdCurrency sets the "payment_coin_usd_currency" field.
func (u *ArchivementDetailUpsert) SetPaymentCoinUsdCurrency(v decimal.Decimal) *ArchivementDetailUpsert {
	u.Set(archivementdetail.FieldPaymentCoinUsdCurrency, v)
	return u
}

// UpdatePaymentCoinUsdCurrency sets the "payment_coin_usd_currency" field to the value that was provided on create.
func (u *ArchivementDetailUpsert) UpdatePaymentCoinUsdCurrency() *ArchivementDetailUpsert {
	u.SetExcluded(archivementdetail.FieldPaymentCoinUsdCurrency)
	return u
}

// ClearPaymentCoinUsdCurrency clears the value of the "payment_coin_usd_currency" field.
func (u *ArchivementDetailUpsert) ClearPaymentCoinUsdCurrency() *ArchivementDetailUpsert {
	u.SetNull(archivementdetail.FieldPaymentCoinUsdCurrency)
	return u
}

// SetUnits sets the "units" field.
func (u *ArchivementDetailUpsert) SetUnits(v uint32) *ArchivementDetailUpsert {
	u.Set(archivementdetail.FieldUnits, v)
	return u
}

// UpdateUnits sets the "units" field to the value that was provided on create.
func (u *ArchivementDetailUpsert) UpdateUnits() *ArchivementDetailUpsert {
	u.SetExcluded(archivementdetail.FieldUnits)
	return u
}

// AddUnits adds v to the "units" field.
func (u *ArchivementDetailUpsert) AddUnits(v uint32) *ArchivementDetailUpsert {
	u.Add(archivementdetail.FieldUnits, v)
	return u
}

// ClearUnits clears the value of the "units" field.
func (u *ArchivementDetailUpsert) ClearUnits() *ArchivementDetailUpsert {
	u.SetNull(archivementdetail.FieldUnits)
	return u
}

// SetUnitsV1 sets the "units_v1" field.
func (u *ArchivementDetailUpsert) SetUnitsV1(v decimal.Decimal) *ArchivementDetailUpsert {
	u.Set(archivementdetail.FieldUnitsV1, v)
	return u
}

// UpdateUnitsV1 sets the "units_v1" field to the value that was provided on create.
func (u *ArchivementDetailUpsert) UpdateUnitsV1() *ArchivementDetailUpsert {
	u.SetExcluded(archivementdetail.FieldUnitsV1)
	return u
}

// ClearUnitsV1 clears the value of the "units_v1" field.
func (u *ArchivementDetailUpsert) ClearUnitsV1() *ArchivementDetailUpsert {
	u.SetNull(archivementdetail.FieldUnitsV1)
	return u
}

// SetAmount sets the "amount" field.
func (u *ArchivementDetailUpsert) SetAmount(v decimal.Decimal) *ArchivementDetailUpsert {
	u.Set(archivementdetail.FieldAmount, v)
	return u
}

// UpdateAmount sets the "amount" field to the value that was provided on create.
func (u *ArchivementDetailUpsert) UpdateAmount() *ArchivementDetailUpsert {
	u.SetExcluded(archivementdetail.FieldAmount)
	return u
}

// ClearAmount clears the value of the "amount" field.
func (u *ArchivementDetailUpsert) ClearAmount() *ArchivementDetailUpsert {
	u.SetNull(archivementdetail.FieldAmount)
	return u
}

// SetUsdAmount sets the "usd_amount" field.
func (u *ArchivementDetailUpsert) SetUsdAmount(v decimal.Decimal) *ArchivementDetailUpsert {
	u.Set(archivementdetail.FieldUsdAmount, v)
	return u
}

// UpdateUsdAmount sets the "usd_amount" field to the value that was provided on create.
func (u *ArchivementDetailUpsert) UpdateUsdAmount() *ArchivementDetailUpsert {
	u.SetExcluded(archivementdetail.FieldUsdAmount)
	return u
}

// ClearUsdAmount clears the value of the "usd_amount" field.
func (u *ArchivementDetailUpsert) ClearUsdAmount() *ArchivementDetailUpsert {
	u.SetNull(archivementdetail.FieldUsdAmount)
	return u
}

// SetCommission sets the "commission" field.
func (u *ArchivementDetailUpsert) SetCommission(v decimal.Decimal) *ArchivementDetailUpsert {
	u.Set(archivementdetail.FieldCommission, v)
	return u
}

// UpdateCommission sets the "commission" field to the value that was provided on create.
func (u *ArchivementDetailUpsert) UpdateCommission() *ArchivementDetailUpsert {
	u.SetExcluded(archivementdetail.FieldCommission)
	return u
}

// ClearCommission clears the value of the "commission" field.
func (u *ArchivementDetailUpsert) ClearCommission() *ArchivementDetailUpsert {
	u.SetNull(archivementdetail.FieldCommission)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.ArchivementDetail.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(archivementdetail.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *ArchivementDetailUpsertOne) UpdateNewValues() *ArchivementDetailUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(archivementdetail.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.ArchivementDetail.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *ArchivementDetailUpsertOne) Ignore() *ArchivementDetailUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ArchivementDetailUpsertOne) DoNothing() *ArchivementDetailUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ArchivementDetailCreate.OnConflict
// documentation for more info.
func (u *ArchivementDetailUpsertOne) Update(set func(*ArchivementDetailUpsert)) *ArchivementDetailUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ArchivementDetailUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *ArchivementDetailUpsertOne) SetCreatedAt(v uint32) *ArchivementDetailUpsertOne {
	return u.Update(func(s *ArchivementDetailUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *ArchivementDetailUpsertOne) AddCreatedAt(v uint32) *ArchivementDetailUpsertOne {
	return u.Update(func(s *ArchivementDetailUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *ArchivementDetailUpsertOne) UpdateCreatedAt() *ArchivementDetailUpsertOne {
	return u.Update(func(s *ArchivementDetailUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ArchivementDetailUpsertOne) SetUpdatedAt(v uint32) *ArchivementDetailUpsertOne {
	return u.Update(func(s *ArchivementDetailUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *ArchivementDetailUpsertOne) AddUpdatedAt(v uint32) *ArchivementDetailUpsertOne {
	return u.Update(func(s *ArchivementDetailUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ArchivementDetailUpsertOne) UpdateUpdatedAt() *ArchivementDetailUpsertOne {
	return u.Update(func(s *ArchivementDetailUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *ArchivementDetailUpsertOne) SetDeletedAt(v uint32) *ArchivementDetailUpsertOne {
	return u.Update(func(s *ArchivementDetailUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *ArchivementDetailUpsertOne) AddDeletedAt(v uint32) *ArchivementDetailUpsertOne {
	return u.Update(func(s *ArchivementDetailUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *ArchivementDetailUpsertOne) UpdateDeletedAt() *ArchivementDetailUpsertOne {
	return u.Update(func(s *ArchivementDetailUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetAppID sets the "app_id" field.
func (u *ArchivementDetailUpsertOne) SetAppID(v uuid.UUID) *ArchivementDetailUpsertOne {
	return u.Update(func(s *ArchivementDetailUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *ArchivementDetailUpsertOne) UpdateAppID() *ArchivementDetailUpsertOne {
	return u.Update(func(s *ArchivementDetailUpsert) {
		s.UpdateAppID()
	})
}

// ClearAppID clears the value of the "app_id" field.
func (u *ArchivementDetailUpsertOne) ClearAppID() *ArchivementDetailUpsertOne {
	return u.Update(func(s *ArchivementDetailUpsert) {
		s.ClearAppID()
	})
}

// SetUserID sets the "user_id" field.
func (u *ArchivementDetailUpsertOne) SetUserID(v uuid.UUID) *ArchivementDetailUpsertOne {
	return u.Update(func(s *ArchivementDetailUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *ArchivementDetailUpsertOne) UpdateUserID() *ArchivementDetailUpsertOne {
	return u.Update(func(s *ArchivementDetailUpsert) {
		s.UpdateUserID()
	})
}

// ClearUserID clears the value of the "user_id" field.
func (u *ArchivementDetailUpsertOne) ClearUserID() *ArchivementDetailUpsertOne {
	return u.Update(func(s *ArchivementDetailUpsert) {
		s.ClearUserID()
	})
}

// SetDirectContributorID sets the "direct_contributor_id" field.
func (u *ArchivementDetailUpsertOne) SetDirectContributorID(v uuid.UUID) *ArchivementDetailUpsertOne {
	return u.Update(func(s *ArchivementDetailUpsert) {
		s.SetDirectContributorID(v)
	})
}

// UpdateDirectContributorID sets the "direct_contributor_id" field to the value that was provided on create.
func (u *ArchivementDetailUpsertOne) UpdateDirectContributorID() *ArchivementDetailUpsertOne {
	return u.Update(func(s *ArchivementDetailUpsert) {
		s.UpdateDirectContributorID()
	})
}

// ClearDirectContributorID clears the value of the "direct_contributor_id" field.
func (u *ArchivementDetailUpsertOne) ClearDirectContributorID() *ArchivementDetailUpsertOne {
	return u.Update(func(s *ArchivementDetailUpsert) {
		s.ClearDirectContributorID()
	})
}

// SetGoodID sets the "good_id" field.
func (u *ArchivementDetailUpsertOne) SetGoodID(v uuid.UUID) *ArchivementDetailUpsertOne {
	return u.Update(func(s *ArchivementDetailUpsert) {
		s.SetGoodID(v)
	})
}

// UpdateGoodID sets the "good_id" field to the value that was provided on create.
func (u *ArchivementDetailUpsertOne) UpdateGoodID() *ArchivementDetailUpsertOne {
	return u.Update(func(s *ArchivementDetailUpsert) {
		s.UpdateGoodID()
	})
}

// ClearGoodID clears the value of the "good_id" field.
func (u *ArchivementDetailUpsertOne) ClearGoodID() *ArchivementDetailUpsertOne {
	return u.Update(func(s *ArchivementDetailUpsert) {
		s.ClearGoodID()
	})
}

// SetOrderID sets the "order_id" field.
func (u *ArchivementDetailUpsertOne) SetOrderID(v uuid.UUID) *ArchivementDetailUpsertOne {
	return u.Update(func(s *ArchivementDetailUpsert) {
		s.SetOrderID(v)
	})
}

// UpdateOrderID sets the "order_id" field to the value that was provided on create.
func (u *ArchivementDetailUpsertOne) UpdateOrderID() *ArchivementDetailUpsertOne {
	return u.Update(func(s *ArchivementDetailUpsert) {
		s.UpdateOrderID()
	})
}

// ClearOrderID clears the value of the "order_id" field.
func (u *ArchivementDetailUpsertOne) ClearOrderID() *ArchivementDetailUpsertOne {
	return u.Update(func(s *ArchivementDetailUpsert) {
		s.ClearOrderID()
	})
}

// SetSelfOrder sets the "self_order" field.
func (u *ArchivementDetailUpsertOne) SetSelfOrder(v bool) *ArchivementDetailUpsertOne {
	return u.Update(func(s *ArchivementDetailUpsert) {
		s.SetSelfOrder(v)
	})
}

// UpdateSelfOrder sets the "self_order" field to the value that was provided on create.
func (u *ArchivementDetailUpsertOne) UpdateSelfOrder() *ArchivementDetailUpsertOne {
	return u.Update(func(s *ArchivementDetailUpsert) {
		s.UpdateSelfOrder()
	})
}

// ClearSelfOrder clears the value of the "self_order" field.
func (u *ArchivementDetailUpsertOne) ClearSelfOrder() *ArchivementDetailUpsertOne {
	return u.Update(func(s *ArchivementDetailUpsert) {
		s.ClearSelfOrder()
	})
}

// SetPaymentID sets the "payment_id" field.
func (u *ArchivementDetailUpsertOne) SetPaymentID(v uuid.UUID) *ArchivementDetailUpsertOne {
	return u.Update(func(s *ArchivementDetailUpsert) {
		s.SetPaymentID(v)
	})
}

// UpdatePaymentID sets the "payment_id" field to the value that was provided on create.
func (u *ArchivementDetailUpsertOne) UpdatePaymentID() *ArchivementDetailUpsertOne {
	return u.Update(func(s *ArchivementDetailUpsert) {
		s.UpdatePaymentID()
	})
}

// ClearPaymentID clears the value of the "payment_id" field.
func (u *ArchivementDetailUpsertOne) ClearPaymentID() *ArchivementDetailUpsertOne {
	return u.Update(func(s *ArchivementDetailUpsert) {
		s.ClearPaymentID()
	})
}

// SetCoinTypeID sets the "coin_type_id" field.
func (u *ArchivementDetailUpsertOne) SetCoinTypeID(v uuid.UUID) *ArchivementDetailUpsertOne {
	return u.Update(func(s *ArchivementDetailUpsert) {
		s.SetCoinTypeID(v)
	})
}

// UpdateCoinTypeID sets the "coin_type_id" field to the value that was provided on create.
func (u *ArchivementDetailUpsertOne) UpdateCoinTypeID() *ArchivementDetailUpsertOne {
	return u.Update(func(s *ArchivementDetailUpsert) {
		s.UpdateCoinTypeID()
	})
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (u *ArchivementDetailUpsertOne) ClearCoinTypeID() *ArchivementDetailUpsertOne {
	return u.Update(func(s *ArchivementDetailUpsert) {
		s.ClearCoinTypeID()
	})
}

// SetPaymentCoinTypeID sets the "payment_coin_type_id" field.
func (u *ArchivementDetailUpsertOne) SetPaymentCoinTypeID(v uuid.UUID) *ArchivementDetailUpsertOne {
	return u.Update(func(s *ArchivementDetailUpsert) {
		s.SetPaymentCoinTypeID(v)
	})
}

// UpdatePaymentCoinTypeID sets the "payment_coin_type_id" field to the value that was provided on create.
func (u *ArchivementDetailUpsertOne) UpdatePaymentCoinTypeID() *ArchivementDetailUpsertOne {
	return u.Update(func(s *ArchivementDetailUpsert) {
		s.UpdatePaymentCoinTypeID()
	})
}

// ClearPaymentCoinTypeID clears the value of the "payment_coin_type_id" field.
func (u *ArchivementDetailUpsertOne) ClearPaymentCoinTypeID() *ArchivementDetailUpsertOne {
	return u.Update(func(s *ArchivementDetailUpsert) {
		s.ClearPaymentCoinTypeID()
	})
}

// SetPaymentCoinUsdCurrency sets the "payment_coin_usd_currency" field.
func (u *ArchivementDetailUpsertOne) SetPaymentCoinUsdCurrency(v decimal.Decimal) *ArchivementDetailUpsertOne {
	return u.Update(func(s *ArchivementDetailUpsert) {
		s.SetPaymentCoinUsdCurrency(v)
	})
}

// UpdatePaymentCoinUsdCurrency sets the "payment_coin_usd_currency" field to the value that was provided on create.
func (u *ArchivementDetailUpsertOne) UpdatePaymentCoinUsdCurrency() *ArchivementDetailUpsertOne {
	return u.Update(func(s *ArchivementDetailUpsert) {
		s.UpdatePaymentCoinUsdCurrency()
	})
}

// ClearPaymentCoinUsdCurrency clears the value of the "payment_coin_usd_currency" field.
func (u *ArchivementDetailUpsertOne) ClearPaymentCoinUsdCurrency() *ArchivementDetailUpsertOne {
	return u.Update(func(s *ArchivementDetailUpsert) {
		s.ClearPaymentCoinUsdCurrency()
	})
}

// SetUnits sets the "units" field.
func (u *ArchivementDetailUpsertOne) SetUnits(v uint32) *ArchivementDetailUpsertOne {
	return u.Update(func(s *ArchivementDetailUpsert) {
		s.SetUnits(v)
	})
}

// AddUnits adds v to the "units" field.
func (u *ArchivementDetailUpsertOne) AddUnits(v uint32) *ArchivementDetailUpsertOne {
	return u.Update(func(s *ArchivementDetailUpsert) {
		s.AddUnits(v)
	})
}

// UpdateUnits sets the "units" field to the value that was provided on create.
func (u *ArchivementDetailUpsertOne) UpdateUnits() *ArchivementDetailUpsertOne {
	return u.Update(func(s *ArchivementDetailUpsert) {
		s.UpdateUnits()
	})
}

// ClearUnits clears the value of the "units" field.
func (u *ArchivementDetailUpsertOne) ClearUnits() *ArchivementDetailUpsertOne {
	return u.Update(func(s *ArchivementDetailUpsert) {
		s.ClearUnits()
	})
}

// SetUnitsV1 sets the "units_v1" field.
func (u *ArchivementDetailUpsertOne) SetUnitsV1(v decimal.Decimal) *ArchivementDetailUpsertOne {
	return u.Update(func(s *ArchivementDetailUpsert) {
		s.SetUnitsV1(v)
	})
}

// UpdateUnitsV1 sets the "units_v1" field to the value that was provided on create.
func (u *ArchivementDetailUpsertOne) UpdateUnitsV1() *ArchivementDetailUpsertOne {
	return u.Update(func(s *ArchivementDetailUpsert) {
		s.UpdateUnitsV1()
	})
}

// ClearUnitsV1 clears the value of the "units_v1" field.
func (u *ArchivementDetailUpsertOne) ClearUnitsV1() *ArchivementDetailUpsertOne {
	return u.Update(func(s *ArchivementDetailUpsert) {
		s.ClearUnitsV1()
	})
}

// SetAmount sets the "amount" field.
func (u *ArchivementDetailUpsertOne) SetAmount(v decimal.Decimal) *ArchivementDetailUpsertOne {
	return u.Update(func(s *ArchivementDetailUpsert) {
		s.SetAmount(v)
	})
}

// UpdateAmount sets the "amount" field to the value that was provided on create.
func (u *ArchivementDetailUpsertOne) UpdateAmount() *ArchivementDetailUpsertOne {
	return u.Update(func(s *ArchivementDetailUpsert) {
		s.UpdateAmount()
	})
}

// ClearAmount clears the value of the "amount" field.
func (u *ArchivementDetailUpsertOne) ClearAmount() *ArchivementDetailUpsertOne {
	return u.Update(func(s *ArchivementDetailUpsert) {
		s.ClearAmount()
	})
}

// SetUsdAmount sets the "usd_amount" field.
func (u *ArchivementDetailUpsertOne) SetUsdAmount(v decimal.Decimal) *ArchivementDetailUpsertOne {
	return u.Update(func(s *ArchivementDetailUpsert) {
		s.SetUsdAmount(v)
	})
}

// UpdateUsdAmount sets the "usd_amount" field to the value that was provided on create.
func (u *ArchivementDetailUpsertOne) UpdateUsdAmount() *ArchivementDetailUpsertOne {
	return u.Update(func(s *ArchivementDetailUpsert) {
		s.UpdateUsdAmount()
	})
}

// ClearUsdAmount clears the value of the "usd_amount" field.
func (u *ArchivementDetailUpsertOne) ClearUsdAmount() *ArchivementDetailUpsertOne {
	return u.Update(func(s *ArchivementDetailUpsert) {
		s.ClearUsdAmount()
	})
}

// SetCommission sets the "commission" field.
func (u *ArchivementDetailUpsertOne) SetCommission(v decimal.Decimal) *ArchivementDetailUpsertOne {
	return u.Update(func(s *ArchivementDetailUpsert) {
		s.SetCommission(v)
	})
}

// UpdateCommission sets the "commission" field to the value that was provided on create.
func (u *ArchivementDetailUpsertOne) UpdateCommission() *ArchivementDetailUpsertOne {
	return u.Update(func(s *ArchivementDetailUpsert) {
		s.UpdateCommission()
	})
}

// ClearCommission clears the value of the "commission" field.
func (u *ArchivementDetailUpsertOne) ClearCommission() *ArchivementDetailUpsertOne {
	return u.Update(func(s *ArchivementDetailUpsert) {
		s.ClearCommission()
	})
}

// Exec executes the query.
func (u *ArchivementDetailUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ArchivementDetailCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ArchivementDetailUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ArchivementDetailUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: ArchivementDetailUpsertOne.ID is not supported by MySQL driver. Use ArchivementDetailUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ArchivementDetailUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ArchivementDetailCreateBulk is the builder for creating many ArchivementDetail entities in bulk.
type ArchivementDetailCreateBulk struct {
	config
	builders []*ArchivementDetailCreate
	conflict []sql.ConflictOption
}

// Save creates the ArchivementDetail entities in the database.
func (adcb *ArchivementDetailCreateBulk) Save(ctx context.Context) ([]*ArchivementDetail, error) {
	specs := make([]*sqlgraph.CreateSpec, len(adcb.builders))
	nodes := make([]*ArchivementDetail, len(adcb.builders))
	mutators := make([]Mutator, len(adcb.builders))
	for i := range adcb.builders {
		func(i int, root context.Context) {
			builder := adcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ArchivementDetailMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, adcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = adcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, adcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, adcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (adcb *ArchivementDetailCreateBulk) SaveX(ctx context.Context) []*ArchivementDetail {
	v, err := adcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (adcb *ArchivementDetailCreateBulk) Exec(ctx context.Context) error {
	_, err := adcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (adcb *ArchivementDetailCreateBulk) ExecX(ctx context.Context) {
	if err := adcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ArchivementDetail.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ArchivementDetailUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (adcb *ArchivementDetailCreateBulk) OnConflict(opts ...sql.ConflictOption) *ArchivementDetailUpsertBulk {
	adcb.conflict = opts
	return &ArchivementDetailUpsertBulk{
		create: adcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ArchivementDetail.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (adcb *ArchivementDetailCreateBulk) OnConflictColumns(columns ...string) *ArchivementDetailUpsertBulk {
	adcb.conflict = append(adcb.conflict, sql.ConflictColumns(columns...))
	return &ArchivementDetailUpsertBulk{
		create: adcb,
	}
}

// ArchivementDetailUpsertBulk is the builder for "upsert"-ing
// a bulk of ArchivementDetail nodes.
type ArchivementDetailUpsertBulk struct {
	create *ArchivementDetailCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.ArchivementDetail.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(archivementdetail.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *ArchivementDetailUpsertBulk) UpdateNewValues() *ArchivementDetailUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(archivementdetail.FieldID)
				return
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ArchivementDetail.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *ArchivementDetailUpsertBulk) Ignore() *ArchivementDetailUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ArchivementDetailUpsertBulk) DoNothing() *ArchivementDetailUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ArchivementDetailCreateBulk.OnConflict
// documentation for more info.
func (u *ArchivementDetailUpsertBulk) Update(set func(*ArchivementDetailUpsert)) *ArchivementDetailUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ArchivementDetailUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *ArchivementDetailUpsertBulk) SetCreatedAt(v uint32) *ArchivementDetailUpsertBulk {
	return u.Update(func(s *ArchivementDetailUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *ArchivementDetailUpsertBulk) AddCreatedAt(v uint32) *ArchivementDetailUpsertBulk {
	return u.Update(func(s *ArchivementDetailUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *ArchivementDetailUpsertBulk) UpdateCreatedAt() *ArchivementDetailUpsertBulk {
	return u.Update(func(s *ArchivementDetailUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ArchivementDetailUpsertBulk) SetUpdatedAt(v uint32) *ArchivementDetailUpsertBulk {
	return u.Update(func(s *ArchivementDetailUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *ArchivementDetailUpsertBulk) AddUpdatedAt(v uint32) *ArchivementDetailUpsertBulk {
	return u.Update(func(s *ArchivementDetailUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ArchivementDetailUpsertBulk) UpdateUpdatedAt() *ArchivementDetailUpsertBulk {
	return u.Update(func(s *ArchivementDetailUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *ArchivementDetailUpsertBulk) SetDeletedAt(v uint32) *ArchivementDetailUpsertBulk {
	return u.Update(func(s *ArchivementDetailUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *ArchivementDetailUpsertBulk) AddDeletedAt(v uint32) *ArchivementDetailUpsertBulk {
	return u.Update(func(s *ArchivementDetailUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *ArchivementDetailUpsertBulk) UpdateDeletedAt() *ArchivementDetailUpsertBulk {
	return u.Update(func(s *ArchivementDetailUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetAppID sets the "app_id" field.
func (u *ArchivementDetailUpsertBulk) SetAppID(v uuid.UUID) *ArchivementDetailUpsertBulk {
	return u.Update(func(s *ArchivementDetailUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *ArchivementDetailUpsertBulk) UpdateAppID() *ArchivementDetailUpsertBulk {
	return u.Update(func(s *ArchivementDetailUpsert) {
		s.UpdateAppID()
	})
}

// ClearAppID clears the value of the "app_id" field.
func (u *ArchivementDetailUpsertBulk) ClearAppID() *ArchivementDetailUpsertBulk {
	return u.Update(func(s *ArchivementDetailUpsert) {
		s.ClearAppID()
	})
}

// SetUserID sets the "user_id" field.
func (u *ArchivementDetailUpsertBulk) SetUserID(v uuid.UUID) *ArchivementDetailUpsertBulk {
	return u.Update(func(s *ArchivementDetailUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *ArchivementDetailUpsertBulk) UpdateUserID() *ArchivementDetailUpsertBulk {
	return u.Update(func(s *ArchivementDetailUpsert) {
		s.UpdateUserID()
	})
}

// ClearUserID clears the value of the "user_id" field.
func (u *ArchivementDetailUpsertBulk) ClearUserID() *ArchivementDetailUpsertBulk {
	return u.Update(func(s *ArchivementDetailUpsert) {
		s.ClearUserID()
	})
}

// SetDirectContributorID sets the "direct_contributor_id" field.
func (u *ArchivementDetailUpsertBulk) SetDirectContributorID(v uuid.UUID) *ArchivementDetailUpsertBulk {
	return u.Update(func(s *ArchivementDetailUpsert) {
		s.SetDirectContributorID(v)
	})
}

// UpdateDirectContributorID sets the "direct_contributor_id" field to the value that was provided on create.
func (u *ArchivementDetailUpsertBulk) UpdateDirectContributorID() *ArchivementDetailUpsertBulk {
	return u.Update(func(s *ArchivementDetailUpsert) {
		s.UpdateDirectContributorID()
	})
}

// ClearDirectContributorID clears the value of the "direct_contributor_id" field.
func (u *ArchivementDetailUpsertBulk) ClearDirectContributorID() *ArchivementDetailUpsertBulk {
	return u.Update(func(s *ArchivementDetailUpsert) {
		s.ClearDirectContributorID()
	})
}

// SetGoodID sets the "good_id" field.
func (u *ArchivementDetailUpsertBulk) SetGoodID(v uuid.UUID) *ArchivementDetailUpsertBulk {
	return u.Update(func(s *ArchivementDetailUpsert) {
		s.SetGoodID(v)
	})
}

// UpdateGoodID sets the "good_id" field to the value that was provided on create.
func (u *ArchivementDetailUpsertBulk) UpdateGoodID() *ArchivementDetailUpsertBulk {
	return u.Update(func(s *ArchivementDetailUpsert) {
		s.UpdateGoodID()
	})
}

// ClearGoodID clears the value of the "good_id" field.
func (u *ArchivementDetailUpsertBulk) ClearGoodID() *ArchivementDetailUpsertBulk {
	return u.Update(func(s *ArchivementDetailUpsert) {
		s.ClearGoodID()
	})
}

// SetOrderID sets the "order_id" field.
func (u *ArchivementDetailUpsertBulk) SetOrderID(v uuid.UUID) *ArchivementDetailUpsertBulk {
	return u.Update(func(s *ArchivementDetailUpsert) {
		s.SetOrderID(v)
	})
}

// UpdateOrderID sets the "order_id" field to the value that was provided on create.
func (u *ArchivementDetailUpsertBulk) UpdateOrderID() *ArchivementDetailUpsertBulk {
	return u.Update(func(s *ArchivementDetailUpsert) {
		s.UpdateOrderID()
	})
}

// ClearOrderID clears the value of the "order_id" field.
func (u *ArchivementDetailUpsertBulk) ClearOrderID() *ArchivementDetailUpsertBulk {
	return u.Update(func(s *ArchivementDetailUpsert) {
		s.ClearOrderID()
	})
}

// SetSelfOrder sets the "self_order" field.
func (u *ArchivementDetailUpsertBulk) SetSelfOrder(v bool) *ArchivementDetailUpsertBulk {
	return u.Update(func(s *ArchivementDetailUpsert) {
		s.SetSelfOrder(v)
	})
}

// UpdateSelfOrder sets the "self_order" field to the value that was provided on create.
func (u *ArchivementDetailUpsertBulk) UpdateSelfOrder() *ArchivementDetailUpsertBulk {
	return u.Update(func(s *ArchivementDetailUpsert) {
		s.UpdateSelfOrder()
	})
}

// ClearSelfOrder clears the value of the "self_order" field.
func (u *ArchivementDetailUpsertBulk) ClearSelfOrder() *ArchivementDetailUpsertBulk {
	return u.Update(func(s *ArchivementDetailUpsert) {
		s.ClearSelfOrder()
	})
}

// SetPaymentID sets the "payment_id" field.
func (u *ArchivementDetailUpsertBulk) SetPaymentID(v uuid.UUID) *ArchivementDetailUpsertBulk {
	return u.Update(func(s *ArchivementDetailUpsert) {
		s.SetPaymentID(v)
	})
}

// UpdatePaymentID sets the "payment_id" field to the value that was provided on create.
func (u *ArchivementDetailUpsertBulk) UpdatePaymentID() *ArchivementDetailUpsertBulk {
	return u.Update(func(s *ArchivementDetailUpsert) {
		s.UpdatePaymentID()
	})
}

// ClearPaymentID clears the value of the "payment_id" field.
func (u *ArchivementDetailUpsertBulk) ClearPaymentID() *ArchivementDetailUpsertBulk {
	return u.Update(func(s *ArchivementDetailUpsert) {
		s.ClearPaymentID()
	})
}

// SetCoinTypeID sets the "coin_type_id" field.
func (u *ArchivementDetailUpsertBulk) SetCoinTypeID(v uuid.UUID) *ArchivementDetailUpsertBulk {
	return u.Update(func(s *ArchivementDetailUpsert) {
		s.SetCoinTypeID(v)
	})
}

// UpdateCoinTypeID sets the "coin_type_id" field to the value that was provided on create.
func (u *ArchivementDetailUpsertBulk) UpdateCoinTypeID() *ArchivementDetailUpsertBulk {
	return u.Update(func(s *ArchivementDetailUpsert) {
		s.UpdateCoinTypeID()
	})
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (u *ArchivementDetailUpsertBulk) ClearCoinTypeID() *ArchivementDetailUpsertBulk {
	return u.Update(func(s *ArchivementDetailUpsert) {
		s.ClearCoinTypeID()
	})
}

// SetPaymentCoinTypeID sets the "payment_coin_type_id" field.
func (u *ArchivementDetailUpsertBulk) SetPaymentCoinTypeID(v uuid.UUID) *ArchivementDetailUpsertBulk {
	return u.Update(func(s *ArchivementDetailUpsert) {
		s.SetPaymentCoinTypeID(v)
	})
}

// UpdatePaymentCoinTypeID sets the "payment_coin_type_id" field to the value that was provided on create.
func (u *ArchivementDetailUpsertBulk) UpdatePaymentCoinTypeID() *ArchivementDetailUpsertBulk {
	return u.Update(func(s *ArchivementDetailUpsert) {
		s.UpdatePaymentCoinTypeID()
	})
}

// ClearPaymentCoinTypeID clears the value of the "payment_coin_type_id" field.
func (u *ArchivementDetailUpsertBulk) ClearPaymentCoinTypeID() *ArchivementDetailUpsertBulk {
	return u.Update(func(s *ArchivementDetailUpsert) {
		s.ClearPaymentCoinTypeID()
	})
}

// SetPaymentCoinUsdCurrency sets the "payment_coin_usd_currency" field.
func (u *ArchivementDetailUpsertBulk) SetPaymentCoinUsdCurrency(v decimal.Decimal) *ArchivementDetailUpsertBulk {
	return u.Update(func(s *ArchivementDetailUpsert) {
		s.SetPaymentCoinUsdCurrency(v)
	})
}

// UpdatePaymentCoinUsdCurrency sets the "payment_coin_usd_currency" field to the value that was provided on create.
func (u *ArchivementDetailUpsertBulk) UpdatePaymentCoinUsdCurrency() *ArchivementDetailUpsertBulk {
	return u.Update(func(s *ArchivementDetailUpsert) {
		s.UpdatePaymentCoinUsdCurrency()
	})
}

// ClearPaymentCoinUsdCurrency clears the value of the "payment_coin_usd_currency" field.
func (u *ArchivementDetailUpsertBulk) ClearPaymentCoinUsdCurrency() *ArchivementDetailUpsertBulk {
	return u.Update(func(s *ArchivementDetailUpsert) {
		s.ClearPaymentCoinUsdCurrency()
	})
}

// SetUnits sets the "units" field.
func (u *ArchivementDetailUpsertBulk) SetUnits(v uint32) *ArchivementDetailUpsertBulk {
	return u.Update(func(s *ArchivementDetailUpsert) {
		s.SetUnits(v)
	})
}

// AddUnits adds v to the "units" field.
func (u *ArchivementDetailUpsertBulk) AddUnits(v uint32) *ArchivementDetailUpsertBulk {
	return u.Update(func(s *ArchivementDetailUpsert) {
		s.AddUnits(v)
	})
}

// UpdateUnits sets the "units" field to the value that was provided on create.
func (u *ArchivementDetailUpsertBulk) UpdateUnits() *ArchivementDetailUpsertBulk {
	return u.Update(func(s *ArchivementDetailUpsert) {
		s.UpdateUnits()
	})
}

// ClearUnits clears the value of the "units" field.
func (u *ArchivementDetailUpsertBulk) ClearUnits() *ArchivementDetailUpsertBulk {
	return u.Update(func(s *ArchivementDetailUpsert) {
		s.ClearUnits()
	})
}

// SetUnitsV1 sets the "units_v1" field.
func (u *ArchivementDetailUpsertBulk) SetUnitsV1(v decimal.Decimal) *ArchivementDetailUpsertBulk {
	return u.Update(func(s *ArchivementDetailUpsert) {
		s.SetUnitsV1(v)
	})
}

// UpdateUnitsV1 sets the "units_v1" field to the value that was provided on create.
func (u *ArchivementDetailUpsertBulk) UpdateUnitsV1() *ArchivementDetailUpsertBulk {
	return u.Update(func(s *ArchivementDetailUpsert) {
		s.UpdateUnitsV1()
	})
}

// ClearUnitsV1 clears the value of the "units_v1" field.
func (u *ArchivementDetailUpsertBulk) ClearUnitsV1() *ArchivementDetailUpsertBulk {
	return u.Update(func(s *ArchivementDetailUpsert) {
		s.ClearUnitsV1()
	})
}

// SetAmount sets the "amount" field.
func (u *ArchivementDetailUpsertBulk) SetAmount(v decimal.Decimal) *ArchivementDetailUpsertBulk {
	return u.Update(func(s *ArchivementDetailUpsert) {
		s.SetAmount(v)
	})
}

// UpdateAmount sets the "amount" field to the value that was provided on create.
func (u *ArchivementDetailUpsertBulk) UpdateAmount() *ArchivementDetailUpsertBulk {
	return u.Update(func(s *ArchivementDetailUpsert) {
		s.UpdateAmount()
	})
}

// ClearAmount clears the value of the "amount" field.
func (u *ArchivementDetailUpsertBulk) ClearAmount() *ArchivementDetailUpsertBulk {
	return u.Update(func(s *ArchivementDetailUpsert) {
		s.ClearAmount()
	})
}

// SetUsdAmount sets the "usd_amount" field.
func (u *ArchivementDetailUpsertBulk) SetUsdAmount(v decimal.Decimal) *ArchivementDetailUpsertBulk {
	return u.Update(func(s *ArchivementDetailUpsert) {
		s.SetUsdAmount(v)
	})
}

// UpdateUsdAmount sets the "usd_amount" field to the value that was provided on create.
func (u *ArchivementDetailUpsertBulk) UpdateUsdAmount() *ArchivementDetailUpsertBulk {
	return u.Update(func(s *ArchivementDetailUpsert) {
		s.UpdateUsdAmount()
	})
}

// ClearUsdAmount clears the value of the "usd_amount" field.
func (u *ArchivementDetailUpsertBulk) ClearUsdAmount() *ArchivementDetailUpsertBulk {
	return u.Update(func(s *ArchivementDetailUpsert) {
		s.ClearUsdAmount()
	})
}

// SetCommission sets the "commission" field.
func (u *ArchivementDetailUpsertBulk) SetCommission(v decimal.Decimal) *ArchivementDetailUpsertBulk {
	return u.Update(func(s *ArchivementDetailUpsert) {
		s.SetCommission(v)
	})
}

// UpdateCommission sets the "commission" field to the value that was provided on create.
func (u *ArchivementDetailUpsertBulk) UpdateCommission() *ArchivementDetailUpsertBulk {
	return u.Update(func(s *ArchivementDetailUpsert) {
		s.UpdateCommission()
	})
}

// ClearCommission clears the value of the "commission" field.
func (u *ArchivementDetailUpsertBulk) ClearCommission() *ArchivementDetailUpsertBulk {
	return u.Update(func(s *ArchivementDetailUpsert) {
		s.ClearCommission()
	})
}

// Exec executes the query.
func (u *ArchivementDetailUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the ArchivementDetailCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ArchivementDetailCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ArchivementDetailUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
