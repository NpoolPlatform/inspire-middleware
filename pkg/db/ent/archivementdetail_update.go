// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/inspire-middleware/pkg/db/ent/archivementdetail"
	"github.com/NpoolPlatform/inspire-middleware/pkg/db/ent/predicate"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// ArchivementDetailUpdate is the builder for updating ArchivementDetail entities.
type ArchivementDetailUpdate struct {
	config
	hooks     []Hook
	mutation  *ArchivementDetailMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the ArchivementDetailUpdate builder.
func (adu *ArchivementDetailUpdate) Where(ps ...predicate.ArchivementDetail) *ArchivementDetailUpdate {
	adu.mutation.Where(ps...)
	return adu
}

// SetCreatedAt sets the "created_at" field.
func (adu *ArchivementDetailUpdate) SetCreatedAt(u uint32) *ArchivementDetailUpdate {
	adu.mutation.ResetCreatedAt()
	adu.mutation.SetCreatedAt(u)
	return adu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (adu *ArchivementDetailUpdate) SetNillableCreatedAt(u *uint32) *ArchivementDetailUpdate {
	if u != nil {
		adu.SetCreatedAt(*u)
	}
	return adu
}

// AddCreatedAt adds u to the "created_at" field.
func (adu *ArchivementDetailUpdate) AddCreatedAt(u int32) *ArchivementDetailUpdate {
	adu.mutation.AddCreatedAt(u)
	return adu
}

// SetUpdatedAt sets the "updated_at" field.
func (adu *ArchivementDetailUpdate) SetUpdatedAt(u uint32) *ArchivementDetailUpdate {
	adu.mutation.ResetUpdatedAt()
	adu.mutation.SetUpdatedAt(u)
	return adu
}

// AddUpdatedAt adds u to the "updated_at" field.
func (adu *ArchivementDetailUpdate) AddUpdatedAt(u int32) *ArchivementDetailUpdate {
	adu.mutation.AddUpdatedAt(u)
	return adu
}

// SetDeletedAt sets the "deleted_at" field.
func (adu *ArchivementDetailUpdate) SetDeletedAt(u uint32) *ArchivementDetailUpdate {
	adu.mutation.ResetDeletedAt()
	adu.mutation.SetDeletedAt(u)
	return adu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (adu *ArchivementDetailUpdate) SetNillableDeletedAt(u *uint32) *ArchivementDetailUpdate {
	if u != nil {
		adu.SetDeletedAt(*u)
	}
	return adu
}

// AddDeletedAt adds u to the "deleted_at" field.
func (adu *ArchivementDetailUpdate) AddDeletedAt(u int32) *ArchivementDetailUpdate {
	adu.mutation.AddDeletedAt(u)
	return adu
}

// SetAppID sets the "app_id" field.
func (adu *ArchivementDetailUpdate) SetAppID(u uuid.UUID) *ArchivementDetailUpdate {
	adu.mutation.SetAppID(u)
	return adu
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (adu *ArchivementDetailUpdate) SetNillableAppID(u *uuid.UUID) *ArchivementDetailUpdate {
	if u != nil {
		adu.SetAppID(*u)
	}
	return adu
}

// ClearAppID clears the value of the "app_id" field.
func (adu *ArchivementDetailUpdate) ClearAppID() *ArchivementDetailUpdate {
	adu.mutation.ClearAppID()
	return adu
}

// SetUserID sets the "user_id" field.
func (adu *ArchivementDetailUpdate) SetUserID(u uuid.UUID) *ArchivementDetailUpdate {
	adu.mutation.SetUserID(u)
	return adu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (adu *ArchivementDetailUpdate) SetNillableUserID(u *uuid.UUID) *ArchivementDetailUpdate {
	if u != nil {
		adu.SetUserID(*u)
	}
	return adu
}

// ClearUserID clears the value of the "user_id" field.
func (adu *ArchivementDetailUpdate) ClearUserID() *ArchivementDetailUpdate {
	adu.mutation.ClearUserID()
	return adu
}

// SetDirectContributorID sets the "direct_contributor_id" field.
func (adu *ArchivementDetailUpdate) SetDirectContributorID(u uuid.UUID) *ArchivementDetailUpdate {
	adu.mutation.SetDirectContributorID(u)
	return adu
}

// SetNillableDirectContributorID sets the "direct_contributor_id" field if the given value is not nil.
func (adu *ArchivementDetailUpdate) SetNillableDirectContributorID(u *uuid.UUID) *ArchivementDetailUpdate {
	if u != nil {
		adu.SetDirectContributorID(*u)
	}
	return adu
}

// ClearDirectContributorID clears the value of the "direct_contributor_id" field.
func (adu *ArchivementDetailUpdate) ClearDirectContributorID() *ArchivementDetailUpdate {
	adu.mutation.ClearDirectContributorID()
	return adu
}

// SetGoodID sets the "good_id" field.
func (adu *ArchivementDetailUpdate) SetGoodID(u uuid.UUID) *ArchivementDetailUpdate {
	adu.mutation.SetGoodID(u)
	return adu
}

// SetNillableGoodID sets the "good_id" field if the given value is not nil.
func (adu *ArchivementDetailUpdate) SetNillableGoodID(u *uuid.UUID) *ArchivementDetailUpdate {
	if u != nil {
		adu.SetGoodID(*u)
	}
	return adu
}

// ClearGoodID clears the value of the "good_id" field.
func (adu *ArchivementDetailUpdate) ClearGoodID() *ArchivementDetailUpdate {
	adu.mutation.ClearGoodID()
	return adu
}

// SetOrderID sets the "order_id" field.
func (adu *ArchivementDetailUpdate) SetOrderID(u uuid.UUID) *ArchivementDetailUpdate {
	adu.mutation.SetOrderID(u)
	return adu
}

// SetNillableOrderID sets the "order_id" field if the given value is not nil.
func (adu *ArchivementDetailUpdate) SetNillableOrderID(u *uuid.UUID) *ArchivementDetailUpdate {
	if u != nil {
		adu.SetOrderID(*u)
	}
	return adu
}

// ClearOrderID clears the value of the "order_id" field.
func (adu *ArchivementDetailUpdate) ClearOrderID() *ArchivementDetailUpdate {
	adu.mutation.ClearOrderID()
	return adu
}

// SetSelfOrder sets the "self_order" field.
func (adu *ArchivementDetailUpdate) SetSelfOrder(b bool) *ArchivementDetailUpdate {
	adu.mutation.SetSelfOrder(b)
	return adu
}

// SetNillableSelfOrder sets the "self_order" field if the given value is not nil.
func (adu *ArchivementDetailUpdate) SetNillableSelfOrder(b *bool) *ArchivementDetailUpdate {
	if b != nil {
		adu.SetSelfOrder(*b)
	}
	return adu
}

// ClearSelfOrder clears the value of the "self_order" field.
func (adu *ArchivementDetailUpdate) ClearSelfOrder() *ArchivementDetailUpdate {
	adu.mutation.ClearSelfOrder()
	return adu
}

// SetPaymentID sets the "payment_id" field.
func (adu *ArchivementDetailUpdate) SetPaymentID(u uuid.UUID) *ArchivementDetailUpdate {
	adu.mutation.SetPaymentID(u)
	return adu
}

// SetNillablePaymentID sets the "payment_id" field if the given value is not nil.
func (adu *ArchivementDetailUpdate) SetNillablePaymentID(u *uuid.UUID) *ArchivementDetailUpdate {
	if u != nil {
		adu.SetPaymentID(*u)
	}
	return adu
}

// ClearPaymentID clears the value of the "payment_id" field.
func (adu *ArchivementDetailUpdate) ClearPaymentID() *ArchivementDetailUpdate {
	adu.mutation.ClearPaymentID()
	return adu
}

// SetCoinTypeID sets the "coin_type_id" field.
func (adu *ArchivementDetailUpdate) SetCoinTypeID(u uuid.UUID) *ArchivementDetailUpdate {
	adu.mutation.SetCoinTypeID(u)
	return adu
}

// SetNillableCoinTypeID sets the "coin_type_id" field if the given value is not nil.
func (adu *ArchivementDetailUpdate) SetNillableCoinTypeID(u *uuid.UUID) *ArchivementDetailUpdate {
	if u != nil {
		adu.SetCoinTypeID(*u)
	}
	return adu
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (adu *ArchivementDetailUpdate) ClearCoinTypeID() *ArchivementDetailUpdate {
	adu.mutation.ClearCoinTypeID()
	return adu
}

// SetPaymentCoinTypeID sets the "payment_coin_type_id" field.
func (adu *ArchivementDetailUpdate) SetPaymentCoinTypeID(u uuid.UUID) *ArchivementDetailUpdate {
	adu.mutation.SetPaymentCoinTypeID(u)
	return adu
}

// SetNillablePaymentCoinTypeID sets the "payment_coin_type_id" field if the given value is not nil.
func (adu *ArchivementDetailUpdate) SetNillablePaymentCoinTypeID(u *uuid.UUID) *ArchivementDetailUpdate {
	if u != nil {
		adu.SetPaymentCoinTypeID(*u)
	}
	return adu
}

// ClearPaymentCoinTypeID clears the value of the "payment_coin_type_id" field.
func (adu *ArchivementDetailUpdate) ClearPaymentCoinTypeID() *ArchivementDetailUpdate {
	adu.mutation.ClearPaymentCoinTypeID()
	return adu
}

// SetPaymentCoinUsdCurrency sets the "payment_coin_usd_currency" field.
func (adu *ArchivementDetailUpdate) SetPaymentCoinUsdCurrency(d decimal.Decimal) *ArchivementDetailUpdate {
	adu.mutation.SetPaymentCoinUsdCurrency(d)
	return adu
}

// SetNillablePaymentCoinUsdCurrency sets the "payment_coin_usd_currency" field if the given value is not nil.
func (adu *ArchivementDetailUpdate) SetNillablePaymentCoinUsdCurrency(d *decimal.Decimal) *ArchivementDetailUpdate {
	if d != nil {
		adu.SetPaymentCoinUsdCurrency(*d)
	}
	return adu
}

// ClearPaymentCoinUsdCurrency clears the value of the "payment_coin_usd_currency" field.
func (adu *ArchivementDetailUpdate) ClearPaymentCoinUsdCurrency() *ArchivementDetailUpdate {
	adu.mutation.ClearPaymentCoinUsdCurrency()
	return adu
}

// SetUnits sets the "units" field.
func (adu *ArchivementDetailUpdate) SetUnits(u uint32) *ArchivementDetailUpdate {
	adu.mutation.ResetUnits()
	adu.mutation.SetUnits(u)
	return adu
}

// SetNillableUnits sets the "units" field if the given value is not nil.
func (adu *ArchivementDetailUpdate) SetNillableUnits(u *uint32) *ArchivementDetailUpdate {
	if u != nil {
		adu.SetUnits(*u)
	}
	return adu
}

// AddUnits adds u to the "units" field.
func (adu *ArchivementDetailUpdate) AddUnits(u int32) *ArchivementDetailUpdate {
	adu.mutation.AddUnits(u)
	return adu
}

// ClearUnits clears the value of the "units" field.
func (adu *ArchivementDetailUpdate) ClearUnits() *ArchivementDetailUpdate {
	adu.mutation.ClearUnits()
	return adu
}

// SetUnitsV1 sets the "units_v1" field.
func (adu *ArchivementDetailUpdate) SetUnitsV1(d decimal.Decimal) *ArchivementDetailUpdate {
	adu.mutation.SetUnitsV1(d)
	return adu
}

// SetNillableUnitsV1 sets the "units_v1" field if the given value is not nil.
func (adu *ArchivementDetailUpdate) SetNillableUnitsV1(d *decimal.Decimal) *ArchivementDetailUpdate {
	if d != nil {
		adu.SetUnitsV1(*d)
	}
	return adu
}

// ClearUnitsV1 clears the value of the "units_v1" field.
func (adu *ArchivementDetailUpdate) ClearUnitsV1() *ArchivementDetailUpdate {
	adu.mutation.ClearUnitsV1()
	return adu
}

// SetAmount sets the "amount" field.
func (adu *ArchivementDetailUpdate) SetAmount(d decimal.Decimal) *ArchivementDetailUpdate {
	adu.mutation.SetAmount(d)
	return adu
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (adu *ArchivementDetailUpdate) SetNillableAmount(d *decimal.Decimal) *ArchivementDetailUpdate {
	if d != nil {
		adu.SetAmount(*d)
	}
	return adu
}

// ClearAmount clears the value of the "amount" field.
func (adu *ArchivementDetailUpdate) ClearAmount() *ArchivementDetailUpdate {
	adu.mutation.ClearAmount()
	return adu
}

// SetUsdAmount sets the "usd_amount" field.
func (adu *ArchivementDetailUpdate) SetUsdAmount(d decimal.Decimal) *ArchivementDetailUpdate {
	adu.mutation.SetUsdAmount(d)
	return adu
}

// SetNillableUsdAmount sets the "usd_amount" field if the given value is not nil.
func (adu *ArchivementDetailUpdate) SetNillableUsdAmount(d *decimal.Decimal) *ArchivementDetailUpdate {
	if d != nil {
		adu.SetUsdAmount(*d)
	}
	return adu
}

// ClearUsdAmount clears the value of the "usd_amount" field.
func (adu *ArchivementDetailUpdate) ClearUsdAmount() *ArchivementDetailUpdate {
	adu.mutation.ClearUsdAmount()
	return adu
}

// SetCommission sets the "commission" field.
func (adu *ArchivementDetailUpdate) SetCommission(d decimal.Decimal) *ArchivementDetailUpdate {
	adu.mutation.SetCommission(d)
	return adu
}

// SetNillableCommission sets the "commission" field if the given value is not nil.
func (adu *ArchivementDetailUpdate) SetNillableCommission(d *decimal.Decimal) *ArchivementDetailUpdate {
	if d != nil {
		adu.SetCommission(*d)
	}
	return adu
}

// ClearCommission clears the value of the "commission" field.
func (adu *ArchivementDetailUpdate) ClearCommission() *ArchivementDetailUpdate {
	adu.mutation.ClearCommission()
	return adu
}

// Mutation returns the ArchivementDetailMutation object of the builder.
func (adu *ArchivementDetailUpdate) Mutation() *ArchivementDetailMutation {
	return adu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (adu *ArchivementDetailUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if err := adu.defaults(); err != nil {
		return 0, err
	}
	if len(adu.hooks) == 0 {
		affected, err = adu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ArchivementDetailMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			adu.mutation = mutation
			affected, err = adu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(adu.hooks) - 1; i >= 0; i-- {
			if adu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = adu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, adu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (adu *ArchivementDetailUpdate) SaveX(ctx context.Context) int {
	affected, err := adu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (adu *ArchivementDetailUpdate) Exec(ctx context.Context) error {
	_, err := adu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (adu *ArchivementDetailUpdate) ExecX(ctx context.Context) {
	if err := adu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (adu *ArchivementDetailUpdate) defaults() error {
	if _, ok := adu.mutation.UpdatedAt(); !ok {
		if archivementdetail.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized archivementdetail.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := archivementdetail.UpdateDefaultUpdatedAt()
		adu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (adu *ArchivementDetailUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ArchivementDetailUpdate {
	adu.modifiers = append(adu.modifiers, modifiers...)
	return adu
}

func (adu *ArchivementDetailUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   archivementdetail.Table,
			Columns: archivementdetail.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: archivementdetail.FieldID,
			},
		},
	}
	if ps := adu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := adu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: archivementdetail.FieldCreatedAt,
		})
	}
	if value, ok := adu.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: archivementdetail.FieldCreatedAt,
		})
	}
	if value, ok := adu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: archivementdetail.FieldUpdatedAt,
		})
	}
	if value, ok := adu.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: archivementdetail.FieldUpdatedAt,
		})
	}
	if value, ok := adu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: archivementdetail.FieldDeletedAt,
		})
	}
	if value, ok := adu.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: archivementdetail.FieldDeletedAt,
		})
	}
	if value, ok := adu.mutation.AppID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: archivementdetail.FieldAppID,
		})
	}
	if adu.mutation.AppIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: archivementdetail.FieldAppID,
		})
	}
	if value, ok := adu.mutation.UserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: archivementdetail.FieldUserID,
		})
	}
	if adu.mutation.UserIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: archivementdetail.FieldUserID,
		})
	}
	if value, ok := adu.mutation.DirectContributorID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: archivementdetail.FieldDirectContributorID,
		})
	}
	if adu.mutation.DirectContributorIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: archivementdetail.FieldDirectContributorID,
		})
	}
	if value, ok := adu.mutation.GoodID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: archivementdetail.FieldGoodID,
		})
	}
	if adu.mutation.GoodIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: archivementdetail.FieldGoodID,
		})
	}
	if value, ok := adu.mutation.OrderID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: archivementdetail.FieldOrderID,
		})
	}
	if adu.mutation.OrderIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: archivementdetail.FieldOrderID,
		})
	}
	if value, ok := adu.mutation.SelfOrder(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: archivementdetail.FieldSelfOrder,
		})
	}
	if adu.mutation.SelfOrderCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: archivementdetail.FieldSelfOrder,
		})
	}
	if value, ok := adu.mutation.PaymentID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: archivementdetail.FieldPaymentID,
		})
	}
	if adu.mutation.PaymentIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: archivementdetail.FieldPaymentID,
		})
	}
	if value, ok := adu.mutation.CoinTypeID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: archivementdetail.FieldCoinTypeID,
		})
	}
	if adu.mutation.CoinTypeIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: archivementdetail.FieldCoinTypeID,
		})
	}
	if value, ok := adu.mutation.PaymentCoinTypeID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: archivementdetail.FieldPaymentCoinTypeID,
		})
	}
	if adu.mutation.PaymentCoinTypeIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: archivementdetail.FieldPaymentCoinTypeID,
		})
	}
	if value, ok := adu.mutation.PaymentCoinUsdCurrency(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: archivementdetail.FieldPaymentCoinUsdCurrency,
		})
	}
	if adu.mutation.PaymentCoinUsdCurrencyCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Column: archivementdetail.FieldPaymentCoinUsdCurrency,
		})
	}
	if value, ok := adu.mutation.Units(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: archivementdetail.FieldUnits,
		})
	}
	if value, ok := adu.mutation.AddedUnits(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: archivementdetail.FieldUnits,
		})
	}
	if adu.mutation.UnitsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Column: archivementdetail.FieldUnits,
		})
	}
	if value, ok := adu.mutation.UnitsV1(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: archivementdetail.FieldUnitsV1,
		})
	}
	if adu.mutation.UnitsV1Cleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Column: archivementdetail.FieldUnitsV1,
		})
	}
	if value, ok := adu.mutation.Amount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: archivementdetail.FieldAmount,
		})
	}
	if adu.mutation.AmountCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Column: archivementdetail.FieldAmount,
		})
	}
	if value, ok := adu.mutation.UsdAmount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: archivementdetail.FieldUsdAmount,
		})
	}
	if adu.mutation.UsdAmountCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Column: archivementdetail.FieldUsdAmount,
		})
	}
	if value, ok := adu.mutation.Commission(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: archivementdetail.FieldCommission,
		})
	}
	if adu.mutation.CommissionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Column: archivementdetail.FieldCommission,
		})
	}
	_spec.Modifiers = adu.modifiers
	if n, err = sqlgraph.UpdateNodes(ctx, adu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{archivementdetail.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// ArchivementDetailUpdateOne is the builder for updating a single ArchivementDetail entity.
type ArchivementDetailUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *ArchivementDetailMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetCreatedAt sets the "created_at" field.
func (aduo *ArchivementDetailUpdateOne) SetCreatedAt(u uint32) *ArchivementDetailUpdateOne {
	aduo.mutation.ResetCreatedAt()
	aduo.mutation.SetCreatedAt(u)
	return aduo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (aduo *ArchivementDetailUpdateOne) SetNillableCreatedAt(u *uint32) *ArchivementDetailUpdateOne {
	if u != nil {
		aduo.SetCreatedAt(*u)
	}
	return aduo
}

// AddCreatedAt adds u to the "created_at" field.
func (aduo *ArchivementDetailUpdateOne) AddCreatedAt(u int32) *ArchivementDetailUpdateOne {
	aduo.mutation.AddCreatedAt(u)
	return aduo
}

// SetUpdatedAt sets the "updated_at" field.
func (aduo *ArchivementDetailUpdateOne) SetUpdatedAt(u uint32) *ArchivementDetailUpdateOne {
	aduo.mutation.ResetUpdatedAt()
	aduo.mutation.SetUpdatedAt(u)
	return aduo
}

// AddUpdatedAt adds u to the "updated_at" field.
func (aduo *ArchivementDetailUpdateOne) AddUpdatedAt(u int32) *ArchivementDetailUpdateOne {
	aduo.mutation.AddUpdatedAt(u)
	return aduo
}

// SetDeletedAt sets the "deleted_at" field.
func (aduo *ArchivementDetailUpdateOne) SetDeletedAt(u uint32) *ArchivementDetailUpdateOne {
	aduo.mutation.ResetDeletedAt()
	aduo.mutation.SetDeletedAt(u)
	return aduo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (aduo *ArchivementDetailUpdateOne) SetNillableDeletedAt(u *uint32) *ArchivementDetailUpdateOne {
	if u != nil {
		aduo.SetDeletedAt(*u)
	}
	return aduo
}

// AddDeletedAt adds u to the "deleted_at" field.
func (aduo *ArchivementDetailUpdateOne) AddDeletedAt(u int32) *ArchivementDetailUpdateOne {
	aduo.mutation.AddDeletedAt(u)
	return aduo
}

// SetAppID sets the "app_id" field.
func (aduo *ArchivementDetailUpdateOne) SetAppID(u uuid.UUID) *ArchivementDetailUpdateOne {
	aduo.mutation.SetAppID(u)
	return aduo
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (aduo *ArchivementDetailUpdateOne) SetNillableAppID(u *uuid.UUID) *ArchivementDetailUpdateOne {
	if u != nil {
		aduo.SetAppID(*u)
	}
	return aduo
}

// ClearAppID clears the value of the "app_id" field.
func (aduo *ArchivementDetailUpdateOne) ClearAppID() *ArchivementDetailUpdateOne {
	aduo.mutation.ClearAppID()
	return aduo
}

// SetUserID sets the "user_id" field.
func (aduo *ArchivementDetailUpdateOne) SetUserID(u uuid.UUID) *ArchivementDetailUpdateOne {
	aduo.mutation.SetUserID(u)
	return aduo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (aduo *ArchivementDetailUpdateOne) SetNillableUserID(u *uuid.UUID) *ArchivementDetailUpdateOne {
	if u != nil {
		aduo.SetUserID(*u)
	}
	return aduo
}

// ClearUserID clears the value of the "user_id" field.
func (aduo *ArchivementDetailUpdateOne) ClearUserID() *ArchivementDetailUpdateOne {
	aduo.mutation.ClearUserID()
	return aduo
}

// SetDirectContributorID sets the "direct_contributor_id" field.
func (aduo *ArchivementDetailUpdateOne) SetDirectContributorID(u uuid.UUID) *ArchivementDetailUpdateOne {
	aduo.mutation.SetDirectContributorID(u)
	return aduo
}

// SetNillableDirectContributorID sets the "direct_contributor_id" field if the given value is not nil.
func (aduo *ArchivementDetailUpdateOne) SetNillableDirectContributorID(u *uuid.UUID) *ArchivementDetailUpdateOne {
	if u != nil {
		aduo.SetDirectContributorID(*u)
	}
	return aduo
}

// ClearDirectContributorID clears the value of the "direct_contributor_id" field.
func (aduo *ArchivementDetailUpdateOne) ClearDirectContributorID() *ArchivementDetailUpdateOne {
	aduo.mutation.ClearDirectContributorID()
	return aduo
}

// SetGoodID sets the "good_id" field.
func (aduo *ArchivementDetailUpdateOne) SetGoodID(u uuid.UUID) *ArchivementDetailUpdateOne {
	aduo.mutation.SetGoodID(u)
	return aduo
}

// SetNillableGoodID sets the "good_id" field if the given value is not nil.
func (aduo *ArchivementDetailUpdateOne) SetNillableGoodID(u *uuid.UUID) *ArchivementDetailUpdateOne {
	if u != nil {
		aduo.SetGoodID(*u)
	}
	return aduo
}

// ClearGoodID clears the value of the "good_id" field.
func (aduo *ArchivementDetailUpdateOne) ClearGoodID() *ArchivementDetailUpdateOne {
	aduo.mutation.ClearGoodID()
	return aduo
}

// SetOrderID sets the "order_id" field.
func (aduo *ArchivementDetailUpdateOne) SetOrderID(u uuid.UUID) *ArchivementDetailUpdateOne {
	aduo.mutation.SetOrderID(u)
	return aduo
}

// SetNillableOrderID sets the "order_id" field if the given value is not nil.
func (aduo *ArchivementDetailUpdateOne) SetNillableOrderID(u *uuid.UUID) *ArchivementDetailUpdateOne {
	if u != nil {
		aduo.SetOrderID(*u)
	}
	return aduo
}

// ClearOrderID clears the value of the "order_id" field.
func (aduo *ArchivementDetailUpdateOne) ClearOrderID() *ArchivementDetailUpdateOne {
	aduo.mutation.ClearOrderID()
	return aduo
}

// SetSelfOrder sets the "self_order" field.
func (aduo *ArchivementDetailUpdateOne) SetSelfOrder(b bool) *ArchivementDetailUpdateOne {
	aduo.mutation.SetSelfOrder(b)
	return aduo
}

// SetNillableSelfOrder sets the "self_order" field if the given value is not nil.
func (aduo *ArchivementDetailUpdateOne) SetNillableSelfOrder(b *bool) *ArchivementDetailUpdateOne {
	if b != nil {
		aduo.SetSelfOrder(*b)
	}
	return aduo
}

// ClearSelfOrder clears the value of the "self_order" field.
func (aduo *ArchivementDetailUpdateOne) ClearSelfOrder() *ArchivementDetailUpdateOne {
	aduo.mutation.ClearSelfOrder()
	return aduo
}

// SetPaymentID sets the "payment_id" field.
func (aduo *ArchivementDetailUpdateOne) SetPaymentID(u uuid.UUID) *ArchivementDetailUpdateOne {
	aduo.mutation.SetPaymentID(u)
	return aduo
}

// SetNillablePaymentID sets the "payment_id" field if the given value is not nil.
func (aduo *ArchivementDetailUpdateOne) SetNillablePaymentID(u *uuid.UUID) *ArchivementDetailUpdateOne {
	if u != nil {
		aduo.SetPaymentID(*u)
	}
	return aduo
}

// ClearPaymentID clears the value of the "payment_id" field.
func (aduo *ArchivementDetailUpdateOne) ClearPaymentID() *ArchivementDetailUpdateOne {
	aduo.mutation.ClearPaymentID()
	return aduo
}

// SetCoinTypeID sets the "coin_type_id" field.
func (aduo *ArchivementDetailUpdateOne) SetCoinTypeID(u uuid.UUID) *ArchivementDetailUpdateOne {
	aduo.mutation.SetCoinTypeID(u)
	return aduo
}

// SetNillableCoinTypeID sets the "coin_type_id" field if the given value is not nil.
func (aduo *ArchivementDetailUpdateOne) SetNillableCoinTypeID(u *uuid.UUID) *ArchivementDetailUpdateOne {
	if u != nil {
		aduo.SetCoinTypeID(*u)
	}
	return aduo
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (aduo *ArchivementDetailUpdateOne) ClearCoinTypeID() *ArchivementDetailUpdateOne {
	aduo.mutation.ClearCoinTypeID()
	return aduo
}

// SetPaymentCoinTypeID sets the "payment_coin_type_id" field.
func (aduo *ArchivementDetailUpdateOne) SetPaymentCoinTypeID(u uuid.UUID) *ArchivementDetailUpdateOne {
	aduo.mutation.SetPaymentCoinTypeID(u)
	return aduo
}

// SetNillablePaymentCoinTypeID sets the "payment_coin_type_id" field if the given value is not nil.
func (aduo *ArchivementDetailUpdateOne) SetNillablePaymentCoinTypeID(u *uuid.UUID) *ArchivementDetailUpdateOne {
	if u != nil {
		aduo.SetPaymentCoinTypeID(*u)
	}
	return aduo
}

// ClearPaymentCoinTypeID clears the value of the "payment_coin_type_id" field.
func (aduo *ArchivementDetailUpdateOne) ClearPaymentCoinTypeID() *ArchivementDetailUpdateOne {
	aduo.mutation.ClearPaymentCoinTypeID()
	return aduo
}

// SetPaymentCoinUsdCurrency sets the "payment_coin_usd_currency" field.
func (aduo *ArchivementDetailUpdateOne) SetPaymentCoinUsdCurrency(d decimal.Decimal) *ArchivementDetailUpdateOne {
	aduo.mutation.SetPaymentCoinUsdCurrency(d)
	return aduo
}

// SetNillablePaymentCoinUsdCurrency sets the "payment_coin_usd_currency" field if the given value is not nil.
func (aduo *ArchivementDetailUpdateOne) SetNillablePaymentCoinUsdCurrency(d *decimal.Decimal) *ArchivementDetailUpdateOne {
	if d != nil {
		aduo.SetPaymentCoinUsdCurrency(*d)
	}
	return aduo
}

// ClearPaymentCoinUsdCurrency clears the value of the "payment_coin_usd_currency" field.
func (aduo *ArchivementDetailUpdateOne) ClearPaymentCoinUsdCurrency() *ArchivementDetailUpdateOne {
	aduo.mutation.ClearPaymentCoinUsdCurrency()
	return aduo
}

// SetUnits sets the "units" field.
func (aduo *ArchivementDetailUpdateOne) SetUnits(u uint32) *ArchivementDetailUpdateOne {
	aduo.mutation.ResetUnits()
	aduo.mutation.SetUnits(u)
	return aduo
}

// SetNillableUnits sets the "units" field if the given value is not nil.
func (aduo *ArchivementDetailUpdateOne) SetNillableUnits(u *uint32) *ArchivementDetailUpdateOne {
	if u != nil {
		aduo.SetUnits(*u)
	}
	return aduo
}

// AddUnits adds u to the "units" field.
func (aduo *ArchivementDetailUpdateOne) AddUnits(u int32) *ArchivementDetailUpdateOne {
	aduo.mutation.AddUnits(u)
	return aduo
}

// ClearUnits clears the value of the "units" field.
func (aduo *ArchivementDetailUpdateOne) ClearUnits() *ArchivementDetailUpdateOne {
	aduo.mutation.ClearUnits()
	return aduo
}

// SetUnitsV1 sets the "units_v1" field.
func (aduo *ArchivementDetailUpdateOne) SetUnitsV1(d decimal.Decimal) *ArchivementDetailUpdateOne {
	aduo.mutation.SetUnitsV1(d)
	return aduo
}

// SetNillableUnitsV1 sets the "units_v1" field if the given value is not nil.
func (aduo *ArchivementDetailUpdateOne) SetNillableUnitsV1(d *decimal.Decimal) *ArchivementDetailUpdateOne {
	if d != nil {
		aduo.SetUnitsV1(*d)
	}
	return aduo
}

// ClearUnitsV1 clears the value of the "units_v1" field.
func (aduo *ArchivementDetailUpdateOne) ClearUnitsV1() *ArchivementDetailUpdateOne {
	aduo.mutation.ClearUnitsV1()
	return aduo
}

// SetAmount sets the "amount" field.
func (aduo *ArchivementDetailUpdateOne) SetAmount(d decimal.Decimal) *ArchivementDetailUpdateOne {
	aduo.mutation.SetAmount(d)
	return aduo
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (aduo *ArchivementDetailUpdateOne) SetNillableAmount(d *decimal.Decimal) *ArchivementDetailUpdateOne {
	if d != nil {
		aduo.SetAmount(*d)
	}
	return aduo
}

// ClearAmount clears the value of the "amount" field.
func (aduo *ArchivementDetailUpdateOne) ClearAmount() *ArchivementDetailUpdateOne {
	aduo.mutation.ClearAmount()
	return aduo
}

// SetUsdAmount sets the "usd_amount" field.
func (aduo *ArchivementDetailUpdateOne) SetUsdAmount(d decimal.Decimal) *ArchivementDetailUpdateOne {
	aduo.mutation.SetUsdAmount(d)
	return aduo
}

// SetNillableUsdAmount sets the "usd_amount" field if the given value is not nil.
func (aduo *ArchivementDetailUpdateOne) SetNillableUsdAmount(d *decimal.Decimal) *ArchivementDetailUpdateOne {
	if d != nil {
		aduo.SetUsdAmount(*d)
	}
	return aduo
}

// ClearUsdAmount clears the value of the "usd_amount" field.
func (aduo *ArchivementDetailUpdateOne) ClearUsdAmount() *ArchivementDetailUpdateOne {
	aduo.mutation.ClearUsdAmount()
	return aduo
}

// SetCommission sets the "commission" field.
func (aduo *ArchivementDetailUpdateOne) SetCommission(d decimal.Decimal) *ArchivementDetailUpdateOne {
	aduo.mutation.SetCommission(d)
	return aduo
}

// SetNillableCommission sets the "commission" field if the given value is not nil.
func (aduo *ArchivementDetailUpdateOne) SetNillableCommission(d *decimal.Decimal) *ArchivementDetailUpdateOne {
	if d != nil {
		aduo.SetCommission(*d)
	}
	return aduo
}

// ClearCommission clears the value of the "commission" field.
func (aduo *ArchivementDetailUpdateOne) ClearCommission() *ArchivementDetailUpdateOne {
	aduo.mutation.ClearCommission()
	return aduo
}

// Mutation returns the ArchivementDetailMutation object of the builder.
func (aduo *ArchivementDetailUpdateOne) Mutation() *ArchivementDetailMutation {
	return aduo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (aduo *ArchivementDetailUpdateOne) Select(field string, fields ...string) *ArchivementDetailUpdateOne {
	aduo.fields = append([]string{field}, fields...)
	return aduo
}

// Save executes the query and returns the updated ArchivementDetail entity.
func (aduo *ArchivementDetailUpdateOne) Save(ctx context.Context) (*ArchivementDetail, error) {
	var (
		err  error
		node *ArchivementDetail
	)
	if err := aduo.defaults(); err != nil {
		return nil, err
	}
	if len(aduo.hooks) == 0 {
		node, err = aduo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ArchivementDetailMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			aduo.mutation = mutation
			node, err = aduo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(aduo.hooks) - 1; i >= 0; i-- {
			if aduo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = aduo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, aduo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*ArchivementDetail)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from ArchivementDetailMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (aduo *ArchivementDetailUpdateOne) SaveX(ctx context.Context) *ArchivementDetail {
	node, err := aduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (aduo *ArchivementDetailUpdateOne) Exec(ctx context.Context) error {
	_, err := aduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aduo *ArchivementDetailUpdateOne) ExecX(ctx context.Context) {
	if err := aduo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (aduo *ArchivementDetailUpdateOne) defaults() error {
	if _, ok := aduo.mutation.UpdatedAt(); !ok {
		if archivementdetail.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized archivementdetail.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := archivementdetail.UpdateDefaultUpdatedAt()
		aduo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (aduo *ArchivementDetailUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ArchivementDetailUpdateOne {
	aduo.modifiers = append(aduo.modifiers, modifiers...)
	return aduo
}

func (aduo *ArchivementDetailUpdateOne) sqlSave(ctx context.Context) (_node *ArchivementDetail, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   archivementdetail.Table,
			Columns: archivementdetail.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: archivementdetail.FieldID,
			},
		},
	}
	id, ok := aduo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ArchivementDetail.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := aduo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, archivementdetail.FieldID)
		for _, f := range fields {
			if !archivementdetail.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != archivementdetail.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := aduo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := aduo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: archivementdetail.FieldCreatedAt,
		})
	}
	if value, ok := aduo.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: archivementdetail.FieldCreatedAt,
		})
	}
	if value, ok := aduo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: archivementdetail.FieldUpdatedAt,
		})
	}
	if value, ok := aduo.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: archivementdetail.FieldUpdatedAt,
		})
	}
	if value, ok := aduo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: archivementdetail.FieldDeletedAt,
		})
	}
	if value, ok := aduo.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: archivementdetail.FieldDeletedAt,
		})
	}
	if value, ok := aduo.mutation.AppID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: archivementdetail.FieldAppID,
		})
	}
	if aduo.mutation.AppIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: archivementdetail.FieldAppID,
		})
	}
	if value, ok := aduo.mutation.UserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: archivementdetail.FieldUserID,
		})
	}
	if aduo.mutation.UserIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: archivementdetail.FieldUserID,
		})
	}
	if value, ok := aduo.mutation.DirectContributorID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: archivementdetail.FieldDirectContributorID,
		})
	}
	if aduo.mutation.DirectContributorIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: archivementdetail.FieldDirectContributorID,
		})
	}
	if value, ok := aduo.mutation.GoodID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: archivementdetail.FieldGoodID,
		})
	}
	if aduo.mutation.GoodIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: archivementdetail.FieldGoodID,
		})
	}
	if value, ok := aduo.mutation.OrderID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: archivementdetail.FieldOrderID,
		})
	}
	if aduo.mutation.OrderIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: archivementdetail.FieldOrderID,
		})
	}
	if value, ok := aduo.mutation.SelfOrder(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: archivementdetail.FieldSelfOrder,
		})
	}
	if aduo.mutation.SelfOrderCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: archivementdetail.FieldSelfOrder,
		})
	}
	if value, ok := aduo.mutation.PaymentID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: archivementdetail.FieldPaymentID,
		})
	}
	if aduo.mutation.PaymentIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: archivementdetail.FieldPaymentID,
		})
	}
	if value, ok := aduo.mutation.CoinTypeID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: archivementdetail.FieldCoinTypeID,
		})
	}
	if aduo.mutation.CoinTypeIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: archivementdetail.FieldCoinTypeID,
		})
	}
	if value, ok := aduo.mutation.PaymentCoinTypeID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: archivementdetail.FieldPaymentCoinTypeID,
		})
	}
	if aduo.mutation.PaymentCoinTypeIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: archivementdetail.FieldPaymentCoinTypeID,
		})
	}
	if value, ok := aduo.mutation.PaymentCoinUsdCurrency(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: archivementdetail.FieldPaymentCoinUsdCurrency,
		})
	}
	if aduo.mutation.PaymentCoinUsdCurrencyCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Column: archivementdetail.FieldPaymentCoinUsdCurrency,
		})
	}
	if value, ok := aduo.mutation.Units(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: archivementdetail.FieldUnits,
		})
	}
	if value, ok := aduo.mutation.AddedUnits(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: archivementdetail.FieldUnits,
		})
	}
	if aduo.mutation.UnitsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Column: archivementdetail.FieldUnits,
		})
	}
	if value, ok := aduo.mutation.UnitsV1(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: archivementdetail.FieldUnitsV1,
		})
	}
	if aduo.mutation.UnitsV1Cleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Column: archivementdetail.FieldUnitsV1,
		})
	}
	if value, ok := aduo.mutation.Amount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: archivementdetail.FieldAmount,
		})
	}
	if aduo.mutation.AmountCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Column: archivementdetail.FieldAmount,
		})
	}
	if value, ok := aduo.mutation.UsdAmount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: archivementdetail.FieldUsdAmount,
		})
	}
	if aduo.mutation.UsdAmountCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Column: archivementdetail.FieldUsdAmount,
		})
	}
	if value, ok := aduo.mutation.Commission(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: archivementdetail.FieldCommission,
		})
	}
	if aduo.mutation.CommissionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Column: archivementdetail.FieldCommission,
		})
	}
	_spec.Modifiers = aduo.modifiers
	_node = &ArchivementDetail{config: aduo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, aduo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{archivementdetail.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
