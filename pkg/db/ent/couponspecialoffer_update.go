// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/inspire-middleware/pkg/db/ent/couponspecialoffer"
	"github.com/NpoolPlatform/inspire-middleware/pkg/db/ent/predicate"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// CouponSpecialOfferUpdate is the builder for updating CouponSpecialOffer entities.
type CouponSpecialOfferUpdate struct {
	config
	hooks    []Hook
	mutation *CouponSpecialOfferMutation
}

// Where appends a list predicates to the CouponSpecialOfferUpdate builder.
func (csou *CouponSpecialOfferUpdate) Where(ps ...predicate.CouponSpecialOffer) *CouponSpecialOfferUpdate {
	csou.mutation.Where(ps...)
	return csou
}

// SetCreatedAt sets the "created_at" field.
func (csou *CouponSpecialOfferUpdate) SetCreatedAt(u uint32) *CouponSpecialOfferUpdate {
	csou.mutation.ResetCreatedAt()
	csou.mutation.SetCreatedAt(u)
	return csou
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (csou *CouponSpecialOfferUpdate) SetNillableCreatedAt(u *uint32) *CouponSpecialOfferUpdate {
	if u != nil {
		csou.SetCreatedAt(*u)
	}
	return csou
}

// AddCreatedAt adds u to the "created_at" field.
func (csou *CouponSpecialOfferUpdate) AddCreatedAt(u int32) *CouponSpecialOfferUpdate {
	csou.mutation.AddCreatedAt(u)
	return csou
}

// SetUpdatedAt sets the "updated_at" field.
func (csou *CouponSpecialOfferUpdate) SetUpdatedAt(u uint32) *CouponSpecialOfferUpdate {
	csou.mutation.ResetUpdatedAt()
	csou.mutation.SetUpdatedAt(u)
	return csou
}

// AddUpdatedAt adds u to the "updated_at" field.
func (csou *CouponSpecialOfferUpdate) AddUpdatedAt(u int32) *CouponSpecialOfferUpdate {
	csou.mutation.AddUpdatedAt(u)
	return csou
}

// SetDeletedAt sets the "deleted_at" field.
func (csou *CouponSpecialOfferUpdate) SetDeletedAt(u uint32) *CouponSpecialOfferUpdate {
	csou.mutation.ResetDeletedAt()
	csou.mutation.SetDeletedAt(u)
	return csou
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (csou *CouponSpecialOfferUpdate) SetNillableDeletedAt(u *uint32) *CouponSpecialOfferUpdate {
	if u != nil {
		csou.SetDeletedAt(*u)
	}
	return csou
}

// AddDeletedAt adds u to the "deleted_at" field.
func (csou *CouponSpecialOfferUpdate) AddDeletedAt(u int32) *CouponSpecialOfferUpdate {
	csou.mutation.AddDeletedAt(u)
	return csou
}

// SetAppID sets the "app_id" field.
func (csou *CouponSpecialOfferUpdate) SetAppID(u uuid.UUID) *CouponSpecialOfferUpdate {
	csou.mutation.SetAppID(u)
	return csou
}

// SetUserID sets the "user_id" field.
func (csou *CouponSpecialOfferUpdate) SetUserID(u uuid.UUID) *CouponSpecialOfferUpdate {
	csou.mutation.SetUserID(u)
	return csou
}

// SetAmount sets the "amount" field.
func (csou *CouponSpecialOfferUpdate) SetAmount(d decimal.Decimal) *CouponSpecialOfferUpdate {
	csou.mutation.SetAmount(d)
	return csou
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (csou *CouponSpecialOfferUpdate) SetNillableAmount(d *decimal.Decimal) *CouponSpecialOfferUpdate {
	if d != nil {
		csou.SetAmount(*d)
	}
	return csou
}

// ClearAmount clears the value of the "amount" field.
func (csou *CouponSpecialOfferUpdate) ClearAmount() *CouponSpecialOfferUpdate {
	csou.mutation.ClearAmount()
	return csou
}

// SetReleasedByUserID sets the "released_by_user_id" field.
func (csou *CouponSpecialOfferUpdate) SetReleasedByUserID(u uuid.UUID) *CouponSpecialOfferUpdate {
	csou.mutation.SetReleasedByUserID(u)
	return csou
}

// SetStartAt sets the "start_at" field.
func (csou *CouponSpecialOfferUpdate) SetStartAt(u uint32) *CouponSpecialOfferUpdate {
	csou.mutation.ResetStartAt()
	csou.mutation.SetStartAt(u)
	return csou
}

// SetNillableStartAt sets the "start_at" field if the given value is not nil.
func (csou *CouponSpecialOfferUpdate) SetNillableStartAt(u *uint32) *CouponSpecialOfferUpdate {
	if u != nil {
		csou.SetStartAt(*u)
	}
	return csou
}

// AddStartAt adds u to the "start_at" field.
func (csou *CouponSpecialOfferUpdate) AddStartAt(u int32) *CouponSpecialOfferUpdate {
	csou.mutation.AddStartAt(u)
	return csou
}

// ClearStartAt clears the value of the "start_at" field.
func (csou *CouponSpecialOfferUpdate) ClearStartAt() *CouponSpecialOfferUpdate {
	csou.mutation.ClearStartAt()
	return csou
}

// SetDurationDays sets the "duration_days" field.
func (csou *CouponSpecialOfferUpdate) SetDurationDays(u uint32) *CouponSpecialOfferUpdate {
	csou.mutation.ResetDurationDays()
	csou.mutation.SetDurationDays(u)
	return csou
}

// SetNillableDurationDays sets the "duration_days" field if the given value is not nil.
func (csou *CouponSpecialOfferUpdate) SetNillableDurationDays(u *uint32) *CouponSpecialOfferUpdate {
	if u != nil {
		csou.SetDurationDays(*u)
	}
	return csou
}

// AddDurationDays adds u to the "duration_days" field.
func (csou *CouponSpecialOfferUpdate) AddDurationDays(u int32) *CouponSpecialOfferUpdate {
	csou.mutation.AddDurationDays(u)
	return csou
}

// ClearDurationDays clears the value of the "duration_days" field.
func (csou *CouponSpecialOfferUpdate) ClearDurationDays() *CouponSpecialOfferUpdate {
	csou.mutation.ClearDurationDays()
	return csou
}

// SetMessage sets the "message" field.
func (csou *CouponSpecialOfferUpdate) SetMessage(s string) *CouponSpecialOfferUpdate {
	csou.mutation.SetMessage(s)
	return csou
}

// SetNillableMessage sets the "message" field if the given value is not nil.
func (csou *CouponSpecialOfferUpdate) SetNillableMessage(s *string) *CouponSpecialOfferUpdate {
	if s != nil {
		csou.SetMessage(*s)
	}
	return csou
}

// ClearMessage clears the value of the "message" field.
func (csou *CouponSpecialOfferUpdate) ClearMessage() *CouponSpecialOfferUpdate {
	csou.mutation.ClearMessage()
	return csou
}

// Mutation returns the CouponSpecialOfferMutation object of the builder.
func (csou *CouponSpecialOfferUpdate) Mutation() *CouponSpecialOfferMutation {
	return csou.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (csou *CouponSpecialOfferUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if err := csou.defaults(); err != nil {
		return 0, err
	}
	if len(csou.hooks) == 0 {
		affected, err = csou.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CouponSpecialOfferMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			csou.mutation = mutation
			affected, err = csou.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(csou.hooks) - 1; i >= 0; i-- {
			if csou.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = csou.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, csou.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (csou *CouponSpecialOfferUpdate) SaveX(ctx context.Context) int {
	affected, err := csou.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (csou *CouponSpecialOfferUpdate) Exec(ctx context.Context) error {
	_, err := csou.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (csou *CouponSpecialOfferUpdate) ExecX(ctx context.Context) {
	if err := csou.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (csou *CouponSpecialOfferUpdate) defaults() error {
	if _, ok := csou.mutation.UpdatedAt(); !ok {
		if couponspecialoffer.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized couponspecialoffer.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := couponspecialoffer.UpdateDefaultUpdatedAt()
		csou.mutation.SetUpdatedAt(v)
	}
	return nil
}

func (csou *CouponSpecialOfferUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   couponspecialoffer.Table,
			Columns: couponspecialoffer.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: couponspecialoffer.FieldID,
			},
		},
	}
	if ps := csou.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := csou.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: couponspecialoffer.FieldCreatedAt,
		})
	}
	if value, ok := csou.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: couponspecialoffer.FieldCreatedAt,
		})
	}
	if value, ok := csou.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: couponspecialoffer.FieldUpdatedAt,
		})
	}
	if value, ok := csou.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: couponspecialoffer.FieldUpdatedAt,
		})
	}
	if value, ok := csou.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: couponspecialoffer.FieldDeletedAt,
		})
	}
	if value, ok := csou.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: couponspecialoffer.FieldDeletedAt,
		})
	}
	if value, ok := csou.mutation.AppID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: couponspecialoffer.FieldAppID,
		})
	}
	if value, ok := csou.mutation.UserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: couponspecialoffer.FieldUserID,
		})
	}
	if value, ok := csou.mutation.Amount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: couponspecialoffer.FieldAmount,
		})
	}
	if csou.mutation.AmountCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Column: couponspecialoffer.FieldAmount,
		})
	}
	if value, ok := csou.mutation.ReleasedByUserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: couponspecialoffer.FieldReleasedByUserID,
		})
	}
	if value, ok := csou.mutation.StartAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: couponspecialoffer.FieldStartAt,
		})
	}
	if value, ok := csou.mutation.AddedStartAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: couponspecialoffer.FieldStartAt,
		})
	}
	if csou.mutation.StartAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Column: couponspecialoffer.FieldStartAt,
		})
	}
	if value, ok := csou.mutation.DurationDays(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: couponspecialoffer.FieldDurationDays,
		})
	}
	if value, ok := csou.mutation.AddedDurationDays(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: couponspecialoffer.FieldDurationDays,
		})
	}
	if csou.mutation.DurationDaysCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Column: couponspecialoffer.FieldDurationDays,
		})
	}
	if value, ok := csou.mutation.Message(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: couponspecialoffer.FieldMessage,
		})
	}
	if csou.mutation.MessageCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: couponspecialoffer.FieldMessage,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, csou.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{couponspecialoffer.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// CouponSpecialOfferUpdateOne is the builder for updating a single CouponSpecialOffer entity.
type CouponSpecialOfferUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CouponSpecialOfferMutation
}

// SetCreatedAt sets the "created_at" field.
func (csouo *CouponSpecialOfferUpdateOne) SetCreatedAt(u uint32) *CouponSpecialOfferUpdateOne {
	csouo.mutation.ResetCreatedAt()
	csouo.mutation.SetCreatedAt(u)
	return csouo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (csouo *CouponSpecialOfferUpdateOne) SetNillableCreatedAt(u *uint32) *CouponSpecialOfferUpdateOne {
	if u != nil {
		csouo.SetCreatedAt(*u)
	}
	return csouo
}

// AddCreatedAt adds u to the "created_at" field.
func (csouo *CouponSpecialOfferUpdateOne) AddCreatedAt(u int32) *CouponSpecialOfferUpdateOne {
	csouo.mutation.AddCreatedAt(u)
	return csouo
}

// SetUpdatedAt sets the "updated_at" field.
func (csouo *CouponSpecialOfferUpdateOne) SetUpdatedAt(u uint32) *CouponSpecialOfferUpdateOne {
	csouo.mutation.ResetUpdatedAt()
	csouo.mutation.SetUpdatedAt(u)
	return csouo
}

// AddUpdatedAt adds u to the "updated_at" field.
func (csouo *CouponSpecialOfferUpdateOne) AddUpdatedAt(u int32) *CouponSpecialOfferUpdateOne {
	csouo.mutation.AddUpdatedAt(u)
	return csouo
}

// SetDeletedAt sets the "deleted_at" field.
func (csouo *CouponSpecialOfferUpdateOne) SetDeletedAt(u uint32) *CouponSpecialOfferUpdateOne {
	csouo.mutation.ResetDeletedAt()
	csouo.mutation.SetDeletedAt(u)
	return csouo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (csouo *CouponSpecialOfferUpdateOne) SetNillableDeletedAt(u *uint32) *CouponSpecialOfferUpdateOne {
	if u != nil {
		csouo.SetDeletedAt(*u)
	}
	return csouo
}

// AddDeletedAt adds u to the "deleted_at" field.
func (csouo *CouponSpecialOfferUpdateOne) AddDeletedAt(u int32) *CouponSpecialOfferUpdateOne {
	csouo.mutation.AddDeletedAt(u)
	return csouo
}

// SetAppID sets the "app_id" field.
func (csouo *CouponSpecialOfferUpdateOne) SetAppID(u uuid.UUID) *CouponSpecialOfferUpdateOne {
	csouo.mutation.SetAppID(u)
	return csouo
}

// SetUserID sets the "user_id" field.
func (csouo *CouponSpecialOfferUpdateOne) SetUserID(u uuid.UUID) *CouponSpecialOfferUpdateOne {
	csouo.mutation.SetUserID(u)
	return csouo
}

// SetAmount sets the "amount" field.
func (csouo *CouponSpecialOfferUpdateOne) SetAmount(d decimal.Decimal) *CouponSpecialOfferUpdateOne {
	csouo.mutation.SetAmount(d)
	return csouo
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (csouo *CouponSpecialOfferUpdateOne) SetNillableAmount(d *decimal.Decimal) *CouponSpecialOfferUpdateOne {
	if d != nil {
		csouo.SetAmount(*d)
	}
	return csouo
}

// ClearAmount clears the value of the "amount" field.
func (csouo *CouponSpecialOfferUpdateOne) ClearAmount() *CouponSpecialOfferUpdateOne {
	csouo.mutation.ClearAmount()
	return csouo
}

// SetReleasedByUserID sets the "released_by_user_id" field.
func (csouo *CouponSpecialOfferUpdateOne) SetReleasedByUserID(u uuid.UUID) *CouponSpecialOfferUpdateOne {
	csouo.mutation.SetReleasedByUserID(u)
	return csouo
}

// SetStartAt sets the "start_at" field.
func (csouo *CouponSpecialOfferUpdateOne) SetStartAt(u uint32) *CouponSpecialOfferUpdateOne {
	csouo.mutation.ResetStartAt()
	csouo.mutation.SetStartAt(u)
	return csouo
}

// SetNillableStartAt sets the "start_at" field if the given value is not nil.
func (csouo *CouponSpecialOfferUpdateOne) SetNillableStartAt(u *uint32) *CouponSpecialOfferUpdateOne {
	if u != nil {
		csouo.SetStartAt(*u)
	}
	return csouo
}

// AddStartAt adds u to the "start_at" field.
func (csouo *CouponSpecialOfferUpdateOne) AddStartAt(u int32) *CouponSpecialOfferUpdateOne {
	csouo.mutation.AddStartAt(u)
	return csouo
}

// ClearStartAt clears the value of the "start_at" field.
func (csouo *CouponSpecialOfferUpdateOne) ClearStartAt() *CouponSpecialOfferUpdateOne {
	csouo.mutation.ClearStartAt()
	return csouo
}

// SetDurationDays sets the "duration_days" field.
func (csouo *CouponSpecialOfferUpdateOne) SetDurationDays(u uint32) *CouponSpecialOfferUpdateOne {
	csouo.mutation.ResetDurationDays()
	csouo.mutation.SetDurationDays(u)
	return csouo
}

// SetNillableDurationDays sets the "duration_days" field if the given value is not nil.
func (csouo *CouponSpecialOfferUpdateOne) SetNillableDurationDays(u *uint32) *CouponSpecialOfferUpdateOne {
	if u != nil {
		csouo.SetDurationDays(*u)
	}
	return csouo
}

// AddDurationDays adds u to the "duration_days" field.
func (csouo *CouponSpecialOfferUpdateOne) AddDurationDays(u int32) *CouponSpecialOfferUpdateOne {
	csouo.mutation.AddDurationDays(u)
	return csouo
}

// ClearDurationDays clears the value of the "duration_days" field.
func (csouo *CouponSpecialOfferUpdateOne) ClearDurationDays() *CouponSpecialOfferUpdateOne {
	csouo.mutation.ClearDurationDays()
	return csouo
}

// SetMessage sets the "message" field.
func (csouo *CouponSpecialOfferUpdateOne) SetMessage(s string) *CouponSpecialOfferUpdateOne {
	csouo.mutation.SetMessage(s)
	return csouo
}

// SetNillableMessage sets the "message" field if the given value is not nil.
func (csouo *CouponSpecialOfferUpdateOne) SetNillableMessage(s *string) *CouponSpecialOfferUpdateOne {
	if s != nil {
		csouo.SetMessage(*s)
	}
	return csouo
}

// ClearMessage clears the value of the "message" field.
func (csouo *CouponSpecialOfferUpdateOne) ClearMessage() *CouponSpecialOfferUpdateOne {
	csouo.mutation.ClearMessage()
	return csouo
}

// Mutation returns the CouponSpecialOfferMutation object of the builder.
func (csouo *CouponSpecialOfferUpdateOne) Mutation() *CouponSpecialOfferMutation {
	return csouo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (csouo *CouponSpecialOfferUpdateOne) Select(field string, fields ...string) *CouponSpecialOfferUpdateOne {
	csouo.fields = append([]string{field}, fields...)
	return csouo
}

// Save executes the query and returns the updated CouponSpecialOffer entity.
func (csouo *CouponSpecialOfferUpdateOne) Save(ctx context.Context) (*CouponSpecialOffer, error) {
	var (
		err  error
		node *CouponSpecialOffer
	)
	if err := csouo.defaults(); err != nil {
		return nil, err
	}
	if len(csouo.hooks) == 0 {
		node, err = csouo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CouponSpecialOfferMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			csouo.mutation = mutation
			node, err = csouo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(csouo.hooks) - 1; i >= 0; i-- {
			if csouo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = csouo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, csouo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*CouponSpecialOffer)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from CouponSpecialOfferMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (csouo *CouponSpecialOfferUpdateOne) SaveX(ctx context.Context) *CouponSpecialOffer {
	node, err := csouo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (csouo *CouponSpecialOfferUpdateOne) Exec(ctx context.Context) error {
	_, err := csouo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (csouo *CouponSpecialOfferUpdateOne) ExecX(ctx context.Context) {
	if err := csouo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (csouo *CouponSpecialOfferUpdateOne) defaults() error {
	if _, ok := csouo.mutation.UpdatedAt(); !ok {
		if couponspecialoffer.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized couponspecialoffer.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := couponspecialoffer.UpdateDefaultUpdatedAt()
		csouo.mutation.SetUpdatedAt(v)
	}
	return nil
}

func (csouo *CouponSpecialOfferUpdateOne) sqlSave(ctx context.Context) (_node *CouponSpecialOffer, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   couponspecialoffer.Table,
			Columns: couponspecialoffer.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: couponspecialoffer.FieldID,
			},
		},
	}
	id, ok := csouo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "CouponSpecialOffer.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := csouo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, couponspecialoffer.FieldID)
		for _, f := range fields {
			if !couponspecialoffer.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != couponspecialoffer.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := csouo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := csouo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: couponspecialoffer.FieldCreatedAt,
		})
	}
	if value, ok := csouo.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: couponspecialoffer.FieldCreatedAt,
		})
	}
	if value, ok := csouo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: couponspecialoffer.FieldUpdatedAt,
		})
	}
	if value, ok := csouo.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: couponspecialoffer.FieldUpdatedAt,
		})
	}
	if value, ok := csouo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: couponspecialoffer.FieldDeletedAt,
		})
	}
	if value, ok := csouo.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: couponspecialoffer.FieldDeletedAt,
		})
	}
	if value, ok := csouo.mutation.AppID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: couponspecialoffer.FieldAppID,
		})
	}
	if value, ok := csouo.mutation.UserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: couponspecialoffer.FieldUserID,
		})
	}
	if value, ok := csouo.mutation.Amount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: couponspecialoffer.FieldAmount,
		})
	}
	if csouo.mutation.AmountCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Column: couponspecialoffer.FieldAmount,
		})
	}
	if value, ok := csouo.mutation.ReleasedByUserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: couponspecialoffer.FieldReleasedByUserID,
		})
	}
	if value, ok := csouo.mutation.StartAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: couponspecialoffer.FieldStartAt,
		})
	}
	if value, ok := csouo.mutation.AddedStartAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: couponspecialoffer.FieldStartAt,
		})
	}
	if csouo.mutation.StartAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Column: couponspecialoffer.FieldStartAt,
		})
	}
	if value, ok := csouo.mutation.DurationDays(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: couponspecialoffer.FieldDurationDays,
		})
	}
	if value, ok := csouo.mutation.AddedDurationDays(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: couponspecialoffer.FieldDurationDays,
		})
	}
	if csouo.mutation.DurationDaysCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Column: couponspecialoffer.FieldDurationDays,
		})
	}
	if value, ok := csouo.mutation.Message(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: couponspecialoffer.FieldMessage,
		})
	}
	if csouo.mutation.MessageCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: couponspecialoffer.FieldMessage,
		})
	}
	_node = &CouponSpecialOffer{config: csouo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, csouo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{couponspecialoffer.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
