// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/inspire-middleware/pkg/db/ent/coupondiscount"
	"github.com/NpoolPlatform/inspire-middleware/pkg/db/ent/predicate"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// CouponDiscountUpdate is the builder for updating CouponDiscount entities.
type CouponDiscountUpdate struct {
	config
	hooks    []Hook
	mutation *CouponDiscountMutation
}

// Where appends a list predicates to the CouponDiscountUpdate builder.
func (cdu *CouponDiscountUpdate) Where(ps ...predicate.CouponDiscount) *CouponDiscountUpdate {
	cdu.mutation.Where(ps...)
	return cdu
}

// SetCreatedAt sets the "created_at" field.
func (cdu *CouponDiscountUpdate) SetCreatedAt(u uint32) *CouponDiscountUpdate {
	cdu.mutation.ResetCreatedAt()
	cdu.mutation.SetCreatedAt(u)
	return cdu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cdu *CouponDiscountUpdate) SetNillableCreatedAt(u *uint32) *CouponDiscountUpdate {
	if u != nil {
		cdu.SetCreatedAt(*u)
	}
	return cdu
}

// AddCreatedAt adds u to the "created_at" field.
func (cdu *CouponDiscountUpdate) AddCreatedAt(u int32) *CouponDiscountUpdate {
	cdu.mutation.AddCreatedAt(u)
	return cdu
}

// SetUpdatedAt sets the "updated_at" field.
func (cdu *CouponDiscountUpdate) SetUpdatedAt(u uint32) *CouponDiscountUpdate {
	cdu.mutation.ResetUpdatedAt()
	cdu.mutation.SetUpdatedAt(u)
	return cdu
}

// AddUpdatedAt adds u to the "updated_at" field.
func (cdu *CouponDiscountUpdate) AddUpdatedAt(u int32) *CouponDiscountUpdate {
	cdu.mutation.AddUpdatedAt(u)
	return cdu
}

// SetDeletedAt sets the "deleted_at" field.
func (cdu *CouponDiscountUpdate) SetDeletedAt(u uint32) *CouponDiscountUpdate {
	cdu.mutation.ResetDeletedAt()
	cdu.mutation.SetDeletedAt(u)
	return cdu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (cdu *CouponDiscountUpdate) SetNillableDeletedAt(u *uint32) *CouponDiscountUpdate {
	if u != nil {
		cdu.SetDeletedAt(*u)
	}
	return cdu
}

// AddDeletedAt adds u to the "deleted_at" field.
func (cdu *CouponDiscountUpdate) AddDeletedAt(u int32) *CouponDiscountUpdate {
	cdu.mutation.AddDeletedAt(u)
	return cdu
}

// SetAppID sets the "app_id" field.
func (cdu *CouponDiscountUpdate) SetAppID(u uuid.UUID) *CouponDiscountUpdate {
	cdu.mutation.SetAppID(u)
	return cdu
}

// SetDiscount sets the "discount" field.
func (cdu *CouponDiscountUpdate) SetDiscount(d decimal.Decimal) *CouponDiscountUpdate {
	cdu.mutation.SetDiscount(d)
	return cdu
}

// SetNillableDiscount sets the "discount" field if the given value is not nil.
func (cdu *CouponDiscountUpdate) SetNillableDiscount(d *decimal.Decimal) *CouponDiscountUpdate {
	if d != nil {
		cdu.SetDiscount(*d)
	}
	return cdu
}

// ClearDiscount clears the value of the "discount" field.
func (cdu *CouponDiscountUpdate) ClearDiscount() *CouponDiscountUpdate {
	cdu.mutation.ClearDiscount()
	return cdu
}

// SetCirculation sets the "circulation" field.
func (cdu *CouponDiscountUpdate) SetCirculation(d decimal.Decimal) *CouponDiscountUpdate {
	cdu.mutation.SetCirculation(d)
	return cdu
}

// SetNillableCirculation sets the "circulation" field if the given value is not nil.
func (cdu *CouponDiscountUpdate) SetNillableCirculation(d *decimal.Decimal) *CouponDiscountUpdate {
	if d != nil {
		cdu.SetCirculation(*d)
	}
	return cdu
}

// ClearCirculation clears the value of the "circulation" field.
func (cdu *CouponDiscountUpdate) ClearCirculation() *CouponDiscountUpdate {
	cdu.mutation.ClearCirculation()
	return cdu
}

// SetReleasedByUserID sets the "released_by_user_id" field.
func (cdu *CouponDiscountUpdate) SetReleasedByUserID(u uuid.UUID) *CouponDiscountUpdate {
	cdu.mutation.SetReleasedByUserID(u)
	return cdu
}

// SetStartAt sets the "start_at" field.
func (cdu *CouponDiscountUpdate) SetStartAt(u uint32) *CouponDiscountUpdate {
	cdu.mutation.ResetStartAt()
	cdu.mutation.SetStartAt(u)
	return cdu
}

// SetNillableStartAt sets the "start_at" field if the given value is not nil.
func (cdu *CouponDiscountUpdate) SetNillableStartAt(u *uint32) *CouponDiscountUpdate {
	if u != nil {
		cdu.SetStartAt(*u)
	}
	return cdu
}

// AddStartAt adds u to the "start_at" field.
func (cdu *CouponDiscountUpdate) AddStartAt(u int32) *CouponDiscountUpdate {
	cdu.mutation.AddStartAt(u)
	return cdu
}

// ClearStartAt clears the value of the "start_at" field.
func (cdu *CouponDiscountUpdate) ClearStartAt() *CouponDiscountUpdate {
	cdu.mutation.ClearStartAt()
	return cdu
}

// SetDurationDays sets the "duration_days" field.
func (cdu *CouponDiscountUpdate) SetDurationDays(u uint32) *CouponDiscountUpdate {
	cdu.mutation.ResetDurationDays()
	cdu.mutation.SetDurationDays(u)
	return cdu
}

// SetNillableDurationDays sets the "duration_days" field if the given value is not nil.
func (cdu *CouponDiscountUpdate) SetNillableDurationDays(u *uint32) *CouponDiscountUpdate {
	if u != nil {
		cdu.SetDurationDays(*u)
	}
	return cdu
}

// AddDurationDays adds u to the "duration_days" field.
func (cdu *CouponDiscountUpdate) AddDurationDays(u int32) *CouponDiscountUpdate {
	cdu.mutation.AddDurationDays(u)
	return cdu
}

// ClearDurationDays clears the value of the "duration_days" field.
func (cdu *CouponDiscountUpdate) ClearDurationDays() *CouponDiscountUpdate {
	cdu.mutation.ClearDurationDays()
	return cdu
}

// SetMessage sets the "message" field.
func (cdu *CouponDiscountUpdate) SetMessage(s string) *CouponDiscountUpdate {
	cdu.mutation.SetMessage(s)
	return cdu
}

// SetNillableMessage sets the "message" field if the given value is not nil.
func (cdu *CouponDiscountUpdate) SetNillableMessage(s *string) *CouponDiscountUpdate {
	if s != nil {
		cdu.SetMessage(*s)
	}
	return cdu
}

// ClearMessage clears the value of the "message" field.
func (cdu *CouponDiscountUpdate) ClearMessage() *CouponDiscountUpdate {
	cdu.mutation.ClearMessage()
	return cdu
}

// SetName sets the "name" field.
func (cdu *CouponDiscountUpdate) SetName(s string) *CouponDiscountUpdate {
	cdu.mutation.SetName(s)
	return cdu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (cdu *CouponDiscountUpdate) SetNillableName(s *string) *CouponDiscountUpdate {
	if s != nil {
		cdu.SetName(*s)
	}
	return cdu
}

// ClearName clears the value of the "name" field.
func (cdu *CouponDiscountUpdate) ClearName() *CouponDiscountUpdate {
	cdu.mutation.ClearName()
	return cdu
}

// SetAllocated sets the "allocated" field.
func (cdu *CouponDiscountUpdate) SetAllocated(u uint32) *CouponDiscountUpdate {
	cdu.mutation.ResetAllocated()
	cdu.mutation.SetAllocated(u)
	return cdu
}

// SetNillableAllocated sets the "allocated" field if the given value is not nil.
func (cdu *CouponDiscountUpdate) SetNillableAllocated(u *uint32) *CouponDiscountUpdate {
	if u != nil {
		cdu.SetAllocated(*u)
	}
	return cdu
}

// AddAllocated adds u to the "allocated" field.
func (cdu *CouponDiscountUpdate) AddAllocated(u int32) *CouponDiscountUpdate {
	cdu.mutation.AddAllocated(u)
	return cdu
}

// ClearAllocated clears the value of the "allocated" field.
func (cdu *CouponDiscountUpdate) ClearAllocated() *CouponDiscountUpdate {
	cdu.mutation.ClearAllocated()
	return cdu
}

// Mutation returns the CouponDiscountMutation object of the builder.
func (cdu *CouponDiscountUpdate) Mutation() *CouponDiscountMutation {
	return cdu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cdu *CouponDiscountUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if err := cdu.defaults(); err != nil {
		return 0, err
	}
	if len(cdu.hooks) == 0 {
		affected, err = cdu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CouponDiscountMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			cdu.mutation = mutation
			affected, err = cdu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(cdu.hooks) - 1; i >= 0; i-- {
			if cdu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cdu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cdu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (cdu *CouponDiscountUpdate) SaveX(ctx context.Context) int {
	affected, err := cdu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cdu *CouponDiscountUpdate) Exec(ctx context.Context) error {
	_, err := cdu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cdu *CouponDiscountUpdate) ExecX(ctx context.Context) {
	if err := cdu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cdu *CouponDiscountUpdate) defaults() error {
	if _, ok := cdu.mutation.UpdatedAt(); !ok {
		if coupondiscount.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized coupondiscount.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := coupondiscount.UpdateDefaultUpdatedAt()
		cdu.mutation.SetUpdatedAt(v)
	}
	return nil
}

func (cdu *CouponDiscountUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   coupondiscount.Table,
			Columns: coupondiscount.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: coupondiscount.FieldID,
			},
		},
	}
	if ps := cdu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cdu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: coupondiscount.FieldCreatedAt,
		})
	}
	if value, ok := cdu.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: coupondiscount.FieldCreatedAt,
		})
	}
	if value, ok := cdu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: coupondiscount.FieldUpdatedAt,
		})
	}
	if value, ok := cdu.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: coupondiscount.FieldUpdatedAt,
		})
	}
	if value, ok := cdu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: coupondiscount.FieldDeletedAt,
		})
	}
	if value, ok := cdu.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: coupondiscount.FieldDeletedAt,
		})
	}
	if value, ok := cdu.mutation.AppID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: coupondiscount.FieldAppID,
		})
	}
	if value, ok := cdu.mutation.Discount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: coupondiscount.FieldDiscount,
		})
	}
	if cdu.mutation.DiscountCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Column: coupondiscount.FieldDiscount,
		})
	}
	if value, ok := cdu.mutation.Circulation(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: coupondiscount.FieldCirculation,
		})
	}
	if cdu.mutation.CirculationCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Column: coupondiscount.FieldCirculation,
		})
	}
	if value, ok := cdu.mutation.ReleasedByUserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: coupondiscount.FieldReleasedByUserID,
		})
	}
	if value, ok := cdu.mutation.StartAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: coupondiscount.FieldStartAt,
		})
	}
	if value, ok := cdu.mutation.AddedStartAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: coupondiscount.FieldStartAt,
		})
	}
	if cdu.mutation.StartAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Column: coupondiscount.FieldStartAt,
		})
	}
	if value, ok := cdu.mutation.DurationDays(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: coupondiscount.FieldDurationDays,
		})
	}
	if value, ok := cdu.mutation.AddedDurationDays(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: coupondiscount.FieldDurationDays,
		})
	}
	if cdu.mutation.DurationDaysCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Column: coupondiscount.FieldDurationDays,
		})
	}
	if value, ok := cdu.mutation.Message(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: coupondiscount.FieldMessage,
		})
	}
	if cdu.mutation.MessageCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: coupondiscount.FieldMessage,
		})
	}
	if value, ok := cdu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: coupondiscount.FieldName,
		})
	}
	if cdu.mutation.NameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: coupondiscount.FieldName,
		})
	}
	if value, ok := cdu.mutation.Allocated(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: coupondiscount.FieldAllocated,
		})
	}
	if value, ok := cdu.mutation.AddedAllocated(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: coupondiscount.FieldAllocated,
		})
	}
	if cdu.mutation.AllocatedCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Column: coupondiscount.FieldAllocated,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cdu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{coupondiscount.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// CouponDiscountUpdateOne is the builder for updating a single CouponDiscount entity.
type CouponDiscountUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CouponDiscountMutation
}

// SetCreatedAt sets the "created_at" field.
func (cduo *CouponDiscountUpdateOne) SetCreatedAt(u uint32) *CouponDiscountUpdateOne {
	cduo.mutation.ResetCreatedAt()
	cduo.mutation.SetCreatedAt(u)
	return cduo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cduo *CouponDiscountUpdateOne) SetNillableCreatedAt(u *uint32) *CouponDiscountUpdateOne {
	if u != nil {
		cduo.SetCreatedAt(*u)
	}
	return cduo
}

// AddCreatedAt adds u to the "created_at" field.
func (cduo *CouponDiscountUpdateOne) AddCreatedAt(u int32) *CouponDiscountUpdateOne {
	cduo.mutation.AddCreatedAt(u)
	return cduo
}

// SetUpdatedAt sets the "updated_at" field.
func (cduo *CouponDiscountUpdateOne) SetUpdatedAt(u uint32) *CouponDiscountUpdateOne {
	cduo.mutation.ResetUpdatedAt()
	cduo.mutation.SetUpdatedAt(u)
	return cduo
}

// AddUpdatedAt adds u to the "updated_at" field.
func (cduo *CouponDiscountUpdateOne) AddUpdatedAt(u int32) *CouponDiscountUpdateOne {
	cduo.mutation.AddUpdatedAt(u)
	return cduo
}

// SetDeletedAt sets the "deleted_at" field.
func (cduo *CouponDiscountUpdateOne) SetDeletedAt(u uint32) *CouponDiscountUpdateOne {
	cduo.mutation.ResetDeletedAt()
	cduo.mutation.SetDeletedAt(u)
	return cduo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (cduo *CouponDiscountUpdateOne) SetNillableDeletedAt(u *uint32) *CouponDiscountUpdateOne {
	if u != nil {
		cduo.SetDeletedAt(*u)
	}
	return cduo
}

// AddDeletedAt adds u to the "deleted_at" field.
func (cduo *CouponDiscountUpdateOne) AddDeletedAt(u int32) *CouponDiscountUpdateOne {
	cduo.mutation.AddDeletedAt(u)
	return cduo
}

// SetAppID sets the "app_id" field.
func (cduo *CouponDiscountUpdateOne) SetAppID(u uuid.UUID) *CouponDiscountUpdateOne {
	cduo.mutation.SetAppID(u)
	return cduo
}

// SetDiscount sets the "discount" field.
func (cduo *CouponDiscountUpdateOne) SetDiscount(d decimal.Decimal) *CouponDiscountUpdateOne {
	cduo.mutation.SetDiscount(d)
	return cduo
}

// SetNillableDiscount sets the "discount" field if the given value is not nil.
func (cduo *CouponDiscountUpdateOne) SetNillableDiscount(d *decimal.Decimal) *CouponDiscountUpdateOne {
	if d != nil {
		cduo.SetDiscount(*d)
	}
	return cduo
}

// ClearDiscount clears the value of the "discount" field.
func (cduo *CouponDiscountUpdateOne) ClearDiscount() *CouponDiscountUpdateOne {
	cduo.mutation.ClearDiscount()
	return cduo
}

// SetCirculation sets the "circulation" field.
func (cduo *CouponDiscountUpdateOne) SetCirculation(d decimal.Decimal) *CouponDiscountUpdateOne {
	cduo.mutation.SetCirculation(d)
	return cduo
}

// SetNillableCirculation sets the "circulation" field if the given value is not nil.
func (cduo *CouponDiscountUpdateOne) SetNillableCirculation(d *decimal.Decimal) *CouponDiscountUpdateOne {
	if d != nil {
		cduo.SetCirculation(*d)
	}
	return cduo
}

// ClearCirculation clears the value of the "circulation" field.
func (cduo *CouponDiscountUpdateOne) ClearCirculation() *CouponDiscountUpdateOne {
	cduo.mutation.ClearCirculation()
	return cduo
}

// SetReleasedByUserID sets the "released_by_user_id" field.
func (cduo *CouponDiscountUpdateOne) SetReleasedByUserID(u uuid.UUID) *CouponDiscountUpdateOne {
	cduo.mutation.SetReleasedByUserID(u)
	return cduo
}

// SetStartAt sets the "start_at" field.
func (cduo *CouponDiscountUpdateOne) SetStartAt(u uint32) *CouponDiscountUpdateOne {
	cduo.mutation.ResetStartAt()
	cduo.mutation.SetStartAt(u)
	return cduo
}

// SetNillableStartAt sets the "start_at" field if the given value is not nil.
func (cduo *CouponDiscountUpdateOne) SetNillableStartAt(u *uint32) *CouponDiscountUpdateOne {
	if u != nil {
		cduo.SetStartAt(*u)
	}
	return cduo
}

// AddStartAt adds u to the "start_at" field.
func (cduo *CouponDiscountUpdateOne) AddStartAt(u int32) *CouponDiscountUpdateOne {
	cduo.mutation.AddStartAt(u)
	return cduo
}

// ClearStartAt clears the value of the "start_at" field.
func (cduo *CouponDiscountUpdateOne) ClearStartAt() *CouponDiscountUpdateOne {
	cduo.mutation.ClearStartAt()
	return cduo
}

// SetDurationDays sets the "duration_days" field.
func (cduo *CouponDiscountUpdateOne) SetDurationDays(u uint32) *CouponDiscountUpdateOne {
	cduo.mutation.ResetDurationDays()
	cduo.mutation.SetDurationDays(u)
	return cduo
}

// SetNillableDurationDays sets the "duration_days" field if the given value is not nil.
func (cduo *CouponDiscountUpdateOne) SetNillableDurationDays(u *uint32) *CouponDiscountUpdateOne {
	if u != nil {
		cduo.SetDurationDays(*u)
	}
	return cduo
}

// AddDurationDays adds u to the "duration_days" field.
func (cduo *CouponDiscountUpdateOne) AddDurationDays(u int32) *CouponDiscountUpdateOne {
	cduo.mutation.AddDurationDays(u)
	return cduo
}

// ClearDurationDays clears the value of the "duration_days" field.
func (cduo *CouponDiscountUpdateOne) ClearDurationDays() *CouponDiscountUpdateOne {
	cduo.mutation.ClearDurationDays()
	return cduo
}

// SetMessage sets the "message" field.
func (cduo *CouponDiscountUpdateOne) SetMessage(s string) *CouponDiscountUpdateOne {
	cduo.mutation.SetMessage(s)
	return cduo
}

// SetNillableMessage sets the "message" field if the given value is not nil.
func (cduo *CouponDiscountUpdateOne) SetNillableMessage(s *string) *CouponDiscountUpdateOne {
	if s != nil {
		cduo.SetMessage(*s)
	}
	return cduo
}

// ClearMessage clears the value of the "message" field.
func (cduo *CouponDiscountUpdateOne) ClearMessage() *CouponDiscountUpdateOne {
	cduo.mutation.ClearMessage()
	return cduo
}

// SetName sets the "name" field.
func (cduo *CouponDiscountUpdateOne) SetName(s string) *CouponDiscountUpdateOne {
	cduo.mutation.SetName(s)
	return cduo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (cduo *CouponDiscountUpdateOne) SetNillableName(s *string) *CouponDiscountUpdateOne {
	if s != nil {
		cduo.SetName(*s)
	}
	return cduo
}

// ClearName clears the value of the "name" field.
func (cduo *CouponDiscountUpdateOne) ClearName() *CouponDiscountUpdateOne {
	cduo.mutation.ClearName()
	return cduo
}

// SetAllocated sets the "allocated" field.
func (cduo *CouponDiscountUpdateOne) SetAllocated(u uint32) *CouponDiscountUpdateOne {
	cduo.mutation.ResetAllocated()
	cduo.mutation.SetAllocated(u)
	return cduo
}

// SetNillableAllocated sets the "allocated" field if the given value is not nil.
func (cduo *CouponDiscountUpdateOne) SetNillableAllocated(u *uint32) *CouponDiscountUpdateOne {
	if u != nil {
		cduo.SetAllocated(*u)
	}
	return cduo
}

// AddAllocated adds u to the "allocated" field.
func (cduo *CouponDiscountUpdateOne) AddAllocated(u int32) *CouponDiscountUpdateOne {
	cduo.mutation.AddAllocated(u)
	return cduo
}

// ClearAllocated clears the value of the "allocated" field.
func (cduo *CouponDiscountUpdateOne) ClearAllocated() *CouponDiscountUpdateOne {
	cduo.mutation.ClearAllocated()
	return cduo
}

// Mutation returns the CouponDiscountMutation object of the builder.
func (cduo *CouponDiscountUpdateOne) Mutation() *CouponDiscountMutation {
	return cduo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cduo *CouponDiscountUpdateOne) Select(field string, fields ...string) *CouponDiscountUpdateOne {
	cduo.fields = append([]string{field}, fields...)
	return cduo
}

// Save executes the query and returns the updated CouponDiscount entity.
func (cduo *CouponDiscountUpdateOne) Save(ctx context.Context) (*CouponDiscount, error) {
	var (
		err  error
		node *CouponDiscount
	)
	if err := cduo.defaults(); err != nil {
		return nil, err
	}
	if len(cduo.hooks) == 0 {
		node, err = cduo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CouponDiscountMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			cduo.mutation = mutation
			node, err = cduo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(cduo.hooks) - 1; i >= 0; i-- {
			if cduo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cduo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, cduo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*CouponDiscount)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from CouponDiscountMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (cduo *CouponDiscountUpdateOne) SaveX(ctx context.Context) *CouponDiscount {
	node, err := cduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cduo *CouponDiscountUpdateOne) Exec(ctx context.Context) error {
	_, err := cduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cduo *CouponDiscountUpdateOne) ExecX(ctx context.Context) {
	if err := cduo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cduo *CouponDiscountUpdateOne) defaults() error {
	if _, ok := cduo.mutation.UpdatedAt(); !ok {
		if coupondiscount.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized coupondiscount.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := coupondiscount.UpdateDefaultUpdatedAt()
		cduo.mutation.SetUpdatedAt(v)
	}
	return nil
}

func (cduo *CouponDiscountUpdateOne) sqlSave(ctx context.Context) (_node *CouponDiscount, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   coupondiscount.Table,
			Columns: coupondiscount.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: coupondiscount.FieldID,
			},
		},
	}
	id, ok := cduo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "CouponDiscount.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cduo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, coupondiscount.FieldID)
		for _, f := range fields {
			if !coupondiscount.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != coupondiscount.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cduo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cduo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: coupondiscount.FieldCreatedAt,
		})
	}
	if value, ok := cduo.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: coupondiscount.FieldCreatedAt,
		})
	}
	if value, ok := cduo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: coupondiscount.FieldUpdatedAt,
		})
	}
	if value, ok := cduo.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: coupondiscount.FieldUpdatedAt,
		})
	}
	if value, ok := cduo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: coupondiscount.FieldDeletedAt,
		})
	}
	if value, ok := cduo.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: coupondiscount.FieldDeletedAt,
		})
	}
	if value, ok := cduo.mutation.AppID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: coupondiscount.FieldAppID,
		})
	}
	if value, ok := cduo.mutation.Discount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: coupondiscount.FieldDiscount,
		})
	}
	if cduo.mutation.DiscountCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Column: coupondiscount.FieldDiscount,
		})
	}
	if value, ok := cduo.mutation.Circulation(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: coupondiscount.FieldCirculation,
		})
	}
	if cduo.mutation.CirculationCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Column: coupondiscount.FieldCirculation,
		})
	}
	if value, ok := cduo.mutation.ReleasedByUserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: coupondiscount.FieldReleasedByUserID,
		})
	}
	if value, ok := cduo.mutation.StartAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: coupondiscount.FieldStartAt,
		})
	}
	if value, ok := cduo.mutation.AddedStartAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: coupondiscount.FieldStartAt,
		})
	}
	if cduo.mutation.StartAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Column: coupondiscount.FieldStartAt,
		})
	}
	if value, ok := cduo.mutation.DurationDays(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: coupondiscount.FieldDurationDays,
		})
	}
	if value, ok := cduo.mutation.AddedDurationDays(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: coupondiscount.FieldDurationDays,
		})
	}
	if cduo.mutation.DurationDaysCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Column: coupondiscount.FieldDurationDays,
		})
	}
	if value, ok := cduo.mutation.Message(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: coupondiscount.FieldMessage,
		})
	}
	if cduo.mutation.MessageCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: coupondiscount.FieldMessage,
		})
	}
	if value, ok := cduo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: coupondiscount.FieldName,
		})
	}
	if cduo.mutation.NameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: coupondiscount.FieldName,
		})
	}
	if value, ok := cduo.mutation.Allocated(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: coupondiscount.FieldAllocated,
		})
	}
	if value, ok := cduo.mutation.AddedAllocated(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: coupondiscount.FieldAllocated,
		})
	}
	if cduo.mutation.AllocatedCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Column: coupondiscount.FieldAllocated,
		})
	}
	_node = &CouponDiscount{config: cduo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cduo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{coupondiscount.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
