// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/inspire-middleware/pkg/db/ent/goodcoinachievement"
	"github.com/NpoolPlatform/inspire-middleware/pkg/db/ent/predicate"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// GoodCoinAchievementUpdate is the builder for updating GoodCoinAchievement entities.
type GoodCoinAchievementUpdate struct {
	config
	hooks     []Hook
	mutation  *GoodCoinAchievementMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the GoodCoinAchievementUpdate builder.
func (gcau *GoodCoinAchievementUpdate) Where(ps ...predicate.GoodCoinAchievement) *GoodCoinAchievementUpdate {
	gcau.mutation.Where(ps...)
	return gcau
}

// SetCreatedAt sets the "created_at" field.
func (gcau *GoodCoinAchievementUpdate) SetCreatedAt(u uint32) *GoodCoinAchievementUpdate {
	gcau.mutation.ResetCreatedAt()
	gcau.mutation.SetCreatedAt(u)
	return gcau
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (gcau *GoodCoinAchievementUpdate) SetNillableCreatedAt(u *uint32) *GoodCoinAchievementUpdate {
	if u != nil {
		gcau.SetCreatedAt(*u)
	}
	return gcau
}

// AddCreatedAt adds u to the "created_at" field.
func (gcau *GoodCoinAchievementUpdate) AddCreatedAt(u int32) *GoodCoinAchievementUpdate {
	gcau.mutation.AddCreatedAt(u)
	return gcau
}

// SetUpdatedAt sets the "updated_at" field.
func (gcau *GoodCoinAchievementUpdate) SetUpdatedAt(u uint32) *GoodCoinAchievementUpdate {
	gcau.mutation.ResetUpdatedAt()
	gcau.mutation.SetUpdatedAt(u)
	return gcau
}

// AddUpdatedAt adds u to the "updated_at" field.
func (gcau *GoodCoinAchievementUpdate) AddUpdatedAt(u int32) *GoodCoinAchievementUpdate {
	gcau.mutation.AddUpdatedAt(u)
	return gcau
}

// SetDeletedAt sets the "deleted_at" field.
func (gcau *GoodCoinAchievementUpdate) SetDeletedAt(u uint32) *GoodCoinAchievementUpdate {
	gcau.mutation.ResetDeletedAt()
	gcau.mutation.SetDeletedAt(u)
	return gcau
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (gcau *GoodCoinAchievementUpdate) SetNillableDeletedAt(u *uint32) *GoodCoinAchievementUpdate {
	if u != nil {
		gcau.SetDeletedAt(*u)
	}
	return gcau
}

// AddDeletedAt adds u to the "deleted_at" field.
func (gcau *GoodCoinAchievementUpdate) AddDeletedAt(u int32) *GoodCoinAchievementUpdate {
	gcau.mutation.AddDeletedAt(u)
	return gcau
}

// SetEntID sets the "ent_id" field.
func (gcau *GoodCoinAchievementUpdate) SetEntID(u uuid.UUID) *GoodCoinAchievementUpdate {
	gcau.mutation.SetEntID(u)
	return gcau
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (gcau *GoodCoinAchievementUpdate) SetNillableEntID(u *uuid.UUID) *GoodCoinAchievementUpdate {
	if u != nil {
		gcau.SetEntID(*u)
	}
	return gcau
}

// SetAppID sets the "app_id" field.
func (gcau *GoodCoinAchievementUpdate) SetAppID(u uuid.UUID) *GoodCoinAchievementUpdate {
	gcau.mutation.SetAppID(u)
	return gcau
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (gcau *GoodCoinAchievementUpdate) SetNillableAppID(u *uuid.UUID) *GoodCoinAchievementUpdate {
	if u != nil {
		gcau.SetAppID(*u)
	}
	return gcau
}

// ClearAppID clears the value of the "app_id" field.
func (gcau *GoodCoinAchievementUpdate) ClearAppID() *GoodCoinAchievementUpdate {
	gcau.mutation.ClearAppID()
	return gcau
}

// SetUserID sets the "user_id" field.
func (gcau *GoodCoinAchievementUpdate) SetUserID(u uuid.UUID) *GoodCoinAchievementUpdate {
	gcau.mutation.SetUserID(u)
	return gcau
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (gcau *GoodCoinAchievementUpdate) SetNillableUserID(u *uuid.UUID) *GoodCoinAchievementUpdate {
	if u != nil {
		gcau.SetUserID(*u)
	}
	return gcau
}

// ClearUserID clears the value of the "user_id" field.
func (gcau *GoodCoinAchievementUpdate) ClearUserID() *GoodCoinAchievementUpdate {
	gcau.mutation.ClearUserID()
	return gcau
}

// SetGoodCoinTypeID sets the "good_coin_type_id" field.
func (gcau *GoodCoinAchievementUpdate) SetGoodCoinTypeID(u uuid.UUID) *GoodCoinAchievementUpdate {
	gcau.mutation.SetGoodCoinTypeID(u)
	return gcau
}

// SetNillableGoodCoinTypeID sets the "good_coin_type_id" field if the given value is not nil.
func (gcau *GoodCoinAchievementUpdate) SetNillableGoodCoinTypeID(u *uuid.UUID) *GoodCoinAchievementUpdate {
	if u != nil {
		gcau.SetGoodCoinTypeID(*u)
	}
	return gcau
}

// ClearGoodCoinTypeID clears the value of the "good_coin_type_id" field.
func (gcau *GoodCoinAchievementUpdate) ClearGoodCoinTypeID() *GoodCoinAchievementUpdate {
	gcau.mutation.ClearGoodCoinTypeID()
	return gcau
}

// SetTotalUnits sets the "total_units" field.
func (gcau *GoodCoinAchievementUpdate) SetTotalUnits(d decimal.Decimal) *GoodCoinAchievementUpdate {
	gcau.mutation.SetTotalUnits(d)
	return gcau
}

// SetNillableTotalUnits sets the "total_units" field if the given value is not nil.
func (gcau *GoodCoinAchievementUpdate) SetNillableTotalUnits(d *decimal.Decimal) *GoodCoinAchievementUpdate {
	if d != nil {
		gcau.SetTotalUnits(*d)
	}
	return gcau
}

// ClearTotalUnits clears the value of the "total_units" field.
func (gcau *GoodCoinAchievementUpdate) ClearTotalUnits() *GoodCoinAchievementUpdate {
	gcau.mutation.ClearTotalUnits()
	return gcau
}

// SetSelfUnits sets the "self_units" field.
func (gcau *GoodCoinAchievementUpdate) SetSelfUnits(d decimal.Decimal) *GoodCoinAchievementUpdate {
	gcau.mutation.SetSelfUnits(d)
	return gcau
}

// SetNillableSelfUnits sets the "self_units" field if the given value is not nil.
func (gcau *GoodCoinAchievementUpdate) SetNillableSelfUnits(d *decimal.Decimal) *GoodCoinAchievementUpdate {
	if d != nil {
		gcau.SetSelfUnits(*d)
	}
	return gcau
}

// ClearSelfUnits clears the value of the "self_units" field.
func (gcau *GoodCoinAchievementUpdate) ClearSelfUnits() *GoodCoinAchievementUpdate {
	gcau.mutation.ClearSelfUnits()
	return gcau
}

// SetTotalAmountUsd sets the "total_amount_usd" field.
func (gcau *GoodCoinAchievementUpdate) SetTotalAmountUsd(d decimal.Decimal) *GoodCoinAchievementUpdate {
	gcau.mutation.SetTotalAmountUsd(d)
	return gcau
}

// SetNillableTotalAmountUsd sets the "total_amount_usd" field if the given value is not nil.
func (gcau *GoodCoinAchievementUpdate) SetNillableTotalAmountUsd(d *decimal.Decimal) *GoodCoinAchievementUpdate {
	if d != nil {
		gcau.SetTotalAmountUsd(*d)
	}
	return gcau
}

// ClearTotalAmountUsd clears the value of the "total_amount_usd" field.
func (gcau *GoodCoinAchievementUpdate) ClearTotalAmountUsd() *GoodCoinAchievementUpdate {
	gcau.mutation.ClearTotalAmountUsd()
	return gcau
}

// SetSelfAmountUsd sets the "self_amount_usd" field.
func (gcau *GoodCoinAchievementUpdate) SetSelfAmountUsd(d decimal.Decimal) *GoodCoinAchievementUpdate {
	gcau.mutation.SetSelfAmountUsd(d)
	return gcau
}

// SetNillableSelfAmountUsd sets the "self_amount_usd" field if the given value is not nil.
func (gcau *GoodCoinAchievementUpdate) SetNillableSelfAmountUsd(d *decimal.Decimal) *GoodCoinAchievementUpdate {
	if d != nil {
		gcau.SetSelfAmountUsd(*d)
	}
	return gcau
}

// ClearSelfAmountUsd clears the value of the "self_amount_usd" field.
func (gcau *GoodCoinAchievementUpdate) ClearSelfAmountUsd() *GoodCoinAchievementUpdate {
	gcau.mutation.ClearSelfAmountUsd()
	return gcau
}

// SetTotalCommissionUsd sets the "total_commission_usd" field.
func (gcau *GoodCoinAchievementUpdate) SetTotalCommissionUsd(d decimal.Decimal) *GoodCoinAchievementUpdate {
	gcau.mutation.SetTotalCommissionUsd(d)
	return gcau
}

// SetNillableTotalCommissionUsd sets the "total_commission_usd" field if the given value is not nil.
func (gcau *GoodCoinAchievementUpdate) SetNillableTotalCommissionUsd(d *decimal.Decimal) *GoodCoinAchievementUpdate {
	if d != nil {
		gcau.SetTotalCommissionUsd(*d)
	}
	return gcau
}

// ClearTotalCommissionUsd clears the value of the "total_commission_usd" field.
func (gcau *GoodCoinAchievementUpdate) ClearTotalCommissionUsd() *GoodCoinAchievementUpdate {
	gcau.mutation.ClearTotalCommissionUsd()
	return gcau
}

// SetSelfCommissionUsd sets the "self_commission_usd" field.
func (gcau *GoodCoinAchievementUpdate) SetSelfCommissionUsd(d decimal.Decimal) *GoodCoinAchievementUpdate {
	gcau.mutation.SetSelfCommissionUsd(d)
	return gcau
}

// SetNillableSelfCommissionUsd sets the "self_commission_usd" field if the given value is not nil.
func (gcau *GoodCoinAchievementUpdate) SetNillableSelfCommissionUsd(d *decimal.Decimal) *GoodCoinAchievementUpdate {
	if d != nil {
		gcau.SetSelfCommissionUsd(*d)
	}
	return gcau
}

// ClearSelfCommissionUsd clears the value of the "self_commission_usd" field.
func (gcau *GoodCoinAchievementUpdate) ClearSelfCommissionUsd() *GoodCoinAchievementUpdate {
	gcau.mutation.ClearSelfCommissionUsd()
	return gcau
}

// Mutation returns the GoodCoinAchievementMutation object of the builder.
func (gcau *GoodCoinAchievementUpdate) Mutation() *GoodCoinAchievementMutation {
	return gcau.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (gcau *GoodCoinAchievementUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if err := gcau.defaults(); err != nil {
		return 0, err
	}
	if len(gcau.hooks) == 0 {
		affected, err = gcau.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*GoodCoinAchievementMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			gcau.mutation = mutation
			affected, err = gcau.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(gcau.hooks) - 1; i >= 0; i-- {
			if gcau.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = gcau.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, gcau.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (gcau *GoodCoinAchievementUpdate) SaveX(ctx context.Context) int {
	affected, err := gcau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (gcau *GoodCoinAchievementUpdate) Exec(ctx context.Context) error {
	_, err := gcau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gcau *GoodCoinAchievementUpdate) ExecX(ctx context.Context) {
	if err := gcau.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (gcau *GoodCoinAchievementUpdate) defaults() error {
	if _, ok := gcau.mutation.UpdatedAt(); !ok {
		if goodcoinachievement.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized goodcoinachievement.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := goodcoinachievement.UpdateDefaultUpdatedAt()
		gcau.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (gcau *GoodCoinAchievementUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *GoodCoinAchievementUpdate {
	gcau.modifiers = append(gcau.modifiers, modifiers...)
	return gcau
}

func (gcau *GoodCoinAchievementUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   goodcoinachievement.Table,
			Columns: goodcoinachievement.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: goodcoinachievement.FieldID,
			},
		},
	}
	if ps := gcau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := gcau.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: goodcoinachievement.FieldCreatedAt,
		})
	}
	if value, ok := gcau.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: goodcoinachievement.FieldCreatedAt,
		})
	}
	if value, ok := gcau.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: goodcoinachievement.FieldUpdatedAt,
		})
	}
	if value, ok := gcau.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: goodcoinachievement.FieldUpdatedAt,
		})
	}
	if value, ok := gcau.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: goodcoinachievement.FieldDeletedAt,
		})
	}
	if value, ok := gcau.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: goodcoinachievement.FieldDeletedAt,
		})
	}
	if value, ok := gcau.mutation.EntID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: goodcoinachievement.FieldEntID,
		})
	}
	if value, ok := gcau.mutation.AppID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: goodcoinachievement.FieldAppID,
		})
	}
	if gcau.mutation.AppIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: goodcoinachievement.FieldAppID,
		})
	}
	if value, ok := gcau.mutation.UserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: goodcoinachievement.FieldUserID,
		})
	}
	if gcau.mutation.UserIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: goodcoinachievement.FieldUserID,
		})
	}
	if value, ok := gcau.mutation.GoodCoinTypeID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: goodcoinachievement.FieldGoodCoinTypeID,
		})
	}
	if gcau.mutation.GoodCoinTypeIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: goodcoinachievement.FieldGoodCoinTypeID,
		})
	}
	if value, ok := gcau.mutation.TotalUnits(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: goodcoinachievement.FieldTotalUnits,
		})
	}
	if gcau.mutation.TotalUnitsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Column: goodcoinachievement.FieldTotalUnits,
		})
	}
	if value, ok := gcau.mutation.SelfUnits(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: goodcoinachievement.FieldSelfUnits,
		})
	}
	if gcau.mutation.SelfUnitsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Column: goodcoinachievement.FieldSelfUnits,
		})
	}
	if value, ok := gcau.mutation.TotalAmountUsd(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: goodcoinachievement.FieldTotalAmountUsd,
		})
	}
	if gcau.mutation.TotalAmountUsdCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Column: goodcoinachievement.FieldTotalAmountUsd,
		})
	}
	if value, ok := gcau.mutation.SelfAmountUsd(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: goodcoinachievement.FieldSelfAmountUsd,
		})
	}
	if gcau.mutation.SelfAmountUsdCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Column: goodcoinachievement.FieldSelfAmountUsd,
		})
	}
	if value, ok := gcau.mutation.TotalCommissionUsd(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: goodcoinachievement.FieldTotalCommissionUsd,
		})
	}
	if gcau.mutation.TotalCommissionUsdCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Column: goodcoinachievement.FieldTotalCommissionUsd,
		})
	}
	if value, ok := gcau.mutation.SelfCommissionUsd(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: goodcoinachievement.FieldSelfCommissionUsd,
		})
	}
	if gcau.mutation.SelfCommissionUsdCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Column: goodcoinachievement.FieldSelfCommissionUsd,
		})
	}
	_spec.Modifiers = gcau.modifiers
	if n, err = sqlgraph.UpdateNodes(ctx, gcau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{goodcoinachievement.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// GoodCoinAchievementUpdateOne is the builder for updating a single GoodCoinAchievement entity.
type GoodCoinAchievementUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *GoodCoinAchievementMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetCreatedAt sets the "created_at" field.
func (gcauo *GoodCoinAchievementUpdateOne) SetCreatedAt(u uint32) *GoodCoinAchievementUpdateOne {
	gcauo.mutation.ResetCreatedAt()
	gcauo.mutation.SetCreatedAt(u)
	return gcauo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (gcauo *GoodCoinAchievementUpdateOne) SetNillableCreatedAt(u *uint32) *GoodCoinAchievementUpdateOne {
	if u != nil {
		gcauo.SetCreatedAt(*u)
	}
	return gcauo
}

// AddCreatedAt adds u to the "created_at" field.
func (gcauo *GoodCoinAchievementUpdateOne) AddCreatedAt(u int32) *GoodCoinAchievementUpdateOne {
	gcauo.mutation.AddCreatedAt(u)
	return gcauo
}

// SetUpdatedAt sets the "updated_at" field.
func (gcauo *GoodCoinAchievementUpdateOne) SetUpdatedAt(u uint32) *GoodCoinAchievementUpdateOne {
	gcauo.mutation.ResetUpdatedAt()
	gcauo.mutation.SetUpdatedAt(u)
	return gcauo
}

// AddUpdatedAt adds u to the "updated_at" field.
func (gcauo *GoodCoinAchievementUpdateOne) AddUpdatedAt(u int32) *GoodCoinAchievementUpdateOne {
	gcauo.mutation.AddUpdatedAt(u)
	return gcauo
}

// SetDeletedAt sets the "deleted_at" field.
func (gcauo *GoodCoinAchievementUpdateOne) SetDeletedAt(u uint32) *GoodCoinAchievementUpdateOne {
	gcauo.mutation.ResetDeletedAt()
	gcauo.mutation.SetDeletedAt(u)
	return gcauo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (gcauo *GoodCoinAchievementUpdateOne) SetNillableDeletedAt(u *uint32) *GoodCoinAchievementUpdateOne {
	if u != nil {
		gcauo.SetDeletedAt(*u)
	}
	return gcauo
}

// AddDeletedAt adds u to the "deleted_at" field.
func (gcauo *GoodCoinAchievementUpdateOne) AddDeletedAt(u int32) *GoodCoinAchievementUpdateOne {
	gcauo.mutation.AddDeletedAt(u)
	return gcauo
}

// SetEntID sets the "ent_id" field.
func (gcauo *GoodCoinAchievementUpdateOne) SetEntID(u uuid.UUID) *GoodCoinAchievementUpdateOne {
	gcauo.mutation.SetEntID(u)
	return gcauo
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (gcauo *GoodCoinAchievementUpdateOne) SetNillableEntID(u *uuid.UUID) *GoodCoinAchievementUpdateOne {
	if u != nil {
		gcauo.SetEntID(*u)
	}
	return gcauo
}

// SetAppID sets the "app_id" field.
func (gcauo *GoodCoinAchievementUpdateOne) SetAppID(u uuid.UUID) *GoodCoinAchievementUpdateOne {
	gcauo.mutation.SetAppID(u)
	return gcauo
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (gcauo *GoodCoinAchievementUpdateOne) SetNillableAppID(u *uuid.UUID) *GoodCoinAchievementUpdateOne {
	if u != nil {
		gcauo.SetAppID(*u)
	}
	return gcauo
}

// ClearAppID clears the value of the "app_id" field.
func (gcauo *GoodCoinAchievementUpdateOne) ClearAppID() *GoodCoinAchievementUpdateOne {
	gcauo.mutation.ClearAppID()
	return gcauo
}

// SetUserID sets the "user_id" field.
func (gcauo *GoodCoinAchievementUpdateOne) SetUserID(u uuid.UUID) *GoodCoinAchievementUpdateOne {
	gcauo.mutation.SetUserID(u)
	return gcauo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (gcauo *GoodCoinAchievementUpdateOne) SetNillableUserID(u *uuid.UUID) *GoodCoinAchievementUpdateOne {
	if u != nil {
		gcauo.SetUserID(*u)
	}
	return gcauo
}

// ClearUserID clears the value of the "user_id" field.
func (gcauo *GoodCoinAchievementUpdateOne) ClearUserID() *GoodCoinAchievementUpdateOne {
	gcauo.mutation.ClearUserID()
	return gcauo
}

// SetGoodCoinTypeID sets the "good_coin_type_id" field.
func (gcauo *GoodCoinAchievementUpdateOne) SetGoodCoinTypeID(u uuid.UUID) *GoodCoinAchievementUpdateOne {
	gcauo.mutation.SetGoodCoinTypeID(u)
	return gcauo
}

// SetNillableGoodCoinTypeID sets the "good_coin_type_id" field if the given value is not nil.
func (gcauo *GoodCoinAchievementUpdateOne) SetNillableGoodCoinTypeID(u *uuid.UUID) *GoodCoinAchievementUpdateOne {
	if u != nil {
		gcauo.SetGoodCoinTypeID(*u)
	}
	return gcauo
}

// ClearGoodCoinTypeID clears the value of the "good_coin_type_id" field.
func (gcauo *GoodCoinAchievementUpdateOne) ClearGoodCoinTypeID() *GoodCoinAchievementUpdateOne {
	gcauo.mutation.ClearGoodCoinTypeID()
	return gcauo
}

// SetTotalUnits sets the "total_units" field.
func (gcauo *GoodCoinAchievementUpdateOne) SetTotalUnits(d decimal.Decimal) *GoodCoinAchievementUpdateOne {
	gcauo.mutation.SetTotalUnits(d)
	return gcauo
}

// SetNillableTotalUnits sets the "total_units" field if the given value is not nil.
func (gcauo *GoodCoinAchievementUpdateOne) SetNillableTotalUnits(d *decimal.Decimal) *GoodCoinAchievementUpdateOne {
	if d != nil {
		gcauo.SetTotalUnits(*d)
	}
	return gcauo
}

// ClearTotalUnits clears the value of the "total_units" field.
func (gcauo *GoodCoinAchievementUpdateOne) ClearTotalUnits() *GoodCoinAchievementUpdateOne {
	gcauo.mutation.ClearTotalUnits()
	return gcauo
}

// SetSelfUnits sets the "self_units" field.
func (gcauo *GoodCoinAchievementUpdateOne) SetSelfUnits(d decimal.Decimal) *GoodCoinAchievementUpdateOne {
	gcauo.mutation.SetSelfUnits(d)
	return gcauo
}

// SetNillableSelfUnits sets the "self_units" field if the given value is not nil.
func (gcauo *GoodCoinAchievementUpdateOne) SetNillableSelfUnits(d *decimal.Decimal) *GoodCoinAchievementUpdateOne {
	if d != nil {
		gcauo.SetSelfUnits(*d)
	}
	return gcauo
}

// ClearSelfUnits clears the value of the "self_units" field.
func (gcauo *GoodCoinAchievementUpdateOne) ClearSelfUnits() *GoodCoinAchievementUpdateOne {
	gcauo.mutation.ClearSelfUnits()
	return gcauo
}

// SetTotalAmountUsd sets the "total_amount_usd" field.
func (gcauo *GoodCoinAchievementUpdateOne) SetTotalAmountUsd(d decimal.Decimal) *GoodCoinAchievementUpdateOne {
	gcauo.mutation.SetTotalAmountUsd(d)
	return gcauo
}

// SetNillableTotalAmountUsd sets the "total_amount_usd" field if the given value is not nil.
func (gcauo *GoodCoinAchievementUpdateOne) SetNillableTotalAmountUsd(d *decimal.Decimal) *GoodCoinAchievementUpdateOne {
	if d != nil {
		gcauo.SetTotalAmountUsd(*d)
	}
	return gcauo
}

// ClearTotalAmountUsd clears the value of the "total_amount_usd" field.
func (gcauo *GoodCoinAchievementUpdateOne) ClearTotalAmountUsd() *GoodCoinAchievementUpdateOne {
	gcauo.mutation.ClearTotalAmountUsd()
	return gcauo
}

// SetSelfAmountUsd sets the "self_amount_usd" field.
func (gcauo *GoodCoinAchievementUpdateOne) SetSelfAmountUsd(d decimal.Decimal) *GoodCoinAchievementUpdateOne {
	gcauo.mutation.SetSelfAmountUsd(d)
	return gcauo
}

// SetNillableSelfAmountUsd sets the "self_amount_usd" field if the given value is not nil.
func (gcauo *GoodCoinAchievementUpdateOne) SetNillableSelfAmountUsd(d *decimal.Decimal) *GoodCoinAchievementUpdateOne {
	if d != nil {
		gcauo.SetSelfAmountUsd(*d)
	}
	return gcauo
}

// ClearSelfAmountUsd clears the value of the "self_amount_usd" field.
func (gcauo *GoodCoinAchievementUpdateOne) ClearSelfAmountUsd() *GoodCoinAchievementUpdateOne {
	gcauo.mutation.ClearSelfAmountUsd()
	return gcauo
}

// SetTotalCommissionUsd sets the "total_commission_usd" field.
func (gcauo *GoodCoinAchievementUpdateOne) SetTotalCommissionUsd(d decimal.Decimal) *GoodCoinAchievementUpdateOne {
	gcauo.mutation.SetTotalCommissionUsd(d)
	return gcauo
}

// SetNillableTotalCommissionUsd sets the "total_commission_usd" field if the given value is not nil.
func (gcauo *GoodCoinAchievementUpdateOne) SetNillableTotalCommissionUsd(d *decimal.Decimal) *GoodCoinAchievementUpdateOne {
	if d != nil {
		gcauo.SetTotalCommissionUsd(*d)
	}
	return gcauo
}

// ClearTotalCommissionUsd clears the value of the "total_commission_usd" field.
func (gcauo *GoodCoinAchievementUpdateOne) ClearTotalCommissionUsd() *GoodCoinAchievementUpdateOne {
	gcauo.mutation.ClearTotalCommissionUsd()
	return gcauo
}

// SetSelfCommissionUsd sets the "self_commission_usd" field.
func (gcauo *GoodCoinAchievementUpdateOne) SetSelfCommissionUsd(d decimal.Decimal) *GoodCoinAchievementUpdateOne {
	gcauo.mutation.SetSelfCommissionUsd(d)
	return gcauo
}

// SetNillableSelfCommissionUsd sets the "self_commission_usd" field if the given value is not nil.
func (gcauo *GoodCoinAchievementUpdateOne) SetNillableSelfCommissionUsd(d *decimal.Decimal) *GoodCoinAchievementUpdateOne {
	if d != nil {
		gcauo.SetSelfCommissionUsd(*d)
	}
	return gcauo
}

// ClearSelfCommissionUsd clears the value of the "self_commission_usd" field.
func (gcauo *GoodCoinAchievementUpdateOne) ClearSelfCommissionUsd() *GoodCoinAchievementUpdateOne {
	gcauo.mutation.ClearSelfCommissionUsd()
	return gcauo
}

// Mutation returns the GoodCoinAchievementMutation object of the builder.
func (gcauo *GoodCoinAchievementUpdateOne) Mutation() *GoodCoinAchievementMutation {
	return gcauo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (gcauo *GoodCoinAchievementUpdateOne) Select(field string, fields ...string) *GoodCoinAchievementUpdateOne {
	gcauo.fields = append([]string{field}, fields...)
	return gcauo
}

// Save executes the query and returns the updated GoodCoinAchievement entity.
func (gcauo *GoodCoinAchievementUpdateOne) Save(ctx context.Context) (*GoodCoinAchievement, error) {
	var (
		err  error
		node *GoodCoinAchievement
	)
	if err := gcauo.defaults(); err != nil {
		return nil, err
	}
	if len(gcauo.hooks) == 0 {
		node, err = gcauo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*GoodCoinAchievementMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			gcauo.mutation = mutation
			node, err = gcauo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(gcauo.hooks) - 1; i >= 0; i-- {
			if gcauo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = gcauo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, gcauo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*GoodCoinAchievement)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from GoodCoinAchievementMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (gcauo *GoodCoinAchievementUpdateOne) SaveX(ctx context.Context) *GoodCoinAchievement {
	node, err := gcauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (gcauo *GoodCoinAchievementUpdateOne) Exec(ctx context.Context) error {
	_, err := gcauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gcauo *GoodCoinAchievementUpdateOne) ExecX(ctx context.Context) {
	if err := gcauo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (gcauo *GoodCoinAchievementUpdateOne) defaults() error {
	if _, ok := gcauo.mutation.UpdatedAt(); !ok {
		if goodcoinachievement.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized goodcoinachievement.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := goodcoinachievement.UpdateDefaultUpdatedAt()
		gcauo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (gcauo *GoodCoinAchievementUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *GoodCoinAchievementUpdateOne {
	gcauo.modifiers = append(gcauo.modifiers, modifiers...)
	return gcauo
}

func (gcauo *GoodCoinAchievementUpdateOne) sqlSave(ctx context.Context) (_node *GoodCoinAchievement, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   goodcoinachievement.Table,
			Columns: goodcoinachievement.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: goodcoinachievement.FieldID,
			},
		},
	}
	id, ok := gcauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "GoodCoinAchievement.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := gcauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, goodcoinachievement.FieldID)
		for _, f := range fields {
			if !goodcoinachievement.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != goodcoinachievement.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := gcauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := gcauo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: goodcoinachievement.FieldCreatedAt,
		})
	}
	if value, ok := gcauo.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: goodcoinachievement.FieldCreatedAt,
		})
	}
	if value, ok := gcauo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: goodcoinachievement.FieldUpdatedAt,
		})
	}
	if value, ok := gcauo.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: goodcoinachievement.FieldUpdatedAt,
		})
	}
	if value, ok := gcauo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: goodcoinachievement.FieldDeletedAt,
		})
	}
	if value, ok := gcauo.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: goodcoinachievement.FieldDeletedAt,
		})
	}
	if value, ok := gcauo.mutation.EntID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: goodcoinachievement.FieldEntID,
		})
	}
	if value, ok := gcauo.mutation.AppID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: goodcoinachievement.FieldAppID,
		})
	}
	if gcauo.mutation.AppIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: goodcoinachievement.FieldAppID,
		})
	}
	if value, ok := gcauo.mutation.UserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: goodcoinachievement.FieldUserID,
		})
	}
	if gcauo.mutation.UserIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: goodcoinachievement.FieldUserID,
		})
	}
	if value, ok := gcauo.mutation.GoodCoinTypeID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: goodcoinachievement.FieldGoodCoinTypeID,
		})
	}
	if gcauo.mutation.GoodCoinTypeIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: goodcoinachievement.FieldGoodCoinTypeID,
		})
	}
	if value, ok := gcauo.mutation.TotalUnits(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: goodcoinachievement.FieldTotalUnits,
		})
	}
	if gcauo.mutation.TotalUnitsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Column: goodcoinachievement.FieldTotalUnits,
		})
	}
	if value, ok := gcauo.mutation.SelfUnits(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: goodcoinachievement.FieldSelfUnits,
		})
	}
	if gcauo.mutation.SelfUnitsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Column: goodcoinachievement.FieldSelfUnits,
		})
	}
	if value, ok := gcauo.mutation.TotalAmountUsd(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: goodcoinachievement.FieldTotalAmountUsd,
		})
	}
	if gcauo.mutation.TotalAmountUsdCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Column: goodcoinachievement.FieldTotalAmountUsd,
		})
	}
	if value, ok := gcauo.mutation.SelfAmountUsd(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: goodcoinachievement.FieldSelfAmountUsd,
		})
	}
	if gcauo.mutation.SelfAmountUsdCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Column: goodcoinachievement.FieldSelfAmountUsd,
		})
	}
	if value, ok := gcauo.mutation.TotalCommissionUsd(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: goodcoinachievement.FieldTotalCommissionUsd,
		})
	}
	if gcauo.mutation.TotalCommissionUsdCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Column: goodcoinachievement.FieldTotalCommissionUsd,
		})
	}
	if value, ok := gcauo.mutation.SelfCommissionUsd(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: goodcoinachievement.FieldSelfCommissionUsd,
		})
	}
	if gcauo.mutation.SelfCommissionUsdCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Column: goodcoinachievement.FieldSelfCommissionUsd,
		})
	}
	_spec.Modifiers = gcauo.modifiers
	_node = &GoodCoinAchievement{config: gcauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, gcauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{goodcoinachievement.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
