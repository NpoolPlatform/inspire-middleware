// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/inspire-middleware/pkg/db/ent/usercredithistory"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// UserCreditHistoryCreate is the builder for creating a UserCreditHistory entity.
type UserCreditHistoryCreate struct {
	config
	mutation *UserCreditHistoryMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (uchc *UserCreditHistoryCreate) SetCreatedAt(u uint32) *UserCreditHistoryCreate {
	uchc.mutation.SetCreatedAt(u)
	return uchc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (uchc *UserCreditHistoryCreate) SetNillableCreatedAt(u *uint32) *UserCreditHistoryCreate {
	if u != nil {
		uchc.SetCreatedAt(*u)
	}
	return uchc
}

// SetUpdatedAt sets the "updated_at" field.
func (uchc *UserCreditHistoryCreate) SetUpdatedAt(u uint32) *UserCreditHistoryCreate {
	uchc.mutation.SetUpdatedAt(u)
	return uchc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (uchc *UserCreditHistoryCreate) SetNillableUpdatedAt(u *uint32) *UserCreditHistoryCreate {
	if u != nil {
		uchc.SetUpdatedAt(*u)
	}
	return uchc
}

// SetDeletedAt sets the "deleted_at" field.
func (uchc *UserCreditHistoryCreate) SetDeletedAt(u uint32) *UserCreditHistoryCreate {
	uchc.mutation.SetDeletedAt(u)
	return uchc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (uchc *UserCreditHistoryCreate) SetNillableDeletedAt(u *uint32) *UserCreditHistoryCreate {
	if u != nil {
		uchc.SetDeletedAt(*u)
	}
	return uchc
}

// SetEntID sets the "ent_id" field.
func (uchc *UserCreditHistoryCreate) SetEntID(u uuid.UUID) *UserCreditHistoryCreate {
	uchc.mutation.SetEntID(u)
	return uchc
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (uchc *UserCreditHistoryCreate) SetNillableEntID(u *uuid.UUID) *UserCreditHistoryCreate {
	if u != nil {
		uchc.SetEntID(*u)
	}
	return uchc
}

// SetAppID sets the "app_id" field.
func (uchc *UserCreditHistoryCreate) SetAppID(u uuid.UUID) *UserCreditHistoryCreate {
	uchc.mutation.SetAppID(u)
	return uchc
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (uchc *UserCreditHistoryCreate) SetNillableAppID(u *uuid.UUID) *UserCreditHistoryCreate {
	if u != nil {
		uchc.SetAppID(*u)
	}
	return uchc
}

// SetUserID sets the "user_id" field.
func (uchc *UserCreditHistoryCreate) SetUserID(u uuid.UUID) *UserCreditHistoryCreate {
	uchc.mutation.SetUserID(u)
	return uchc
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (uchc *UserCreditHistoryCreate) SetNillableUserID(u *uuid.UUID) *UserCreditHistoryCreate {
	if u != nil {
		uchc.SetUserID(*u)
	}
	return uchc
}

// SetTaskID sets the "task_id" field.
func (uchc *UserCreditHistoryCreate) SetTaskID(u uuid.UUID) *UserCreditHistoryCreate {
	uchc.mutation.SetTaskID(u)
	return uchc
}

// SetNillableTaskID sets the "task_id" field if the given value is not nil.
func (uchc *UserCreditHistoryCreate) SetNillableTaskID(u *uuid.UUID) *UserCreditHistoryCreate {
	if u != nil {
		uchc.SetTaskID(*u)
	}
	return uchc
}

// SetEventID sets the "event_id" field.
func (uchc *UserCreditHistoryCreate) SetEventID(u uuid.UUID) *UserCreditHistoryCreate {
	uchc.mutation.SetEventID(u)
	return uchc
}

// SetNillableEventID sets the "event_id" field if the given value is not nil.
func (uchc *UserCreditHistoryCreate) SetNillableEventID(u *uuid.UUID) *UserCreditHistoryCreate {
	if u != nil {
		uchc.SetEventID(*u)
	}
	return uchc
}

// SetCredits sets the "credits" field.
func (uchc *UserCreditHistoryCreate) SetCredits(d decimal.Decimal) *UserCreditHistoryCreate {
	uchc.mutation.SetCredits(d)
	return uchc
}

// SetNillableCredits sets the "credits" field if the given value is not nil.
func (uchc *UserCreditHistoryCreate) SetNillableCredits(d *decimal.Decimal) *UserCreditHistoryCreate {
	if d != nil {
		uchc.SetCredits(*d)
	}
	return uchc
}

// SetID sets the "id" field.
func (uchc *UserCreditHistoryCreate) SetID(u uint32) *UserCreditHistoryCreate {
	uchc.mutation.SetID(u)
	return uchc
}

// Mutation returns the UserCreditHistoryMutation object of the builder.
func (uchc *UserCreditHistoryCreate) Mutation() *UserCreditHistoryMutation {
	return uchc.mutation
}

// Save creates the UserCreditHistory in the database.
func (uchc *UserCreditHistoryCreate) Save(ctx context.Context) (*UserCreditHistory, error) {
	var (
		err  error
		node *UserCreditHistory
	)
	if err := uchc.defaults(); err != nil {
		return nil, err
	}
	if len(uchc.hooks) == 0 {
		if err = uchc.check(); err != nil {
			return nil, err
		}
		node, err = uchc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserCreditHistoryMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = uchc.check(); err != nil {
				return nil, err
			}
			uchc.mutation = mutation
			if node, err = uchc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(uchc.hooks) - 1; i >= 0; i-- {
			if uchc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = uchc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, uchc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*UserCreditHistory)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from UserCreditHistoryMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (uchc *UserCreditHistoryCreate) SaveX(ctx context.Context) *UserCreditHistory {
	v, err := uchc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (uchc *UserCreditHistoryCreate) Exec(ctx context.Context) error {
	_, err := uchc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uchc *UserCreditHistoryCreate) ExecX(ctx context.Context) {
	if err := uchc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uchc *UserCreditHistoryCreate) defaults() error {
	if _, ok := uchc.mutation.CreatedAt(); !ok {
		if usercredithistory.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized usercredithistory.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := usercredithistory.DefaultCreatedAt()
		uchc.mutation.SetCreatedAt(v)
	}
	if _, ok := uchc.mutation.UpdatedAt(); !ok {
		if usercredithistory.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized usercredithistory.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := usercredithistory.DefaultUpdatedAt()
		uchc.mutation.SetUpdatedAt(v)
	}
	if _, ok := uchc.mutation.DeletedAt(); !ok {
		if usercredithistory.DefaultDeletedAt == nil {
			return fmt.Errorf("ent: uninitialized usercredithistory.DefaultDeletedAt (forgotten import ent/runtime?)")
		}
		v := usercredithistory.DefaultDeletedAt()
		uchc.mutation.SetDeletedAt(v)
	}
	if _, ok := uchc.mutation.EntID(); !ok {
		if usercredithistory.DefaultEntID == nil {
			return fmt.Errorf("ent: uninitialized usercredithistory.DefaultEntID (forgotten import ent/runtime?)")
		}
		v := usercredithistory.DefaultEntID()
		uchc.mutation.SetEntID(v)
	}
	if _, ok := uchc.mutation.AppID(); !ok {
		if usercredithistory.DefaultAppID == nil {
			return fmt.Errorf("ent: uninitialized usercredithistory.DefaultAppID (forgotten import ent/runtime?)")
		}
		v := usercredithistory.DefaultAppID()
		uchc.mutation.SetAppID(v)
	}
	if _, ok := uchc.mutation.UserID(); !ok {
		if usercredithistory.DefaultUserID == nil {
			return fmt.Errorf("ent: uninitialized usercredithistory.DefaultUserID (forgotten import ent/runtime?)")
		}
		v := usercredithistory.DefaultUserID()
		uchc.mutation.SetUserID(v)
	}
	if _, ok := uchc.mutation.TaskID(); !ok {
		if usercredithistory.DefaultTaskID == nil {
			return fmt.Errorf("ent: uninitialized usercredithistory.DefaultTaskID (forgotten import ent/runtime?)")
		}
		v := usercredithistory.DefaultTaskID()
		uchc.mutation.SetTaskID(v)
	}
	if _, ok := uchc.mutation.EventID(); !ok {
		if usercredithistory.DefaultEventID == nil {
			return fmt.Errorf("ent: uninitialized usercredithistory.DefaultEventID (forgotten import ent/runtime?)")
		}
		v := usercredithistory.DefaultEventID()
		uchc.mutation.SetEventID(v)
	}
	if _, ok := uchc.mutation.Credits(); !ok {
		v := usercredithistory.DefaultCredits
		uchc.mutation.SetCredits(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (uchc *UserCreditHistoryCreate) check() error {
	if _, ok := uchc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "UserCreditHistory.created_at"`)}
	}
	if _, ok := uchc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "UserCreditHistory.updated_at"`)}
	}
	if _, ok := uchc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`ent: missing required field "UserCreditHistory.deleted_at"`)}
	}
	if _, ok := uchc.mutation.EntID(); !ok {
		return &ValidationError{Name: "ent_id", err: errors.New(`ent: missing required field "UserCreditHistory.ent_id"`)}
	}
	return nil
}

func (uchc *UserCreditHistoryCreate) sqlSave(ctx context.Context) (*UserCreditHistory, error) {
	_node, _spec := uchc.createSpec()
	if err := sqlgraph.CreateNode(ctx, uchc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint32(id)
	}
	return _node, nil
}

func (uchc *UserCreditHistoryCreate) createSpec() (*UserCreditHistory, *sqlgraph.CreateSpec) {
	var (
		_node = &UserCreditHistory{config: uchc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: usercredithistory.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: usercredithistory.FieldID,
			},
		}
	)
	_spec.OnConflict = uchc.conflict
	if id, ok := uchc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := uchc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: usercredithistory.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := uchc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: usercredithistory.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := uchc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: usercredithistory.FieldDeletedAt,
		})
		_node.DeletedAt = value
	}
	if value, ok := uchc.mutation.EntID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: usercredithistory.FieldEntID,
		})
		_node.EntID = value
	}
	if value, ok := uchc.mutation.AppID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: usercredithistory.FieldAppID,
		})
		_node.AppID = value
	}
	if value, ok := uchc.mutation.UserID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: usercredithistory.FieldUserID,
		})
		_node.UserID = value
	}
	if value, ok := uchc.mutation.TaskID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: usercredithistory.FieldTaskID,
		})
		_node.TaskID = value
	}
	if value, ok := uchc.mutation.EventID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: usercredithistory.FieldEventID,
		})
		_node.EventID = value
	}
	if value, ok := uchc.mutation.Credits(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: usercredithistory.FieldCredits,
		})
		_node.Credits = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.UserCreditHistory.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.UserCreditHistoryUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (uchc *UserCreditHistoryCreate) OnConflict(opts ...sql.ConflictOption) *UserCreditHistoryUpsertOne {
	uchc.conflict = opts
	return &UserCreditHistoryUpsertOne{
		create: uchc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.UserCreditHistory.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (uchc *UserCreditHistoryCreate) OnConflictColumns(columns ...string) *UserCreditHistoryUpsertOne {
	uchc.conflict = append(uchc.conflict, sql.ConflictColumns(columns...))
	return &UserCreditHistoryUpsertOne{
		create: uchc,
	}
}

type (
	// UserCreditHistoryUpsertOne is the builder for "upsert"-ing
	//  one UserCreditHistory node.
	UserCreditHistoryUpsertOne struct {
		create *UserCreditHistoryCreate
	}

	// UserCreditHistoryUpsert is the "OnConflict" setter.
	UserCreditHistoryUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *UserCreditHistoryUpsert) SetCreatedAt(v uint32) *UserCreditHistoryUpsert {
	u.Set(usercredithistory.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *UserCreditHistoryUpsert) UpdateCreatedAt() *UserCreditHistoryUpsert {
	u.SetExcluded(usercredithistory.FieldCreatedAt)
	return u
}

// AddCreatedAt adds v to the "created_at" field.
func (u *UserCreditHistoryUpsert) AddCreatedAt(v uint32) *UserCreditHistoryUpsert {
	u.Add(usercredithistory.FieldCreatedAt, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *UserCreditHistoryUpsert) SetUpdatedAt(v uint32) *UserCreditHistoryUpsert {
	u.Set(usercredithistory.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *UserCreditHistoryUpsert) UpdateUpdatedAt() *UserCreditHistoryUpsert {
	u.SetExcluded(usercredithistory.FieldUpdatedAt)
	return u
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *UserCreditHistoryUpsert) AddUpdatedAt(v uint32) *UserCreditHistoryUpsert {
	u.Add(usercredithistory.FieldUpdatedAt, v)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *UserCreditHistoryUpsert) SetDeletedAt(v uint32) *UserCreditHistoryUpsert {
	u.Set(usercredithistory.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *UserCreditHistoryUpsert) UpdateDeletedAt() *UserCreditHistoryUpsert {
	u.SetExcluded(usercredithistory.FieldDeletedAt)
	return u
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *UserCreditHistoryUpsert) AddDeletedAt(v uint32) *UserCreditHistoryUpsert {
	u.Add(usercredithistory.FieldDeletedAt, v)
	return u
}

// SetEntID sets the "ent_id" field.
func (u *UserCreditHistoryUpsert) SetEntID(v uuid.UUID) *UserCreditHistoryUpsert {
	u.Set(usercredithistory.FieldEntID, v)
	return u
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *UserCreditHistoryUpsert) UpdateEntID() *UserCreditHistoryUpsert {
	u.SetExcluded(usercredithistory.FieldEntID)
	return u
}

// SetAppID sets the "app_id" field.
func (u *UserCreditHistoryUpsert) SetAppID(v uuid.UUID) *UserCreditHistoryUpsert {
	u.Set(usercredithistory.FieldAppID, v)
	return u
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *UserCreditHistoryUpsert) UpdateAppID() *UserCreditHistoryUpsert {
	u.SetExcluded(usercredithistory.FieldAppID)
	return u
}

// ClearAppID clears the value of the "app_id" field.
func (u *UserCreditHistoryUpsert) ClearAppID() *UserCreditHistoryUpsert {
	u.SetNull(usercredithistory.FieldAppID)
	return u
}

// SetUserID sets the "user_id" field.
func (u *UserCreditHistoryUpsert) SetUserID(v uuid.UUID) *UserCreditHistoryUpsert {
	u.Set(usercredithistory.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *UserCreditHistoryUpsert) UpdateUserID() *UserCreditHistoryUpsert {
	u.SetExcluded(usercredithistory.FieldUserID)
	return u
}

// ClearUserID clears the value of the "user_id" field.
func (u *UserCreditHistoryUpsert) ClearUserID() *UserCreditHistoryUpsert {
	u.SetNull(usercredithistory.FieldUserID)
	return u
}

// SetTaskID sets the "task_id" field.
func (u *UserCreditHistoryUpsert) SetTaskID(v uuid.UUID) *UserCreditHistoryUpsert {
	u.Set(usercredithistory.FieldTaskID, v)
	return u
}

// UpdateTaskID sets the "task_id" field to the value that was provided on create.
func (u *UserCreditHistoryUpsert) UpdateTaskID() *UserCreditHistoryUpsert {
	u.SetExcluded(usercredithistory.FieldTaskID)
	return u
}

// ClearTaskID clears the value of the "task_id" field.
func (u *UserCreditHistoryUpsert) ClearTaskID() *UserCreditHistoryUpsert {
	u.SetNull(usercredithistory.FieldTaskID)
	return u
}

// SetEventID sets the "event_id" field.
func (u *UserCreditHistoryUpsert) SetEventID(v uuid.UUID) *UserCreditHistoryUpsert {
	u.Set(usercredithistory.FieldEventID, v)
	return u
}

// UpdateEventID sets the "event_id" field to the value that was provided on create.
func (u *UserCreditHistoryUpsert) UpdateEventID() *UserCreditHistoryUpsert {
	u.SetExcluded(usercredithistory.FieldEventID)
	return u
}

// ClearEventID clears the value of the "event_id" field.
func (u *UserCreditHistoryUpsert) ClearEventID() *UserCreditHistoryUpsert {
	u.SetNull(usercredithistory.FieldEventID)
	return u
}

// SetCredits sets the "credits" field.
func (u *UserCreditHistoryUpsert) SetCredits(v decimal.Decimal) *UserCreditHistoryUpsert {
	u.Set(usercredithistory.FieldCredits, v)
	return u
}

// UpdateCredits sets the "credits" field to the value that was provided on create.
func (u *UserCreditHistoryUpsert) UpdateCredits() *UserCreditHistoryUpsert {
	u.SetExcluded(usercredithistory.FieldCredits)
	return u
}

// ClearCredits clears the value of the "credits" field.
func (u *UserCreditHistoryUpsert) ClearCredits() *UserCreditHistoryUpsert {
	u.SetNull(usercredithistory.FieldCredits)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.UserCreditHistory.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(usercredithistory.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *UserCreditHistoryUpsertOne) UpdateNewValues() *UserCreditHistoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(usercredithistory.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.UserCreditHistory.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *UserCreditHistoryUpsertOne) Ignore() *UserCreditHistoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *UserCreditHistoryUpsertOne) DoNothing() *UserCreditHistoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the UserCreditHistoryCreate.OnConflict
// documentation for more info.
func (u *UserCreditHistoryUpsertOne) Update(set func(*UserCreditHistoryUpsert)) *UserCreditHistoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&UserCreditHistoryUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *UserCreditHistoryUpsertOne) SetCreatedAt(v uint32) *UserCreditHistoryUpsertOne {
	return u.Update(func(s *UserCreditHistoryUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *UserCreditHistoryUpsertOne) AddCreatedAt(v uint32) *UserCreditHistoryUpsertOne {
	return u.Update(func(s *UserCreditHistoryUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *UserCreditHistoryUpsertOne) UpdateCreatedAt() *UserCreditHistoryUpsertOne {
	return u.Update(func(s *UserCreditHistoryUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *UserCreditHistoryUpsertOne) SetUpdatedAt(v uint32) *UserCreditHistoryUpsertOne {
	return u.Update(func(s *UserCreditHistoryUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *UserCreditHistoryUpsertOne) AddUpdatedAt(v uint32) *UserCreditHistoryUpsertOne {
	return u.Update(func(s *UserCreditHistoryUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *UserCreditHistoryUpsertOne) UpdateUpdatedAt() *UserCreditHistoryUpsertOne {
	return u.Update(func(s *UserCreditHistoryUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *UserCreditHistoryUpsertOne) SetDeletedAt(v uint32) *UserCreditHistoryUpsertOne {
	return u.Update(func(s *UserCreditHistoryUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *UserCreditHistoryUpsertOne) AddDeletedAt(v uint32) *UserCreditHistoryUpsertOne {
	return u.Update(func(s *UserCreditHistoryUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *UserCreditHistoryUpsertOne) UpdateDeletedAt() *UserCreditHistoryUpsertOne {
	return u.Update(func(s *UserCreditHistoryUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetEntID sets the "ent_id" field.
func (u *UserCreditHistoryUpsertOne) SetEntID(v uuid.UUID) *UserCreditHistoryUpsertOne {
	return u.Update(func(s *UserCreditHistoryUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *UserCreditHistoryUpsertOne) UpdateEntID() *UserCreditHistoryUpsertOne {
	return u.Update(func(s *UserCreditHistoryUpsert) {
		s.UpdateEntID()
	})
}

// SetAppID sets the "app_id" field.
func (u *UserCreditHistoryUpsertOne) SetAppID(v uuid.UUID) *UserCreditHistoryUpsertOne {
	return u.Update(func(s *UserCreditHistoryUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *UserCreditHistoryUpsertOne) UpdateAppID() *UserCreditHistoryUpsertOne {
	return u.Update(func(s *UserCreditHistoryUpsert) {
		s.UpdateAppID()
	})
}

// ClearAppID clears the value of the "app_id" field.
func (u *UserCreditHistoryUpsertOne) ClearAppID() *UserCreditHistoryUpsertOne {
	return u.Update(func(s *UserCreditHistoryUpsert) {
		s.ClearAppID()
	})
}

// SetUserID sets the "user_id" field.
func (u *UserCreditHistoryUpsertOne) SetUserID(v uuid.UUID) *UserCreditHistoryUpsertOne {
	return u.Update(func(s *UserCreditHistoryUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *UserCreditHistoryUpsertOne) UpdateUserID() *UserCreditHistoryUpsertOne {
	return u.Update(func(s *UserCreditHistoryUpsert) {
		s.UpdateUserID()
	})
}

// ClearUserID clears the value of the "user_id" field.
func (u *UserCreditHistoryUpsertOne) ClearUserID() *UserCreditHistoryUpsertOne {
	return u.Update(func(s *UserCreditHistoryUpsert) {
		s.ClearUserID()
	})
}

// SetTaskID sets the "task_id" field.
func (u *UserCreditHistoryUpsertOne) SetTaskID(v uuid.UUID) *UserCreditHistoryUpsertOne {
	return u.Update(func(s *UserCreditHistoryUpsert) {
		s.SetTaskID(v)
	})
}

// UpdateTaskID sets the "task_id" field to the value that was provided on create.
func (u *UserCreditHistoryUpsertOne) UpdateTaskID() *UserCreditHistoryUpsertOne {
	return u.Update(func(s *UserCreditHistoryUpsert) {
		s.UpdateTaskID()
	})
}

// ClearTaskID clears the value of the "task_id" field.
func (u *UserCreditHistoryUpsertOne) ClearTaskID() *UserCreditHistoryUpsertOne {
	return u.Update(func(s *UserCreditHistoryUpsert) {
		s.ClearTaskID()
	})
}

// SetEventID sets the "event_id" field.
func (u *UserCreditHistoryUpsertOne) SetEventID(v uuid.UUID) *UserCreditHistoryUpsertOne {
	return u.Update(func(s *UserCreditHistoryUpsert) {
		s.SetEventID(v)
	})
}

// UpdateEventID sets the "event_id" field to the value that was provided on create.
func (u *UserCreditHistoryUpsertOne) UpdateEventID() *UserCreditHistoryUpsertOne {
	return u.Update(func(s *UserCreditHistoryUpsert) {
		s.UpdateEventID()
	})
}

// ClearEventID clears the value of the "event_id" field.
func (u *UserCreditHistoryUpsertOne) ClearEventID() *UserCreditHistoryUpsertOne {
	return u.Update(func(s *UserCreditHistoryUpsert) {
		s.ClearEventID()
	})
}

// SetCredits sets the "credits" field.
func (u *UserCreditHistoryUpsertOne) SetCredits(v decimal.Decimal) *UserCreditHistoryUpsertOne {
	return u.Update(func(s *UserCreditHistoryUpsert) {
		s.SetCredits(v)
	})
}

// UpdateCredits sets the "credits" field to the value that was provided on create.
func (u *UserCreditHistoryUpsertOne) UpdateCredits() *UserCreditHistoryUpsertOne {
	return u.Update(func(s *UserCreditHistoryUpsert) {
		s.UpdateCredits()
	})
}

// ClearCredits clears the value of the "credits" field.
func (u *UserCreditHistoryUpsertOne) ClearCredits() *UserCreditHistoryUpsertOne {
	return u.Update(func(s *UserCreditHistoryUpsert) {
		s.ClearCredits()
	})
}

// Exec executes the query.
func (u *UserCreditHistoryUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for UserCreditHistoryCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *UserCreditHistoryUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *UserCreditHistoryUpsertOne) ID(ctx context.Context) (id uint32, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *UserCreditHistoryUpsertOne) IDX(ctx context.Context) uint32 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// UserCreditHistoryCreateBulk is the builder for creating many UserCreditHistory entities in bulk.
type UserCreditHistoryCreateBulk struct {
	config
	builders []*UserCreditHistoryCreate
	conflict []sql.ConflictOption
}

// Save creates the UserCreditHistory entities in the database.
func (uchcb *UserCreditHistoryCreateBulk) Save(ctx context.Context) ([]*UserCreditHistory, error) {
	specs := make([]*sqlgraph.CreateSpec, len(uchcb.builders))
	nodes := make([]*UserCreditHistory, len(uchcb.builders))
	mutators := make([]Mutator, len(uchcb.builders))
	for i := range uchcb.builders {
		func(i int, root context.Context) {
			builder := uchcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserCreditHistoryMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, uchcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = uchcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, uchcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, uchcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (uchcb *UserCreditHistoryCreateBulk) SaveX(ctx context.Context) []*UserCreditHistory {
	v, err := uchcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (uchcb *UserCreditHistoryCreateBulk) Exec(ctx context.Context) error {
	_, err := uchcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uchcb *UserCreditHistoryCreateBulk) ExecX(ctx context.Context) {
	if err := uchcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.UserCreditHistory.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.UserCreditHistoryUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (uchcb *UserCreditHistoryCreateBulk) OnConflict(opts ...sql.ConflictOption) *UserCreditHistoryUpsertBulk {
	uchcb.conflict = opts
	return &UserCreditHistoryUpsertBulk{
		create: uchcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.UserCreditHistory.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (uchcb *UserCreditHistoryCreateBulk) OnConflictColumns(columns ...string) *UserCreditHistoryUpsertBulk {
	uchcb.conflict = append(uchcb.conflict, sql.ConflictColumns(columns...))
	return &UserCreditHistoryUpsertBulk{
		create: uchcb,
	}
}

// UserCreditHistoryUpsertBulk is the builder for "upsert"-ing
// a bulk of UserCreditHistory nodes.
type UserCreditHistoryUpsertBulk struct {
	create *UserCreditHistoryCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.UserCreditHistory.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(usercredithistory.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *UserCreditHistoryUpsertBulk) UpdateNewValues() *UserCreditHistoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(usercredithistory.FieldID)
				return
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.UserCreditHistory.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *UserCreditHistoryUpsertBulk) Ignore() *UserCreditHistoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *UserCreditHistoryUpsertBulk) DoNothing() *UserCreditHistoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the UserCreditHistoryCreateBulk.OnConflict
// documentation for more info.
func (u *UserCreditHistoryUpsertBulk) Update(set func(*UserCreditHistoryUpsert)) *UserCreditHistoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&UserCreditHistoryUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *UserCreditHistoryUpsertBulk) SetCreatedAt(v uint32) *UserCreditHistoryUpsertBulk {
	return u.Update(func(s *UserCreditHistoryUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *UserCreditHistoryUpsertBulk) AddCreatedAt(v uint32) *UserCreditHistoryUpsertBulk {
	return u.Update(func(s *UserCreditHistoryUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *UserCreditHistoryUpsertBulk) UpdateCreatedAt() *UserCreditHistoryUpsertBulk {
	return u.Update(func(s *UserCreditHistoryUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *UserCreditHistoryUpsertBulk) SetUpdatedAt(v uint32) *UserCreditHistoryUpsertBulk {
	return u.Update(func(s *UserCreditHistoryUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *UserCreditHistoryUpsertBulk) AddUpdatedAt(v uint32) *UserCreditHistoryUpsertBulk {
	return u.Update(func(s *UserCreditHistoryUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *UserCreditHistoryUpsertBulk) UpdateUpdatedAt() *UserCreditHistoryUpsertBulk {
	return u.Update(func(s *UserCreditHistoryUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *UserCreditHistoryUpsertBulk) SetDeletedAt(v uint32) *UserCreditHistoryUpsertBulk {
	return u.Update(func(s *UserCreditHistoryUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *UserCreditHistoryUpsertBulk) AddDeletedAt(v uint32) *UserCreditHistoryUpsertBulk {
	return u.Update(func(s *UserCreditHistoryUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *UserCreditHistoryUpsertBulk) UpdateDeletedAt() *UserCreditHistoryUpsertBulk {
	return u.Update(func(s *UserCreditHistoryUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetEntID sets the "ent_id" field.
func (u *UserCreditHistoryUpsertBulk) SetEntID(v uuid.UUID) *UserCreditHistoryUpsertBulk {
	return u.Update(func(s *UserCreditHistoryUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *UserCreditHistoryUpsertBulk) UpdateEntID() *UserCreditHistoryUpsertBulk {
	return u.Update(func(s *UserCreditHistoryUpsert) {
		s.UpdateEntID()
	})
}

// SetAppID sets the "app_id" field.
func (u *UserCreditHistoryUpsertBulk) SetAppID(v uuid.UUID) *UserCreditHistoryUpsertBulk {
	return u.Update(func(s *UserCreditHistoryUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *UserCreditHistoryUpsertBulk) UpdateAppID() *UserCreditHistoryUpsertBulk {
	return u.Update(func(s *UserCreditHistoryUpsert) {
		s.UpdateAppID()
	})
}

// ClearAppID clears the value of the "app_id" field.
func (u *UserCreditHistoryUpsertBulk) ClearAppID() *UserCreditHistoryUpsertBulk {
	return u.Update(func(s *UserCreditHistoryUpsert) {
		s.ClearAppID()
	})
}

// SetUserID sets the "user_id" field.
func (u *UserCreditHistoryUpsertBulk) SetUserID(v uuid.UUID) *UserCreditHistoryUpsertBulk {
	return u.Update(func(s *UserCreditHistoryUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *UserCreditHistoryUpsertBulk) UpdateUserID() *UserCreditHistoryUpsertBulk {
	return u.Update(func(s *UserCreditHistoryUpsert) {
		s.UpdateUserID()
	})
}

// ClearUserID clears the value of the "user_id" field.
func (u *UserCreditHistoryUpsertBulk) ClearUserID() *UserCreditHistoryUpsertBulk {
	return u.Update(func(s *UserCreditHistoryUpsert) {
		s.ClearUserID()
	})
}

// SetTaskID sets the "task_id" field.
func (u *UserCreditHistoryUpsertBulk) SetTaskID(v uuid.UUID) *UserCreditHistoryUpsertBulk {
	return u.Update(func(s *UserCreditHistoryUpsert) {
		s.SetTaskID(v)
	})
}

// UpdateTaskID sets the "task_id" field to the value that was provided on create.
func (u *UserCreditHistoryUpsertBulk) UpdateTaskID() *UserCreditHistoryUpsertBulk {
	return u.Update(func(s *UserCreditHistoryUpsert) {
		s.UpdateTaskID()
	})
}

// ClearTaskID clears the value of the "task_id" field.
func (u *UserCreditHistoryUpsertBulk) ClearTaskID() *UserCreditHistoryUpsertBulk {
	return u.Update(func(s *UserCreditHistoryUpsert) {
		s.ClearTaskID()
	})
}

// SetEventID sets the "event_id" field.
func (u *UserCreditHistoryUpsertBulk) SetEventID(v uuid.UUID) *UserCreditHistoryUpsertBulk {
	return u.Update(func(s *UserCreditHistoryUpsert) {
		s.SetEventID(v)
	})
}

// UpdateEventID sets the "event_id" field to the value that was provided on create.
func (u *UserCreditHistoryUpsertBulk) UpdateEventID() *UserCreditHistoryUpsertBulk {
	return u.Update(func(s *UserCreditHistoryUpsert) {
		s.UpdateEventID()
	})
}

// ClearEventID clears the value of the "event_id" field.
func (u *UserCreditHistoryUpsertBulk) ClearEventID() *UserCreditHistoryUpsertBulk {
	return u.Update(func(s *UserCreditHistoryUpsert) {
		s.ClearEventID()
	})
}

// SetCredits sets the "credits" field.
func (u *UserCreditHistoryUpsertBulk) SetCredits(v decimal.Decimal) *UserCreditHistoryUpsertBulk {
	return u.Update(func(s *UserCreditHistoryUpsert) {
		s.SetCredits(v)
	})
}

// UpdateCredits sets the "credits" field to the value that was provided on create.
func (u *UserCreditHistoryUpsertBulk) UpdateCredits() *UserCreditHistoryUpsertBulk {
	return u.Update(func(s *UserCreditHistoryUpsert) {
		s.UpdateCredits()
	})
}

// ClearCredits clears the value of the "credits" field.
func (u *UserCreditHistoryUpsertBulk) ClearCredits() *UserCreditHistoryUpsertBulk {
	return u.Update(func(s *UserCreditHistoryUpsert) {
		s.ClearCredits()
	})
}

// Exec executes the query.
func (u *UserCreditHistoryUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the UserCreditHistoryCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for UserCreditHistoryCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *UserCreditHistoryUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
