// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/inspire-middleware/pkg/db/ent/usercredithistory"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// UserCreditHistory is the model entity for the UserCreditHistory schema.
type UserCreditHistory struct {
	config `json:"-"`
	// ID of the ent.
	ID uint32 `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt uint32 `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt uint32 `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt uint32 `json:"deleted_at,omitempty"`
	// EntID holds the value of the "ent_id" field.
	EntID uuid.UUID `json:"ent_id,omitempty"`
	// AppID holds the value of the "app_id" field.
	AppID uuid.UUID `json:"app_id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID uuid.UUID `json:"user_id,omitempty"`
	// TaskID holds the value of the "task_id" field.
	TaskID uuid.UUID `json:"task_id,omitempty"`
	// EventID holds the value of the "event_id" field.
	EventID uuid.UUID `json:"event_id,omitempty"`
	// Credits holds the value of the "credits" field.
	Credits decimal.Decimal `json:"credits,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UserCreditHistory) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case usercredithistory.FieldCredits:
			values[i] = new(decimal.Decimal)
		case usercredithistory.FieldID, usercredithistory.FieldCreatedAt, usercredithistory.FieldUpdatedAt, usercredithistory.FieldDeletedAt:
			values[i] = new(sql.NullInt64)
		case usercredithistory.FieldEntID, usercredithistory.FieldAppID, usercredithistory.FieldUserID, usercredithistory.FieldTaskID, usercredithistory.FieldEventID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type UserCreditHistory", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UserCreditHistory fields.
func (uch *UserCreditHistory) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case usercredithistory.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			uch.ID = uint32(value.Int64)
		case usercredithistory.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				uch.CreatedAt = uint32(value.Int64)
			}
		case usercredithistory.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				uch.UpdatedAt = uint32(value.Int64)
			}
		case usercredithistory.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				uch.DeletedAt = uint32(value.Int64)
			}
		case usercredithistory.FieldEntID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field ent_id", values[i])
			} else if value != nil {
				uch.EntID = *value
			}
		case usercredithistory.FieldAppID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field app_id", values[i])
			} else if value != nil {
				uch.AppID = *value
			}
		case usercredithistory.FieldUserID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value != nil {
				uch.UserID = *value
			}
		case usercredithistory.FieldTaskID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field task_id", values[i])
			} else if value != nil {
				uch.TaskID = *value
			}
		case usercredithistory.FieldEventID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field event_id", values[i])
			} else if value != nil {
				uch.EventID = *value
			}
		case usercredithistory.FieldCredits:
			if value, ok := values[i].(*decimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field credits", values[i])
			} else if value != nil {
				uch.Credits = *value
			}
		}
	}
	return nil
}

// Update returns a builder for updating this UserCreditHistory.
// Note that you need to call UserCreditHistory.Unwrap() before calling this method if this UserCreditHistory
// was returned from a transaction, and the transaction was committed or rolled back.
func (uch *UserCreditHistory) Update() *UserCreditHistoryUpdateOne {
	return (&UserCreditHistoryClient{config: uch.config}).UpdateOne(uch)
}

// Unwrap unwraps the UserCreditHistory entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (uch *UserCreditHistory) Unwrap() *UserCreditHistory {
	_tx, ok := uch.config.driver.(*txDriver)
	if !ok {
		panic("ent: UserCreditHistory is not a transactional entity")
	}
	uch.config.driver = _tx.drv
	return uch
}

// String implements the fmt.Stringer.
func (uch *UserCreditHistory) String() string {
	var builder strings.Builder
	builder.WriteString("UserCreditHistory(")
	builder.WriteString(fmt.Sprintf("id=%v, ", uch.ID))
	builder.WriteString("created_at=")
	builder.WriteString(fmt.Sprintf("%v", uch.CreatedAt))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(fmt.Sprintf("%v", uch.UpdatedAt))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(fmt.Sprintf("%v", uch.DeletedAt))
	builder.WriteString(", ")
	builder.WriteString("ent_id=")
	builder.WriteString(fmt.Sprintf("%v", uch.EntID))
	builder.WriteString(", ")
	builder.WriteString("app_id=")
	builder.WriteString(fmt.Sprintf("%v", uch.AppID))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", uch.UserID))
	builder.WriteString(", ")
	builder.WriteString("task_id=")
	builder.WriteString(fmt.Sprintf("%v", uch.TaskID))
	builder.WriteString(", ")
	builder.WriteString("event_id=")
	builder.WriteString(fmt.Sprintf("%v", uch.EventID))
	builder.WriteString(", ")
	builder.WriteString("credits=")
	builder.WriteString(fmt.Sprintf("%v", uch.Credits))
	builder.WriteByte(')')
	return builder.String()
}

// UserCreditHistories is a parsable slice of UserCreditHistory.
type UserCreditHistories []*UserCreditHistory

func (uch UserCreditHistories) config(cfg config) {
	for _i := range uch {
		uch[_i].config = cfg
	}
}
