// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/inspire-middleware/pkg/db/ent/goodorderpercent"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// GoodOrderPercentCreate is the builder for creating a GoodOrderPercent entity.
type GoodOrderPercentCreate struct {
	config
	mutation *GoodOrderPercentMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (gopc *GoodOrderPercentCreate) SetCreatedAt(u uint32) *GoodOrderPercentCreate {
	gopc.mutation.SetCreatedAt(u)
	return gopc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (gopc *GoodOrderPercentCreate) SetNillableCreatedAt(u *uint32) *GoodOrderPercentCreate {
	if u != nil {
		gopc.SetCreatedAt(*u)
	}
	return gopc
}

// SetUpdatedAt sets the "updated_at" field.
func (gopc *GoodOrderPercentCreate) SetUpdatedAt(u uint32) *GoodOrderPercentCreate {
	gopc.mutation.SetUpdatedAt(u)
	return gopc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (gopc *GoodOrderPercentCreate) SetNillableUpdatedAt(u *uint32) *GoodOrderPercentCreate {
	if u != nil {
		gopc.SetUpdatedAt(*u)
	}
	return gopc
}

// SetDeletedAt sets the "deleted_at" field.
func (gopc *GoodOrderPercentCreate) SetDeletedAt(u uint32) *GoodOrderPercentCreate {
	gopc.mutation.SetDeletedAt(u)
	return gopc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (gopc *GoodOrderPercentCreate) SetNillableDeletedAt(u *uint32) *GoodOrderPercentCreate {
	if u != nil {
		gopc.SetDeletedAt(*u)
	}
	return gopc
}

// SetAppID sets the "app_id" field.
func (gopc *GoodOrderPercentCreate) SetAppID(u uuid.UUID) *GoodOrderPercentCreate {
	gopc.mutation.SetAppID(u)
	return gopc
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (gopc *GoodOrderPercentCreate) SetNillableAppID(u *uuid.UUID) *GoodOrderPercentCreate {
	if u != nil {
		gopc.SetAppID(*u)
	}
	return gopc
}

// SetUserID sets the "user_id" field.
func (gopc *GoodOrderPercentCreate) SetUserID(u uuid.UUID) *GoodOrderPercentCreate {
	gopc.mutation.SetUserID(u)
	return gopc
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (gopc *GoodOrderPercentCreate) SetNillableUserID(u *uuid.UUID) *GoodOrderPercentCreate {
	if u != nil {
		gopc.SetUserID(*u)
	}
	return gopc
}

// SetGoodID sets the "good_id" field.
func (gopc *GoodOrderPercentCreate) SetGoodID(u uuid.UUID) *GoodOrderPercentCreate {
	gopc.mutation.SetGoodID(u)
	return gopc
}

// SetNillableGoodID sets the "good_id" field if the given value is not nil.
func (gopc *GoodOrderPercentCreate) SetNillableGoodID(u *uuid.UUID) *GoodOrderPercentCreate {
	if u != nil {
		gopc.SetGoodID(*u)
	}
	return gopc
}

// SetPercent sets the "percent" field.
func (gopc *GoodOrderPercentCreate) SetPercent(d decimal.Decimal) *GoodOrderPercentCreate {
	gopc.mutation.SetPercent(d)
	return gopc
}

// SetNillablePercent sets the "percent" field if the given value is not nil.
func (gopc *GoodOrderPercentCreate) SetNillablePercent(d *decimal.Decimal) *GoodOrderPercentCreate {
	if d != nil {
		gopc.SetPercent(*d)
	}
	return gopc
}

// SetStartAt sets the "start_at" field.
func (gopc *GoodOrderPercentCreate) SetStartAt(u uint32) *GoodOrderPercentCreate {
	gopc.mutation.SetStartAt(u)
	return gopc
}

// SetNillableStartAt sets the "start_at" field if the given value is not nil.
func (gopc *GoodOrderPercentCreate) SetNillableStartAt(u *uint32) *GoodOrderPercentCreate {
	if u != nil {
		gopc.SetStartAt(*u)
	}
	return gopc
}

// SetEndAt sets the "end_at" field.
func (gopc *GoodOrderPercentCreate) SetEndAt(u uint32) *GoodOrderPercentCreate {
	gopc.mutation.SetEndAt(u)
	return gopc
}

// SetNillableEndAt sets the "end_at" field if the given value is not nil.
func (gopc *GoodOrderPercentCreate) SetNillableEndAt(u *uint32) *GoodOrderPercentCreate {
	if u != nil {
		gopc.SetEndAt(*u)
	}
	return gopc
}

// SetID sets the "id" field.
func (gopc *GoodOrderPercentCreate) SetID(u uuid.UUID) *GoodOrderPercentCreate {
	gopc.mutation.SetID(u)
	return gopc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (gopc *GoodOrderPercentCreate) SetNillableID(u *uuid.UUID) *GoodOrderPercentCreate {
	if u != nil {
		gopc.SetID(*u)
	}
	return gopc
}

// Mutation returns the GoodOrderPercentMutation object of the builder.
func (gopc *GoodOrderPercentCreate) Mutation() *GoodOrderPercentMutation {
	return gopc.mutation
}

// Save creates the GoodOrderPercent in the database.
func (gopc *GoodOrderPercentCreate) Save(ctx context.Context) (*GoodOrderPercent, error) {
	var (
		err  error
		node *GoodOrderPercent
	)
	if err := gopc.defaults(); err != nil {
		return nil, err
	}
	if len(gopc.hooks) == 0 {
		if err = gopc.check(); err != nil {
			return nil, err
		}
		node, err = gopc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*GoodOrderPercentMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = gopc.check(); err != nil {
				return nil, err
			}
			gopc.mutation = mutation
			if node, err = gopc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(gopc.hooks) - 1; i >= 0; i-- {
			if gopc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = gopc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, gopc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*GoodOrderPercent)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from GoodOrderPercentMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (gopc *GoodOrderPercentCreate) SaveX(ctx context.Context) *GoodOrderPercent {
	v, err := gopc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (gopc *GoodOrderPercentCreate) Exec(ctx context.Context) error {
	_, err := gopc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gopc *GoodOrderPercentCreate) ExecX(ctx context.Context) {
	if err := gopc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (gopc *GoodOrderPercentCreate) defaults() error {
	if _, ok := gopc.mutation.CreatedAt(); !ok {
		if goodorderpercent.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized goodorderpercent.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := goodorderpercent.DefaultCreatedAt()
		gopc.mutation.SetCreatedAt(v)
	}
	if _, ok := gopc.mutation.UpdatedAt(); !ok {
		if goodorderpercent.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized goodorderpercent.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := goodorderpercent.DefaultUpdatedAt()
		gopc.mutation.SetUpdatedAt(v)
	}
	if _, ok := gopc.mutation.DeletedAt(); !ok {
		if goodorderpercent.DefaultDeletedAt == nil {
			return fmt.Errorf("ent: uninitialized goodorderpercent.DefaultDeletedAt (forgotten import ent/runtime?)")
		}
		v := goodorderpercent.DefaultDeletedAt()
		gopc.mutation.SetDeletedAt(v)
	}
	if _, ok := gopc.mutation.AppID(); !ok {
		if goodorderpercent.DefaultAppID == nil {
			return fmt.Errorf("ent: uninitialized goodorderpercent.DefaultAppID (forgotten import ent/runtime?)")
		}
		v := goodorderpercent.DefaultAppID()
		gopc.mutation.SetAppID(v)
	}
	if _, ok := gopc.mutation.UserID(); !ok {
		if goodorderpercent.DefaultUserID == nil {
			return fmt.Errorf("ent: uninitialized goodorderpercent.DefaultUserID (forgotten import ent/runtime?)")
		}
		v := goodorderpercent.DefaultUserID()
		gopc.mutation.SetUserID(v)
	}
	if _, ok := gopc.mutation.GoodID(); !ok {
		if goodorderpercent.DefaultGoodID == nil {
			return fmt.Errorf("ent: uninitialized goodorderpercent.DefaultGoodID (forgotten import ent/runtime?)")
		}
		v := goodorderpercent.DefaultGoodID()
		gopc.mutation.SetGoodID(v)
	}
	if _, ok := gopc.mutation.Percent(); !ok {
		v := goodorderpercent.DefaultPercent
		gopc.mutation.SetPercent(v)
	}
	if _, ok := gopc.mutation.StartAt(); !ok {
		v := goodorderpercent.DefaultStartAt
		gopc.mutation.SetStartAt(v)
	}
	if _, ok := gopc.mutation.EndAt(); !ok {
		v := goodorderpercent.DefaultEndAt
		gopc.mutation.SetEndAt(v)
	}
	if _, ok := gopc.mutation.ID(); !ok {
		if goodorderpercent.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized goodorderpercent.DefaultID (forgotten import ent/runtime?)")
		}
		v := goodorderpercent.DefaultID()
		gopc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (gopc *GoodOrderPercentCreate) check() error {
	if _, ok := gopc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "GoodOrderPercent.created_at"`)}
	}
	if _, ok := gopc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "GoodOrderPercent.updated_at"`)}
	}
	if _, ok := gopc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`ent: missing required field "GoodOrderPercent.deleted_at"`)}
	}
	return nil
}

func (gopc *GoodOrderPercentCreate) sqlSave(ctx context.Context) (*GoodOrderPercent, error) {
	_node, _spec := gopc.createSpec()
	if err := sqlgraph.CreateNode(ctx, gopc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (gopc *GoodOrderPercentCreate) createSpec() (*GoodOrderPercent, *sqlgraph.CreateSpec) {
	var (
		_node = &GoodOrderPercent{config: gopc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: goodorderpercent.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: goodorderpercent.FieldID,
			},
		}
	)
	_spec.OnConflict = gopc.conflict
	if id, ok := gopc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := gopc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: goodorderpercent.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := gopc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: goodorderpercent.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := gopc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: goodorderpercent.FieldDeletedAt,
		})
		_node.DeletedAt = value
	}
	if value, ok := gopc.mutation.AppID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: goodorderpercent.FieldAppID,
		})
		_node.AppID = value
	}
	if value, ok := gopc.mutation.UserID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: goodorderpercent.FieldUserID,
		})
		_node.UserID = value
	}
	if value, ok := gopc.mutation.GoodID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: goodorderpercent.FieldGoodID,
		})
		_node.GoodID = value
	}
	if value, ok := gopc.mutation.Percent(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: goodorderpercent.FieldPercent,
		})
		_node.Percent = value
	}
	if value, ok := gopc.mutation.StartAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: goodorderpercent.FieldStartAt,
		})
		_node.StartAt = value
	}
	if value, ok := gopc.mutation.EndAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: goodorderpercent.FieldEndAt,
		})
		_node.EndAt = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.GoodOrderPercent.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.GoodOrderPercentUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (gopc *GoodOrderPercentCreate) OnConflict(opts ...sql.ConflictOption) *GoodOrderPercentUpsertOne {
	gopc.conflict = opts
	return &GoodOrderPercentUpsertOne{
		create: gopc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.GoodOrderPercent.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (gopc *GoodOrderPercentCreate) OnConflictColumns(columns ...string) *GoodOrderPercentUpsertOne {
	gopc.conflict = append(gopc.conflict, sql.ConflictColumns(columns...))
	return &GoodOrderPercentUpsertOne{
		create: gopc,
	}
}

type (
	// GoodOrderPercentUpsertOne is the builder for "upsert"-ing
	//  one GoodOrderPercent node.
	GoodOrderPercentUpsertOne struct {
		create *GoodOrderPercentCreate
	}

	// GoodOrderPercentUpsert is the "OnConflict" setter.
	GoodOrderPercentUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *GoodOrderPercentUpsert) SetCreatedAt(v uint32) *GoodOrderPercentUpsert {
	u.Set(goodorderpercent.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *GoodOrderPercentUpsert) UpdateCreatedAt() *GoodOrderPercentUpsert {
	u.SetExcluded(goodorderpercent.FieldCreatedAt)
	return u
}

// AddCreatedAt adds v to the "created_at" field.
func (u *GoodOrderPercentUpsert) AddCreatedAt(v uint32) *GoodOrderPercentUpsert {
	u.Add(goodorderpercent.FieldCreatedAt, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *GoodOrderPercentUpsert) SetUpdatedAt(v uint32) *GoodOrderPercentUpsert {
	u.Set(goodorderpercent.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *GoodOrderPercentUpsert) UpdateUpdatedAt() *GoodOrderPercentUpsert {
	u.SetExcluded(goodorderpercent.FieldUpdatedAt)
	return u
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *GoodOrderPercentUpsert) AddUpdatedAt(v uint32) *GoodOrderPercentUpsert {
	u.Add(goodorderpercent.FieldUpdatedAt, v)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *GoodOrderPercentUpsert) SetDeletedAt(v uint32) *GoodOrderPercentUpsert {
	u.Set(goodorderpercent.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *GoodOrderPercentUpsert) UpdateDeletedAt() *GoodOrderPercentUpsert {
	u.SetExcluded(goodorderpercent.FieldDeletedAt)
	return u
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *GoodOrderPercentUpsert) AddDeletedAt(v uint32) *GoodOrderPercentUpsert {
	u.Add(goodorderpercent.FieldDeletedAt, v)
	return u
}

// SetAppID sets the "app_id" field.
func (u *GoodOrderPercentUpsert) SetAppID(v uuid.UUID) *GoodOrderPercentUpsert {
	u.Set(goodorderpercent.FieldAppID, v)
	return u
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *GoodOrderPercentUpsert) UpdateAppID() *GoodOrderPercentUpsert {
	u.SetExcluded(goodorderpercent.FieldAppID)
	return u
}

// ClearAppID clears the value of the "app_id" field.
func (u *GoodOrderPercentUpsert) ClearAppID() *GoodOrderPercentUpsert {
	u.SetNull(goodorderpercent.FieldAppID)
	return u
}

// SetUserID sets the "user_id" field.
func (u *GoodOrderPercentUpsert) SetUserID(v uuid.UUID) *GoodOrderPercentUpsert {
	u.Set(goodorderpercent.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *GoodOrderPercentUpsert) UpdateUserID() *GoodOrderPercentUpsert {
	u.SetExcluded(goodorderpercent.FieldUserID)
	return u
}

// ClearUserID clears the value of the "user_id" field.
func (u *GoodOrderPercentUpsert) ClearUserID() *GoodOrderPercentUpsert {
	u.SetNull(goodorderpercent.FieldUserID)
	return u
}

// SetGoodID sets the "good_id" field.
func (u *GoodOrderPercentUpsert) SetGoodID(v uuid.UUID) *GoodOrderPercentUpsert {
	u.Set(goodorderpercent.FieldGoodID, v)
	return u
}

// UpdateGoodID sets the "good_id" field to the value that was provided on create.
func (u *GoodOrderPercentUpsert) UpdateGoodID() *GoodOrderPercentUpsert {
	u.SetExcluded(goodorderpercent.FieldGoodID)
	return u
}

// ClearGoodID clears the value of the "good_id" field.
func (u *GoodOrderPercentUpsert) ClearGoodID() *GoodOrderPercentUpsert {
	u.SetNull(goodorderpercent.FieldGoodID)
	return u
}

// SetPercent sets the "percent" field.
func (u *GoodOrderPercentUpsert) SetPercent(v decimal.Decimal) *GoodOrderPercentUpsert {
	u.Set(goodorderpercent.FieldPercent, v)
	return u
}

// UpdatePercent sets the "percent" field to the value that was provided on create.
func (u *GoodOrderPercentUpsert) UpdatePercent() *GoodOrderPercentUpsert {
	u.SetExcluded(goodorderpercent.FieldPercent)
	return u
}

// ClearPercent clears the value of the "percent" field.
func (u *GoodOrderPercentUpsert) ClearPercent() *GoodOrderPercentUpsert {
	u.SetNull(goodorderpercent.FieldPercent)
	return u
}

// SetStartAt sets the "start_at" field.
func (u *GoodOrderPercentUpsert) SetStartAt(v uint32) *GoodOrderPercentUpsert {
	u.Set(goodorderpercent.FieldStartAt, v)
	return u
}

// UpdateStartAt sets the "start_at" field to the value that was provided on create.
func (u *GoodOrderPercentUpsert) UpdateStartAt() *GoodOrderPercentUpsert {
	u.SetExcluded(goodorderpercent.FieldStartAt)
	return u
}

// AddStartAt adds v to the "start_at" field.
func (u *GoodOrderPercentUpsert) AddStartAt(v uint32) *GoodOrderPercentUpsert {
	u.Add(goodorderpercent.FieldStartAt, v)
	return u
}

// ClearStartAt clears the value of the "start_at" field.
func (u *GoodOrderPercentUpsert) ClearStartAt() *GoodOrderPercentUpsert {
	u.SetNull(goodorderpercent.FieldStartAt)
	return u
}

// SetEndAt sets the "end_at" field.
func (u *GoodOrderPercentUpsert) SetEndAt(v uint32) *GoodOrderPercentUpsert {
	u.Set(goodorderpercent.FieldEndAt, v)
	return u
}

// UpdateEndAt sets the "end_at" field to the value that was provided on create.
func (u *GoodOrderPercentUpsert) UpdateEndAt() *GoodOrderPercentUpsert {
	u.SetExcluded(goodorderpercent.FieldEndAt)
	return u
}

// AddEndAt adds v to the "end_at" field.
func (u *GoodOrderPercentUpsert) AddEndAt(v uint32) *GoodOrderPercentUpsert {
	u.Add(goodorderpercent.FieldEndAt, v)
	return u
}

// ClearEndAt clears the value of the "end_at" field.
func (u *GoodOrderPercentUpsert) ClearEndAt() *GoodOrderPercentUpsert {
	u.SetNull(goodorderpercent.FieldEndAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.GoodOrderPercent.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(goodorderpercent.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *GoodOrderPercentUpsertOne) UpdateNewValues() *GoodOrderPercentUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(goodorderpercent.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.GoodOrderPercent.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *GoodOrderPercentUpsertOne) Ignore() *GoodOrderPercentUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *GoodOrderPercentUpsertOne) DoNothing() *GoodOrderPercentUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the GoodOrderPercentCreate.OnConflict
// documentation for more info.
func (u *GoodOrderPercentUpsertOne) Update(set func(*GoodOrderPercentUpsert)) *GoodOrderPercentUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&GoodOrderPercentUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *GoodOrderPercentUpsertOne) SetCreatedAt(v uint32) *GoodOrderPercentUpsertOne {
	return u.Update(func(s *GoodOrderPercentUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *GoodOrderPercentUpsertOne) AddCreatedAt(v uint32) *GoodOrderPercentUpsertOne {
	return u.Update(func(s *GoodOrderPercentUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *GoodOrderPercentUpsertOne) UpdateCreatedAt() *GoodOrderPercentUpsertOne {
	return u.Update(func(s *GoodOrderPercentUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *GoodOrderPercentUpsertOne) SetUpdatedAt(v uint32) *GoodOrderPercentUpsertOne {
	return u.Update(func(s *GoodOrderPercentUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *GoodOrderPercentUpsertOne) AddUpdatedAt(v uint32) *GoodOrderPercentUpsertOne {
	return u.Update(func(s *GoodOrderPercentUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *GoodOrderPercentUpsertOne) UpdateUpdatedAt() *GoodOrderPercentUpsertOne {
	return u.Update(func(s *GoodOrderPercentUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *GoodOrderPercentUpsertOne) SetDeletedAt(v uint32) *GoodOrderPercentUpsertOne {
	return u.Update(func(s *GoodOrderPercentUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *GoodOrderPercentUpsertOne) AddDeletedAt(v uint32) *GoodOrderPercentUpsertOne {
	return u.Update(func(s *GoodOrderPercentUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *GoodOrderPercentUpsertOne) UpdateDeletedAt() *GoodOrderPercentUpsertOne {
	return u.Update(func(s *GoodOrderPercentUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetAppID sets the "app_id" field.
func (u *GoodOrderPercentUpsertOne) SetAppID(v uuid.UUID) *GoodOrderPercentUpsertOne {
	return u.Update(func(s *GoodOrderPercentUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *GoodOrderPercentUpsertOne) UpdateAppID() *GoodOrderPercentUpsertOne {
	return u.Update(func(s *GoodOrderPercentUpsert) {
		s.UpdateAppID()
	})
}

// ClearAppID clears the value of the "app_id" field.
func (u *GoodOrderPercentUpsertOne) ClearAppID() *GoodOrderPercentUpsertOne {
	return u.Update(func(s *GoodOrderPercentUpsert) {
		s.ClearAppID()
	})
}

// SetUserID sets the "user_id" field.
func (u *GoodOrderPercentUpsertOne) SetUserID(v uuid.UUID) *GoodOrderPercentUpsertOne {
	return u.Update(func(s *GoodOrderPercentUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *GoodOrderPercentUpsertOne) UpdateUserID() *GoodOrderPercentUpsertOne {
	return u.Update(func(s *GoodOrderPercentUpsert) {
		s.UpdateUserID()
	})
}

// ClearUserID clears the value of the "user_id" field.
func (u *GoodOrderPercentUpsertOne) ClearUserID() *GoodOrderPercentUpsertOne {
	return u.Update(func(s *GoodOrderPercentUpsert) {
		s.ClearUserID()
	})
}

// SetGoodID sets the "good_id" field.
func (u *GoodOrderPercentUpsertOne) SetGoodID(v uuid.UUID) *GoodOrderPercentUpsertOne {
	return u.Update(func(s *GoodOrderPercentUpsert) {
		s.SetGoodID(v)
	})
}

// UpdateGoodID sets the "good_id" field to the value that was provided on create.
func (u *GoodOrderPercentUpsertOne) UpdateGoodID() *GoodOrderPercentUpsertOne {
	return u.Update(func(s *GoodOrderPercentUpsert) {
		s.UpdateGoodID()
	})
}

// ClearGoodID clears the value of the "good_id" field.
func (u *GoodOrderPercentUpsertOne) ClearGoodID() *GoodOrderPercentUpsertOne {
	return u.Update(func(s *GoodOrderPercentUpsert) {
		s.ClearGoodID()
	})
}

// SetPercent sets the "percent" field.
func (u *GoodOrderPercentUpsertOne) SetPercent(v decimal.Decimal) *GoodOrderPercentUpsertOne {
	return u.Update(func(s *GoodOrderPercentUpsert) {
		s.SetPercent(v)
	})
}

// UpdatePercent sets the "percent" field to the value that was provided on create.
func (u *GoodOrderPercentUpsertOne) UpdatePercent() *GoodOrderPercentUpsertOne {
	return u.Update(func(s *GoodOrderPercentUpsert) {
		s.UpdatePercent()
	})
}

// ClearPercent clears the value of the "percent" field.
func (u *GoodOrderPercentUpsertOne) ClearPercent() *GoodOrderPercentUpsertOne {
	return u.Update(func(s *GoodOrderPercentUpsert) {
		s.ClearPercent()
	})
}

// SetStartAt sets the "start_at" field.
func (u *GoodOrderPercentUpsertOne) SetStartAt(v uint32) *GoodOrderPercentUpsertOne {
	return u.Update(func(s *GoodOrderPercentUpsert) {
		s.SetStartAt(v)
	})
}

// AddStartAt adds v to the "start_at" field.
func (u *GoodOrderPercentUpsertOne) AddStartAt(v uint32) *GoodOrderPercentUpsertOne {
	return u.Update(func(s *GoodOrderPercentUpsert) {
		s.AddStartAt(v)
	})
}

// UpdateStartAt sets the "start_at" field to the value that was provided on create.
func (u *GoodOrderPercentUpsertOne) UpdateStartAt() *GoodOrderPercentUpsertOne {
	return u.Update(func(s *GoodOrderPercentUpsert) {
		s.UpdateStartAt()
	})
}

// ClearStartAt clears the value of the "start_at" field.
func (u *GoodOrderPercentUpsertOne) ClearStartAt() *GoodOrderPercentUpsertOne {
	return u.Update(func(s *GoodOrderPercentUpsert) {
		s.ClearStartAt()
	})
}

// SetEndAt sets the "end_at" field.
func (u *GoodOrderPercentUpsertOne) SetEndAt(v uint32) *GoodOrderPercentUpsertOne {
	return u.Update(func(s *GoodOrderPercentUpsert) {
		s.SetEndAt(v)
	})
}

// AddEndAt adds v to the "end_at" field.
func (u *GoodOrderPercentUpsertOne) AddEndAt(v uint32) *GoodOrderPercentUpsertOne {
	return u.Update(func(s *GoodOrderPercentUpsert) {
		s.AddEndAt(v)
	})
}

// UpdateEndAt sets the "end_at" field to the value that was provided on create.
func (u *GoodOrderPercentUpsertOne) UpdateEndAt() *GoodOrderPercentUpsertOne {
	return u.Update(func(s *GoodOrderPercentUpsert) {
		s.UpdateEndAt()
	})
}

// ClearEndAt clears the value of the "end_at" field.
func (u *GoodOrderPercentUpsertOne) ClearEndAt() *GoodOrderPercentUpsertOne {
	return u.Update(func(s *GoodOrderPercentUpsert) {
		s.ClearEndAt()
	})
}

// Exec executes the query.
func (u *GoodOrderPercentUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for GoodOrderPercentCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *GoodOrderPercentUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *GoodOrderPercentUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: GoodOrderPercentUpsertOne.ID is not supported by MySQL driver. Use GoodOrderPercentUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *GoodOrderPercentUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// GoodOrderPercentCreateBulk is the builder for creating many GoodOrderPercent entities in bulk.
type GoodOrderPercentCreateBulk struct {
	config
	builders []*GoodOrderPercentCreate
	conflict []sql.ConflictOption
}

// Save creates the GoodOrderPercent entities in the database.
func (gopcb *GoodOrderPercentCreateBulk) Save(ctx context.Context) ([]*GoodOrderPercent, error) {
	specs := make([]*sqlgraph.CreateSpec, len(gopcb.builders))
	nodes := make([]*GoodOrderPercent, len(gopcb.builders))
	mutators := make([]Mutator, len(gopcb.builders))
	for i := range gopcb.builders {
		func(i int, root context.Context) {
			builder := gopcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*GoodOrderPercentMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, gopcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = gopcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, gopcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, gopcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (gopcb *GoodOrderPercentCreateBulk) SaveX(ctx context.Context) []*GoodOrderPercent {
	v, err := gopcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (gopcb *GoodOrderPercentCreateBulk) Exec(ctx context.Context) error {
	_, err := gopcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gopcb *GoodOrderPercentCreateBulk) ExecX(ctx context.Context) {
	if err := gopcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.GoodOrderPercent.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.GoodOrderPercentUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (gopcb *GoodOrderPercentCreateBulk) OnConflict(opts ...sql.ConflictOption) *GoodOrderPercentUpsertBulk {
	gopcb.conflict = opts
	return &GoodOrderPercentUpsertBulk{
		create: gopcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.GoodOrderPercent.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (gopcb *GoodOrderPercentCreateBulk) OnConflictColumns(columns ...string) *GoodOrderPercentUpsertBulk {
	gopcb.conflict = append(gopcb.conflict, sql.ConflictColumns(columns...))
	return &GoodOrderPercentUpsertBulk{
		create: gopcb,
	}
}

// GoodOrderPercentUpsertBulk is the builder for "upsert"-ing
// a bulk of GoodOrderPercent nodes.
type GoodOrderPercentUpsertBulk struct {
	create *GoodOrderPercentCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.GoodOrderPercent.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(goodorderpercent.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *GoodOrderPercentUpsertBulk) UpdateNewValues() *GoodOrderPercentUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(goodorderpercent.FieldID)
				return
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.GoodOrderPercent.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *GoodOrderPercentUpsertBulk) Ignore() *GoodOrderPercentUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *GoodOrderPercentUpsertBulk) DoNothing() *GoodOrderPercentUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the GoodOrderPercentCreateBulk.OnConflict
// documentation for more info.
func (u *GoodOrderPercentUpsertBulk) Update(set func(*GoodOrderPercentUpsert)) *GoodOrderPercentUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&GoodOrderPercentUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *GoodOrderPercentUpsertBulk) SetCreatedAt(v uint32) *GoodOrderPercentUpsertBulk {
	return u.Update(func(s *GoodOrderPercentUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *GoodOrderPercentUpsertBulk) AddCreatedAt(v uint32) *GoodOrderPercentUpsertBulk {
	return u.Update(func(s *GoodOrderPercentUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *GoodOrderPercentUpsertBulk) UpdateCreatedAt() *GoodOrderPercentUpsertBulk {
	return u.Update(func(s *GoodOrderPercentUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *GoodOrderPercentUpsertBulk) SetUpdatedAt(v uint32) *GoodOrderPercentUpsertBulk {
	return u.Update(func(s *GoodOrderPercentUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *GoodOrderPercentUpsertBulk) AddUpdatedAt(v uint32) *GoodOrderPercentUpsertBulk {
	return u.Update(func(s *GoodOrderPercentUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *GoodOrderPercentUpsertBulk) UpdateUpdatedAt() *GoodOrderPercentUpsertBulk {
	return u.Update(func(s *GoodOrderPercentUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *GoodOrderPercentUpsertBulk) SetDeletedAt(v uint32) *GoodOrderPercentUpsertBulk {
	return u.Update(func(s *GoodOrderPercentUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *GoodOrderPercentUpsertBulk) AddDeletedAt(v uint32) *GoodOrderPercentUpsertBulk {
	return u.Update(func(s *GoodOrderPercentUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *GoodOrderPercentUpsertBulk) UpdateDeletedAt() *GoodOrderPercentUpsertBulk {
	return u.Update(func(s *GoodOrderPercentUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetAppID sets the "app_id" field.
func (u *GoodOrderPercentUpsertBulk) SetAppID(v uuid.UUID) *GoodOrderPercentUpsertBulk {
	return u.Update(func(s *GoodOrderPercentUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *GoodOrderPercentUpsertBulk) UpdateAppID() *GoodOrderPercentUpsertBulk {
	return u.Update(func(s *GoodOrderPercentUpsert) {
		s.UpdateAppID()
	})
}

// ClearAppID clears the value of the "app_id" field.
func (u *GoodOrderPercentUpsertBulk) ClearAppID() *GoodOrderPercentUpsertBulk {
	return u.Update(func(s *GoodOrderPercentUpsert) {
		s.ClearAppID()
	})
}

// SetUserID sets the "user_id" field.
func (u *GoodOrderPercentUpsertBulk) SetUserID(v uuid.UUID) *GoodOrderPercentUpsertBulk {
	return u.Update(func(s *GoodOrderPercentUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *GoodOrderPercentUpsertBulk) UpdateUserID() *GoodOrderPercentUpsertBulk {
	return u.Update(func(s *GoodOrderPercentUpsert) {
		s.UpdateUserID()
	})
}

// ClearUserID clears the value of the "user_id" field.
func (u *GoodOrderPercentUpsertBulk) ClearUserID() *GoodOrderPercentUpsertBulk {
	return u.Update(func(s *GoodOrderPercentUpsert) {
		s.ClearUserID()
	})
}

// SetGoodID sets the "good_id" field.
func (u *GoodOrderPercentUpsertBulk) SetGoodID(v uuid.UUID) *GoodOrderPercentUpsertBulk {
	return u.Update(func(s *GoodOrderPercentUpsert) {
		s.SetGoodID(v)
	})
}

// UpdateGoodID sets the "good_id" field to the value that was provided on create.
func (u *GoodOrderPercentUpsertBulk) UpdateGoodID() *GoodOrderPercentUpsertBulk {
	return u.Update(func(s *GoodOrderPercentUpsert) {
		s.UpdateGoodID()
	})
}

// ClearGoodID clears the value of the "good_id" field.
func (u *GoodOrderPercentUpsertBulk) ClearGoodID() *GoodOrderPercentUpsertBulk {
	return u.Update(func(s *GoodOrderPercentUpsert) {
		s.ClearGoodID()
	})
}

// SetPercent sets the "percent" field.
func (u *GoodOrderPercentUpsertBulk) SetPercent(v decimal.Decimal) *GoodOrderPercentUpsertBulk {
	return u.Update(func(s *GoodOrderPercentUpsert) {
		s.SetPercent(v)
	})
}

// UpdatePercent sets the "percent" field to the value that was provided on create.
func (u *GoodOrderPercentUpsertBulk) UpdatePercent() *GoodOrderPercentUpsertBulk {
	return u.Update(func(s *GoodOrderPercentUpsert) {
		s.UpdatePercent()
	})
}

// ClearPercent clears the value of the "percent" field.
func (u *GoodOrderPercentUpsertBulk) ClearPercent() *GoodOrderPercentUpsertBulk {
	return u.Update(func(s *GoodOrderPercentUpsert) {
		s.ClearPercent()
	})
}

// SetStartAt sets the "start_at" field.
func (u *GoodOrderPercentUpsertBulk) SetStartAt(v uint32) *GoodOrderPercentUpsertBulk {
	return u.Update(func(s *GoodOrderPercentUpsert) {
		s.SetStartAt(v)
	})
}

// AddStartAt adds v to the "start_at" field.
func (u *GoodOrderPercentUpsertBulk) AddStartAt(v uint32) *GoodOrderPercentUpsertBulk {
	return u.Update(func(s *GoodOrderPercentUpsert) {
		s.AddStartAt(v)
	})
}

// UpdateStartAt sets the "start_at" field to the value that was provided on create.
func (u *GoodOrderPercentUpsertBulk) UpdateStartAt() *GoodOrderPercentUpsertBulk {
	return u.Update(func(s *GoodOrderPercentUpsert) {
		s.UpdateStartAt()
	})
}

// ClearStartAt clears the value of the "start_at" field.
func (u *GoodOrderPercentUpsertBulk) ClearStartAt() *GoodOrderPercentUpsertBulk {
	return u.Update(func(s *GoodOrderPercentUpsert) {
		s.ClearStartAt()
	})
}

// SetEndAt sets the "end_at" field.
func (u *GoodOrderPercentUpsertBulk) SetEndAt(v uint32) *GoodOrderPercentUpsertBulk {
	return u.Update(func(s *GoodOrderPercentUpsert) {
		s.SetEndAt(v)
	})
}

// AddEndAt adds v to the "end_at" field.
func (u *GoodOrderPercentUpsertBulk) AddEndAt(v uint32) *GoodOrderPercentUpsertBulk {
	return u.Update(func(s *GoodOrderPercentUpsert) {
		s.AddEndAt(v)
	})
}

// UpdateEndAt sets the "end_at" field to the value that was provided on create.
func (u *GoodOrderPercentUpsertBulk) UpdateEndAt() *GoodOrderPercentUpsertBulk {
	return u.Update(func(s *GoodOrderPercentUpsert) {
		s.UpdateEndAt()
	})
}

// ClearEndAt clears the value of the "end_at" field.
func (u *GoodOrderPercentUpsertBulk) ClearEndAt() *GoodOrderPercentUpsertBulk {
	return u.Update(func(s *GoodOrderPercentUpsert) {
		s.ClearEndAt()
	})
}

// Exec executes the query.
func (u *GoodOrderPercentUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the GoodOrderPercentCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for GoodOrderPercentCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *GoodOrderPercentUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
