// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/inspire-middleware/pkg/db/ent/goodorderpercent"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// GoodOrderPercent is the model entity for the GoodOrderPercent schema.
type GoodOrderPercent struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt uint32 `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt uint32 `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt uint32 `json:"deleted_at,omitempty"`
	// AppID holds the value of the "app_id" field.
	AppID uuid.UUID `json:"app_id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID uuid.UUID `json:"user_id,omitempty"`
	// GoodID holds the value of the "good_id" field.
	GoodID uuid.UUID `json:"good_id,omitempty"`
	// Percent holds the value of the "percent" field.
	Percent decimal.Decimal `json:"percent,omitempty"`
	// StartAt holds the value of the "start_at" field.
	StartAt uint32 `json:"start_at,omitempty"`
	// EndAt holds the value of the "end_at" field.
	EndAt uint32 `json:"end_at,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*GoodOrderPercent) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case goodorderpercent.FieldPercent:
			values[i] = new(decimal.Decimal)
		case goodorderpercent.FieldCreatedAt, goodorderpercent.FieldUpdatedAt, goodorderpercent.FieldDeletedAt, goodorderpercent.FieldStartAt, goodorderpercent.FieldEndAt:
			values[i] = new(sql.NullInt64)
		case goodorderpercent.FieldID, goodorderpercent.FieldAppID, goodorderpercent.FieldUserID, goodorderpercent.FieldGoodID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type GoodOrderPercent", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the GoodOrderPercent fields.
func (gop *GoodOrderPercent) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case goodorderpercent.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				gop.ID = *value
			}
		case goodorderpercent.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				gop.CreatedAt = uint32(value.Int64)
			}
		case goodorderpercent.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				gop.UpdatedAt = uint32(value.Int64)
			}
		case goodorderpercent.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				gop.DeletedAt = uint32(value.Int64)
			}
		case goodorderpercent.FieldAppID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field app_id", values[i])
			} else if value != nil {
				gop.AppID = *value
			}
		case goodorderpercent.FieldUserID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value != nil {
				gop.UserID = *value
			}
		case goodorderpercent.FieldGoodID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field good_id", values[i])
			} else if value != nil {
				gop.GoodID = *value
			}
		case goodorderpercent.FieldPercent:
			if value, ok := values[i].(*decimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field percent", values[i])
			} else if value != nil {
				gop.Percent = *value
			}
		case goodorderpercent.FieldStartAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field start_at", values[i])
			} else if value.Valid {
				gop.StartAt = uint32(value.Int64)
			}
		case goodorderpercent.FieldEndAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field end_at", values[i])
			} else if value.Valid {
				gop.EndAt = uint32(value.Int64)
			}
		}
	}
	return nil
}

// Update returns a builder for updating this GoodOrderPercent.
// Note that you need to call GoodOrderPercent.Unwrap() before calling this method if this GoodOrderPercent
// was returned from a transaction, and the transaction was committed or rolled back.
func (gop *GoodOrderPercent) Update() *GoodOrderPercentUpdateOne {
	return (&GoodOrderPercentClient{config: gop.config}).UpdateOne(gop)
}

// Unwrap unwraps the GoodOrderPercent entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (gop *GoodOrderPercent) Unwrap() *GoodOrderPercent {
	_tx, ok := gop.config.driver.(*txDriver)
	if !ok {
		panic("ent: GoodOrderPercent is not a transactional entity")
	}
	gop.config.driver = _tx.drv
	return gop
}

// String implements the fmt.Stringer.
func (gop *GoodOrderPercent) String() string {
	var builder strings.Builder
	builder.WriteString("GoodOrderPercent(")
	builder.WriteString(fmt.Sprintf("id=%v, ", gop.ID))
	builder.WriteString("created_at=")
	builder.WriteString(fmt.Sprintf("%v", gop.CreatedAt))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(fmt.Sprintf("%v", gop.UpdatedAt))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(fmt.Sprintf("%v", gop.DeletedAt))
	builder.WriteString(", ")
	builder.WriteString("app_id=")
	builder.WriteString(fmt.Sprintf("%v", gop.AppID))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", gop.UserID))
	builder.WriteString(", ")
	builder.WriteString("good_id=")
	builder.WriteString(fmt.Sprintf("%v", gop.GoodID))
	builder.WriteString(", ")
	builder.WriteString("percent=")
	builder.WriteString(fmt.Sprintf("%v", gop.Percent))
	builder.WriteString(", ")
	builder.WriteString("start_at=")
	builder.WriteString(fmt.Sprintf("%v", gop.StartAt))
	builder.WriteString(", ")
	builder.WriteString("end_at=")
	builder.WriteString(fmt.Sprintf("%v", gop.EndAt))
	builder.WriteByte(')')
	return builder.String()
}

// GoodOrderPercents is a parsable slice of GoodOrderPercent.
type GoodOrderPercents []*GoodOrderPercent

func (gop GoodOrderPercents) config(cfg config) {
	for _i := range gop {
		gop[_i].config = cfg
	}
}
