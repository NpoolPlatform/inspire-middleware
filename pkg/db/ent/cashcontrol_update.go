// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/inspire-middleware/pkg/db/ent/cashcontrol"
	"github.com/NpoolPlatform/inspire-middleware/pkg/db/ent/predicate"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// CashControlUpdate is the builder for updating CashControl entities.
type CashControlUpdate struct {
	config
	hooks     []Hook
	mutation  *CashControlMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the CashControlUpdate builder.
func (ccu *CashControlUpdate) Where(ps ...predicate.CashControl) *CashControlUpdate {
	ccu.mutation.Where(ps...)
	return ccu
}

// SetCreatedAt sets the "created_at" field.
func (ccu *CashControlUpdate) SetCreatedAt(u uint32) *CashControlUpdate {
	ccu.mutation.ResetCreatedAt()
	ccu.mutation.SetCreatedAt(u)
	return ccu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ccu *CashControlUpdate) SetNillableCreatedAt(u *uint32) *CashControlUpdate {
	if u != nil {
		ccu.SetCreatedAt(*u)
	}
	return ccu
}

// AddCreatedAt adds u to the "created_at" field.
func (ccu *CashControlUpdate) AddCreatedAt(u int32) *CashControlUpdate {
	ccu.mutation.AddCreatedAt(u)
	return ccu
}

// SetUpdatedAt sets the "updated_at" field.
func (ccu *CashControlUpdate) SetUpdatedAt(u uint32) *CashControlUpdate {
	ccu.mutation.ResetUpdatedAt()
	ccu.mutation.SetUpdatedAt(u)
	return ccu
}

// AddUpdatedAt adds u to the "updated_at" field.
func (ccu *CashControlUpdate) AddUpdatedAt(u int32) *CashControlUpdate {
	ccu.mutation.AddUpdatedAt(u)
	return ccu
}

// SetDeletedAt sets the "deleted_at" field.
func (ccu *CashControlUpdate) SetDeletedAt(u uint32) *CashControlUpdate {
	ccu.mutation.ResetDeletedAt()
	ccu.mutation.SetDeletedAt(u)
	return ccu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ccu *CashControlUpdate) SetNillableDeletedAt(u *uint32) *CashControlUpdate {
	if u != nil {
		ccu.SetDeletedAt(*u)
	}
	return ccu
}

// AddDeletedAt adds u to the "deleted_at" field.
func (ccu *CashControlUpdate) AddDeletedAt(u int32) *CashControlUpdate {
	ccu.mutation.AddDeletedAt(u)
	return ccu
}

// SetEntID sets the "ent_id" field.
func (ccu *CashControlUpdate) SetEntID(u uuid.UUID) *CashControlUpdate {
	ccu.mutation.SetEntID(u)
	return ccu
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (ccu *CashControlUpdate) SetNillableEntID(u *uuid.UUID) *CashControlUpdate {
	if u != nil {
		ccu.SetEntID(*u)
	}
	return ccu
}

// SetAppID sets the "app_id" field.
func (ccu *CashControlUpdate) SetAppID(u uuid.UUID) *CashControlUpdate {
	ccu.mutation.SetAppID(u)
	return ccu
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (ccu *CashControlUpdate) SetNillableAppID(u *uuid.UUID) *CashControlUpdate {
	if u != nil {
		ccu.SetAppID(*u)
	}
	return ccu
}

// ClearAppID clears the value of the "app_id" field.
func (ccu *CashControlUpdate) ClearAppID() *CashControlUpdate {
	ccu.mutation.ClearAppID()
	return ccu
}

// SetCouponID sets the "coupon_id" field.
func (ccu *CashControlUpdate) SetCouponID(u uuid.UUID) *CashControlUpdate {
	ccu.mutation.SetCouponID(u)
	return ccu
}

// SetNillableCouponID sets the "coupon_id" field if the given value is not nil.
func (ccu *CashControlUpdate) SetNillableCouponID(u *uuid.UUID) *CashControlUpdate {
	if u != nil {
		ccu.SetCouponID(*u)
	}
	return ccu
}

// ClearCouponID clears the value of the "coupon_id" field.
func (ccu *CashControlUpdate) ClearCouponID() *CashControlUpdate {
	ccu.mutation.ClearCouponID()
	return ccu
}

// SetControlType sets the "control_type" field.
func (ccu *CashControlUpdate) SetControlType(s string) *CashControlUpdate {
	ccu.mutation.SetControlType(s)
	return ccu
}

// SetNillableControlType sets the "control_type" field if the given value is not nil.
func (ccu *CashControlUpdate) SetNillableControlType(s *string) *CashControlUpdate {
	if s != nil {
		ccu.SetControlType(*s)
	}
	return ccu
}

// ClearControlType clears the value of the "control_type" field.
func (ccu *CashControlUpdate) ClearControlType() *CashControlUpdate {
	ccu.mutation.ClearControlType()
	return ccu
}

// SetValue sets the "value" field.
func (ccu *CashControlUpdate) SetValue(d decimal.Decimal) *CashControlUpdate {
	ccu.mutation.SetValue(d)
	return ccu
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (ccu *CashControlUpdate) SetNillableValue(d *decimal.Decimal) *CashControlUpdate {
	if d != nil {
		ccu.SetValue(*d)
	}
	return ccu
}

// ClearValue clears the value of the "value" field.
func (ccu *CashControlUpdate) ClearValue() *CashControlUpdate {
	ccu.mutation.ClearValue()
	return ccu
}

// Mutation returns the CashControlMutation object of the builder.
func (ccu *CashControlUpdate) Mutation() *CashControlMutation {
	return ccu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ccu *CashControlUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if err := ccu.defaults(); err != nil {
		return 0, err
	}
	if len(ccu.hooks) == 0 {
		affected, err = ccu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CashControlMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ccu.mutation = mutation
			affected, err = ccu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ccu.hooks) - 1; i >= 0; i-- {
			if ccu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ccu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ccu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ccu *CashControlUpdate) SaveX(ctx context.Context) int {
	affected, err := ccu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ccu *CashControlUpdate) Exec(ctx context.Context) error {
	_, err := ccu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccu *CashControlUpdate) ExecX(ctx context.Context) {
	if err := ccu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ccu *CashControlUpdate) defaults() error {
	if _, ok := ccu.mutation.UpdatedAt(); !ok {
		if cashcontrol.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized cashcontrol.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := cashcontrol.UpdateDefaultUpdatedAt()
		ccu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ccu *CashControlUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *CashControlUpdate {
	ccu.modifiers = append(ccu.modifiers, modifiers...)
	return ccu
}

func (ccu *CashControlUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   cashcontrol.Table,
			Columns: cashcontrol.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: cashcontrol.FieldID,
			},
		},
	}
	if ps := ccu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ccu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: cashcontrol.FieldCreatedAt,
		})
	}
	if value, ok := ccu.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: cashcontrol.FieldCreatedAt,
		})
	}
	if value, ok := ccu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: cashcontrol.FieldUpdatedAt,
		})
	}
	if value, ok := ccu.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: cashcontrol.FieldUpdatedAt,
		})
	}
	if value, ok := ccu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: cashcontrol.FieldDeletedAt,
		})
	}
	if value, ok := ccu.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: cashcontrol.FieldDeletedAt,
		})
	}
	if value, ok := ccu.mutation.EntID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: cashcontrol.FieldEntID,
		})
	}
	if value, ok := ccu.mutation.AppID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: cashcontrol.FieldAppID,
		})
	}
	if ccu.mutation.AppIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: cashcontrol.FieldAppID,
		})
	}
	if value, ok := ccu.mutation.CouponID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: cashcontrol.FieldCouponID,
		})
	}
	if ccu.mutation.CouponIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: cashcontrol.FieldCouponID,
		})
	}
	if value, ok := ccu.mutation.ControlType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cashcontrol.FieldControlType,
		})
	}
	if ccu.mutation.ControlTypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: cashcontrol.FieldControlType,
		})
	}
	if value, ok := ccu.mutation.Value(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: cashcontrol.FieldValue,
		})
	}
	if ccu.mutation.ValueCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Column: cashcontrol.FieldValue,
		})
	}
	_spec.Modifiers = ccu.modifiers
	if n, err = sqlgraph.UpdateNodes(ctx, ccu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{cashcontrol.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// CashControlUpdateOne is the builder for updating a single CashControl entity.
type CashControlUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *CashControlMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetCreatedAt sets the "created_at" field.
func (ccuo *CashControlUpdateOne) SetCreatedAt(u uint32) *CashControlUpdateOne {
	ccuo.mutation.ResetCreatedAt()
	ccuo.mutation.SetCreatedAt(u)
	return ccuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ccuo *CashControlUpdateOne) SetNillableCreatedAt(u *uint32) *CashControlUpdateOne {
	if u != nil {
		ccuo.SetCreatedAt(*u)
	}
	return ccuo
}

// AddCreatedAt adds u to the "created_at" field.
func (ccuo *CashControlUpdateOne) AddCreatedAt(u int32) *CashControlUpdateOne {
	ccuo.mutation.AddCreatedAt(u)
	return ccuo
}

// SetUpdatedAt sets the "updated_at" field.
func (ccuo *CashControlUpdateOne) SetUpdatedAt(u uint32) *CashControlUpdateOne {
	ccuo.mutation.ResetUpdatedAt()
	ccuo.mutation.SetUpdatedAt(u)
	return ccuo
}

// AddUpdatedAt adds u to the "updated_at" field.
func (ccuo *CashControlUpdateOne) AddUpdatedAt(u int32) *CashControlUpdateOne {
	ccuo.mutation.AddUpdatedAt(u)
	return ccuo
}

// SetDeletedAt sets the "deleted_at" field.
func (ccuo *CashControlUpdateOne) SetDeletedAt(u uint32) *CashControlUpdateOne {
	ccuo.mutation.ResetDeletedAt()
	ccuo.mutation.SetDeletedAt(u)
	return ccuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ccuo *CashControlUpdateOne) SetNillableDeletedAt(u *uint32) *CashControlUpdateOne {
	if u != nil {
		ccuo.SetDeletedAt(*u)
	}
	return ccuo
}

// AddDeletedAt adds u to the "deleted_at" field.
func (ccuo *CashControlUpdateOne) AddDeletedAt(u int32) *CashControlUpdateOne {
	ccuo.mutation.AddDeletedAt(u)
	return ccuo
}

// SetEntID sets the "ent_id" field.
func (ccuo *CashControlUpdateOne) SetEntID(u uuid.UUID) *CashControlUpdateOne {
	ccuo.mutation.SetEntID(u)
	return ccuo
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (ccuo *CashControlUpdateOne) SetNillableEntID(u *uuid.UUID) *CashControlUpdateOne {
	if u != nil {
		ccuo.SetEntID(*u)
	}
	return ccuo
}

// SetAppID sets the "app_id" field.
func (ccuo *CashControlUpdateOne) SetAppID(u uuid.UUID) *CashControlUpdateOne {
	ccuo.mutation.SetAppID(u)
	return ccuo
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (ccuo *CashControlUpdateOne) SetNillableAppID(u *uuid.UUID) *CashControlUpdateOne {
	if u != nil {
		ccuo.SetAppID(*u)
	}
	return ccuo
}

// ClearAppID clears the value of the "app_id" field.
func (ccuo *CashControlUpdateOne) ClearAppID() *CashControlUpdateOne {
	ccuo.mutation.ClearAppID()
	return ccuo
}

// SetCouponID sets the "coupon_id" field.
func (ccuo *CashControlUpdateOne) SetCouponID(u uuid.UUID) *CashControlUpdateOne {
	ccuo.mutation.SetCouponID(u)
	return ccuo
}

// SetNillableCouponID sets the "coupon_id" field if the given value is not nil.
func (ccuo *CashControlUpdateOne) SetNillableCouponID(u *uuid.UUID) *CashControlUpdateOne {
	if u != nil {
		ccuo.SetCouponID(*u)
	}
	return ccuo
}

// ClearCouponID clears the value of the "coupon_id" field.
func (ccuo *CashControlUpdateOne) ClearCouponID() *CashControlUpdateOne {
	ccuo.mutation.ClearCouponID()
	return ccuo
}

// SetControlType sets the "control_type" field.
func (ccuo *CashControlUpdateOne) SetControlType(s string) *CashControlUpdateOne {
	ccuo.mutation.SetControlType(s)
	return ccuo
}

// SetNillableControlType sets the "control_type" field if the given value is not nil.
func (ccuo *CashControlUpdateOne) SetNillableControlType(s *string) *CashControlUpdateOne {
	if s != nil {
		ccuo.SetControlType(*s)
	}
	return ccuo
}

// ClearControlType clears the value of the "control_type" field.
func (ccuo *CashControlUpdateOne) ClearControlType() *CashControlUpdateOne {
	ccuo.mutation.ClearControlType()
	return ccuo
}

// SetValue sets the "value" field.
func (ccuo *CashControlUpdateOne) SetValue(d decimal.Decimal) *CashControlUpdateOne {
	ccuo.mutation.SetValue(d)
	return ccuo
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (ccuo *CashControlUpdateOne) SetNillableValue(d *decimal.Decimal) *CashControlUpdateOne {
	if d != nil {
		ccuo.SetValue(*d)
	}
	return ccuo
}

// ClearValue clears the value of the "value" field.
func (ccuo *CashControlUpdateOne) ClearValue() *CashControlUpdateOne {
	ccuo.mutation.ClearValue()
	return ccuo
}

// Mutation returns the CashControlMutation object of the builder.
func (ccuo *CashControlUpdateOne) Mutation() *CashControlMutation {
	return ccuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ccuo *CashControlUpdateOne) Select(field string, fields ...string) *CashControlUpdateOne {
	ccuo.fields = append([]string{field}, fields...)
	return ccuo
}

// Save executes the query and returns the updated CashControl entity.
func (ccuo *CashControlUpdateOne) Save(ctx context.Context) (*CashControl, error) {
	var (
		err  error
		node *CashControl
	)
	if err := ccuo.defaults(); err != nil {
		return nil, err
	}
	if len(ccuo.hooks) == 0 {
		node, err = ccuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CashControlMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ccuo.mutation = mutation
			node, err = ccuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ccuo.hooks) - 1; i >= 0; i-- {
			if ccuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ccuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, ccuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*CashControl)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from CashControlMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ccuo *CashControlUpdateOne) SaveX(ctx context.Context) *CashControl {
	node, err := ccuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ccuo *CashControlUpdateOne) Exec(ctx context.Context) error {
	_, err := ccuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccuo *CashControlUpdateOne) ExecX(ctx context.Context) {
	if err := ccuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ccuo *CashControlUpdateOne) defaults() error {
	if _, ok := ccuo.mutation.UpdatedAt(); !ok {
		if cashcontrol.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized cashcontrol.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := cashcontrol.UpdateDefaultUpdatedAt()
		ccuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ccuo *CashControlUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *CashControlUpdateOne {
	ccuo.modifiers = append(ccuo.modifiers, modifiers...)
	return ccuo
}

func (ccuo *CashControlUpdateOne) sqlSave(ctx context.Context) (_node *CashControl, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   cashcontrol.Table,
			Columns: cashcontrol.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: cashcontrol.FieldID,
			},
		},
	}
	id, ok := ccuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "CashControl.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ccuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, cashcontrol.FieldID)
		for _, f := range fields {
			if !cashcontrol.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != cashcontrol.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ccuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ccuo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: cashcontrol.FieldCreatedAt,
		})
	}
	if value, ok := ccuo.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: cashcontrol.FieldCreatedAt,
		})
	}
	if value, ok := ccuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: cashcontrol.FieldUpdatedAt,
		})
	}
	if value, ok := ccuo.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: cashcontrol.FieldUpdatedAt,
		})
	}
	if value, ok := ccuo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: cashcontrol.FieldDeletedAt,
		})
	}
	if value, ok := ccuo.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: cashcontrol.FieldDeletedAt,
		})
	}
	if value, ok := ccuo.mutation.EntID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: cashcontrol.FieldEntID,
		})
	}
	if value, ok := ccuo.mutation.AppID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: cashcontrol.FieldAppID,
		})
	}
	if ccuo.mutation.AppIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: cashcontrol.FieldAppID,
		})
	}
	if value, ok := ccuo.mutation.CouponID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: cashcontrol.FieldCouponID,
		})
	}
	if ccuo.mutation.CouponIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: cashcontrol.FieldCouponID,
		})
	}
	if value, ok := ccuo.mutation.ControlType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cashcontrol.FieldControlType,
		})
	}
	if ccuo.mutation.ControlTypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: cashcontrol.FieldControlType,
		})
	}
	if value, ok := ccuo.mutation.Value(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: cashcontrol.FieldValue,
		})
	}
	if ccuo.mutation.ValueCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Column: cashcontrol.FieldValue,
		})
	}
	_spec.Modifiers = ccuo.modifiers
	_node = &CashControl{config: ccuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ccuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{cashcontrol.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
