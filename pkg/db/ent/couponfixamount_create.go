// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/inspire-middleware/pkg/db/ent/couponfixamount"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// CouponFixAmountCreate is the builder for creating a CouponFixAmount entity.
type CouponFixAmountCreate struct {
	config
	mutation *CouponFixAmountMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (cfac *CouponFixAmountCreate) SetCreatedAt(u uint32) *CouponFixAmountCreate {
	cfac.mutation.SetCreatedAt(u)
	return cfac
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cfac *CouponFixAmountCreate) SetNillableCreatedAt(u *uint32) *CouponFixAmountCreate {
	if u != nil {
		cfac.SetCreatedAt(*u)
	}
	return cfac
}

// SetUpdatedAt sets the "updated_at" field.
func (cfac *CouponFixAmountCreate) SetUpdatedAt(u uint32) *CouponFixAmountCreate {
	cfac.mutation.SetUpdatedAt(u)
	return cfac
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (cfac *CouponFixAmountCreate) SetNillableUpdatedAt(u *uint32) *CouponFixAmountCreate {
	if u != nil {
		cfac.SetUpdatedAt(*u)
	}
	return cfac
}

// SetDeletedAt sets the "deleted_at" field.
func (cfac *CouponFixAmountCreate) SetDeletedAt(u uint32) *CouponFixAmountCreate {
	cfac.mutation.SetDeletedAt(u)
	return cfac
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (cfac *CouponFixAmountCreate) SetNillableDeletedAt(u *uint32) *CouponFixAmountCreate {
	if u != nil {
		cfac.SetDeletedAt(*u)
	}
	return cfac
}

// SetAppID sets the "app_id" field.
func (cfac *CouponFixAmountCreate) SetAppID(u uuid.UUID) *CouponFixAmountCreate {
	cfac.mutation.SetAppID(u)
	return cfac
}

// SetDenomination sets the "denomination" field.
func (cfac *CouponFixAmountCreate) SetDenomination(d decimal.Decimal) *CouponFixAmountCreate {
	cfac.mutation.SetDenomination(d)
	return cfac
}

// SetNillableDenomination sets the "denomination" field if the given value is not nil.
func (cfac *CouponFixAmountCreate) SetNillableDenomination(d *decimal.Decimal) *CouponFixAmountCreate {
	if d != nil {
		cfac.SetDenomination(*d)
	}
	return cfac
}

// SetCirculation sets the "circulation" field.
func (cfac *CouponFixAmountCreate) SetCirculation(d decimal.Decimal) *CouponFixAmountCreate {
	cfac.mutation.SetCirculation(d)
	return cfac
}

// SetNillableCirculation sets the "circulation" field if the given value is not nil.
func (cfac *CouponFixAmountCreate) SetNillableCirculation(d *decimal.Decimal) *CouponFixAmountCreate {
	if d != nil {
		cfac.SetCirculation(*d)
	}
	return cfac
}

// SetReleasedByUserID sets the "released_by_user_id" field.
func (cfac *CouponFixAmountCreate) SetReleasedByUserID(u uuid.UUID) *CouponFixAmountCreate {
	cfac.mutation.SetReleasedByUserID(u)
	return cfac
}

// SetStartAt sets the "start_at" field.
func (cfac *CouponFixAmountCreate) SetStartAt(u uint32) *CouponFixAmountCreate {
	cfac.mutation.SetStartAt(u)
	return cfac
}

// SetNillableStartAt sets the "start_at" field if the given value is not nil.
func (cfac *CouponFixAmountCreate) SetNillableStartAt(u *uint32) *CouponFixAmountCreate {
	if u != nil {
		cfac.SetStartAt(*u)
	}
	return cfac
}

// SetDurationDays sets the "duration_days" field.
func (cfac *CouponFixAmountCreate) SetDurationDays(u uint32) *CouponFixAmountCreate {
	cfac.mutation.SetDurationDays(u)
	return cfac
}

// SetNillableDurationDays sets the "duration_days" field if the given value is not nil.
func (cfac *CouponFixAmountCreate) SetNillableDurationDays(u *uint32) *CouponFixAmountCreate {
	if u != nil {
		cfac.SetDurationDays(*u)
	}
	return cfac
}

// SetMessage sets the "message" field.
func (cfac *CouponFixAmountCreate) SetMessage(s string) *CouponFixAmountCreate {
	cfac.mutation.SetMessage(s)
	return cfac
}

// SetNillableMessage sets the "message" field if the given value is not nil.
func (cfac *CouponFixAmountCreate) SetNillableMessage(s *string) *CouponFixAmountCreate {
	if s != nil {
		cfac.SetMessage(*s)
	}
	return cfac
}

// SetName sets the "name" field.
func (cfac *CouponFixAmountCreate) SetName(s string) *CouponFixAmountCreate {
	cfac.mutation.SetName(s)
	return cfac
}

// SetNillableName sets the "name" field if the given value is not nil.
func (cfac *CouponFixAmountCreate) SetNillableName(s *string) *CouponFixAmountCreate {
	if s != nil {
		cfac.SetName(*s)
	}
	return cfac
}

// SetAllocated sets the "allocated" field.
func (cfac *CouponFixAmountCreate) SetAllocated(u uint32) *CouponFixAmountCreate {
	cfac.mutation.SetAllocated(u)
	return cfac
}

// SetNillableAllocated sets the "allocated" field if the given value is not nil.
func (cfac *CouponFixAmountCreate) SetNillableAllocated(u *uint32) *CouponFixAmountCreate {
	if u != nil {
		cfac.SetAllocated(*u)
	}
	return cfac
}

// SetID sets the "id" field.
func (cfac *CouponFixAmountCreate) SetID(u uuid.UUID) *CouponFixAmountCreate {
	cfac.mutation.SetID(u)
	return cfac
}

// SetNillableID sets the "id" field if the given value is not nil.
func (cfac *CouponFixAmountCreate) SetNillableID(u *uuid.UUID) *CouponFixAmountCreate {
	if u != nil {
		cfac.SetID(*u)
	}
	return cfac
}

// Mutation returns the CouponFixAmountMutation object of the builder.
func (cfac *CouponFixAmountCreate) Mutation() *CouponFixAmountMutation {
	return cfac.mutation
}

// Save creates the CouponFixAmount in the database.
func (cfac *CouponFixAmountCreate) Save(ctx context.Context) (*CouponFixAmount, error) {
	var (
		err  error
		node *CouponFixAmount
	)
	if err := cfac.defaults(); err != nil {
		return nil, err
	}
	if len(cfac.hooks) == 0 {
		if err = cfac.check(); err != nil {
			return nil, err
		}
		node, err = cfac.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CouponFixAmountMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cfac.check(); err != nil {
				return nil, err
			}
			cfac.mutation = mutation
			if node, err = cfac.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(cfac.hooks) - 1; i >= 0; i-- {
			if cfac.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cfac.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, cfac.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*CouponFixAmount)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from CouponFixAmountMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (cfac *CouponFixAmountCreate) SaveX(ctx context.Context) *CouponFixAmount {
	v, err := cfac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cfac *CouponFixAmountCreate) Exec(ctx context.Context) error {
	_, err := cfac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cfac *CouponFixAmountCreate) ExecX(ctx context.Context) {
	if err := cfac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cfac *CouponFixAmountCreate) defaults() error {
	if _, ok := cfac.mutation.CreatedAt(); !ok {
		if couponfixamount.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized couponfixamount.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := couponfixamount.DefaultCreatedAt()
		cfac.mutation.SetCreatedAt(v)
	}
	if _, ok := cfac.mutation.UpdatedAt(); !ok {
		if couponfixamount.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized couponfixamount.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := couponfixamount.DefaultUpdatedAt()
		cfac.mutation.SetUpdatedAt(v)
	}
	if _, ok := cfac.mutation.DeletedAt(); !ok {
		if couponfixamount.DefaultDeletedAt == nil {
			return fmt.Errorf("ent: uninitialized couponfixamount.DefaultDeletedAt (forgotten import ent/runtime?)")
		}
		v := couponfixamount.DefaultDeletedAt()
		cfac.mutation.SetDeletedAt(v)
	}
	if _, ok := cfac.mutation.Denomination(); !ok {
		v := couponfixamount.DefaultDenomination
		cfac.mutation.SetDenomination(v)
	}
	if _, ok := cfac.mutation.Circulation(); !ok {
		v := couponfixamount.DefaultCirculation
		cfac.mutation.SetCirculation(v)
	}
	if _, ok := cfac.mutation.StartAt(); !ok {
		v := couponfixamount.DefaultStartAt
		cfac.mutation.SetStartAt(v)
	}
	if _, ok := cfac.mutation.DurationDays(); !ok {
		v := couponfixamount.DefaultDurationDays
		cfac.mutation.SetDurationDays(v)
	}
	if _, ok := cfac.mutation.Message(); !ok {
		v := couponfixamount.DefaultMessage
		cfac.mutation.SetMessage(v)
	}
	if _, ok := cfac.mutation.Name(); !ok {
		v := couponfixamount.DefaultName
		cfac.mutation.SetName(v)
	}
	if _, ok := cfac.mutation.Allocated(); !ok {
		v := couponfixamount.DefaultAllocated
		cfac.mutation.SetAllocated(v)
	}
	if _, ok := cfac.mutation.ID(); !ok {
		if couponfixamount.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized couponfixamount.DefaultID (forgotten import ent/runtime?)")
		}
		v := couponfixamount.DefaultID()
		cfac.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (cfac *CouponFixAmountCreate) check() error {
	if _, ok := cfac.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "CouponFixAmount.created_at"`)}
	}
	if _, ok := cfac.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "CouponFixAmount.updated_at"`)}
	}
	if _, ok := cfac.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`ent: missing required field "CouponFixAmount.deleted_at"`)}
	}
	if _, ok := cfac.mutation.AppID(); !ok {
		return &ValidationError{Name: "app_id", err: errors.New(`ent: missing required field "CouponFixAmount.app_id"`)}
	}
	if _, ok := cfac.mutation.ReleasedByUserID(); !ok {
		return &ValidationError{Name: "released_by_user_id", err: errors.New(`ent: missing required field "CouponFixAmount.released_by_user_id"`)}
	}
	return nil
}

func (cfac *CouponFixAmountCreate) sqlSave(ctx context.Context) (*CouponFixAmount, error) {
	_node, _spec := cfac.createSpec()
	if err := sqlgraph.CreateNode(ctx, cfac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (cfac *CouponFixAmountCreate) createSpec() (*CouponFixAmount, *sqlgraph.CreateSpec) {
	var (
		_node = &CouponFixAmount{config: cfac.config}
		_spec = &sqlgraph.CreateSpec{
			Table: couponfixamount.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: couponfixamount.FieldID,
			},
		}
	)
	_spec.OnConflict = cfac.conflict
	if id, ok := cfac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := cfac.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: couponfixamount.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := cfac.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: couponfixamount.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := cfac.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: couponfixamount.FieldDeletedAt,
		})
		_node.DeletedAt = value
	}
	if value, ok := cfac.mutation.AppID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: couponfixamount.FieldAppID,
		})
		_node.AppID = value
	}
	if value, ok := cfac.mutation.Denomination(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: couponfixamount.FieldDenomination,
		})
		_node.Denomination = value
	}
	if value, ok := cfac.mutation.Circulation(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: couponfixamount.FieldCirculation,
		})
		_node.Circulation = value
	}
	if value, ok := cfac.mutation.ReleasedByUserID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: couponfixamount.FieldReleasedByUserID,
		})
		_node.ReleasedByUserID = value
	}
	if value, ok := cfac.mutation.StartAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: couponfixamount.FieldStartAt,
		})
		_node.StartAt = value
	}
	if value, ok := cfac.mutation.DurationDays(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: couponfixamount.FieldDurationDays,
		})
		_node.DurationDays = value
	}
	if value, ok := cfac.mutation.Message(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: couponfixamount.FieldMessage,
		})
		_node.Message = value
	}
	if value, ok := cfac.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: couponfixamount.FieldName,
		})
		_node.Name = value
	}
	if value, ok := cfac.mutation.Allocated(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: couponfixamount.FieldAllocated,
		})
		_node.Allocated = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.CouponFixAmount.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CouponFixAmountUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (cfac *CouponFixAmountCreate) OnConflict(opts ...sql.ConflictOption) *CouponFixAmountUpsertOne {
	cfac.conflict = opts
	return &CouponFixAmountUpsertOne{
		create: cfac,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.CouponFixAmount.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (cfac *CouponFixAmountCreate) OnConflictColumns(columns ...string) *CouponFixAmountUpsertOne {
	cfac.conflict = append(cfac.conflict, sql.ConflictColumns(columns...))
	return &CouponFixAmountUpsertOne{
		create: cfac,
	}
}

type (
	// CouponFixAmountUpsertOne is the builder for "upsert"-ing
	//  one CouponFixAmount node.
	CouponFixAmountUpsertOne struct {
		create *CouponFixAmountCreate
	}

	// CouponFixAmountUpsert is the "OnConflict" setter.
	CouponFixAmountUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *CouponFixAmountUpsert) SetCreatedAt(v uint32) *CouponFixAmountUpsert {
	u.Set(couponfixamount.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *CouponFixAmountUpsert) UpdateCreatedAt() *CouponFixAmountUpsert {
	u.SetExcluded(couponfixamount.FieldCreatedAt)
	return u
}

// AddCreatedAt adds v to the "created_at" field.
func (u *CouponFixAmountUpsert) AddCreatedAt(v uint32) *CouponFixAmountUpsert {
	u.Add(couponfixamount.FieldCreatedAt, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *CouponFixAmountUpsert) SetUpdatedAt(v uint32) *CouponFixAmountUpsert {
	u.Set(couponfixamount.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *CouponFixAmountUpsert) UpdateUpdatedAt() *CouponFixAmountUpsert {
	u.SetExcluded(couponfixamount.FieldUpdatedAt)
	return u
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *CouponFixAmountUpsert) AddUpdatedAt(v uint32) *CouponFixAmountUpsert {
	u.Add(couponfixamount.FieldUpdatedAt, v)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *CouponFixAmountUpsert) SetDeletedAt(v uint32) *CouponFixAmountUpsert {
	u.Set(couponfixamount.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *CouponFixAmountUpsert) UpdateDeletedAt() *CouponFixAmountUpsert {
	u.SetExcluded(couponfixamount.FieldDeletedAt)
	return u
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *CouponFixAmountUpsert) AddDeletedAt(v uint32) *CouponFixAmountUpsert {
	u.Add(couponfixamount.FieldDeletedAt, v)
	return u
}

// SetAppID sets the "app_id" field.
func (u *CouponFixAmountUpsert) SetAppID(v uuid.UUID) *CouponFixAmountUpsert {
	u.Set(couponfixamount.FieldAppID, v)
	return u
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *CouponFixAmountUpsert) UpdateAppID() *CouponFixAmountUpsert {
	u.SetExcluded(couponfixamount.FieldAppID)
	return u
}

// SetDenomination sets the "denomination" field.
func (u *CouponFixAmountUpsert) SetDenomination(v decimal.Decimal) *CouponFixAmountUpsert {
	u.Set(couponfixamount.FieldDenomination, v)
	return u
}

// UpdateDenomination sets the "denomination" field to the value that was provided on create.
func (u *CouponFixAmountUpsert) UpdateDenomination() *CouponFixAmountUpsert {
	u.SetExcluded(couponfixamount.FieldDenomination)
	return u
}

// ClearDenomination clears the value of the "denomination" field.
func (u *CouponFixAmountUpsert) ClearDenomination() *CouponFixAmountUpsert {
	u.SetNull(couponfixamount.FieldDenomination)
	return u
}

// SetCirculation sets the "circulation" field.
func (u *CouponFixAmountUpsert) SetCirculation(v decimal.Decimal) *CouponFixAmountUpsert {
	u.Set(couponfixamount.FieldCirculation, v)
	return u
}

// UpdateCirculation sets the "circulation" field to the value that was provided on create.
func (u *CouponFixAmountUpsert) UpdateCirculation() *CouponFixAmountUpsert {
	u.SetExcluded(couponfixamount.FieldCirculation)
	return u
}

// ClearCirculation clears the value of the "circulation" field.
func (u *CouponFixAmountUpsert) ClearCirculation() *CouponFixAmountUpsert {
	u.SetNull(couponfixamount.FieldCirculation)
	return u
}

// SetReleasedByUserID sets the "released_by_user_id" field.
func (u *CouponFixAmountUpsert) SetReleasedByUserID(v uuid.UUID) *CouponFixAmountUpsert {
	u.Set(couponfixamount.FieldReleasedByUserID, v)
	return u
}

// UpdateReleasedByUserID sets the "released_by_user_id" field to the value that was provided on create.
func (u *CouponFixAmountUpsert) UpdateReleasedByUserID() *CouponFixAmountUpsert {
	u.SetExcluded(couponfixamount.FieldReleasedByUserID)
	return u
}

// SetStartAt sets the "start_at" field.
func (u *CouponFixAmountUpsert) SetStartAt(v uint32) *CouponFixAmountUpsert {
	u.Set(couponfixamount.FieldStartAt, v)
	return u
}

// UpdateStartAt sets the "start_at" field to the value that was provided on create.
func (u *CouponFixAmountUpsert) UpdateStartAt() *CouponFixAmountUpsert {
	u.SetExcluded(couponfixamount.FieldStartAt)
	return u
}

// AddStartAt adds v to the "start_at" field.
func (u *CouponFixAmountUpsert) AddStartAt(v uint32) *CouponFixAmountUpsert {
	u.Add(couponfixamount.FieldStartAt, v)
	return u
}

// ClearStartAt clears the value of the "start_at" field.
func (u *CouponFixAmountUpsert) ClearStartAt() *CouponFixAmountUpsert {
	u.SetNull(couponfixamount.FieldStartAt)
	return u
}

// SetDurationDays sets the "duration_days" field.
func (u *CouponFixAmountUpsert) SetDurationDays(v uint32) *CouponFixAmountUpsert {
	u.Set(couponfixamount.FieldDurationDays, v)
	return u
}

// UpdateDurationDays sets the "duration_days" field to the value that was provided on create.
func (u *CouponFixAmountUpsert) UpdateDurationDays() *CouponFixAmountUpsert {
	u.SetExcluded(couponfixamount.FieldDurationDays)
	return u
}

// AddDurationDays adds v to the "duration_days" field.
func (u *CouponFixAmountUpsert) AddDurationDays(v uint32) *CouponFixAmountUpsert {
	u.Add(couponfixamount.FieldDurationDays, v)
	return u
}

// ClearDurationDays clears the value of the "duration_days" field.
func (u *CouponFixAmountUpsert) ClearDurationDays() *CouponFixAmountUpsert {
	u.SetNull(couponfixamount.FieldDurationDays)
	return u
}

// SetMessage sets the "message" field.
func (u *CouponFixAmountUpsert) SetMessage(v string) *CouponFixAmountUpsert {
	u.Set(couponfixamount.FieldMessage, v)
	return u
}

// UpdateMessage sets the "message" field to the value that was provided on create.
func (u *CouponFixAmountUpsert) UpdateMessage() *CouponFixAmountUpsert {
	u.SetExcluded(couponfixamount.FieldMessage)
	return u
}

// ClearMessage clears the value of the "message" field.
func (u *CouponFixAmountUpsert) ClearMessage() *CouponFixAmountUpsert {
	u.SetNull(couponfixamount.FieldMessage)
	return u
}

// SetName sets the "name" field.
func (u *CouponFixAmountUpsert) SetName(v string) *CouponFixAmountUpsert {
	u.Set(couponfixamount.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *CouponFixAmountUpsert) UpdateName() *CouponFixAmountUpsert {
	u.SetExcluded(couponfixamount.FieldName)
	return u
}

// ClearName clears the value of the "name" field.
func (u *CouponFixAmountUpsert) ClearName() *CouponFixAmountUpsert {
	u.SetNull(couponfixamount.FieldName)
	return u
}

// SetAllocated sets the "allocated" field.
func (u *CouponFixAmountUpsert) SetAllocated(v uint32) *CouponFixAmountUpsert {
	u.Set(couponfixamount.FieldAllocated, v)
	return u
}

// UpdateAllocated sets the "allocated" field to the value that was provided on create.
func (u *CouponFixAmountUpsert) UpdateAllocated() *CouponFixAmountUpsert {
	u.SetExcluded(couponfixamount.FieldAllocated)
	return u
}

// AddAllocated adds v to the "allocated" field.
func (u *CouponFixAmountUpsert) AddAllocated(v uint32) *CouponFixAmountUpsert {
	u.Add(couponfixamount.FieldAllocated, v)
	return u
}

// ClearAllocated clears the value of the "allocated" field.
func (u *CouponFixAmountUpsert) ClearAllocated() *CouponFixAmountUpsert {
	u.SetNull(couponfixamount.FieldAllocated)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.CouponFixAmount.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(couponfixamount.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *CouponFixAmountUpsertOne) UpdateNewValues() *CouponFixAmountUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(couponfixamount.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.CouponFixAmount.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *CouponFixAmountUpsertOne) Ignore() *CouponFixAmountUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CouponFixAmountUpsertOne) DoNothing() *CouponFixAmountUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CouponFixAmountCreate.OnConflict
// documentation for more info.
func (u *CouponFixAmountUpsertOne) Update(set func(*CouponFixAmountUpsert)) *CouponFixAmountUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CouponFixAmountUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *CouponFixAmountUpsertOne) SetCreatedAt(v uint32) *CouponFixAmountUpsertOne {
	return u.Update(func(s *CouponFixAmountUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *CouponFixAmountUpsertOne) AddCreatedAt(v uint32) *CouponFixAmountUpsertOne {
	return u.Update(func(s *CouponFixAmountUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *CouponFixAmountUpsertOne) UpdateCreatedAt() *CouponFixAmountUpsertOne {
	return u.Update(func(s *CouponFixAmountUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *CouponFixAmountUpsertOne) SetUpdatedAt(v uint32) *CouponFixAmountUpsertOne {
	return u.Update(func(s *CouponFixAmountUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *CouponFixAmountUpsertOne) AddUpdatedAt(v uint32) *CouponFixAmountUpsertOne {
	return u.Update(func(s *CouponFixAmountUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *CouponFixAmountUpsertOne) UpdateUpdatedAt() *CouponFixAmountUpsertOne {
	return u.Update(func(s *CouponFixAmountUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *CouponFixAmountUpsertOne) SetDeletedAt(v uint32) *CouponFixAmountUpsertOne {
	return u.Update(func(s *CouponFixAmountUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *CouponFixAmountUpsertOne) AddDeletedAt(v uint32) *CouponFixAmountUpsertOne {
	return u.Update(func(s *CouponFixAmountUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *CouponFixAmountUpsertOne) UpdateDeletedAt() *CouponFixAmountUpsertOne {
	return u.Update(func(s *CouponFixAmountUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetAppID sets the "app_id" field.
func (u *CouponFixAmountUpsertOne) SetAppID(v uuid.UUID) *CouponFixAmountUpsertOne {
	return u.Update(func(s *CouponFixAmountUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *CouponFixAmountUpsertOne) UpdateAppID() *CouponFixAmountUpsertOne {
	return u.Update(func(s *CouponFixAmountUpsert) {
		s.UpdateAppID()
	})
}

// SetDenomination sets the "denomination" field.
func (u *CouponFixAmountUpsertOne) SetDenomination(v decimal.Decimal) *CouponFixAmountUpsertOne {
	return u.Update(func(s *CouponFixAmountUpsert) {
		s.SetDenomination(v)
	})
}

// UpdateDenomination sets the "denomination" field to the value that was provided on create.
func (u *CouponFixAmountUpsertOne) UpdateDenomination() *CouponFixAmountUpsertOne {
	return u.Update(func(s *CouponFixAmountUpsert) {
		s.UpdateDenomination()
	})
}

// ClearDenomination clears the value of the "denomination" field.
func (u *CouponFixAmountUpsertOne) ClearDenomination() *CouponFixAmountUpsertOne {
	return u.Update(func(s *CouponFixAmountUpsert) {
		s.ClearDenomination()
	})
}

// SetCirculation sets the "circulation" field.
func (u *CouponFixAmountUpsertOne) SetCirculation(v decimal.Decimal) *CouponFixAmountUpsertOne {
	return u.Update(func(s *CouponFixAmountUpsert) {
		s.SetCirculation(v)
	})
}

// UpdateCirculation sets the "circulation" field to the value that was provided on create.
func (u *CouponFixAmountUpsertOne) UpdateCirculation() *CouponFixAmountUpsertOne {
	return u.Update(func(s *CouponFixAmountUpsert) {
		s.UpdateCirculation()
	})
}

// ClearCirculation clears the value of the "circulation" field.
func (u *CouponFixAmountUpsertOne) ClearCirculation() *CouponFixAmountUpsertOne {
	return u.Update(func(s *CouponFixAmountUpsert) {
		s.ClearCirculation()
	})
}

// SetReleasedByUserID sets the "released_by_user_id" field.
func (u *CouponFixAmountUpsertOne) SetReleasedByUserID(v uuid.UUID) *CouponFixAmountUpsertOne {
	return u.Update(func(s *CouponFixAmountUpsert) {
		s.SetReleasedByUserID(v)
	})
}

// UpdateReleasedByUserID sets the "released_by_user_id" field to the value that was provided on create.
func (u *CouponFixAmountUpsertOne) UpdateReleasedByUserID() *CouponFixAmountUpsertOne {
	return u.Update(func(s *CouponFixAmountUpsert) {
		s.UpdateReleasedByUserID()
	})
}

// SetStartAt sets the "start_at" field.
func (u *CouponFixAmountUpsertOne) SetStartAt(v uint32) *CouponFixAmountUpsertOne {
	return u.Update(func(s *CouponFixAmountUpsert) {
		s.SetStartAt(v)
	})
}

// AddStartAt adds v to the "start_at" field.
func (u *CouponFixAmountUpsertOne) AddStartAt(v uint32) *CouponFixAmountUpsertOne {
	return u.Update(func(s *CouponFixAmountUpsert) {
		s.AddStartAt(v)
	})
}

// UpdateStartAt sets the "start_at" field to the value that was provided on create.
func (u *CouponFixAmountUpsertOne) UpdateStartAt() *CouponFixAmountUpsertOne {
	return u.Update(func(s *CouponFixAmountUpsert) {
		s.UpdateStartAt()
	})
}

// ClearStartAt clears the value of the "start_at" field.
func (u *CouponFixAmountUpsertOne) ClearStartAt() *CouponFixAmountUpsertOne {
	return u.Update(func(s *CouponFixAmountUpsert) {
		s.ClearStartAt()
	})
}

// SetDurationDays sets the "duration_days" field.
func (u *CouponFixAmountUpsertOne) SetDurationDays(v uint32) *CouponFixAmountUpsertOne {
	return u.Update(func(s *CouponFixAmountUpsert) {
		s.SetDurationDays(v)
	})
}

// AddDurationDays adds v to the "duration_days" field.
func (u *CouponFixAmountUpsertOne) AddDurationDays(v uint32) *CouponFixAmountUpsertOne {
	return u.Update(func(s *CouponFixAmountUpsert) {
		s.AddDurationDays(v)
	})
}

// UpdateDurationDays sets the "duration_days" field to the value that was provided on create.
func (u *CouponFixAmountUpsertOne) UpdateDurationDays() *CouponFixAmountUpsertOne {
	return u.Update(func(s *CouponFixAmountUpsert) {
		s.UpdateDurationDays()
	})
}

// ClearDurationDays clears the value of the "duration_days" field.
func (u *CouponFixAmountUpsertOne) ClearDurationDays() *CouponFixAmountUpsertOne {
	return u.Update(func(s *CouponFixAmountUpsert) {
		s.ClearDurationDays()
	})
}

// SetMessage sets the "message" field.
func (u *CouponFixAmountUpsertOne) SetMessage(v string) *CouponFixAmountUpsertOne {
	return u.Update(func(s *CouponFixAmountUpsert) {
		s.SetMessage(v)
	})
}

// UpdateMessage sets the "message" field to the value that was provided on create.
func (u *CouponFixAmountUpsertOne) UpdateMessage() *CouponFixAmountUpsertOne {
	return u.Update(func(s *CouponFixAmountUpsert) {
		s.UpdateMessage()
	})
}

// ClearMessage clears the value of the "message" field.
func (u *CouponFixAmountUpsertOne) ClearMessage() *CouponFixAmountUpsertOne {
	return u.Update(func(s *CouponFixAmountUpsert) {
		s.ClearMessage()
	})
}

// SetName sets the "name" field.
func (u *CouponFixAmountUpsertOne) SetName(v string) *CouponFixAmountUpsertOne {
	return u.Update(func(s *CouponFixAmountUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *CouponFixAmountUpsertOne) UpdateName() *CouponFixAmountUpsertOne {
	return u.Update(func(s *CouponFixAmountUpsert) {
		s.UpdateName()
	})
}

// ClearName clears the value of the "name" field.
func (u *CouponFixAmountUpsertOne) ClearName() *CouponFixAmountUpsertOne {
	return u.Update(func(s *CouponFixAmountUpsert) {
		s.ClearName()
	})
}

// SetAllocated sets the "allocated" field.
func (u *CouponFixAmountUpsertOne) SetAllocated(v uint32) *CouponFixAmountUpsertOne {
	return u.Update(func(s *CouponFixAmountUpsert) {
		s.SetAllocated(v)
	})
}

// AddAllocated adds v to the "allocated" field.
func (u *CouponFixAmountUpsertOne) AddAllocated(v uint32) *CouponFixAmountUpsertOne {
	return u.Update(func(s *CouponFixAmountUpsert) {
		s.AddAllocated(v)
	})
}

// UpdateAllocated sets the "allocated" field to the value that was provided on create.
func (u *CouponFixAmountUpsertOne) UpdateAllocated() *CouponFixAmountUpsertOne {
	return u.Update(func(s *CouponFixAmountUpsert) {
		s.UpdateAllocated()
	})
}

// ClearAllocated clears the value of the "allocated" field.
func (u *CouponFixAmountUpsertOne) ClearAllocated() *CouponFixAmountUpsertOne {
	return u.Update(func(s *CouponFixAmountUpsert) {
		s.ClearAllocated()
	})
}

// Exec executes the query.
func (u *CouponFixAmountUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for CouponFixAmountCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CouponFixAmountUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *CouponFixAmountUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: CouponFixAmountUpsertOne.ID is not supported by MySQL driver. Use CouponFixAmountUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *CouponFixAmountUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// CouponFixAmountCreateBulk is the builder for creating many CouponFixAmount entities in bulk.
type CouponFixAmountCreateBulk struct {
	config
	builders []*CouponFixAmountCreate
	conflict []sql.ConflictOption
}

// Save creates the CouponFixAmount entities in the database.
func (cfacb *CouponFixAmountCreateBulk) Save(ctx context.Context) ([]*CouponFixAmount, error) {
	specs := make([]*sqlgraph.CreateSpec, len(cfacb.builders))
	nodes := make([]*CouponFixAmount, len(cfacb.builders))
	mutators := make([]Mutator, len(cfacb.builders))
	for i := range cfacb.builders {
		func(i int, root context.Context) {
			builder := cfacb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CouponFixAmountMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cfacb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = cfacb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cfacb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cfacb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (cfacb *CouponFixAmountCreateBulk) SaveX(ctx context.Context) []*CouponFixAmount {
	v, err := cfacb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cfacb *CouponFixAmountCreateBulk) Exec(ctx context.Context) error {
	_, err := cfacb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cfacb *CouponFixAmountCreateBulk) ExecX(ctx context.Context) {
	if err := cfacb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.CouponFixAmount.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CouponFixAmountUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (cfacb *CouponFixAmountCreateBulk) OnConflict(opts ...sql.ConflictOption) *CouponFixAmountUpsertBulk {
	cfacb.conflict = opts
	return &CouponFixAmountUpsertBulk{
		create: cfacb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.CouponFixAmount.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (cfacb *CouponFixAmountCreateBulk) OnConflictColumns(columns ...string) *CouponFixAmountUpsertBulk {
	cfacb.conflict = append(cfacb.conflict, sql.ConflictColumns(columns...))
	return &CouponFixAmountUpsertBulk{
		create: cfacb,
	}
}

// CouponFixAmountUpsertBulk is the builder for "upsert"-ing
// a bulk of CouponFixAmount nodes.
type CouponFixAmountUpsertBulk struct {
	create *CouponFixAmountCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.CouponFixAmount.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(couponfixamount.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *CouponFixAmountUpsertBulk) UpdateNewValues() *CouponFixAmountUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(couponfixamount.FieldID)
				return
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.CouponFixAmount.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *CouponFixAmountUpsertBulk) Ignore() *CouponFixAmountUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CouponFixAmountUpsertBulk) DoNothing() *CouponFixAmountUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CouponFixAmountCreateBulk.OnConflict
// documentation for more info.
func (u *CouponFixAmountUpsertBulk) Update(set func(*CouponFixAmountUpsert)) *CouponFixAmountUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CouponFixAmountUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *CouponFixAmountUpsertBulk) SetCreatedAt(v uint32) *CouponFixAmountUpsertBulk {
	return u.Update(func(s *CouponFixAmountUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *CouponFixAmountUpsertBulk) AddCreatedAt(v uint32) *CouponFixAmountUpsertBulk {
	return u.Update(func(s *CouponFixAmountUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *CouponFixAmountUpsertBulk) UpdateCreatedAt() *CouponFixAmountUpsertBulk {
	return u.Update(func(s *CouponFixAmountUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *CouponFixAmountUpsertBulk) SetUpdatedAt(v uint32) *CouponFixAmountUpsertBulk {
	return u.Update(func(s *CouponFixAmountUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *CouponFixAmountUpsertBulk) AddUpdatedAt(v uint32) *CouponFixAmountUpsertBulk {
	return u.Update(func(s *CouponFixAmountUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *CouponFixAmountUpsertBulk) UpdateUpdatedAt() *CouponFixAmountUpsertBulk {
	return u.Update(func(s *CouponFixAmountUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *CouponFixAmountUpsertBulk) SetDeletedAt(v uint32) *CouponFixAmountUpsertBulk {
	return u.Update(func(s *CouponFixAmountUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *CouponFixAmountUpsertBulk) AddDeletedAt(v uint32) *CouponFixAmountUpsertBulk {
	return u.Update(func(s *CouponFixAmountUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *CouponFixAmountUpsertBulk) UpdateDeletedAt() *CouponFixAmountUpsertBulk {
	return u.Update(func(s *CouponFixAmountUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetAppID sets the "app_id" field.
func (u *CouponFixAmountUpsertBulk) SetAppID(v uuid.UUID) *CouponFixAmountUpsertBulk {
	return u.Update(func(s *CouponFixAmountUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *CouponFixAmountUpsertBulk) UpdateAppID() *CouponFixAmountUpsertBulk {
	return u.Update(func(s *CouponFixAmountUpsert) {
		s.UpdateAppID()
	})
}

// SetDenomination sets the "denomination" field.
func (u *CouponFixAmountUpsertBulk) SetDenomination(v decimal.Decimal) *CouponFixAmountUpsertBulk {
	return u.Update(func(s *CouponFixAmountUpsert) {
		s.SetDenomination(v)
	})
}

// UpdateDenomination sets the "denomination" field to the value that was provided on create.
func (u *CouponFixAmountUpsertBulk) UpdateDenomination() *CouponFixAmountUpsertBulk {
	return u.Update(func(s *CouponFixAmountUpsert) {
		s.UpdateDenomination()
	})
}

// ClearDenomination clears the value of the "denomination" field.
func (u *CouponFixAmountUpsertBulk) ClearDenomination() *CouponFixAmountUpsertBulk {
	return u.Update(func(s *CouponFixAmountUpsert) {
		s.ClearDenomination()
	})
}

// SetCirculation sets the "circulation" field.
func (u *CouponFixAmountUpsertBulk) SetCirculation(v decimal.Decimal) *CouponFixAmountUpsertBulk {
	return u.Update(func(s *CouponFixAmountUpsert) {
		s.SetCirculation(v)
	})
}

// UpdateCirculation sets the "circulation" field to the value that was provided on create.
func (u *CouponFixAmountUpsertBulk) UpdateCirculation() *CouponFixAmountUpsertBulk {
	return u.Update(func(s *CouponFixAmountUpsert) {
		s.UpdateCirculation()
	})
}

// ClearCirculation clears the value of the "circulation" field.
func (u *CouponFixAmountUpsertBulk) ClearCirculation() *CouponFixAmountUpsertBulk {
	return u.Update(func(s *CouponFixAmountUpsert) {
		s.ClearCirculation()
	})
}

// SetReleasedByUserID sets the "released_by_user_id" field.
func (u *CouponFixAmountUpsertBulk) SetReleasedByUserID(v uuid.UUID) *CouponFixAmountUpsertBulk {
	return u.Update(func(s *CouponFixAmountUpsert) {
		s.SetReleasedByUserID(v)
	})
}

// UpdateReleasedByUserID sets the "released_by_user_id" field to the value that was provided on create.
func (u *CouponFixAmountUpsertBulk) UpdateReleasedByUserID() *CouponFixAmountUpsertBulk {
	return u.Update(func(s *CouponFixAmountUpsert) {
		s.UpdateReleasedByUserID()
	})
}

// SetStartAt sets the "start_at" field.
func (u *CouponFixAmountUpsertBulk) SetStartAt(v uint32) *CouponFixAmountUpsertBulk {
	return u.Update(func(s *CouponFixAmountUpsert) {
		s.SetStartAt(v)
	})
}

// AddStartAt adds v to the "start_at" field.
func (u *CouponFixAmountUpsertBulk) AddStartAt(v uint32) *CouponFixAmountUpsertBulk {
	return u.Update(func(s *CouponFixAmountUpsert) {
		s.AddStartAt(v)
	})
}

// UpdateStartAt sets the "start_at" field to the value that was provided on create.
func (u *CouponFixAmountUpsertBulk) UpdateStartAt() *CouponFixAmountUpsertBulk {
	return u.Update(func(s *CouponFixAmountUpsert) {
		s.UpdateStartAt()
	})
}

// ClearStartAt clears the value of the "start_at" field.
func (u *CouponFixAmountUpsertBulk) ClearStartAt() *CouponFixAmountUpsertBulk {
	return u.Update(func(s *CouponFixAmountUpsert) {
		s.ClearStartAt()
	})
}

// SetDurationDays sets the "duration_days" field.
func (u *CouponFixAmountUpsertBulk) SetDurationDays(v uint32) *CouponFixAmountUpsertBulk {
	return u.Update(func(s *CouponFixAmountUpsert) {
		s.SetDurationDays(v)
	})
}

// AddDurationDays adds v to the "duration_days" field.
func (u *CouponFixAmountUpsertBulk) AddDurationDays(v uint32) *CouponFixAmountUpsertBulk {
	return u.Update(func(s *CouponFixAmountUpsert) {
		s.AddDurationDays(v)
	})
}

// UpdateDurationDays sets the "duration_days" field to the value that was provided on create.
func (u *CouponFixAmountUpsertBulk) UpdateDurationDays() *CouponFixAmountUpsertBulk {
	return u.Update(func(s *CouponFixAmountUpsert) {
		s.UpdateDurationDays()
	})
}

// ClearDurationDays clears the value of the "duration_days" field.
func (u *CouponFixAmountUpsertBulk) ClearDurationDays() *CouponFixAmountUpsertBulk {
	return u.Update(func(s *CouponFixAmountUpsert) {
		s.ClearDurationDays()
	})
}

// SetMessage sets the "message" field.
func (u *CouponFixAmountUpsertBulk) SetMessage(v string) *CouponFixAmountUpsertBulk {
	return u.Update(func(s *CouponFixAmountUpsert) {
		s.SetMessage(v)
	})
}

// UpdateMessage sets the "message" field to the value that was provided on create.
func (u *CouponFixAmountUpsertBulk) UpdateMessage() *CouponFixAmountUpsertBulk {
	return u.Update(func(s *CouponFixAmountUpsert) {
		s.UpdateMessage()
	})
}

// ClearMessage clears the value of the "message" field.
func (u *CouponFixAmountUpsertBulk) ClearMessage() *CouponFixAmountUpsertBulk {
	return u.Update(func(s *CouponFixAmountUpsert) {
		s.ClearMessage()
	})
}

// SetName sets the "name" field.
func (u *CouponFixAmountUpsertBulk) SetName(v string) *CouponFixAmountUpsertBulk {
	return u.Update(func(s *CouponFixAmountUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *CouponFixAmountUpsertBulk) UpdateName() *CouponFixAmountUpsertBulk {
	return u.Update(func(s *CouponFixAmountUpsert) {
		s.UpdateName()
	})
}

// ClearName clears the value of the "name" field.
func (u *CouponFixAmountUpsertBulk) ClearName() *CouponFixAmountUpsertBulk {
	return u.Update(func(s *CouponFixAmountUpsert) {
		s.ClearName()
	})
}

// SetAllocated sets the "allocated" field.
func (u *CouponFixAmountUpsertBulk) SetAllocated(v uint32) *CouponFixAmountUpsertBulk {
	return u.Update(func(s *CouponFixAmountUpsert) {
		s.SetAllocated(v)
	})
}

// AddAllocated adds v to the "allocated" field.
func (u *CouponFixAmountUpsertBulk) AddAllocated(v uint32) *CouponFixAmountUpsertBulk {
	return u.Update(func(s *CouponFixAmountUpsert) {
		s.AddAllocated(v)
	})
}

// UpdateAllocated sets the "allocated" field to the value that was provided on create.
func (u *CouponFixAmountUpsertBulk) UpdateAllocated() *CouponFixAmountUpsertBulk {
	return u.Update(func(s *CouponFixAmountUpsert) {
		s.UpdateAllocated()
	})
}

// ClearAllocated clears the value of the "allocated" field.
func (u *CouponFixAmountUpsertBulk) ClearAllocated() *CouponFixAmountUpsertBulk {
	return u.Update(func(s *CouponFixAmountUpsert) {
		s.ClearAllocated()
	})
}

// Exec executes the query.
func (u *CouponFixAmountUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the CouponFixAmountCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for CouponFixAmountCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CouponFixAmountUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
