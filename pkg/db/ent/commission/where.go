// Code generated by ent, DO NOT EDIT.

package commission

import (
	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/inspire-middleware/pkg/db/ent/predicate"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Commission {
	return predicate.Commission(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Commission {
	return predicate.Commission(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Commission {
	return predicate.Commission(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Commission {
	return predicate.Commission(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Commission {
	return predicate.Commission(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Commission {
	return predicate.Commission(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Commission {
	return predicate.Commission(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Commission {
	return predicate.Commission(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Commission {
	return predicate.Commission(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v uint32) predicate.Commission {
	return predicate.Commission(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v uint32) predicate.Commission {
	return predicate.Commission(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v uint32) predicate.Commission {
	return predicate.Commission(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// AppID applies equality check predicate on the "app_id" field. It's identical to AppIDEQ.
func AppID(v uuid.UUID) predicate.Commission {
	return predicate.Commission(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAppID), v))
	})
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v uuid.UUID) predicate.Commission {
	return predicate.Commission(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUserID), v))
	})
}

// GoodID applies equality check predicate on the "good_id" field. It's identical to GoodIDEQ.
func GoodID(v uuid.UUID) predicate.Commission {
	return predicate.Commission(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGoodID), v))
	})
}

// AmountOrPercent applies equality check predicate on the "amount_or_percent" field. It's identical to AmountOrPercentEQ.
func AmountOrPercent(v decimal.Decimal) predicate.Commission {
	return predicate.Commission(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAmountOrPercent), v))
	})
}

// StartAt applies equality check predicate on the "start_at" field. It's identical to StartAtEQ.
func StartAt(v uint32) predicate.Commission {
	return predicate.Commission(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStartAt), v))
	})
}

// EndAt applies equality check predicate on the "end_at" field. It's identical to EndAtEQ.
func EndAt(v uint32) predicate.Commission {
	return predicate.Commission(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEndAt), v))
	})
}

// SettleType applies equality check predicate on the "settle_type" field. It's identical to SettleTypeEQ.
func SettleType(v string) predicate.Commission {
	return predicate.Commission(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSettleType), v))
	})
}

// SettleMode applies equality check predicate on the "settle_mode" field. It's identical to SettleModeEQ.
func SettleMode(v string) predicate.Commission {
	return predicate.Commission(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSettleMode), v))
	})
}

// SettleInterval applies equality check predicate on the "settle_interval" field. It's identical to SettleIntervalEQ.
func SettleInterval(v string) predicate.Commission {
	return predicate.Commission(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSettleInterval), v))
	})
}

// SettleAmount applies equality check predicate on the "settle_amount" field. It's identical to SettleAmountEQ.
func SettleAmount(v string) predicate.Commission {
	return predicate.Commission(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSettleAmount), v))
	})
}

// Threshold applies equality check predicate on the "threshold" field. It's identical to ThresholdEQ.
func Threshold(v decimal.Decimal) predicate.Commission {
	return predicate.Commission(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldThreshold), v))
	})
}

// OrderLimit applies equality check predicate on the "order_limit" field. It's identical to OrderLimitEQ.
func OrderLimit(v uint32) predicate.Commission {
	return predicate.Commission(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOrderLimit), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v uint32) predicate.Commission {
	return predicate.Commission(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v uint32) predicate.Commission {
	return predicate.Commission(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...uint32) predicate.Commission {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Commission(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...uint32) predicate.Commission {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Commission(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v uint32) predicate.Commission {
	return predicate.Commission(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v uint32) predicate.Commission {
	return predicate.Commission(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v uint32) predicate.Commission {
	return predicate.Commission(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v uint32) predicate.Commission {
	return predicate.Commission(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v uint32) predicate.Commission {
	return predicate.Commission(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v uint32) predicate.Commission {
	return predicate.Commission(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...uint32) predicate.Commission {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Commission(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...uint32) predicate.Commission {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Commission(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v uint32) predicate.Commission {
	return predicate.Commission(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v uint32) predicate.Commission {
	return predicate.Commission(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v uint32) predicate.Commission {
	return predicate.Commission(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v uint32) predicate.Commission {
	return predicate.Commission(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v uint32) predicate.Commission {
	return predicate.Commission(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v uint32) predicate.Commission {
	return predicate.Commission(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...uint32) predicate.Commission {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Commission(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...uint32) predicate.Commission {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Commission(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v uint32) predicate.Commission {
	return predicate.Commission(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v uint32) predicate.Commission {
	return predicate.Commission(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v uint32) predicate.Commission {
	return predicate.Commission(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v uint32) predicate.Commission {
	return predicate.Commission(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeletedAt), v))
	})
}

// AppIDEQ applies the EQ predicate on the "app_id" field.
func AppIDEQ(v uuid.UUID) predicate.Commission {
	return predicate.Commission(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAppID), v))
	})
}

// AppIDNEQ applies the NEQ predicate on the "app_id" field.
func AppIDNEQ(v uuid.UUID) predicate.Commission {
	return predicate.Commission(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAppID), v))
	})
}

// AppIDIn applies the In predicate on the "app_id" field.
func AppIDIn(vs ...uuid.UUID) predicate.Commission {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Commission(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldAppID), v...))
	})
}

// AppIDNotIn applies the NotIn predicate on the "app_id" field.
func AppIDNotIn(vs ...uuid.UUID) predicate.Commission {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Commission(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldAppID), v...))
	})
}

// AppIDGT applies the GT predicate on the "app_id" field.
func AppIDGT(v uuid.UUID) predicate.Commission {
	return predicate.Commission(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAppID), v))
	})
}

// AppIDGTE applies the GTE predicate on the "app_id" field.
func AppIDGTE(v uuid.UUID) predicate.Commission {
	return predicate.Commission(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAppID), v))
	})
}

// AppIDLT applies the LT predicate on the "app_id" field.
func AppIDLT(v uuid.UUID) predicate.Commission {
	return predicate.Commission(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAppID), v))
	})
}

// AppIDLTE applies the LTE predicate on the "app_id" field.
func AppIDLTE(v uuid.UUID) predicate.Commission {
	return predicate.Commission(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAppID), v))
	})
}

// AppIDIsNil applies the IsNil predicate on the "app_id" field.
func AppIDIsNil() predicate.Commission {
	return predicate.Commission(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldAppID)))
	})
}

// AppIDNotNil applies the NotNil predicate on the "app_id" field.
func AppIDNotNil() predicate.Commission {
	return predicate.Commission(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldAppID)))
	})
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v uuid.UUID) predicate.Commission {
	return predicate.Commission(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUserID), v))
	})
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v uuid.UUID) predicate.Commission {
	return predicate.Commission(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUserID), v))
	})
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...uuid.UUID) predicate.Commission {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Commission(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUserID), v...))
	})
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...uuid.UUID) predicate.Commission {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Commission(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUserID), v...))
	})
}

// UserIDGT applies the GT predicate on the "user_id" field.
func UserIDGT(v uuid.UUID) predicate.Commission {
	return predicate.Commission(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUserID), v))
	})
}

// UserIDGTE applies the GTE predicate on the "user_id" field.
func UserIDGTE(v uuid.UUID) predicate.Commission {
	return predicate.Commission(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUserID), v))
	})
}

// UserIDLT applies the LT predicate on the "user_id" field.
func UserIDLT(v uuid.UUID) predicate.Commission {
	return predicate.Commission(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUserID), v))
	})
}

// UserIDLTE applies the LTE predicate on the "user_id" field.
func UserIDLTE(v uuid.UUID) predicate.Commission {
	return predicate.Commission(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUserID), v))
	})
}

// UserIDIsNil applies the IsNil predicate on the "user_id" field.
func UserIDIsNil() predicate.Commission {
	return predicate.Commission(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldUserID)))
	})
}

// UserIDNotNil applies the NotNil predicate on the "user_id" field.
func UserIDNotNil() predicate.Commission {
	return predicate.Commission(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldUserID)))
	})
}

// GoodIDEQ applies the EQ predicate on the "good_id" field.
func GoodIDEQ(v uuid.UUID) predicate.Commission {
	return predicate.Commission(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGoodID), v))
	})
}

// GoodIDNEQ applies the NEQ predicate on the "good_id" field.
func GoodIDNEQ(v uuid.UUID) predicate.Commission {
	return predicate.Commission(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldGoodID), v))
	})
}

// GoodIDIn applies the In predicate on the "good_id" field.
func GoodIDIn(vs ...uuid.UUID) predicate.Commission {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Commission(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldGoodID), v...))
	})
}

// GoodIDNotIn applies the NotIn predicate on the "good_id" field.
func GoodIDNotIn(vs ...uuid.UUID) predicate.Commission {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Commission(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldGoodID), v...))
	})
}

// GoodIDGT applies the GT predicate on the "good_id" field.
func GoodIDGT(v uuid.UUID) predicate.Commission {
	return predicate.Commission(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldGoodID), v))
	})
}

// GoodIDGTE applies the GTE predicate on the "good_id" field.
func GoodIDGTE(v uuid.UUID) predicate.Commission {
	return predicate.Commission(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldGoodID), v))
	})
}

// GoodIDLT applies the LT predicate on the "good_id" field.
func GoodIDLT(v uuid.UUID) predicate.Commission {
	return predicate.Commission(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldGoodID), v))
	})
}

// GoodIDLTE applies the LTE predicate on the "good_id" field.
func GoodIDLTE(v uuid.UUID) predicate.Commission {
	return predicate.Commission(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldGoodID), v))
	})
}

// GoodIDIsNil applies the IsNil predicate on the "good_id" field.
func GoodIDIsNil() predicate.Commission {
	return predicate.Commission(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldGoodID)))
	})
}

// GoodIDNotNil applies the NotNil predicate on the "good_id" field.
func GoodIDNotNil() predicate.Commission {
	return predicate.Commission(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldGoodID)))
	})
}

// AmountOrPercentEQ applies the EQ predicate on the "amount_or_percent" field.
func AmountOrPercentEQ(v decimal.Decimal) predicate.Commission {
	return predicate.Commission(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAmountOrPercent), v))
	})
}

// AmountOrPercentNEQ applies the NEQ predicate on the "amount_or_percent" field.
func AmountOrPercentNEQ(v decimal.Decimal) predicate.Commission {
	return predicate.Commission(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAmountOrPercent), v))
	})
}

// AmountOrPercentIn applies the In predicate on the "amount_or_percent" field.
func AmountOrPercentIn(vs ...decimal.Decimal) predicate.Commission {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Commission(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldAmountOrPercent), v...))
	})
}

// AmountOrPercentNotIn applies the NotIn predicate on the "amount_or_percent" field.
func AmountOrPercentNotIn(vs ...decimal.Decimal) predicate.Commission {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Commission(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldAmountOrPercent), v...))
	})
}

// AmountOrPercentGT applies the GT predicate on the "amount_or_percent" field.
func AmountOrPercentGT(v decimal.Decimal) predicate.Commission {
	return predicate.Commission(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAmountOrPercent), v))
	})
}

// AmountOrPercentGTE applies the GTE predicate on the "amount_or_percent" field.
func AmountOrPercentGTE(v decimal.Decimal) predicate.Commission {
	return predicate.Commission(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAmountOrPercent), v))
	})
}

// AmountOrPercentLT applies the LT predicate on the "amount_or_percent" field.
func AmountOrPercentLT(v decimal.Decimal) predicate.Commission {
	return predicate.Commission(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAmountOrPercent), v))
	})
}

// AmountOrPercentLTE applies the LTE predicate on the "amount_or_percent" field.
func AmountOrPercentLTE(v decimal.Decimal) predicate.Commission {
	return predicate.Commission(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAmountOrPercent), v))
	})
}

// AmountOrPercentIsNil applies the IsNil predicate on the "amount_or_percent" field.
func AmountOrPercentIsNil() predicate.Commission {
	return predicate.Commission(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldAmountOrPercent)))
	})
}

// AmountOrPercentNotNil applies the NotNil predicate on the "amount_or_percent" field.
func AmountOrPercentNotNil() predicate.Commission {
	return predicate.Commission(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldAmountOrPercent)))
	})
}

// StartAtEQ applies the EQ predicate on the "start_at" field.
func StartAtEQ(v uint32) predicate.Commission {
	return predicate.Commission(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStartAt), v))
	})
}

// StartAtNEQ applies the NEQ predicate on the "start_at" field.
func StartAtNEQ(v uint32) predicate.Commission {
	return predicate.Commission(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStartAt), v))
	})
}

// StartAtIn applies the In predicate on the "start_at" field.
func StartAtIn(vs ...uint32) predicate.Commission {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Commission(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldStartAt), v...))
	})
}

// StartAtNotIn applies the NotIn predicate on the "start_at" field.
func StartAtNotIn(vs ...uint32) predicate.Commission {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Commission(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldStartAt), v...))
	})
}

// StartAtGT applies the GT predicate on the "start_at" field.
func StartAtGT(v uint32) predicate.Commission {
	return predicate.Commission(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStartAt), v))
	})
}

// StartAtGTE applies the GTE predicate on the "start_at" field.
func StartAtGTE(v uint32) predicate.Commission {
	return predicate.Commission(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStartAt), v))
	})
}

// StartAtLT applies the LT predicate on the "start_at" field.
func StartAtLT(v uint32) predicate.Commission {
	return predicate.Commission(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStartAt), v))
	})
}

// StartAtLTE applies the LTE predicate on the "start_at" field.
func StartAtLTE(v uint32) predicate.Commission {
	return predicate.Commission(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStartAt), v))
	})
}

// StartAtIsNil applies the IsNil predicate on the "start_at" field.
func StartAtIsNil() predicate.Commission {
	return predicate.Commission(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldStartAt)))
	})
}

// StartAtNotNil applies the NotNil predicate on the "start_at" field.
func StartAtNotNil() predicate.Commission {
	return predicate.Commission(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldStartAt)))
	})
}

// EndAtEQ applies the EQ predicate on the "end_at" field.
func EndAtEQ(v uint32) predicate.Commission {
	return predicate.Commission(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEndAt), v))
	})
}

// EndAtNEQ applies the NEQ predicate on the "end_at" field.
func EndAtNEQ(v uint32) predicate.Commission {
	return predicate.Commission(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEndAt), v))
	})
}

// EndAtIn applies the In predicate on the "end_at" field.
func EndAtIn(vs ...uint32) predicate.Commission {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Commission(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldEndAt), v...))
	})
}

// EndAtNotIn applies the NotIn predicate on the "end_at" field.
func EndAtNotIn(vs ...uint32) predicate.Commission {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Commission(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldEndAt), v...))
	})
}

// EndAtGT applies the GT predicate on the "end_at" field.
func EndAtGT(v uint32) predicate.Commission {
	return predicate.Commission(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEndAt), v))
	})
}

// EndAtGTE applies the GTE predicate on the "end_at" field.
func EndAtGTE(v uint32) predicate.Commission {
	return predicate.Commission(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEndAt), v))
	})
}

// EndAtLT applies the LT predicate on the "end_at" field.
func EndAtLT(v uint32) predicate.Commission {
	return predicate.Commission(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEndAt), v))
	})
}

// EndAtLTE applies the LTE predicate on the "end_at" field.
func EndAtLTE(v uint32) predicate.Commission {
	return predicate.Commission(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEndAt), v))
	})
}

// EndAtIsNil applies the IsNil predicate on the "end_at" field.
func EndAtIsNil() predicate.Commission {
	return predicate.Commission(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldEndAt)))
	})
}

// EndAtNotNil applies the NotNil predicate on the "end_at" field.
func EndAtNotNil() predicate.Commission {
	return predicate.Commission(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldEndAt)))
	})
}

// SettleTypeEQ applies the EQ predicate on the "settle_type" field.
func SettleTypeEQ(v string) predicate.Commission {
	return predicate.Commission(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSettleType), v))
	})
}

// SettleTypeNEQ applies the NEQ predicate on the "settle_type" field.
func SettleTypeNEQ(v string) predicate.Commission {
	return predicate.Commission(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSettleType), v))
	})
}

// SettleTypeIn applies the In predicate on the "settle_type" field.
func SettleTypeIn(vs ...string) predicate.Commission {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Commission(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldSettleType), v...))
	})
}

// SettleTypeNotIn applies the NotIn predicate on the "settle_type" field.
func SettleTypeNotIn(vs ...string) predicate.Commission {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Commission(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldSettleType), v...))
	})
}

// SettleTypeGT applies the GT predicate on the "settle_type" field.
func SettleTypeGT(v string) predicate.Commission {
	return predicate.Commission(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSettleType), v))
	})
}

// SettleTypeGTE applies the GTE predicate on the "settle_type" field.
func SettleTypeGTE(v string) predicate.Commission {
	return predicate.Commission(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSettleType), v))
	})
}

// SettleTypeLT applies the LT predicate on the "settle_type" field.
func SettleTypeLT(v string) predicate.Commission {
	return predicate.Commission(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSettleType), v))
	})
}

// SettleTypeLTE applies the LTE predicate on the "settle_type" field.
func SettleTypeLTE(v string) predicate.Commission {
	return predicate.Commission(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSettleType), v))
	})
}

// SettleTypeContains applies the Contains predicate on the "settle_type" field.
func SettleTypeContains(v string) predicate.Commission {
	return predicate.Commission(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldSettleType), v))
	})
}

// SettleTypeHasPrefix applies the HasPrefix predicate on the "settle_type" field.
func SettleTypeHasPrefix(v string) predicate.Commission {
	return predicate.Commission(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldSettleType), v))
	})
}

// SettleTypeHasSuffix applies the HasSuffix predicate on the "settle_type" field.
func SettleTypeHasSuffix(v string) predicate.Commission {
	return predicate.Commission(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldSettleType), v))
	})
}

// SettleTypeIsNil applies the IsNil predicate on the "settle_type" field.
func SettleTypeIsNil() predicate.Commission {
	return predicate.Commission(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldSettleType)))
	})
}

// SettleTypeNotNil applies the NotNil predicate on the "settle_type" field.
func SettleTypeNotNil() predicate.Commission {
	return predicate.Commission(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldSettleType)))
	})
}

// SettleTypeEqualFold applies the EqualFold predicate on the "settle_type" field.
func SettleTypeEqualFold(v string) predicate.Commission {
	return predicate.Commission(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldSettleType), v))
	})
}

// SettleTypeContainsFold applies the ContainsFold predicate on the "settle_type" field.
func SettleTypeContainsFold(v string) predicate.Commission {
	return predicate.Commission(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldSettleType), v))
	})
}

// SettleModeEQ applies the EQ predicate on the "settle_mode" field.
func SettleModeEQ(v string) predicate.Commission {
	return predicate.Commission(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSettleMode), v))
	})
}

// SettleModeNEQ applies the NEQ predicate on the "settle_mode" field.
func SettleModeNEQ(v string) predicate.Commission {
	return predicate.Commission(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSettleMode), v))
	})
}

// SettleModeIn applies the In predicate on the "settle_mode" field.
func SettleModeIn(vs ...string) predicate.Commission {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Commission(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldSettleMode), v...))
	})
}

// SettleModeNotIn applies the NotIn predicate on the "settle_mode" field.
func SettleModeNotIn(vs ...string) predicate.Commission {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Commission(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldSettleMode), v...))
	})
}

// SettleModeGT applies the GT predicate on the "settle_mode" field.
func SettleModeGT(v string) predicate.Commission {
	return predicate.Commission(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSettleMode), v))
	})
}

// SettleModeGTE applies the GTE predicate on the "settle_mode" field.
func SettleModeGTE(v string) predicate.Commission {
	return predicate.Commission(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSettleMode), v))
	})
}

// SettleModeLT applies the LT predicate on the "settle_mode" field.
func SettleModeLT(v string) predicate.Commission {
	return predicate.Commission(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSettleMode), v))
	})
}

// SettleModeLTE applies the LTE predicate on the "settle_mode" field.
func SettleModeLTE(v string) predicate.Commission {
	return predicate.Commission(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSettleMode), v))
	})
}

// SettleModeContains applies the Contains predicate on the "settle_mode" field.
func SettleModeContains(v string) predicate.Commission {
	return predicate.Commission(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldSettleMode), v))
	})
}

// SettleModeHasPrefix applies the HasPrefix predicate on the "settle_mode" field.
func SettleModeHasPrefix(v string) predicate.Commission {
	return predicate.Commission(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldSettleMode), v))
	})
}

// SettleModeHasSuffix applies the HasSuffix predicate on the "settle_mode" field.
func SettleModeHasSuffix(v string) predicate.Commission {
	return predicate.Commission(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldSettleMode), v))
	})
}

// SettleModeIsNil applies the IsNil predicate on the "settle_mode" field.
func SettleModeIsNil() predicate.Commission {
	return predicate.Commission(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldSettleMode)))
	})
}

// SettleModeNotNil applies the NotNil predicate on the "settle_mode" field.
func SettleModeNotNil() predicate.Commission {
	return predicate.Commission(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldSettleMode)))
	})
}

// SettleModeEqualFold applies the EqualFold predicate on the "settle_mode" field.
func SettleModeEqualFold(v string) predicate.Commission {
	return predicate.Commission(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldSettleMode), v))
	})
}

// SettleModeContainsFold applies the ContainsFold predicate on the "settle_mode" field.
func SettleModeContainsFold(v string) predicate.Commission {
	return predicate.Commission(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldSettleMode), v))
	})
}

// SettleIntervalEQ applies the EQ predicate on the "settle_interval" field.
func SettleIntervalEQ(v string) predicate.Commission {
	return predicate.Commission(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSettleInterval), v))
	})
}

// SettleIntervalNEQ applies the NEQ predicate on the "settle_interval" field.
func SettleIntervalNEQ(v string) predicate.Commission {
	return predicate.Commission(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSettleInterval), v))
	})
}

// SettleIntervalIn applies the In predicate on the "settle_interval" field.
func SettleIntervalIn(vs ...string) predicate.Commission {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Commission(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldSettleInterval), v...))
	})
}

// SettleIntervalNotIn applies the NotIn predicate on the "settle_interval" field.
func SettleIntervalNotIn(vs ...string) predicate.Commission {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Commission(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldSettleInterval), v...))
	})
}

// SettleIntervalGT applies the GT predicate on the "settle_interval" field.
func SettleIntervalGT(v string) predicate.Commission {
	return predicate.Commission(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSettleInterval), v))
	})
}

// SettleIntervalGTE applies the GTE predicate on the "settle_interval" field.
func SettleIntervalGTE(v string) predicate.Commission {
	return predicate.Commission(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSettleInterval), v))
	})
}

// SettleIntervalLT applies the LT predicate on the "settle_interval" field.
func SettleIntervalLT(v string) predicate.Commission {
	return predicate.Commission(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSettleInterval), v))
	})
}

// SettleIntervalLTE applies the LTE predicate on the "settle_interval" field.
func SettleIntervalLTE(v string) predicate.Commission {
	return predicate.Commission(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSettleInterval), v))
	})
}

// SettleIntervalContains applies the Contains predicate on the "settle_interval" field.
func SettleIntervalContains(v string) predicate.Commission {
	return predicate.Commission(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldSettleInterval), v))
	})
}

// SettleIntervalHasPrefix applies the HasPrefix predicate on the "settle_interval" field.
func SettleIntervalHasPrefix(v string) predicate.Commission {
	return predicate.Commission(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldSettleInterval), v))
	})
}

// SettleIntervalHasSuffix applies the HasSuffix predicate on the "settle_interval" field.
func SettleIntervalHasSuffix(v string) predicate.Commission {
	return predicate.Commission(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldSettleInterval), v))
	})
}

// SettleIntervalIsNil applies the IsNil predicate on the "settle_interval" field.
func SettleIntervalIsNil() predicate.Commission {
	return predicate.Commission(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldSettleInterval)))
	})
}

// SettleIntervalNotNil applies the NotNil predicate on the "settle_interval" field.
func SettleIntervalNotNil() predicate.Commission {
	return predicate.Commission(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldSettleInterval)))
	})
}

// SettleIntervalEqualFold applies the EqualFold predicate on the "settle_interval" field.
func SettleIntervalEqualFold(v string) predicate.Commission {
	return predicate.Commission(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldSettleInterval), v))
	})
}

// SettleIntervalContainsFold applies the ContainsFold predicate on the "settle_interval" field.
func SettleIntervalContainsFold(v string) predicate.Commission {
	return predicate.Commission(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldSettleInterval), v))
	})
}

// SettleAmountEQ applies the EQ predicate on the "settle_amount" field.
func SettleAmountEQ(v string) predicate.Commission {
	return predicate.Commission(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSettleAmount), v))
	})
}

// SettleAmountNEQ applies the NEQ predicate on the "settle_amount" field.
func SettleAmountNEQ(v string) predicate.Commission {
	return predicate.Commission(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSettleAmount), v))
	})
}

// SettleAmountIn applies the In predicate on the "settle_amount" field.
func SettleAmountIn(vs ...string) predicate.Commission {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Commission(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldSettleAmount), v...))
	})
}

// SettleAmountNotIn applies the NotIn predicate on the "settle_amount" field.
func SettleAmountNotIn(vs ...string) predicate.Commission {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Commission(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldSettleAmount), v...))
	})
}

// SettleAmountGT applies the GT predicate on the "settle_amount" field.
func SettleAmountGT(v string) predicate.Commission {
	return predicate.Commission(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSettleAmount), v))
	})
}

// SettleAmountGTE applies the GTE predicate on the "settle_amount" field.
func SettleAmountGTE(v string) predicate.Commission {
	return predicate.Commission(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSettleAmount), v))
	})
}

// SettleAmountLT applies the LT predicate on the "settle_amount" field.
func SettleAmountLT(v string) predicate.Commission {
	return predicate.Commission(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSettleAmount), v))
	})
}

// SettleAmountLTE applies the LTE predicate on the "settle_amount" field.
func SettleAmountLTE(v string) predicate.Commission {
	return predicate.Commission(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSettleAmount), v))
	})
}

// SettleAmountContains applies the Contains predicate on the "settle_amount" field.
func SettleAmountContains(v string) predicate.Commission {
	return predicate.Commission(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldSettleAmount), v))
	})
}

// SettleAmountHasPrefix applies the HasPrefix predicate on the "settle_amount" field.
func SettleAmountHasPrefix(v string) predicate.Commission {
	return predicate.Commission(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldSettleAmount), v))
	})
}

// SettleAmountHasSuffix applies the HasSuffix predicate on the "settle_amount" field.
func SettleAmountHasSuffix(v string) predicate.Commission {
	return predicate.Commission(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldSettleAmount), v))
	})
}

// SettleAmountIsNil applies the IsNil predicate on the "settle_amount" field.
func SettleAmountIsNil() predicate.Commission {
	return predicate.Commission(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldSettleAmount)))
	})
}

// SettleAmountNotNil applies the NotNil predicate on the "settle_amount" field.
func SettleAmountNotNil() predicate.Commission {
	return predicate.Commission(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldSettleAmount)))
	})
}

// SettleAmountEqualFold applies the EqualFold predicate on the "settle_amount" field.
func SettleAmountEqualFold(v string) predicate.Commission {
	return predicate.Commission(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldSettleAmount), v))
	})
}

// SettleAmountContainsFold applies the ContainsFold predicate on the "settle_amount" field.
func SettleAmountContainsFold(v string) predicate.Commission {
	return predicate.Commission(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldSettleAmount), v))
	})
}

// ThresholdEQ applies the EQ predicate on the "threshold" field.
func ThresholdEQ(v decimal.Decimal) predicate.Commission {
	return predicate.Commission(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldThreshold), v))
	})
}

// ThresholdNEQ applies the NEQ predicate on the "threshold" field.
func ThresholdNEQ(v decimal.Decimal) predicate.Commission {
	return predicate.Commission(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldThreshold), v))
	})
}

// ThresholdIn applies the In predicate on the "threshold" field.
func ThresholdIn(vs ...decimal.Decimal) predicate.Commission {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Commission(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldThreshold), v...))
	})
}

// ThresholdNotIn applies the NotIn predicate on the "threshold" field.
func ThresholdNotIn(vs ...decimal.Decimal) predicate.Commission {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Commission(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldThreshold), v...))
	})
}

// ThresholdGT applies the GT predicate on the "threshold" field.
func ThresholdGT(v decimal.Decimal) predicate.Commission {
	return predicate.Commission(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldThreshold), v))
	})
}

// ThresholdGTE applies the GTE predicate on the "threshold" field.
func ThresholdGTE(v decimal.Decimal) predicate.Commission {
	return predicate.Commission(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldThreshold), v))
	})
}

// ThresholdLT applies the LT predicate on the "threshold" field.
func ThresholdLT(v decimal.Decimal) predicate.Commission {
	return predicate.Commission(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldThreshold), v))
	})
}

// ThresholdLTE applies the LTE predicate on the "threshold" field.
func ThresholdLTE(v decimal.Decimal) predicate.Commission {
	return predicate.Commission(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldThreshold), v))
	})
}

// ThresholdIsNil applies the IsNil predicate on the "threshold" field.
func ThresholdIsNil() predicate.Commission {
	return predicate.Commission(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldThreshold)))
	})
}

// ThresholdNotNil applies the NotNil predicate on the "threshold" field.
func ThresholdNotNil() predicate.Commission {
	return predicate.Commission(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldThreshold)))
	})
}

// OrderLimitEQ applies the EQ predicate on the "order_limit" field.
func OrderLimitEQ(v uint32) predicate.Commission {
	return predicate.Commission(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOrderLimit), v))
	})
}

// OrderLimitNEQ applies the NEQ predicate on the "order_limit" field.
func OrderLimitNEQ(v uint32) predicate.Commission {
	return predicate.Commission(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOrderLimit), v))
	})
}

// OrderLimitIn applies the In predicate on the "order_limit" field.
func OrderLimitIn(vs ...uint32) predicate.Commission {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Commission(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldOrderLimit), v...))
	})
}

// OrderLimitNotIn applies the NotIn predicate on the "order_limit" field.
func OrderLimitNotIn(vs ...uint32) predicate.Commission {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Commission(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldOrderLimit), v...))
	})
}

// OrderLimitGT applies the GT predicate on the "order_limit" field.
func OrderLimitGT(v uint32) predicate.Commission {
	return predicate.Commission(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOrderLimit), v))
	})
}

// OrderLimitGTE applies the GTE predicate on the "order_limit" field.
func OrderLimitGTE(v uint32) predicate.Commission {
	return predicate.Commission(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOrderLimit), v))
	})
}

// OrderLimitLT applies the LT predicate on the "order_limit" field.
func OrderLimitLT(v uint32) predicate.Commission {
	return predicate.Commission(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOrderLimit), v))
	})
}

// OrderLimitLTE applies the LTE predicate on the "order_limit" field.
func OrderLimitLTE(v uint32) predicate.Commission {
	return predicate.Commission(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOrderLimit), v))
	})
}

// OrderLimitIsNil applies the IsNil predicate on the "order_limit" field.
func OrderLimitIsNil() predicate.Commission {
	return predicate.Commission(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldOrderLimit)))
	})
}

// OrderLimitNotNil applies the NotNil predicate on the "order_limit" field.
func OrderLimitNotNil() predicate.Commission {
	return predicate.Commission(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldOrderLimit)))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Commission) predicate.Commission {
	return predicate.Commission(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Commission) predicate.Commission {
	return predicate.Commission(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Commission) predicate.Commission {
	return predicate.Commission(func(s *sql.Selector) {
		p(s.Not())
	})
}
