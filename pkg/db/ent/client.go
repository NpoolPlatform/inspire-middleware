// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"

	"github.com/NpoolPlatform/inspire-middleware/pkg/db/ent/migrate"

	"github.com/NpoolPlatform/inspire-middleware/pkg/db/ent/achievement"
	"github.com/NpoolPlatform/inspire-middleware/pkg/db/ent/appgoodscope"
	"github.com/NpoolPlatform/inspire-middleware/pkg/db/ent/cashcontrol"
	"github.com/NpoolPlatform/inspire-middleware/pkg/db/ent/commission"
	"github.com/NpoolPlatform/inspire-middleware/pkg/db/ent/coupon"
	"github.com/NpoolPlatform/inspire-middleware/pkg/db/ent/couponallocated"
	"github.com/NpoolPlatform/inspire-middleware/pkg/db/ent/couponscope"
	"github.com/NpoolPlatform/inspire-middleware/pkg/db/ent/event"
	"github.com/NpoolPlatform/inspire-middleware/pkg/db/ent/invitationcode"
	"github.com/NpoolPlatform/inspire-middleware/pkg/db/ent/pubsubmessage"
	"github.com/NpoolPlatform/inspire-middleware/pkg/db/ent/registration"
	"github.com/NpoolPlatform/inspire-middleware/pkg/db/ent/statement"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Achievement is the client for interacting with the Achievement builders.
	Achievement *AchievementClient
	// AppGoodScope is the client for interacting with the AppGoodScope builders.
	AppGoodScope *AppGoodScopeClient
	// CashControl is the client for interacting with the CashControl builders.
	CashControl *CashControlClient
	// Commission is the client for interacting with the Commission builders.
	Commission *CommissionClient
	// Coupon is the client for interacting with the Coupon builders.
	Coupon *CouponClient
	// CouponAllocated is the client for interacting with the CouponAllocated builders.
	CouponAllocated *CouponAllocatedClient
	// CouponScope is the client for interacting with the CouponScope builders.
	CouponScope *CouponScopeClient
	// Event is the client for interacting with the Event builders.
	Event *EventClient
	// InvitationCode is the client for interacting with the InvitationCode builders.
	InvitationCode *InvitationCodeClient
	// PubsubMessage is the client for interacting with the PubsubMessage builders.
	PubsubMessage *PubsubMessageClient
	// Registration is the client for interacting with the Registration builders.
	Registration *RegistrationClient
	// Statement is the client for interacting with the Statement builders.
	Statement *StatementClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Achievement = NewAchievementClient(c.config)
	c.AppGoodScope = NewAppGoodScopeClient(c.config)
	c.CashControl = NewCashControlClient(c.config)
	c.Commission = NewCommissionClient(c.config)
	c.Coupon = NewCouponClient(c.config)
	c.CouponAllocated = NewCouponAllocatedClient(c.config)
	c.CouponScope = NewCouponScopeClient(c.config)
	c.Event = NewEventClient(c.config)
	c.InvitationCode = NewInvitationCodeClient(c.config)
	c.PubsubMessage = NewPubsubMessageClient(c.config)
	c.Registration = NewRegistrationClient(c.config)
	c.Statement = NewStatementClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:             ctx,
		config:          cfg,
		Achievement:     NewAchievementClient(cfg),
		AppGoodScope:    NewAppGoodScopeClient(cfg),
		CashControl:     NewCashControlClient(cfg),
		Commission:      NewCommissionClient(cfg),
		Coupon:          NewCouponClient(cfg),
		CouponAllocated: NewCouponAllocatedClient(cfg),
		CouponScope:     NewCouponScopeClient(cfg),
		Event:           NewEventClient(cfg),
		InvitationCode:  NewInvitationCodeClient(cfg),
		PubsubMessage:   NewPubsubMessageClient(cfg),
		Registration:    NewRegistrationClient(cfg),
		Statement:       NewStatementClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:             ctx,
		config:          cfg,
		Achievement:     NewAchievementClient(cfg),
		AppGoodScope:    NewAppGoodScopeClient(cfg),
		CashControl:     NewCashControlClient(cfg),
		Commission:      NewCommissionClient(cfg),
		Coupon:          NewCouponClient(cfg),
		CouponAllocated: NewCouponAllocatedClient(cfg),
		CouponScope:     NewCouponScopeClient(cfg),
		Event:           NewEventClient(cfg),
		InvitationCode:  NewInvitationCodeClient(cfg),
		PubsubMessage:   NewPubsubMessageClient(cfg),
		Registration:    NewRegistrationClient(cfg),
		Statement:       NewStatementClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Achievement.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Achievement.Use(hooks...)
	c.AppGoodScope.Use(hooks...)
	c.CashControl.Use(hooks...)
	c.Commission.Use(hooks...)
	c.Coupon.Use(hooks...)
	c.CouponAllocated.Use(hooks...)
	c.CouponScope.Use(hooks...)
	c.Event.Use(hooks...)
	c.InvitationCode.Use(hooks...)
	c.PubsubMessage.Use(hooks...)
	c.Registration.Use(hooks...)
	c.Statement.Use(hooks...)
}

// AchievementClient is a client for the Achievement schema.
type AchievementClient struct {
	config
}

// NewAchievementClient returns a client for the Achievement from the given config.
func NewAchievementClient(c config) *AchievementClient {
	return &AchievementClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `achievement.Hooks(f(g(h())))`.
func (c *AchievementClient) Use(hooks ...Hook) {
	c.hooks.Achievement = append(c.hooks.Achievement, hooks...)
}

// Create returns a builder for creating a Achievement entity.
func (c *AchievementClient) Create() *AchievementCreate {
	mutation := newAchievementMutation(c.config, OpCreate)
	return &AchievementCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Achievement entities.
func (c *AchievementClient) CreateBulk(builders ...*AchievementCreate) *AchievementCreateBulk {
	return &AchievementCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Achievement.
func (c *AchievementClient) Update() *AchievementUpdate {
	mutation := newAchievementMutation(c.config, OpUpdate)
	return &AchievementUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AchievementClient) UpdateOne(a *Achievement) *AchievementUpdateOne {
	mutation := newAchievementMutation(c.config, OpUpdateOne, withAchievement(a))
	return &AchievementUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AchievementClient) UpdateOneID(id uint32) *AchievementUpdateOne {
	mutation := newAchievementMutation(c.config, OpUpdateOne, withAchievementID(id))
	return &AchievementUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Achievement.
func (c *AchievementClient) Delete() *AchievementDelete {
	mutation := newAchievementMutation(c.config, OpDelete)
	return &AchievementDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AchievementClient) DeleteOne(a *Achievement) *AchievementDeleteOne {
	return c.DeleteOneID(a.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *AchievementClient) DeleteOneID(id uint32) *AchievementDeleteOne {
	builder := c.Delete().Where(achievement.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AchievementDeleteOne{builder}
}

// Query returns a query builder for Achievement.
func (c *AchievementClient) Query() *AchievementQuery {
	return &AchievementQuery{
		config: c.config,
	}
}

// Get returns a Achievement entity by its id.
func (c *AchievementClient) Get(ctx context.Context, id uint32) (*Achievement, error) {
	return c.Query().Where(achievement.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AchievementClient) GetX(ctx context.Context, id uint32) *Achievement {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *AchievementClient) Hooks() []Hook {
	hooks := c.hooks.Achievement
	return append(hooks[:len(hooks):len(hooks)], achievement.Hooks[:]...)
}

// AppGoodScopeClient is a client for the AppGoodScope schema.
type AppGoodScopeClient struct {
	config
}

// NewAppGoodScopeClient returns a client for the AppGoodScope from the given config.
func NewAppGoodScopeClient(c config) *AppGoodScopeClient {
	return &AppGoodScopeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `appgoodscope.Hooks(f(g(h())))`.
func (c *AppGoodScopeClient) Use(hooks ...Hook) {
	c.hooks.AppGoodScope = append(c.hooks.AppGoodScope, hooks...)
}

// Create returns a builder for creating a AppGoodScope entity.
func (c *AppGoodScopeClient) Create() *AppGoodScopeCreate {
	mutation := newAppGoodScopeMutation(c.config, OpCreate)
	return &AppGoodScopeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AppGoodScope entities.
func (c *AppGoodScopeClient) CreateBulk(builders ...*AppGoodScopeCreate) *AppGoodScopeCreateBulk {
	return &AppGoodScopeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AppGoodScope.
func (c *AppGoodScopeClient) Update() *AppGoodScopeUpdate {
	mutation := newAppGoodScopeMutation(c.config, OpUpdate)
	return &AppGoodScopeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AppGoodScopeClient) UpdateOne(ags *AppGoodScope) *AppGoodScopeUpdateOne {
	mutation := newAppGoodScopeMutation(c.config, OpUpdateOne, withAppGoodScope(ags))
	return &AppGoodScopeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AppGoodScopeClient) UpdateOneID(id uint32) *AppGoodScopeUpdateOne {
	mutation := newAppGoodScopeMutation(c.config, OpUpdateOne, withAppGoodScopeID(id))
	return &AppGoodScopeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for AppGoodScope.
func (c *AppGoodScopeClient) Delete() *AppGoodScopeDelete {
	mutation := newAppGoodScopeMutation(c.config, OpDelete)
	return &AppGoodScopeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AppGoodScopeClient) DeleteOne(ags *AppGoodScope) *AppGoodScopeDeleteOne {
	return c.DeleteOneID(ags.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *AppGoodScopeClient) DeleteOneID(id uint32) *AppGoodScopeDeleteOne {
	builder := c.Delete().Where(appgoodscope.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AppGoodScopeDeleteOne{builder}
}

// Query returns a query builder for AppGoodScope.
func (c *AppGoodScopeClient) Query() *AppGoodScopeQuery {
	return &AppGoodScopeQuery{
		config: c.config,
	}
}

// Get returns a AppGoodScope entity by its id.
func (c *AppGoodScopeClient) Get(ctx context.Context, id uint32) (*AppGoodScope, error) {
	return c.Query().Where(appgoodscope.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AppGoodScopeClient) GetX(ctx context.Context, id uint32) *AppGoodScope {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *AppGoodScopeClient) Hooks() []Hook {
	hooks := c.hooks.AppGoodScope
	return append(hooks[:len(hooks):len(hooks)], appgoodscope.Hooks[:]...)
}

// CashControlClient is a client for the CashControl schema.
type CashControlClient struct {
	config
}

// NewCashControlClient returns a client for the CashControl from the given config.
func NewCashControlClient(c config) *CashControlClient {
	return &CashControlClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `cashcontrol.Hooks(f(g(h())))`.
func (c *CashControlClient) Use(hooks ...Hook) {
	c.hooks.CashControl = append(c.hooks.CashControl, hooks...)
}

// Create returns a builder for creating a CashControl entity.
func (c *CashControlClient) Create() *CashControlCreate {
	mutation := newCashControlMutation(c.config, OpCreate)
	return &CashControlCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of CashControl entities.
func (c *CashControlClient) CreateBulk(builders ...*CashControlCreate) *CashControlCreateBulk {
	return &CashControlCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CashControl.
func (c *CashControlClient) Update() *CashControlUpdate {
	mutation := newCashControlMutation(c.config, OpUpdate)
	return &CashControlUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CashControlClient) UpdateOne(cc *CashControl) *CashControlUpdateOne {
	mutation := newCashControlMutation(c.config, OpUpdateOne, withCashControl(cc))
	return &CashControlUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CashControlClient) UpdateOneID(id uint32) *CashControlUpdateOne {
	mutation := newCashControlMutation(c.config, OpUpdateOne, withCashControlID(id))
	return &CashControlUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CashControl.
func (c *CashControlClient) Delete() *CashControlDelete {
	mutation := newCashControlMutation(c.config, OpDelete)
	return &CashControlDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CashControlClient) DeleteOne(cc *CashControl) *CashControlDeleteOne {
	return c.DeleteOneID(cc.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *CashControlClient) DeleteOneID(id uint32) *CashControlDeleteOne {
	builder := c.Delete().Where(cashcontrol.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CashControlDeleteOne{builder}
}

// Query returns a query builder for CashControl.
func (c *CashControlClient) Query() *CashControlQuery {
	return &CashControlQuery{
		config: c.config,
	}
}

// Get returns a CashControl entity by its id.
func (c *CashControlClient) Get(ctx context.Context, id uint32) (*CashControl, error) {
	return c.Query().Where(cashcontrol.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CashControlClient) GetX(ctx context.Context, id uint32) *CashControl {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *CashControlClient) Hooks() []Hook {
	hooks := c.hooks.CashControl
	return append(hooks[:len(hooks):len(hooks)], cashcontrol.Hooks[:]...)
}

// CommissionClient is a client for the Commission schema.
type CommissionClient struct {
	config
}

// NewCommissionClient returns a client for the Commission from the given config.
func NewCommissionClient(c config) *CommissionClient {
	return &CommissionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `commission.Hooks(f(g(h())))`.
func (c *CommissionClient) Use(hooks ...Hook) {
	c.hooks.Commission = append(c.hooks.Commission, hooks...)
}

// Create returns a builder for creating a Commission entity.
func (c *CommissionClient) Create() *CommissionCreate {
	mutation := newCommissionMutation(c.config, OpCreate)
	return &CommissionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Commission entities.
func (c *CommissionClient) CreateBulk(builders ...*CommissionCreate) *CommissionCreateBulk {
	return &CommissionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Commission.
func (c *CommissionClient) Update() *CommissionUpdate {
	mutation := newCommissionMutation(c.config, OpUpdate)
	return &CommissionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CommissionClient) UpdateOne(co *Commission) *CommissionUpdateOne {
	mutation := newCommissionMutation(c.config, OpUpdateOne, withCommission(co))
	return &CommissionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CommissionClient) UpdateOneID(id uint32) *CommissionUpdateOne {
	mutation := newCommissionMutation(c.config, OpUpdateOne, withCommissionID(id))
	return &CommissionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Commission.
func (c *CommissionClient) Delete() *CommissionDelete {
	mutation := newCommissionMutation(c.config, OpDelete)
	return &CommissionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CommissionClient) DeleteOne(co *Commission) *CommissionDeleteOne {
	return c.DeleteOneID(co.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *CommissionClient) DeleteOneID(id uint32) *CommissionDeleteOne {
	builder := c.Delete().Where(commission.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CommissionDeleteOne{builder}
}

// Query returns a query builder for Commission.
func (c *CommissionClient) Query() *CommissionQuery {
	return &CommissionQuery{
		config: c.config,
	}
}

// Get returns a Commission entity by its id.
func (c *CommissionClient) Get(ctx context.Context, id uint32) (*Commission, error) {
	return c.Query().Where(commission.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CommissionClient) GetX(ctx context.Context, id uint32) *Commission {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *CommissionClient) Hooks() []Hook {
	hooks := c.hooks.Commission
	return append(hooks[:len(hooks):len(hooks)], commission.Hooks[:]...)
}

// CouponClient is a client for the Coupon schema.
type CouponClient struct {
	config
}

// NewCouponClient returns a client for the Coupon from the given config.
func NewCouponClient(c config) *CouponClient {
	return &CouponClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `coupon.Hooks(f(g(h())))`.
func (c *CouponClient) Use(hooks ...Hook) {
	c.hooks.Coupon = append(c.hooks.Coupon, hooks...)
}

// Create returns a builder for creating a Coupon entity.
func (c *CouponClient) Create() *CouponCreate {
	mutation := newCouponMutation(c.config, OpCreate)
	return &CouponCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Coupon entities.
func (c *CouponClient) CreateBulk(builders ...*CouponCreate) *CouponCreateBulk {
	return &CouponCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Coupon.
func (c *CouponClient) Update() *CouponUpdate {
	mutation := newCouponMutation(c.config, OpUpdate)
	return &CouponUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CouponClient) UpdateOne(co *Coupon) *CouponUpdateOne {
	mutation := newCouponMutation(c.config, OpUpdateOne, withCoupon(co))
	return &CouponUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CouponClient) UpdateOneID(id uint32) *CouponUpdateOne {
	mutation := newCouponMutation(c.config, OpUpdateOne, withCouponID(id))
	return &CouponUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Coupon.
func (c *CouponClient) Delete() *CouponDelete {
	mutation := newCouponMutation(c.config, OpDelete)
	return &CouponDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CouponClient) DeleteOne(co *Coupon) *CouponDeleteOne {
	return c.DeleteOneID(co.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *CouponClient) DeleteOneID(id uint32) *CouponDeleteOne {
	builder := c.Delete().Where(coupon.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CouponDeleteOne{builder}
}

// Query returns a query builder for Coupon.
func (c *CouponClient) Query() *CouponQuery {
	return &CouponQuery{
		config: c.config,
	}
}

// Get returns a Coupon entity by its id.
func (c *CouponClient) Get(ctx context.Context, id uint32) (*Coupon, error) {
	return c.Query().Where(coupon.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CouponClient) GetX(ctx context.Context, id uint32) *Coupon {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *CouponClient) Hooks() []Hook {
	hooks := c.hooks.Coupon
	return append(hooks[:len(hooks):len(hooks)], coupon.Hooks[:]...)
}

// CouponAllocatedClient is a client for the CouponAllocated schema.
type CouponAllocatedClient struct {
	config
}

// NewCouponAllocatedClient returns a client for the CouponAllocated from the given config.
func NewCouponAllocatedClient(c config) *CouponAllocatedClient {
	return &CouponAllocatedClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `couponallocated.Hooks(f(g(h())))`.
func (c *CouponAllocatedClient) Use(hooks ...Hook) {
	c.hooks.CouponAllocated = append(c.hooks.CouponAllocated, hooks...)
}

// Create returns a builder for creating a CouponAllocated entity.
func (c *CouponAllocatedClient) Create() *CouponAllocatedCreate {
	mutation := newCouponAllocatedMutation(c.config, OpCreate)
	return &CouponAllocatedCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of CouponAllocated entities.
func (c *CouponAllocatedClient) CreateBulk(builders ...*CouponAllocatedCreate) *CouponAllocatedCreateBulk {
	return &CouponAllocatedCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CouponAllocated.
func (c *CouponAllocatedClient) Update() *CouponAllocatedUpdate {
	mutation := newCouponAllocatedMutation(c.config, OpUpdate)
	return &CouponAllocatedUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CouponAllocatedClient) UpdateOne(ca *CouponAllocated) *CouponAllocatedUpdateOne {
	mutation := newCouponAllocatedMutation(c.config, OpUpdateOne, withCouponAllocated(ca))
	return &CouponAllocatedUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CouponAllocatedClient) UpdateOneID(id uint32) *CouponAllocatedUpdateOne {
	mutation := newCouponAllocatedMutation(c.config, OpUpdateOne, withCouponAllocatedID(id))
	return &CouponAllocatedUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CouponAllocated.
func (c *CouponAllocatedClient) Delete() *CouponAllocatedDelete {
	mutation := newCouponAllocatedMutation(c.config, OpDelete)
	return &CouponAllocatedDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CouponAllocatedClient) DeleteOne(ca *CouponAllocated) *CouponAllocatedDeleteOne {
	return c.DeleteOneID(ca.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *CouponAllocatedClient) DeleteOneID(id uint32) *CouponAllocatedDeleteOne {
	builder := c.Delete().Where(couponallocated.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CouponAllocatedDeleteOne{builder}
}

// Query returns a query builder for CouponAllocated.
func (c *CouponAllocatedClient) Query() *CouponAllocatedQuery {
	return &CouponAllocatedQuery{
		config: c.config,
	}
}

// Get returns a CouponAllocated entity by its id.
func (c *CouponAllocatedClient) Get(ctx context.Context, id uint32) (*CouponAllocated, error) {
	return c.Query().Where(couponallocated.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CouponAllocatedClient) GetX(ctx context.Context, id uint32) *CouponAllocated {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *CouponAllocatedClient) Hooks() []Hook {
	hooks := c.hooks.CouponAllocated
	return append(hooks[:len(hooks):len(hooks)], couponallocated.Hooks[:]...)
}

// CouponScopeClient is a client for the CouponScope schema.
type CouponScopeClient struct {
	config
}

// NewCouponScopeClient returns a client for the CouponScope from the given config.
func NewCouponScopeClient(c config) *CouponScopeClient {
	return &CouponScopeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `couponscope.Hooks(f(g(h())))`.
func (c *CouponScopeClient) Use(hooks ...Hook) {
	c.hooks.CouponScope = append(c.hooks.CouponScope, hooks...)
}

// Create returns a builder for creating a CouponScope entity.
func (c *CouponScopeClient) Create() *CouponScopeCreate {
	mutation := newCouponScopeMutation(c.config, OpCreate)
	return &CouponScopeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of CouponScope entities.
func (c *CouponScopeClient) CreateBulk(builders ...*CouponScopeCreate) *CouponScopeCreateBulk {
	return &CouponScopeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CouponScope.
func (c *CouponScopeClient) Update() *CouponScopeUpdate {
	mutation := newCouponScopeMutation(c.config, OpUpdate)
	return &CouponScopeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CouponScopeClient) UpdateOne(cs *CouponScope) *CouponScopeUpdateOne {
	mutation := newCouponScopeMutation(c.config, OpUpdateOne, withCouponScope(cs))
	return &CouponScopeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CouponScopeClient) UpdateOneID(id uint32) *CouponScopeUpdateOne {
	mutation := newCouponScopeMutation(c.config, OpUpdateOne, withCouponScopeID(id))
	return &CouponScopeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CouponScope.
func (c *CouponScopeClient) Delete() *CouponScopeDelete {
	mutation := newCouponScopeMutation(c.config, OpDelete)
	return &CouponScopeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CouponScopeClient) DeleteOne(cs *CouponScope) *CouponScopeDeleteOne {
	return c.DeleteOneID(cs.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *CouponScopeClient) DeleteOneID(id uint32) *CouponScopeDeleteOne {
	builder := c.Delete().Where(couponscope.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CouponScopeDeleteOne{builder}
}

// Query returns a query builder for CouponScope.
func (c *CouponScopeClient) Query() *CouponScopeQuery {
	return &CouponScopeQuery{
		config: c.config,
	}
}

// Get returns a CouponScope entity by its id.
func (c *CouponScopeClient) Get(ctx context.Context, id uint32) (*CouponScope, error) {
	return c.Query().Where(couponscope.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CouponScopeClient) GetX(ctx context.Context, id uint32) *CouponScope {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *CouponScopeClient) Hooks() []Hook {
	hooks := c.hooks.CouponScope
	return append(hooks[:len(hooks):len(hooks)], couponscope.Hooks[:]...)
}

// EventClient is a client for the Event schema.
type EventClient struct {
	config
}

// NewEventClient returns a client for the Event from the given config.
func NewEventClient(c config) *EventClient {
	return &EventClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `event.Hooks(f(g(h())))`.
func (c *EventClient) Use(hooks ...Hook) {
	c.hooks.Event = append(c.hooks.Event, hooks...)
}

// Create returns a builder for creating a Event entity.
func (c *EventClient) Create() *EventCreate {
	mutation := newEventMutation(c.config, OpCreate)
	return &EventCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Event entities.
func (c *EventClient) CreateBulk(builders ...*EventCreate) *EventCreateBulk {
	return &EventCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Event.
func (c *EventClient) Update() *EventUpdate {
	mutation := newEventMutation(c.config, OpUpdate)
	return &EventUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *EventClient) UpdateOne(e *Event) *EventUpdateOne {
	mutation := newEventMutation(c.config, OpUpdateOne, withEvent(e))
	return &EventUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *EventClient) UpdateOneID(id uint32) *EventUpdateOne {
	mutation := newEventMutation(c.config, OpUpdateOne, withEventID(id))
	return &EventUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Event.
func (c *EventClient) Delete() *EventDelete {
	mutation := newEventMutation(c.config, OpDelete)
	return &EventDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *EventClient) DeleteOne(e *Event) *EventDeleteOne {
	return c.DeleteOneID(e.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *EventClient) DeleteOneID(id uint32) *EventDeleteOne {
	builder := c.Delete().Where(event.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &EventDeleteOne{builder}
}

// Query returns a query builder for Event.
func (c *EventClient) Query() *EventQuery {
	return &EventQuery{
		config: c.config,
	}
}

// Get returns a Event entity by its id.
func (c *EventClient) Get(ctx context.Context, id uint32) (*Event, error) {
	return c.Query().Where(event.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *EventClient) GetX(ctx context.Context, id uint32) *Event {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *EventClient) Hooks() []Hook {
	hooks := c.hooks.Event
	return append(hooks[:len(hooks):len(hooks)], event.Hooks[:]...)
}

// InvitationCodeClient is a client for the InvitationCode schema.
type InvitationCodeClient struct {
	config
}

// NewInvitationCodeClient returns a client for the InvitationCode from the given config.
func NewInvitationCodeClient(c config) *InvitationCodeClient {
	return &InvitationCodeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `invitationcode.Hooks(f(g(h())))`.
func (c *InvitationCodeClient) Use(hooks ...Hook) {
	c.hooks.InvitationCode = append(c.hooks.InvitationCode, hooks...)
}

// Create returns a builder for creating a InvitationCode entity.
func (c *InvitationCodeClient) Create() *InvitationCodeCreate {
	mutation := newInvitationCodeMutation(c.config, OpCreate)
	return &InvitationCodeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of InvitationCode entities.
func (c *InvitationCodeClient) CreateBulk(builders ...*InvitationCodeCreate) *InvitationCodeCreateBulk {
	return &InvitationCodeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for InvitationCode.
func (c *InvitationCodeClient) Update() *InvitationCodeUpdate {
	mutation := newInvitationCodeMutation(c.config, OpUpdate)
	return &InvitationCodeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *InvitationCodeClient) UpdateOne(ic *InvitationCode) *InvitationCodeUpdateOne {
	mutation := newInvitationCodeMutation(c.config, OpUpdateOne, withInvitationCode(ic))
	return &InvitationCodeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *InvitationCodeClient) UpdateOneID(id uint32) *InvitationCodeUpdateOne {
	mutation := newInvitationCodeMutation(c.config, OpUpdateOne, withInvitationCodeID(id))
	return &InvitationCodeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for InvitationCode.
func (c *InvitationCodeClient) Delete() *InvitationCodeDelete {
	mutation := newInvitationCodeMutation(c.config, OpDelete)
	return &InvitationCodeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *InvitationCodeClient) DeleteOne(ic *InvitationCode) *InvitationCodeDeleteOne {
	return c.DeleteOneID(ic.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *InvitationCodeClient) DeleteOneID(id uint32) *InvitationCodeDeleteOne {
	builder := c.Delete().Where(invitationcode.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &InvitationCodeDeleteOne{builder}
}

// Query returns a query builder for InvitationCode.
func (c *InvitationCodeClient) Query() *InvitationCodeQuery {
	return &InvitationCodeQuery{
		config: c.config,
	}
}

// Get returns a InvitationCode entity by its id.
func (c *InvitationCodeClient) Get(ctx context.Context, id uint32) (*InvitationCode, error) {
	return c.Query().Where(invitationcode.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *InvitationCodeClient) GetX(ctx context.Context, id uint32) *InvitationCode {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *InvitationCodeClient) Hooks() []Hook {
	hooks := c.hooks.InvitationCode
	return append(hooks[:len(hooks):len(hooks)], invitationcode.Hooks[:]...)
}

// PubsubMessageClient is a client for the PubsubMessage schema.
type PubsubMessageClient struct {
	config
}

// NewPubsubMessageClient returns a client for the PubsubMessage from the given config.
func NewPubsubMessageClient(c config) *PubsubMessageClient {
	return &PubsubMessageClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `pubsubmessage.Hooks(f(g(h())))`.
func (c *PubsubMessageClient) Use(hooks ...Hook) {
	c.hooks.PubsubMessage = append(c.hooks.PubsubMessage, hooks...)
}

// Create returns a builder for creating a PubsubMessage entity.
func (c *PubsubMessageClient) Create() *PubsubMessageCreate {
	mutation := newPubsubMessageMutation(c.config, OpCreate)
	return &PubsubMessageCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of PubsubMessage entities.
func (c *PubsubMessageClient) CreateBulk(builders ...*PubsubMessageCreate) *PubsubMessageCreateBulk {
	return &PubsubMessageCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for PubsubMessage.
func (c *PubsubMessageClient) Update() *PubsubMessageUpdate {
	mutation := newPubsubMessageMutation(c.config, OpUpdate)
	return &PubsubMessageUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PubsubMessageClient) UpdateOne(pm *PubsubMessage) *PubsubMessageUpdateOne {
	mutation := newPubsubMessageMutation(c.config, OpUpdateOne, withPubsubMessage(pm))
	return &PubsubMessageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PubsubMessageClient) UpdateOneID(id uint32) *PubsubMessageUpdateOne {
	mutation := newPubsubMessageMutation(c.config, OpUpdateOne, withPubsubMessageID(id))
	return &PubsubMessageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for PubsubMessage.
func (c *PubsubMessageClient) Delete() *PubsubMessageDelete {
	mutation := newPubsubMessageMutation(c.config, OpDelete)
	return &PubsubMessageDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PubsubMessageClient) DeleteOne(pm *PubsubMessage) *PubsubMessageDeleteOne {
	return c.DeleteOneID(pm.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *PubsubMessageClient) DeleteOneID(id uint32) *PubsubMessageDeleteOne {
	builder := c.Delete().Where(pubsubmessage.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PubsubMessageDeleteOne{builder}
}

// Query returns a query builder for PubsubMessage.
func (c *PubsubMessageClient) Query() *PubsubMessageQuery {
	return &PubsubMessageQuery{
		config: c.config,
	}
}

// Get returns a PubsubMessage entity by its id.
func (c *PubsubMessageClient) Get(ctx context.Context, id uint32) (*PubsubMessage, error) {
	return c.Query().Where(pubsubmessage.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PubsubMessageClient) GetX(ctx context.Context, id uint32) *PubsubMessage {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *PubsubMessageClient) Hooks() []Hook {
	hooks := c.hooks.PubsubMessage
	return append(hooks[:len(hooks):len(hooks)], pubsubmessage.Hooks[:]...)
}

// RegistrationClient is a client for the Registration schema.
type RegistrationClient struct {
	config
}

// NewRegistrationClient returns a client for the Registration from the given config.
func NewRegistrationClient(c config) *RegistrationClient {
	return &RegistrationClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `registration.Hooks(f(g(h())))`.
func (c *RegistrationClient) Use(hooks ...Hook) {
	c.hooks.Registration = append(c.hooks.Registration, hooks...)
}

// Create returns a builder for creating a Registration entity.
func (c *RegistrationClient) Create() *RegistrationCreate {
	mutation := newRegistrationMutation(c.config, OpCreate)
	return &RegistrationCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Registration entities.
func (c *RegistrationClient) CreateBulk(builders ...*RegistrationCreate) *RegistrationCreateBulk {
	return &RegistrationCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Registration.
func (c *RegistrationClient) Update() *RegistrationUpdate {
	mutation := newRegistrationMutation(c.config, OpUpdate)
	return &RegistrationUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RegistrationClient) UpdateOne(r *Registration) *RegistrationUpdateOne {
	mutation := newRegistrationMutation(c.config, OpUpdateOne, withRegistration(r))
	return &RegistrationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RegistrationClient) UpdateOneID(id uint32) *RegistrationUpdateOne {
	mutation := newRegistrationMutation(c.config, OpUpdateOne, withRegistrationID(id))
	return &RegistrationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Registration.
func (c *RegistrationClient) Delete() *RegistrationDelete {
	mutation := newRegistrationMutation(c.config, OpDelete)
	return &RegistrationDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *RegistrationClient) DeleteOne(r *Registration) *RegistrationDeleteOne {
	return c.DeleteOneID(r.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *RegistrationClient) DeleteOneID(id uint32) *RegistrationDeleteOne {
	builder := c.Delete().Where(registration.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RegistrationDeleteOne{builder}
}

// Query returns a query builder for Registration.
func (c *RegistrationClient) Query() *RegistrationQuery {
	return &RegistrationQuery{
		config: c.config,
	}
}

// Get returns a Registration entity by its id.
func (c *RegistrationClient) Get(ctx context.Context, id uint32) (*Registration, error) {
	return c.Query().Where(registration.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RegistrationClient) GetX(ctx context.Context, id uint32) *Registration {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *RegistrationClient) Hooks() []Hook {
	hooks := c.hooks.Registration
	return append(hooks[:len(hooks):len(hooks)], registration.Hooks[:]...)
}

// StatementClient is a client for the Statement schema.
type StatementClient struct {
	config
}

// NewStatementClient returns a client for the Statement from the given config.
func NewStatementClient(c config) *StatementClient {
	return &StatementClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `statement.Hooks(f(g(h())))`.
func (c *StatementClient) Use(hooks ...Hook) {
	c.hooks.Statement = append(c.hooks.Statement, hooks...)
}

// Create returns a builder for creating a Statement entity.
func (c *StatementClient) Create() *StatementCreate {
	mutation := newStatementMutation(c.config, OpCreate)
	return &StatementCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Statement entities.
func (c *StatementClient) CreateBulk(builders ...*StatementCreate) *StatementCreateBulk {
	return &StatementCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Statement.
func (c *StatementClient) Update() *StatementUpdate {
	mutation := newStatementMutation(c.config, OpUpdate)
	return &StatementUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *StatementClient) UpdateOne(s *Statement) *StatementUpdateOne {
	mutation := newStatementMutation(c.config, OpUpdateOne, withStatement(s))
	return &StatementUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *StatementClient) UpdateOneID(id uint32) *StatementUpdateOne {
	mutation := newStatementMutation(c.config, OpUpdateOne, withStatementID(id))
	return &StatementUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Statement.
func (c *StatementClient) Delete() *StatementDelete {
	mutation := newStatementMutation(c.config, OpDelete)
	return &StatementDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *StatementClient) DeleteOne(s *Statement) *StatementDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *StatementClient) DeleteOneID(id uint32) *StatementDeleteOne {
	builder := c.Delete().Where(statement.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &StatementDeleteOne{builder}
}

// Query returns a query builder for Statement.
func (c *StatementClient) Query() *StatementQuery {
	return &StatementQuery{
		config: c.config,
	}
}

// Get returns a Statement entity by its id.
func (c *StatementClient) Get(ctx context.Context, id uint32) (*Statement, error) {
	return c.Query().Where(statement.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *StatementClient) GetX(ctx context.Context, id uint32) *Statement {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *StatementClient) Hooks() []Hook {
	hooks := c.hooks.Statement
	return append(hooks[:len(hooks):len(hooks)], statement.Hooks[:]...)
}
