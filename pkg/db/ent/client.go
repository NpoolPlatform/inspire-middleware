// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"

	"github.com/NpoolPlatform/inspire-middleware/pkg/db/ent/migrate"

	"github.com/NpoolPlatform/inspire-middleware/pkg/db/ent/achievement"
	"github.com/NpoolPlatform/inspire-middleware/pkg/db/ent/achievementuser"
	"github.com/NpoolPlatform/inspire-middleware/pkg/db/ent/appcommissionconfig"
	"github.com/NpoolPlatform/inspire-middleware/pkg/db/ent/appconfig"
	"github.com/NpoolPlatform/inspire-middleware/pkg/db/ent/appgoodcommissionconfig"
	"github.com/NpoolPlatform/inspire-middleware/pkg/db/ent/appgoodscope"
	"github.com/NpoolPlatform/inspire-middleware/pkg/db/ent/cashcontrol"
	"github.com/NpoolPlatform/inspire-middleware/pkg/db/ent/coinallocated"
	"github.com/NpoolPlatform/inspire-middleware/pkg/db/ent/coinconfig"
	"github.com/NpoolPlatform/inspire-middleware/pkg/db/ent/commission"
	"github.com/NpoolPlatform/inspire-middleware/pkg/db/ent/coupon"
	"github.com/NpoolPlatform/inspire-middleware/pkg/db/ent/couponallocated"
	"github.com/NpoolPlatform/inspire-middleware/pkg/db/ent/couponscope"
	"github.com/NpoolPlatform/inspire-middleware/pkg/db/ent/creditallocated"
	"github.com/NpoolPlatform/inspire-middleware/pkg/db/ent/event"
	"github.com/NpoolPlatform/inspire-middleware/pkg/db/ent/eventcoin"
	"github.com/NpoolPlatform/inspire-middleware/pkg/db/ent/eventcoupon"
	"github.com/NpoolPlatform/inspire-middleware/pkg/db/ent/goodachievement"
	"github.com/NpoolPlatform/inspire-middleware/pkg/db/ent/goodcoinachievement"
	"github.com/NpoolPlatform/inspire-middleware/pkg/db/ent/invitationcode"
	"github.com/NpoolPlatform/inspire-middleware/pkg/db/ent/orderpaymentstatement"
	"github.com/NpoolPlatform/inspire-middleware/pkg/db/ent/orderstatement"
	"github.com/NpoolPlatform/inspire-middleware/pkg/db/ent/pubsubmessage"
	"github.com/NpoolPlatform/inspire-middleware/pkg/db/ent/registration"
	"github.com/NpoolPlatform/inspire-middleware/pkg/db/ent/statement"
	"github.com/NpoolPlatform/inspire-middleware/pkg/db/ent/taskconfig"
	"github.com/NpoolPlatform/inspire-middleware/pkg/db/ent/taskuser"
	"github.com/NpoolPlatform/inspire-middleware/pkg/db/ent/usercoinreward"
	"github.com/NpoolPlatform/inspire-middleware/pkg/db/ent/usercredithistory"
	"github.com/NpoolPlatform/inspire-middleware/pkg/db/ent/userreward"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Achievement is the client for interacting with the Achievement builders.
	Achievement *AchievementClient
	// AchievementUser is the client for interacting with the AchievementUser builders.
	AchievementUser *AchievementUserClient
	// AppCommissionConfig is the client for interacting with the AppCommissionConfig builders.
	AppCommissionConfig *AppCommissionConfigClient
	// AppConfig is the client for interacting with the AppConfig builders.
	AppConfig *AppConfigClient
	// AppGoodCommissionConfig is the client for interacting with the AppGoodCommissionConfig builders.
	AppGoodCommissionConfig *AppGoodCommissionConfigClient
	// AppGoodScope is the client for interacting with the AppGoodScope builders.
	AppGoodScope *AppGoodScopeClient
	// CashControl is the client for interacting with the CashControl builders.
	CashControl *CashControlClient
	// CoinAllocated is the client for interacting with the CoinAllocated builders.
	CoinAllocated *CoinAllocatedClient
	// CoinConfig is the client for interacting with the CoinConfig builders.
	CoinConfig *CoinConfigClient
	// Commission is the client for interacting with the Commission builders.
	Commission *CommissionClient
	// Coupon is the client for interacting with the Coupon builders.
	Coupon *CouponClient
	// CouponAllocated is the client for interacting with the CouponAllocated builders.
	CouponAllocated *CouponAllocatedClient
	// CouponScope is the client for interacting with the CouponScope builders.
	CouponScope *CouponScopeClient
	// CreditAllocated is the client for interacting with the CreditAllocated builders.
	CreditAllocated *CreditAllocatedClient
	// Event is the client for interacting with the Event builders.
	Event *EventClient
	// EventCoin is the client for interacting with the EventCoin builders.
	EventCoin *EventCoinClient
	// EventCoupon is the client for interacting with the EventCoupon builders.
	EventCoupon *EventCouponClient
	// GoodAchievement is the client for interacting with the GoodAchievement builders.
	GoodAchievement *GoodAchievementClient
	// GoodCoinAchievement is the client for interacting with the GoodCoinAchievement builders.
	GoodCoinAchievement *GoodCoinAchievementClient
	// InvitationCode is the client for interacting with the InvitationCode builders.
	InvitationCode *InvitationCodeClient
	// OrderPaymentStatement is the client for interacting with the OrderPaymentStatement builders.
	OrderPaymentStatement *OrderPaymentStatementClient
	// OrderStatement is the client for interacting with the OrderStatement builders.
	OrderStatement *OrderStatementClient
	// PubsubMessage is the client for interacting with the PubsubMessage builders.
	PubsubMessage *PubsubMessageClient
	// Registration is the client for interacting with the Registration builders.
	Registration *RegistrationClient
	// Statement is the client for interacting with the Statement builders.
	Statement *StatementClient
	// TaskConfig is the client for interacting with the TaskConfig builders.
	TaskConfig *TaskConfigClient
	// TaskUser is the client for interacting with the TaskUser builders.
	TaskUser *TaskUserClient
	// UserCoinReward is the client for interacting with the UserCoinReward builders.
	UserCoinReward *UserCoinRewardClient
	// UserCreditHistory is the client for interacting with the UserCreditHistory builders.
	UserCreditHistory *UserCreditHistoryClient
	// UserReward is the client for interacting with the UserReward builders.
	UserReward *UserRewardClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Achievement = NewAchievementClient(c.config)
	c.AchievementUser = NewAchievementUserClient(c.config)
	c.AppCommissionConfig = NewAppCommissionConfigClient(c.config)
	c.AppConfig = NewAppConfigClient(c.config)
	c.AppGoodCommissionConfig = NewAppGoodCommissionConfigClient(c.config)
	c.AppGoodScope = NewAppGoodScopeClient(c.config)
	c.CashControl = NewCashControlClient(c.config)
	c.CoinAllocated = NewCoinAllocatedClient(c.config)
	c.CoinConfig = NewCoinConfigClient(c.config)
	c.Commission = NewCommissionClient(c.config)
	c.Coupon = NewCouponClient(c.config)
	c.CouponAllocated = NewCouponAllocatedClient(c.config)
	c.CouponScope = NewCouponScopeClient(c.config)
	c.CreditAllocated = NewCreditAllocatedClient(c.config)
	c.Event = NewEventClient(c.config)
	c.EventCoin = NewEventCoinClient(c.config)
	c.EventCoupon = NewEventCouponClient(c.config)
	c.GoodAchievement = NewGoodAchievementClient(c.config)
	c.GoodCoinAchievement = NewGoodCoinAchievementClient(c.config)
	c.InvitationCode = NewInvitationCodeClient(c.config)
	c.OrderPaymentStatement = NewOrderPaymentStatementClient(c.config)
	c.OrderStatement = NewOrderStatementClient(c.config)
	c.PubsubMessage = NewPubsubMessageClient(c.config)
	c.Registration = NewRegistrationClient(c.config)
	c.Statement = NewStatementClient(c.config)
	c.TaskConfig = NewTaskConfigClient(c.config)
	c.TaskUser = NewTaskUserClient(c.config)
	c.UserCoinReward = NewUserCoinRewardClient(c.config)
	c.UserCreditHistory = NewUserCreditHistoryClient(c.config)
	c.UserReward = NewUserRewardClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:                     ctx,
		config:                  cfg,
		Achievement:             NewAchievementClient(cfg),
		AchievementUser:         NewAchievementUserClient(cfg),
		AppCommissionConfig:     NewAppCommissionConfigClient(cfg),
		AppConfig:               NewAppConfigClient(cfg),
		AppGoodCommissionConfig: NewAppGoodCommissionConfigClient(cfg),
		AppGoodScope:            NewAppGoodScopeClient(cfg),
		CashControl:             NewCashControlClient(cfg),
		CoinAllocated:           NewCoinAllocatedClient(cfg),
		CoinConfig:              NewCoinConfigClient(cfg),
		Commission:              NewCommissionClient(cfg),
		Coupon:                  NewCouponClient(cfg),
		CouponAllocated:         NewCouponAllocatedClient(cfg),
		CouponScope:             NewCouponScopeClient(cfg),
		CreditAllocated:         NewCreditAllocatedClient(cfg),
		Event:                   NewEventClient(cfg),
		EventCoin:               NewEventCoinClient(cfg),
		EventCoupon:             NewEventCouponClient(cfg),
		GoodAchievement:         NewGoodAchievementClient(cfg),
		GoodCoinAchievement:     NewGoodCoinAchievementClient(cfg),
		InvitationCode:          NewInvitationCodeClient(cfg),
		OrderPaymentStatement:   NewOrderPaymentStatementClient(cfg),
		OrderStatement:          NewOrderStatementClient(cfg),
		PubsubMessage:           NewPubsubMessageClient(cfg),
		Registration:            NewRegistrationClient(cfg),
		Statement:               NewStatementClient(cfg),
		TaskConfig:              NewTaskConfigClient(cfg),
		TaskUser:                NewTaskUserClient(cfg),
		UserCoinReward:          NewUserCoinRewardClient(cfg),
		UserCreditHistory:       NewUserCreditHistoryClient(cfg),
		UserReward:              NewUserRewardClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:                     ctx,
		config:                  cfg,
		Achievement:             NewAchievementClient(cfg),
		AchievementUser:         NewAchievementUserClient(cfg),
		AppCommissionConfig:     NewAppCommissionConfigClient(cfg),
		AppConfig:               NewAppConfigClient(cfg),
		AppGoodCommissionConfig: NewAppGoodCommissionConfigClient(cfg),
		AppGoodScope:            NewAppGoodScopeClient(cfg),
		CashControl:             NewCashControlClient(cfg),
		CoinAllocated:           NewCoinAllocatedClient(cfg),
		CoinConfig:              NewCoinConfigClient(cfg),
		Commission:              NewCommissionClient(cfg),
		Coupon:                  NewCouponClient(cfg),
		CouponAllocated:         NewCouponAllocatedClient(cfg),
		CouponScope:             NewCouponScopeClient(cfg),
		CreditAllocated:         NewCreditAllocatedClient(cfg),
		Event:                   NewEventClient(cfg),
		EventCoin:               NewEventCoinClient(cfg),
		EventCoupon:             NewEventCouponClient(cfg),
		GoodAchievement:         NewGoodAchievementClient(cfg),
		GoodCoinAchievement:     NewGoodCoinAchievementClient(cfg),
		InvitationCode:          NewInvitationCodeClient(cfg),
		OrderPaymentStatement:   NewOrderPaymentStatementClient(cfg),
		OrderStatement:          NewOrderStatementClient(cfg),
		PubsubMessage:           NewPubsubMessageClient(cfg),
		Registration:            NewRegistrationClient(cfg),
		Statement:               NewStatementClient(cfg),
		TaskConfig:              NewTaskConfigClient(cfg),
		TaskUser:                NewTaskUserClient(cfg),
		UserCoinReward:          NewUserCoinRewardClient(cfg),
		UserCreditHistory:       NewUserCreditHistoryClient(cfg),
		UserReward:              NewUserRewardClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Achievement.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Achievement.Use(hooks...)
	c.AchievementUser.Use(hooks...)
	c.AppCommissionConfig.Use(hooks...)
	c.AppConfig.Use(hooks...)
	c.AppGoodCommissionConfig.Use(hooks...)
	c.AppGoodScope.Use(hooks...)
	c.CashControl.Use(hooks...)
	c.CoinAllocated.Use(hooks...)
	c.CoinConfig.Use(hooks...)
	c.Commission.Use(hooks...)
	c.Coupon.Use(hooks...)
	c.CouponAllocated.Use(hooks...)
	c.CouponScope.Use(hooks...)
	c.CreditAllocated.Use(hooks...)
	c.Event.Use(hooks...)
	c.EventCoin.Use(hooks...)
	c.EventCoupon.Use(hooks...)
	c.GoodAchievement.Use(hooks...)
	c.GoodCoinAchievement.Use(hooks...)
	c.InvitationCode.Use(hooks...)
	c.OrderPaymentStatement.Use(hooks...)
	c.OrderStatement.Use(hooks...)
	c.PubsubMessage.Use(hooks...)
	c.Registration.Use(hooks...)
	c.Statement.Use(hooks...)
	c.TaskConfig.Use(hooks...)
	c.TaskUser.Use(hooks...)
	c.UserCoinReward.Use(hooks...)
	c.UserCreditHistory.Use(hooks...)
	c.UserReward.Use(hooks...)
}

// AchievementClient is a client for the Achievement schema.
type AchievementClient struct {
	config
}

// NewAchievementClient returns a client for the Achievement from the given config.
func NewAchievementClient(c config) *AchievementClient {
	return &AchievementClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `achievement.Hooks(f(g(h())))`.
func (c *AchievementClient) Use(hooks ...Hook) {
	c.hooks.Achievement = append(c.hooks.Achievement, hooks...)
}

// Create returns a builder for creating a Achievement entity.
func (c *AchievementClient) Create() *AchievementCreate {
	mutation := newAchievementMutation(c.config, OpCreate)
	return &AchievementCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Achievement entities.
func (c *AchievementClient) CreateBulk(builders ...*AchievementCreate) *AchievementCreateBulk {
	return &AchievementCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Achievement.
func (c *AchievementClient) Update() *AchievementUpdate {
	mutation := newAchievementMutation(c.config, OpUpdate)
	return &AchievementUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AchievementClient) UpdateOne(a *Achievement) *AchievementUpdateOne {
	mutation := newAchievementMutation(c.config, OpUpdateOne, withAchievement(a))
	return &AchievementUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AchievementClient) UpdateOneID(id uint32) *AchievementUpdateOne {
	mutation := newAchievementMutation(c.config, OpUpdateOne, withAchievementID(id))
	return &AchievementUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Achievement.
func (c *AchievementClient) Delete() *AchievementDelete {
	mutation := newAchievementMutation(c.config, OpDelete)
	return &AchievementDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AchievementClient) DeleteOne(a *Achievement) *AchievementDeleteOne {
	return c.DeleteOneID(a.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *AchievementClient) DeleteOneID(id uint32) *AchievementDeleteOne {
	builder := c.Delete().Where(achievement.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AchievementDeleteOne{builder}
}

// Query returns a query builder for Achievement.
func (c *AchievementClient) Query() *AchievementQuery {
	return &AchievementQuery{
		config: c.config,
	}
}

// Get returns a Achievement entity by its id.
func (c *AchievementClient) Get(ctx context.Context, id uint32) (*Achievement, error) {
	return c.Query().Where(achievement.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AchievementClient) GetX(ctx context.Context, id uint32) *Achievement {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *AchievementClient) Hooks() []Hook {
	hooks := c.hooks.Achievement
	return append(hooks[:len(hooks):len(hooks)], achievement.Hooks[:]...)
}

// AchievementUserClient is a client for the AchievementUser schema.
type AchievementUserClient struct {
	config
}

// NewAchievementUserClient returns a client for the AchievementUser from the given config.
func NewAchievementUserClient(c config) *AchievementUserClient {
	return &AchievementUserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `achievementuser.Hooks(f(g(h())))`.
func (c *AchievementUserClient) Use(hooks ...Hook) {
	c.hooks.AchievementUser = append(c.hooks.AchievementUser, hooks...)
}

// Create returns a builder for creating a AchievementUser entity.
func (c *AchievementUserClient) Create() *AchievementUserCreate {
	mutation := newAchievementUserMutation(c.config, OpCreate)
	return &AchievementUserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AchievementUser entities.
func (c *AchievementUserClient) CreateBulk(builders ...*AchievementUserCreate) *AchievementUserCreateBulk {
	return &AchievementUserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AchievementUser.
func (c *AchievementUserClient) Update() *AchievementUserUpdate {
	mutation := newAchievementUserMutation(c.config, OpUpdate)
	return &AchievementUserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AchievementUserClient) UpdateOne(au *AchievementUser) *AchievementUserUpdateOne {
	mutation := newAchievementUserMutation(c.config, OpUpdateOne, withAchievementUser(au))
	return &AchievementUserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AchievementUserClient) UpdateOneID(id uint32) *AchievementUserUpdateOne {
	mutation := newAchievementUserMutation(c.config, OpUpdateOne, withAchievementUserID(id))
	return &AchievementUserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for AchievementUser.
func (c *AchievementUserClient) Delete() *AchievementUserDelete {
	mutation := newAchievementUserMutation(c.config, OpDelete)
	return &AchievementUserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AchievementUserClient) DeleteOne(au *AchievementUser) *AchievementUserDeleteOne {
	return c.DeleteOneID(au.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *AchievementUserClient) DeleteOneID(id uint32) *AchievementUserDeleteOne {
	builder := c.Delete().Where(achievementuser.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AchievementUserDeleteOne{builder}
}

// Query returns a query builder for AchievementUser.
func (c *AchievementUserClient) Query() *AchievementUserQuery {
	return &AchievementUserQuery{
		config: c.config,
	}
}

// Get returns a AchievementUser entity by its id.
func (c *AchievementUserClient) Get(ctx context.Context, id uint32) (*AchievementUser, error) {
	return c.Query().Where(achievementuser.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AchievementUserClient) GetX(ctx context.Context, id uint32) *AchievementUser {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *AchievementUserClient) Hooks() []Hook {
	hooks := c.hooks.AchievementUser
	return append(hooks[:len(hooks):len(hooks)], achievementuser.Hooks[:]...)
}

// AppCommissionConfigClient is a client for the AppCommissionConfig schema.
type AppCommissionConfigClient struct {
	config
}

// NewAppCommissionConfigClient returns a client for the AppCommissionConfig from the given config.
func NewAppCommissionConfigClient(c config) *AppCommissionConfigClient {
	return &AppCommissionConfigClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `appcommissionconfig.Hooks(f(g(h())))`.
func (c *AppCommissionConfigClient) Use(hooks ...Hook) {
	c.hooks.AppCommissionConfig = append(c.hooks.AppCommissionConfig, hooks...)
}

// Create returns a builder for creating a AppCommissionConfig entity.
func (c *AppCommissionConfigClient) Create() *AppCommissionConfigCreate {
	mutation := newAppCommissionConfigMutation(c.config, OpCreate)
	return &AppCommissionConfigCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AppCommissionConfig entities.
func (c *AppCommissionConfigClient) CreateBulk(builders ...*AppCommissionConfigCreate) *AppCommissionConfigCreateBulk {
	return &AppCommissionConfigCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AppCommissionConfig.
func (c *AppCommissionConfigClient) Update() *AppCommissionConfigUpdate {
	mutation := newAppCommissionConfigMutation(c.config, OpUpdate)
	return &AppCommissionConfigUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AppCommissionConfigClient) UpdateOne(acc *AppCommissionConfig) *AppCommissionConfigUpdateOne {
	mutation := newAppCommissionConfigMutation(c.config, OpUpdateOne, withAppCommissionConfig(acc))
	return &AppCommissionConfigUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AppCommissionConfigClient) UpdateOneID(id uint32) *AppCommissionConfigUpdateOne {
	mutation := newAppCommissionConfigMutation(c.config, OpUpdateOne, withAppCommissionConfigID(id))
	return &AppCommissionConfigUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for AppCommissionConfig.
func (c *AppCommissionConfigClient) Delete() *AppCommissionConfigDelete {
	mutation := newAppCommissionConfigMutation(c.config, OpDelete)
	return &AppCommissionConfigDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AppCommissionConfigClient) DeleteOne(acc *AppCommissionConfig) *AppCommissionConfigDeleteOne {
	return c.DeleteOneID(acc.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *AppCommissionConfigClient) DeleteOneID(id uint32) *AppCommissionConfigDeleteOne {
	builder := c.Delete().Where(appcommissionconfig.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AppCommissionConfigDeleteOne{builder}
}

// Query returns a query builder for AppCommissionConfig.
func (c *AppCommissionConfigClient) Query() *AppCommissionConfigQuery {
	return &AppCommissionConfigQuery{
		config: c.config,
	}
}

// Get returns a AppCommissionConfig entity by its id.
func (c *AppCommissionConfigClient) Get(ctx context.Context, id uint32) (*AppCommissionConfig, error) {
	return c.Query().Where(appcommissionconfig.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AppCommissionConfigClient) GetX(ctx context.Context, id uint32) *AppCommissionConfig {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *AppCommissionConfigClient) Hooks() []Hook {
	hooks := c.hooks.AppCommissionConfig
	return append(hooks[:len(hooks):len(hooks)], appcommissionconfig.Hooks[:]...)
}

// AppConfigClient is a client for the AppConfig schema.
type AppConfigClient struct {
	config
}

// NewAppConfigClient returns a client for the AppConfig from the given config.
func NewAppConfigClient(c config) *AppConfigClient {
	return &AppConfigClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `appconfig.Hooks(f(g(h())))`.
func (c *AppConfigClient) Use(hooks ...Hook) {
	c.hooks.AppConfig = append(c.hooks.AppConfig, hooks...)
}

// Create returns a builder for creating a AppConfig entity.
func (c *AppConfigClient) Create() *AppConfigCreate {
	mutation := newAppConfigMutation(c.config, OpCreate)
	return &AppConfigCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AppConfig entities.
func (c *AppConfigClient) CreateBulk(builders ...*AppConfigCreate) *AppConfigCreateBulk {
	return &AppConfigCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AppConfig.
func (c *AppConfigClient) Update() *AppConfigUpdate {
	mutation := newAppConfigMutation(c.config, OpUpdate)
	return &AppConfigUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AppConfigClient) UpdateOne(ac *AppConfig) *AppConfigUpdateOne {
	mutation := newAppConfigMutation(c.config, OpUpdateOne, withAppConfig(ac))
	return &AppConfigUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AppConfigClient) UpdateOneID(id uint32) *AppConfigUpdateOne {
	mutation := newAppConfigMutation(c.config, OpUpdateOne, withAppConfigID(id))
	return &AppConfigUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for AppConfig.
func (c *AppConfigClient) Delete() *AppConfigDelete {
	mutation := newAppConfigMutation(c.config, OpDelete)
	return &AppConfigDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AppConfigClient) DeleteOne(ac *AppConfig) *AppConfigDeleteOne {
	return c.DeleteOneID(ac.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *AppConfigClient) DeleteOneID(id uint32) *AppConfigDeleteOne {
	builder := c.Delete().Where(appconfig.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AppConfigDeleteOne{builder}
}

// Query returns a query builder for AppConfig.
func (c *AppConfigClient) Query() *AppConfigQuery {
	return &AppConfigQuery{
		config: c.config,
	}
}

// Get returns a AppConfig entity by its id.
func (c *AppConfigClient) Get(ctx context.Context, id uint32) (*AppConfig, error) {
	return c.Query().Where(appconfig.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AppConfigClient) GetX(ctx context.Context, id uint32) *AppConfig {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *AppConfigClient) Hooks() []Hook {
	hooks := c.hooks.AppConfig
	return append(hooks[:len(hooks):len(hooks)], appconfig.Hooks[:]...)
}

// AppGoodCommissionConfigClient is a client for the AppGoodCommissionConfig schema.
type AppGoodCommissionConfigClient struct {
	config
}

// NewAppGoodCommissionConfigClient returns a client for the AppGoodCommissionConfig from the given config.
func NewAppGoodCommissionConfigClient(c config) *AppGoodCommissionConfigClient {
	return &AppGoodCommissionConfigClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `appgoodcommissionconfig.Hooks(f(g(h())))`.
func (c *AppGoodCommissionConfigClient) Use(hooks ...Hook) {
	c.hooks.AppGoodCommissionConfig = append(c.hooks.AppGoodCommissionConfig, hooks...)
}

// Create returns a builder for creating a AppGoodCommissionConfig entity.
func (c *AppGoodCommissionConfigClient) Create() *AppGoodCommissionConfigCreate {
	mutation := newAppGoodCommissionConfigMutation(c.config, OpCreate)
	return &AppGoodCommissionConfigCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AppGoodCommissionConfig entities.
func (c *AppGoodCommissionConfigClient) CreateBulk(builders ...*AppGoodCommissionConfigCreate) *AppGoodCommissionConfigCreateBulk {
	return &AppGoodCommissionConfigCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AppGoodCommissionConfig.
func (c *AppGoodCommissionConfigClient) Update() *AppGoodCommissionConfigUpdate {
	mutation := newAppGoodCommissionConfigMutation(c.config, OpUpdate)
	return &AppGoodCommissionConfigUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AppGoodCommissionConfigClient) UpdateOne(agcc *AppGoodCommissionConfig) *AppGoodCommissionConfigUpdateOne {
	mutation := newAppGoodCommissionConfigMutation(c.config, OpUpdateOne, withAppGoodCommissionConfig(agcc))
	return &AppGoodCommissionConfigUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AppGoodCommissionConfigClient) UpdateOneID(id uint32) *AppGoodCommissionConfigUpdateOne {
	mutation := newAppGoodCommissionConfigMutation(c.config, OpUpdateOne, withAppGoodCommissionConfigID(id))
	return &AppGoodCommissionConfigUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for AppGoodCommissionConfig.
func (c *AppGoodCommissionConfigClient) Delete() *AppGoodCommissionConfigDelete {
	mutation := newAppGoodCommissionConfigMutation(c.config, OpDelete)
	return &AppGoodCommissionConfigDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AppGoodCommissionConfigClient) DeleteOne(agcc *AppGoodCommissionConfig) *AppGoodCommissionConfigDeleteOne {
	return c.DeleteOneID(agcc.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *AppGoodCommissionConfigClient) DeleteOneID(id uint32) *AppGoodCommissionConfigDeleteOne {
	builder := c.Delete().Where(appgoodcommissionconfig.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AppGoodCommissionConfigDeleteOne{builder}
}

// Query returns a query builder for AppGoodCommissionConfig.
func (c *AppGoodCommissionConfigClient) Query() *AppGoodCommissionConfigQuery {
	return &AppGoodCommissionConfigQuery{
		config: c.config,
	}
}

// Get returns a AppGoodCommissionConfig entity by its id.
func (c *AppGoodCommissionConfigClient) Get(ctx context.Context, id uint32) (*AppGoodCommissionConfig, error) {
	return c.Query().Where(appgoodcommissionconfig.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AppGoodCommissionConfigClient) GetX(ctx context.Context, id uint32) *AppGoodCommissionConfig {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *AppGoodCommissionConfigClient) Hooks() []Hook {
	hooks := c.hooks.AppGoodCommissionConfig
	return append(hooks[:len(hooks):len(hooks)], appgoodcommissionconfig.Hooks[:]...)
}

// AppGoodScopeClient is a client for the AppGoodScope schema.
type AppGoodScopeClient struct {
	config
}

// NewAppGoodScopeClient returns a client for the AppGoodScope from the given config.
func NewAppGoodScopeClient(c config) *AppGoodScopeClient {
	return &AppGoodScopeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `appgoodscope.Hooks(f(g(h())))`.
func (c *AppGoodScopeClient) Use(hooks ...Hook) {
	c.hooks.AppGoodScope = append(c.hooks.AppGoodScope, hooks...)
}

// Create returns a builder for creating a AppGoodScope entity.
func (c *AppGoodScopeClient) Create() *AppGoodScopeCreate {
	mutation := newAppGoodScopeMutation(c.config, OpCreate)
	return &AppGoodScopeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AppGoodScope entities.
func (c *AppGoodScopeClient) CreateBulk(builders ...*AppGoodScopeCreate) *AppGoodScopeCreateBulk {
	return &AppGoodScopeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AppGoodScope.
func (c *AppGoodScopeClient) Update() *AppGoodScopeUpdate {
	mutation := newAppGoodScopeMutation(c.config, OpUpdate)
	return &AppGoodScopeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AppGoodScopeClient) UpdateOne(ags *AppGoodScope) *AppGoodScopeUpdateOne {
	mutation := newAppGoodScopeMutation(c.config, OpUpdateOne, withAppGoodScope(ags))
	return &AppGoodScopeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AppGoodScopeClient) UpdateOneID(id uint32) *AppGoodScopeUpdateOne {
	mutation := newAppGoodScopeMutation(c.config, OpUpdateOne, withAppGoodScopeID(id))
	return &AppGoodScopeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for AppGoodScope.
func (c *AppGoodScopeClient) Delete() *AppGoodScopeDelete {
	mutation := newAppGoodScopeMutation(c.config, OpDelete)
	return &AppGoodScopeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AppGoodScopeClient) DeleteOne(ags *AppGoodScope) *AppGoodScopeDeleteOne {
	return c.DeleteOneID(ags.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *AppGoodScopeClient) DeleteOneID(id uint32) *AppGoodScopeDeleteOne {
	builder := c.Delete().Where(appgoodscope.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AppGoodScopeDeleteOne{builder}
}

// Query returns a query builder for AppGoodScope.
func (c *AppGoodScopeClient) Query() *AppGoodScopeQuery {
	return &AppGoodScopeQuery{
		config: c.config,
	}
}

// Get returns a AppGoodScope entity by its id.
func (c *AppGoodScopeClient) Get(ctx context.Context, id uint32) (*AppGoodScope, error) {
	return c.Query().Where(appgoodscope.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AppGoodScopeClient) GetX(ctx context.Context, id uint32) *AppGoodScope {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *AppGoodScopeClient) Hooks() []Hook {
	hooks := c.hooks.AppGoodScope
	return append(hooks[:len(hooks):len(hooks)], appgoodscope.Hooks[:]...)
}

// CashControlClient is a client for the CashControl schema.
type CashControlClient struct {
	config
}

// NewCashControlClient returns a client for the CashControl from the given config.
func NewCashControlClient(c config) *CashControlClient {
	return &CashControlClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `cashcontrol.Hooks(f(g(h())))`.
func (c *CashControlClient) Use(hooks ...Hook) {
	c.hooks.CashControl = append(c.hooks.CashControl, hooks...)
}

// Create returns a builder for creating a CashControl entity.
func (c *CashControlClient) Create() *CashControlCreate {
	mutation := newCashControlMutation(c.config, OpCreate)
	return &CashControlCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of CashControl entities.
func (c *CashControlClient) CreateBulk(builders ...*CashControlCreate) *CashControlCreateBulk {
	return &CashControlCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CashControl.
func (c *CashControlClient) Update() *CashControlUpdate {
	mutation := newCashControlMutation(c.config, OpUpdate)
	return &CashControlUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CashControlClient) UpdateOne(cc *CashControl) *CashControlUpdateOne {
	mutation := newCashControlMutation(c.config, OpUpdateOne, withCashControl(cc))
	return &CashControlUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CashControlClient) UpdateOneID(id uint32) *CashControlUpdateOne {
	mutation := newCashControlMutation(c.config, OpUpdateOne, withCashControlID(id))
	return &CashControlUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CashControl.
func (c *CashControlClient) Delete() *CashControlDelete {
	mutation := newCashControlMutation(c.config, OpDelete)
	return &CashControlDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CashControlClient) DeleteOne(cc *CashControl) *CashControlDeleteOne {
	return c.DeleteOneID(cc.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *CashControlClient) DeleteOneID(id uint32) *CashControlDeleteOne {
	builder := c.Delete().Where(cashcontrol.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CashControlDeleteOne{builder}
}

// Query returns a query builder for CashControl.
func (c *CashControlClient) Query() *CashControlQuery {
	return &CashControlQuery{
		config: c.config,
	}
}

// Get returns a CashControl entity by its id.
func (c *CashControlClient) Get(ctx context.Context, id uint32) (*CashControl, error) {
	return c.Query().Where(cashcontrol.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CashControlClient) GetX(ctx context.Context, id uint32) *CashControl {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *CashControlClient) Hooks() []Hook {
	hooks := c.hooks.CashControl
	return append(hooks[:len(hooks):len(hooks)], cashcontrol.Hooks[:]...)
}

// CoinAllocatedClient is a client for the CoinAllocated schema.
type CoinAllocatedClient struct {
	config
}

// NewCoinAllocatedClient returns a client for the CoinAllocated from the given config.
func NewCoinAllocatedClient(c config) *CoinAllocatedClient {
	return &CoinAllocatedClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `coinallocated.Hooks(f(g(h())))`.
func (c *CoinAllocatedClient) Use(hooks ...Hook) {
	c.hooks.CoinAllocated = append(c.hooks.CoinAllocated, hooks...)
}

// Create returns a builder for creating a CoinAllocated entity.
func (c *CoinAllocatedClient) Create() *CoinAllocatedCreate {
	mutation := newCoinAllocatedMutation(c.config, OpCreate)
	return &CoinAllocatedCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of CoinAllocated entities.
func (c *CoinAllocatedClient) CreateBulk(builders ...*CoinAllocatedCreate) *CoinAllocatedCreateBulk {
	return &CoinAllocatedCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CoinAllocated.
func (c *CoinAllocatedClient) Update() *CoinAllocatedUpdate {
	mutation := newCoinAllocatedMutation(c.config, OpUpdate)
	return &CoinAllocatedUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CoinAllocatedClient) UpdateOne(ca *CoinAllocated) *CoinAllocatedUpdateOne {
	mutation := newCoinAllocatedMutation(c.config, OpUpdateOne, withCoinAllocated(ca))
	return &CoinAllocatedUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CoinAllocatedClient) UpdateOneID(id uint32) *CoinAllocatedUpdateOne {
	mutation := newCoinAllocatedMutation(c.config, OpUpdateOne, withCoinAllocatedID(id))
	return &CoinAllocatedUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CoinAllocated.
func (c *CoinAllocatedClient) Delete() *CoinAllocatedDelete {
	mutation := newCoinAllocatedMutation(c.config, OpDelete)
	return &CoinAllocatedDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CoinAllocatedClient) DeleteOne(ca *CoinAllocated) *CoinAllocatedDeleteOne {
	return c.DeleteOneID(ca.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *CoinAllocatedClient) DeleteOneID(id uint32) *CoinAllocatedDeleteOne {
	builder := c.Delete().Where(coinallocated.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CoinAllocatedDeleteOne{builder}
}

// Query returns a query builder for CoinAllocated.
func (c *CoinAllocatedClient) Query() *CoinAllocatedQuery {
	return &CoinAllocatedQuery{
		config: c.config,
	}
}

// Get returns a CoinAllocated entity by its id.
func (c *CoinAllocatedClient) Get(ctx context.Context, id uint32) (*CoinAllocated, error) {
	return c.Query().Where(coinallocated.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CoinAllocatedClient) GetX(ctx context.Context, id uint32) *CoinAllocated {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *CoinAllocatedClient) Hooks() []Hook {
	hooks := c.hooks.CoinAllocated
	return append(hooks[:len(hooks):len(hooks)], coinallocated.Hooks[:]...)
}

// CoinConfigClient is a client for the CoinConfig schema.
type CoinConfigClient struct {
	config
}

// NewCoinConfigClient returns a client for the CoinConfig from the given config.
func NewCoinConfigClient(c config) *CoinConfigClient {
	return &CoinConfigClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `coinconfig.Hooks(f(g(h())))`.
func (c *CoinConfigClient) Use(hooks ...Hook) {
	c.hooks.CoinConfig = append(c.hooks.CoinConfig, hooks...)
}

// Create returns a builder for creating a CoinConfig entity.
func (c *CoinConfigClient) Create() *CoinConfigCreate {
	mutation := newCoinConfigMutation(c.config, OpCreate)
	return &CoinConfigCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of CoinConfig entities.
func (c *CoinConfigClient) CreateBulk(builders ...*CoinConfigCreate) *CoinConfigCreateBulk {
	return &CoinConfigCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CoinConfig.
func (c *CoinConfigClient) Update() *CoinConfigUpdate {
	mutation := newCoinConfigMutation(c.config, OpUpdate)
	return &CoinConfigUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CoinConfigClient) UpdateOne(cc *CoinConfig) *CoinConfigUpdateOne {
	mutation := newCoinConfigMutation(c.config, OpUpdateOne, withCoinConfig(cc))
	return &CoinConfigUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CoinConfigClient) UpdateOneID(id uint32) *CoinConfigUpdateOne {
	mutation := newCoinConfigMutation(c.config, OpUpdateOne, withCoinConfigID(id))
	return &CoinConfigUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CoinConfig.
func (c *CoinConfigClient) Delete() *CoinConfigDelete {
	mutation := newCoinConfigMutation(c.config, OpDelete)
	return &CoinConfigDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CoinConfigClient) DeleteOne(cc *CoinConfig) *CoinConfigDeleteOne {
	return c.DeleteOneID(cc.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *CoinConfigClient) DeleteOneID(id uint32) *CoinConfigDeleteOne {
	builder := c.Delete().Where(coinconfig.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CoinConfigDeleteOne{builder}
}

// Query returns a query builder for CoinConfig.
func (c *CoinConfigClient) Query() *CoinConfigQuery {
	return &CoinConfigQuery{
		config: c.config,
	}
}

// Get returns a CoinConfig entity by its id.
func (c *CoinConfigClient) Get(ctx context.Context, id uint32) (*CoinConfig, error) {
	return c.Query().Where(coinconfig.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CoinConfigClient) GetX(ctx context.Context, id uint32) *CoinConfig {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *CoinConfigClient) Hooks() []Hook {
	hooks := c.hooks.CoinConfig
	return append(hooks[:len(hooks):len(hooks)], coinconfig.Hooks[:]...)
}

// CommissionClient is a client for the Commission schema.
type CommissionClient struct {
	config
}

// NewCommissionClient returns a client for the Commission from the given config.
func NewCommissionClient(c config) *CommissionClient {
	return &CommissionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `commission.Hooks(f(g(h())))`.
func (c *CommissionClient) Use(hooks ...Hook) {
	c.hooks.Commission = append(c.hooks.Commission, hooks...)
}

// Create returns a builder for creating a Commission entity.
func (c *CommissionClient) Create() *CommissionCreate {
	mutation := newCommissionMutation(c.config, OpCreate)
	return &CommissionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Commission entities.
func (c *CommissionClient) CreateBulk(builders ...*CommissionCreate) *CommissionCreateBulk {
	return &CommissionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Commission.
func (c *CommissionClient) Update() *CommissionUpdate {
	mutation := newCommissionMutation(c.config, OpUpdate)
	return &CommissionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CommissionClient) UpdateOne(co *Commission) *CommissionUpdateOne {
	mutation := newCommissionMutation(c.config, OpUpdateOne, withCommission(co))
	return &CommissionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CommissionClient) UpdateOneID(id uint32) *CommissionUpdateOne {
	mutation := newCommissionMutation(c.config, OpUpdateOne, withCommissionID(id))
	return &CommissionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Commission.
func (c *CommissionClient) Delete() *CommissionDelete {
	mutation := newCommissionMutation(c.config, OpDelete)
	return &CommissionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CommissionClient) DeleteOne(co *Commission) *CommissionDeleteOne {
	return c.DeleteOneID(co.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *CommissionClient) DeleteOneID(id uint32) *CommissionDeleteOne {
	builder := c.Delete().Where(commission.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CommissionDeleteOne{builder}
}

// Query returns a query builder for Commission.
func (c *CommissionClient) Query() *CommissionQuery {
	return &CommissionQuery{
		config: c.config,
	}
}

// Get returns a Commission entity by its id.
func (c *CommissionClient) Get(ctx context.Context, id uint32) (*Commission, error) {
	return c.Query().Where(commission.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CommissionClient) GetX(ctx context.Context, id uint32) *Commission {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *CommissionClient) Hooks() []Hook {
	hooks := c.hooks.Commission
	return append(hooks[:len(hooks):len(hooks)], commission.Hooks[:]...)
}

// CouponClient is a client for the Coupon schema.
type CouponClient struct {
	config
}

// NewCouponClient returns a client for the Coupon from the given config.
func NewCouponClient(c config) *CouponClient {
	return &CouponClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `coupon.Hooks(f(g(h())))`.
func (c *CouponClient) Use(hooks ...Hook) {
	c.hooks.Coupon = append(c.hooks.Coupon, hooks...)
}

// Create returns a builder for creating a Coupon entity.
func (c *CouponClient) Create() *CouponCreate {
	mutation := newCouponMutation(c.config, OpCreate)
	return &CouponCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Coupon entities.
func (c *CouponClient) CreateBulk(builders ...*CouponCreate) *CouponCreateBulk {
	return &CouponCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Coupon.
func (c *CouponClient) Update() *CouponUpdate {
	mutation := newCouponMutation(c.config, OpUpdate)
	return &CouponUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CouponClient) UpdateOne(co *Coupon) *CouponUpdateOne {
	mutation := newCouponMutation(c.config, OpUpdateOne, withCoupon(co))
	return &CouponUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CouponClient) UpdateOneID(id uint32) *CouponUpdateOne {
	mutation := newCouponMutation(c.config, OpUpdateOne, withCouponID(id))
	return &CouponUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Coupon.
func (c *CouponClient) Delete() *CouponDelete {
	mutation := newCouponMutation(c.config, OpDelete)
	return &CouponDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CouponClient) DeleteOne(co *Coupon) *CouponDeleteOne {
	return c.DeleteOneID(co.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *CouponClient) DeleteOneID(id uint32) *CouponDeleteOne {
	builder := c.Delete().Where(coupon.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CouponDeleteOne{builder}
}

// Query returns a query builder for Coupon.
func (c *CouponClient) Query() *CouponQuery {
	return &CouponQuery{
		config: c.config,
	}
}

// Get returns a Coupon entity by its id.
func (c *CouponClient) Get(ctx context.Context, id uint32) (*Coupon, error) {
	return c.Query().Where(coupon.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CouponClient) GetX(ctx context.Context, id uint32) *Coupon {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *CouponClient) Hooks() []Hook {
	hooks := c.hooks.Coupon
	return append(hooks[:len(hooks):len(hooks)], coupon.Hooks[:]...)
}

// CouponAllocatedClient is a client for the CouponAllocated schema.
type CouponAllocatedClient struct {
	config
}

// NewCouponAllocatedClient returns a client for the CouponAllocated from the given config.
func NewCouponAllocatedClient(c config) *CouponAllocatedClient {
	return &CouponAllocatedClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `couponallocated.Hooks(f(g(h())))`.
func (c *CouponAllocatedClient) Use(hooks ...Hook) {
	c.hooks.CouponAllocated = append(c.hooks.CouponAllocated, hooks...)
}

// Create returns a builder for creating a CouponAllocated entity.
func (c *CouponAllocatedClient) Create() *CouponAllocatedCreate {
	mutation := newCouponAllocatedMutation(c.config, OpCreate)
	return &CouponAllocatedCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of CouponAllocated entities.
func (c *CouponAllocatedClient) CreateBulk(builders ...*CouponAllocatedCreate) *CouponAllocatedCreateBulk {
	return &CouponAllocatedCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CouponAllocated.
func (c *CouponAllocatedClient) Update() *CouponAllocatedUpdate {
	mutation := newCouponAllocatedMutation(c.config, OpUpdate)
	return &CouponAllocatedUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CouponAllocatedClient) UpdateOne(ca *CouponAllocated) *CouponAllocatedUpdateOne {
	mutation := newCouponAllocatedMutation(c.config, OpUpdateOne, withCouponAllocated(ca))
	return &CouponAllocatedUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CouponAllocatedClient) UpdateOneID(id uint32) *CouponAllocatedUpdateOne {
	mutation := newCouponAllocatedMutation(c.config, OpUpdateOne, withCouponAllocatedID(id))
	return &CouponAllocatedUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CouponAllocated.
func (c *CouponAllocatedClient) Delete() *CouponAllocatedDelete {
	mutation := newCouponAllocatedMutation(c.config, OpDelete)
	return &CouponAllocatedDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CouponAllocatedClient) DeleteOne(ca *CouponAllocated) *CouponAllocatedDeleteOne {
	return c.DeleteOneID(ca.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *CouponAllocatedClient) DeleteOneID(id uint32) *CouponAllocatedDeleteOne {
	builder := c.Delete().Where(couponallocated.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CouponAllocatedDeleteOne{builder}
}

// Query returns a query builder for CouponAllocated.
func (c *CouponAllocatedClient) Query() *CouponAllocatedQuery {
	return &CouponAllocatedQuery{
		config: c.config,
	}
}

// Get returns a CouponAllocated entity by its id.
func (c *CouponAllocatedClient) Get(ctx context.Context, id uint32) (*CouponAllocated, error) {
	return c.Query().Where(couponallocated.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CouponAllocatedClient) GetX(ctx context.Context, id uint32) *CouponAllocated {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *CouponAllocatedClient) Hooks() []Hook {
	hooks := c.hooks.CouponAllocated
	return append(hooks[:len(hooks):len(hooks)], couponallocated.Hooks[:]...)
}

// CouponScopeClient is a client for the CouponScope schema.
type CouponScopeClient struct {
	config
}

// NewCouponScopeClient returns a client for the CouponScope from the given config.
func NewCouponScopeClient(c config) *CouponScopeClient {
	return &CouponScopeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `couponscope.Hooks(f(g(h())))`.
func (c *CouponScopeClient) Use(hooks ...Hook) {
	c.hooks.CouponScope = append(c.hooks.CouponScope, hooks...)
}

// Create returns a builder for creating a CouponScope entity.
func (c *CouponScopeClient) Create() *CouponScopeCreate {
	mutation := newCouponScopeMutation(c.config, OpCreate)
	return &CouponScopeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of CouponScope entities.
func (c *CouponScopeClient) CreateBulk(builders ...*CouponScopeCreate) *CouponScopeCreateBulk {
	return &CouponScopeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CouponScope.
func (c *CouponScopeClient) Update() *CouponScopeUpdate {
	mutation := newCouponScopeMutation(c.config, OpUpdate)
	return &CouponScopeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CouponScopeClient) UpdateOne(cs *CouponScope) *CouponScopeUpdateOne {
	mutation := newCouponScopeMutation(c.config, OpUpdateOne, withCouponScope(cs))
	return &CouponScopeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CouponScopeClient) UpdateOneID(id uint32) *CouponScopeUpdateOne {
	mutation := newCouponScopeMutation(c.config, OpUpdateOne, withCouponScopeID(id))
	return &CouponScopeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CouponScope.
func (c *CouponScopeClient) Delete() *CouponScopeDelete {
	mutation := newCouponScopeMutation(c.config, OpDelete)
	return &CouponScopeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CouponScopeClient) DeleteOne(cs *CouponScope) *CouponScopeDeleteOne {
	return c.DeleteOneID(cs.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *CouponScopeClient) DeleteOneID(id uint32) *CouponScopeDeleteOne {
	builder := c.Delete().Where(couponscope.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CouponScopeDeleteOne{builder}
}

// Query returns a query builder for CouponScope.
func (c *CouponScopeClient) Query() *CouponScopeQuery {
	return &CouponScopeQuery{
		config: c.config,
	}
}

// Get returns a CouponScope entity by its id.
func (c *CouponScopeClient) Get(ctx context.Context, id uint32) (*CouponScope, error) {
	return c.Query().Where(couponscope.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CouponScopeClient) GetX(ctx context.Context, id uint32) *CouponScope {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *CouponScopeClient) Hooks() []Hook {
	hooks := c.hooks.CouponScope
	return append(hooks[:len(hooks):len(hooks)], couponscope.Hooks[:]...)
}

// CreditAllocatedClient is a client for the CreditAllocated schema.
type CreditAllocatedClient struct {
	config
}

// NewCreditAllocatedClient returns a client for the CreditAllocated from the given config.
func NewCreditAllocatedClient(c config) *CreditAllocatedClient {
	return &CreditAllocatedClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `creditallocated.Hooks(f(g(h())))`.
func (c *CreditAllocatedClient) Use(hooks ...Hook) {
	c.hooks.CreditAllocated = append(c.hooks.CreditAllocated, hooks...)
}

// Create returns a builder for creating a CreditAllocated entity.
func (c *CreditAllocatedClient) Create() *CreditAllocatedCreate {
	mutation := newCreditAllocatedMutation(c.config, OpCreate)
	return &CreditAllocatedCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of CreditAllocated entities.
func (c *CreditAllocatedClient) CreateBulk(builders ...*CreditAllocatedCreate) *CreditAllocatedCreateBulk {
	return &CreditAllocatedCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CreditAllocated.
func (c *CreditAllocatedClient) Update() *CreditAllocatedUpdate {
	mutation := newCreditAllocatedMutation(c.config, OpUpdate)
	return &CreditAllocatedUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CreditAllocatedClient) UpdateOne(ca *CreditAllocated) *CreditAllocatedUpdateOne {
	mutation := newCreditAllocatedMutation(c.config, OpUpdateOne, withCreditAllocated(ca))
	return &CreditAllocatedUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CreditAllocatedClient) UpdateOneID(id uint32) *CreditAllocatedUpdateOne {
	mutation := newCreditAllocatedMutation(c.config, OpUpdateOne, withCreditAllocatedID(id))
	return &CreditAllocatedUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CreditAllocated.
func (c *CreditAllocatedClient) Delete() *CreditAllocatedDelete {
	mutation := newCreditAllocatedMutation(c.config, OpDelete)
	return &CreditAllocatedDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CreditAllocatedClient) DeleteOne(ca *CreditAllocated) *CreditAllocatedDeleteOne {
	return c.DeleteOneID(ca.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *CreditAllocatedClient) DeleteOneID(id uint32) *CreditAllocatedDeleteOne {
	builder := c.Delete().Where(creditallocated.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CreditAllocatedDeleteOne{builder}
}

// Query returns a query builder for CreditAllocated.
func (c *CreditAllocatedClient) Query() *CreditAllocatedQuery {
	return &CreditAllocatedQuery{
		config: c.config,
	}
}

// Get returns a CreditAllocated entity by its id.
func (c *CreditAllocatedClient) Get(ctx context.Context, id uint32) (*CreditAllocated, error) {
	return c.Query().Where(creditallocated.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CreditAllocatedClient) GetX(ctx context.Context, id uint32) *CreditAllocated {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *CreditAllocatedClient) Hooks() []Hook {
	hooks := c.hooks.CreditAllocated
	return append(hooks[:len(hooks):len(hooks)], creditallocated.Hooks[:]...)
}

// EventClient is a client for the Event schema.
type EventClient struct {
	config
}

// NewEventClient returns a client for the Event from the given config.
func NewEventClient(c config) *EventClient {
	return &EventClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `event.Hooks(f(g(h())))`.
func (c *EventClient) Use(hooks ...Hook) {
	c.hooks.Event = append(c.hooks.Event, hooks...)
}

// Create returns a builder for creating a Event entity.
func (c *EventClient) Create() *EventCreate {
	mutation := newEventMutation(c.config, OpCreate)
	return &EventCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Event entities.
func (c *EventClient) CreateBulk(builders ...*EventCreate) *EventCreateBulk {
	return &EventCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Event.
func (c *EventClient) Update() *EventUpdate {
	mutation := newEventMutation(c.config, OpUpdate)
	return &EventUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *EventClient) UpdateOne(e *Event) *EventUpdateOne {
	mutation := newEventMutation(c.config, OpUpdateOne, withEvent(e))
	return &EventUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *EventClient) UpdateOneID(id uint32) *EventUpdateOne {
	mutation := newEventMutation(c.config, OpUpdateOne, withEventID(id))
	return &EventUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Event.
func (c *EventClient) Delete() *EventDelete {
	mutation := newEventMutation(c.config, OpDelete)
	return &EventDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *EventClient) DeleteOne(e *Event) *EventDeleteOne {
	return c.DeleteOneID(e.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *EventClient) DeleteOneID(id uint32) *EventDeleteOne {
	builder := c.Delete().Where(event.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &EventDeleteOne{builder}
}

// Query returns a query builder for Event.
func (c *EventClient) Query() *EventQuery {
	return &EventQuery{
		config: c.config,
	}
}

// Get returns a Event entity by its id.
func (c *EventClient) Get(ctx context.Context, id uint32) (*Event, error) {
	return c.Query().Where(event.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *EventClient) GetX(ctx context.Context, id uint32) *Event {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *EventClient) Hooks() []Hook {
	hooks := c.hooks.Event
	return append(hooks[:len(hooks):len(hooks)], event.Hooks[:]...)
}

// EventCoinClient is a client for the EventCoin schema.
type EventCoinClient struct {
	config
}

// NewEventCoinClient returns a client for the EventCoin from the given config.
func NewEventCoinClient(c config) *EventCoinClient {
	return &EventCoinClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `eventcoin.Hooks(f(g(h())))`.
func (c *EventCoinClient) Use(hooks ...Hook) {
	c.hooks.EventCoin = append(c.hooks.EventCoin, hooks...)
}

// Create returns a builder for creating a EventCoin entity.
func (c *EventCoinClient) Create() *EventCoinCreate {
	mutation := newEventCoinMutation(c.config, OpCreate)
	return &EventCoinCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of EventCoin entities.
func (c *EventCoinClient) CreateBulk(builders ...*EventCoinCreate) *EventCoinCreateBulk {
	return &EventCoinCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for EventCoin.
func (c *EventCoinClient) Update() *EventCoinUpdate {
	mutation := newEventCoinMutation(c.config, OpUpdate)
	return &EventCoinUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *EventCoinClient) UpdateOne(ec *EventCoin) *EventCoinUpdateOne {
	mutation := newEventCoinMutation(c.config, OpUpdateOne, withEventCoin(ec))
	return &EventCoinUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *EventCoinClient) UpdateOneID(id uint32) *EventCoinUpdateOne {
	mutation := newEventCoinMutation(c.config, OpUpdateOne, withEventCoinID(id))
	return &EventCoinUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for EventCoin.
func (c *EventCoinClient) Delete() *EventCoinDelete {
	mutation := newEventCoinMutation(c.config, OpDelete)
	return &EventCoinDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *EventCoinClient) DeleteOne(ec *EventCoin) *EventCoinDeleteOne {
	return c.DeleteOneID(ec.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *EventCoinClient) DeleteOneID(id uint32) *EventCoinDeleteOne {
	builder := c.Delete().Where(eventcoin.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &EventCoinDeleteOne{builder}
}

// Query returns a query builder for EventCoin.
func (c *EventCoinClient) Query() *EventCoinQuery {
	return &EventCoinQuery{
		config: c.config,
	}
}

// Get returns a EventCoin entity by its id.
func (c *EventCoinClient) Get(ctx context.Context, id uint32) (*EventCoin, error) {
	return c.Query().Where(eventcoin.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *EventCoinClient) GetX(ctx context.Context, id uint32) *EventCoin {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *EventCoinClient) Hooks() []Hook {
	hooks := c.hooks.EventCoin
	return append(hooks[:len(hooks):len(hooks)], eventcoin.Hooks[:]...)
}

// EventCouponClient is a client for the EventCoupon schema.
type EventCouponClient struct {
	config
}

// NewEventCouponClient returns a client for the EventCoupon from the given config.
func NewEventCouponClient(c config) *EventCouponClient {
	return &EventCouponClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `eventcoupon.Hooks(f(g(h())))`.
func (c *EventCouponClient) Use(hooks ...Hook) {
	c.hooks.EventCoupon = append(c.hooks.EventCoupon, hooks...)
}

// Create returns a builder for creating a EventCoupon entity.
func (c *EventCouponClient) Create() *EventCouponCreate {
	mutation := newEventCouponMutation(c.config, OpCreate)
	return &EventCouponCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of EventCoupon entities.
func (c *EventCouponClient) CreateBulk(builders ...*EventCouponCreate) *EventCouponCreateBulk {
	return &EventCouponCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for EventCoupon.
func (c *EventCouponClient) Update() *EventCouponUpdate {
	mutation := newEventCouponMutation(c.config, OpUpdate)
	return &EventCouponUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *EventCouponClient) UpdateOne(ec *EventCoupon) *EventCouponUpdateOne {
	mutation := newEventCouponMutation(c.config, OpUpdateOne, withEventCoupon(ec))
	return &EventCouponUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *EventCouponClient) UpdateOneID(id uint32) *EventCouponUpdateOne {
	mutation := newEventCouponMutation(c.config, OpUpdateOne, withEventCouponID(id))
	return &EventCouponUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for EventCoupon.
func (c *EventCouponClient) Delete() *EventCouponDelete {
	mutation := newEventCouponMutation(c.config, OpDelete)
	return &EventCouponDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *EventCouponClient) DeleteOne(ec *EventCoupon) *EventCouponDeleteOne {
	return c.DeleteOneID(ec.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *EventCouponClient) DeleteOneID(id uint32) *EventCouponDeleteOne {
	builder := c.Delete().Where(eventcoupon.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &EventCouponDeleteOne{builder}
}

// Query returns a query builder for EventCoupon.
func (c *EventCouponClient) Query() *EventCouponQuery {
	return &EventCouponQuery{
		config: c.config,
	}
}

// Get returns a EventCoupon entity by its id.
func (c *EventCouponClient) Get(ctx context.Context, id uint32) (*EventCoupon, error) {
	return c.Query().Where(eventcoupon.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *EventCouponClient) GetX(ctx context.Context, id uint32) *EventCoupon {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *EventCouponClient) Hooks() []Hook {
	hooks := c.hooks.EventCoupon
	return append(hooks[:len(hooks):len(hooks)], eventcoupon.Hooks[:]...)
}

// GoodAchievementClient is a client for the GoodAchievement schema.
type GoodAchievementClient struct {
	config
}

// NewGoodAchievementClient returns a client for the GoodAchievement from the given config.
func NewGoodAchievementClient(c config) *GoodAchievementClient {
	return &GoodAchievementClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `goodachievement.Hooks(f(g(h())))`.
func (c *GoodAchievementClient) Use(hooks ...Hook) {
	c.hooks.GoodAchievement = append(c.hooks.GoodAchievement, hooks...)
}

// Create returns a builder for creating a GoodAchievement entity.
func (c *GoodAchievementClient) Create() *GoodAchievementCreate {
	mutation := newGoodAchievementMutation(c.config, OpCreate)
	return &GoodAchievementCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of GoodAchievement entities.
func (c *GoodAchievementClient) CreateBulk(builders ...*GoodAchievementCreate) *GoodAchievementCreateBulk {
	return &GoodAchievementCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for GoodAchievement.
func (c *GoodAchievementClient) Update() *GoodAchievementUpdate {
	mutation := newGoodAchievementMutation(c.config, OpUpdate)
	return &GoodAchievementUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *GoodAchievementClient) UpdateOne(ga *GoodAchievement) *GoodAchievementUpdateOne {
	mutation := newGoodAchievementMutation(c.config, OpUpdateOne, withGoodAchievement(ga))
	return &GoodAchievementUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *GoodAchievementClient) UpdateOneID(id uint32) *GoodAchievementUpdateOne {
	mutation := newGoodAchievementMutation(c.config, OpUpdateOne, withGoodAchievementID(id))
	return &GoodAchievementUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for GoodAchievement.
func (c *GoodAchievementClient) Delete() *GoodAchievementDelete {
	mutation := newGoodAchievementMutation(c.config, OpDelete)
	return &GoodAchievementDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *GoodAchievementClient) DeleteOne(ga *GoodAchievement) *GoodAchievementDeleteOne {
	return c.DeleteOneID(ga.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *GoodAchievementClient) DeleteOneID(id uint32) *GoodAchievementDeleteOne {
	builder := c.Delete().Where(goodachievement.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &GoodAchievementDeleteOne{builder}
}

// Query returns a query builder for GoodAchievement.
func (c *GoodAchievementClient) Query() *GoodAchievementQuery {
	return &GoodAchievementQuery{
		config: c.config,
	}
}

// Get returns a GoodAchievement entity by its id.
func (c *GoodAchievementClient) Get(ctx context.Context, id uint32) (*GoodAchievement, error) {
	return c.Query().Where(goodachievement.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *GoodAchievementClient) GetX(ctx context.Context, id uint32) *GoodAchievement {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *GoodAchievementClient) Hooks() []Hook {
	hooks := c.hooks.GoodAchievement
	return append(hooks[:len(hooks):len(hooks)], goodachievement.Hooks[:]...)
}

// GoodCoinAchievementClient is a client for the GoodCoinAchievement schema.
type GoodCoinAchievementClient struct {
	config
}

// NewGoodCoinAchievementClient returns a client for the GoodCoinAchievement from the given config.
func NewGoodCoinAchievementClient(c config) *GoodCoinAchievementClient {
	return &GoodCoinAchievementClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `goodcoinachievement.Hooks(f(g(h())))`.
func (c *GoodCoinAchievementClient) Use(hooks ...Hook) {
	c.hooks.GoodCoinAchievement = append(c.hooks.GoodCoinAchievement, hooks...)
}

// Create returns a builder for creating a GoodCoinAchievement entity.
func (c *GoodCoinAchievementClient) Create() *GoodCoinAchievementCreate {
	mutation := newGoodCoinAchievementMutation(c.config, OpCreate)
	return &GoodCoinAchievementCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of GoodCoinAchievement entities.
func (c *GoodCoinAchievementClient) CreateBulk(builders ...*GoodCoinAchievementCreate) *GoodCoinAchievementCreateBulk {
	return &GoodCoinAchievementCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for GoodCoinAchievement.
func (c *GoodCoinAchievementClient) Update() *GoodCoinAchievementUpdate {
	mutation := newGoodCoinAchievementMutation(c.config, OpUpdate)
	return &GoodCoinAchievementUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *GoodCoinAchievementClient) UpdateOne(gca *GoodCoinAchievement) *GoodCoinAchievementUpdateOne {
	mutation := newGoodCoinAchievementMutation(c.config, OpUpdateOne, withGoodCoinAchievement(gca))
	return &GoodCoinAchievementUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *GoodCoinAchievementClient) UpdateOneID(id uint32) *GoodCoinAchievementUpdateOne {
	mutation := newGoodCoinAchievementMutation(c.config, OpUpdateOne, withGoodCoinAchievementID(id))
	return &GoodCoinAchievementUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for GoodCoinAchievement.
func (c *GoodCoinAchievementClient) Delete() *GoodCoinAchievementDelete {
	mutation := newGoodCoinAchievementMutation(c.config, OpDelete)
	return &GoodCoinAchievementDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *GoodCoinAchievementClient) DeleteOne(gca *GoodCoinAchievement) *GoodCoinAchievementDeleteOne {
	return c.DeleteOneID(gca.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *GoodCoinAchievementClient) DeleteOneID(id uint32) *GoodCoinAchievementDeleteOne {
	builder := c.Delete().Where(goodcoinachievement.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &GoodCoinAchievementDeleteOne{builder}
}

// Query returns a query builder for GoodCoinAchievement.
func (c *GoodCoinAchievementClient) Query() *GoodCoinAchievementQuery {
	return &GoodCoinAchievementQuery{
		config: c.config,
	}
}

// Get returns a GoodCoinAchievement entity by its id.
func (c *GoodCoinAchievementClient) Get(ctx context.Context, id uint32) (*GoodCoinAchievement, error) {
	return c.Query().Where(goodcoinachievement.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *GoodCoinAchievementClient) GetX(ctx context.Context, id uint32) *GoodCoinAchievement {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *GoodCoinAchievementClient) Hooks() []Hook {
	hooks := c.hooks.GoodCoinAchievement
	return append(hooks[:len(hooks):len(hooks)], goodcoinachievement.Hooks[:]...)
}

// InvitationCodeClient is a client for the InvitationCode schema.
type InvitationCodeClient struct {
	config
}

// NewInvitationCodeClient returns a client for the InvitationCode from the given config.
func NewInvitationCodeClient(c config) *InvitationCodeClient {
	return &InvitationCodeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `invitationcode.Hooks(f(g(h())))`.
func (c *InvitationCodeClient) Use(hooks ...Hook) {
	c.hooks.InvitationCode = append(c.hooks.InvitationCode, hooks...)
}

// Create returns a builder for creating a InvitationCode entity.
func (c *InvitationCodeClient) Create() *InvitationCodeCreate {
	mutation := newInvitationCodeMutation(c.config, OpCreate)
	return &InvitationCodeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of InvitationCode entities.
func (c *InvitationCodeClient) CreateBulk(builders ...*InvitationCodeCreate) *InvitationCodeCreateBulk {
	return &InvitationCodeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for InvitationCode.
func (c *InvitationCodeClient) Update() *InvitationCodeUpdate {
	mutation := newInvitationCodeMutation(c.config, OpUpdate)
	return &InvitationCodeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *InvitationCodeClient) UpdateOne(ic *InvitationCode) *InvitationCodeUpdateOne {
	mutation := newInvitationCodeMutation(c.config, OpUpdateOne, withInvitationCode(ic))
	return &InvitationCodeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *InvitationCodeClient) UpdateOneID(id uint32) *InvitationCodeUpdateOne {
	mutation := newInvitationCodeMutation(c.config, OpUpdateOne, withInvitationCodeID(id))
	return &InvitationCodeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for InvitationCode.
func (c *InvitationCodeClient) Delete() *InvitationCodeDelete {
	mutation := newInvitationCodeMutation(c.config, OpDelete)
	return &InvitationCodeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *InvitationCodeClient) DeleteOne(ic *InvitationCode) *InvitationCodeDeleteOne {
	return c.DeleteOneID(ic.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *InvitationCodeClient) DeleteOneID(id uint32) *InvitationCodeDeleteOne {
	builder := c.Delete().Where(invitationcode.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &InvitationCodeDeleteOne{builder}
}

// Query returns a query builder for InvitationCode.
func (c *InvitationCodeClient) Query() *InvitationCodeQuery {
	return &InvitationCodeQuery{
		config: c.config,
	}
}

// Get returns a InvitationCode entity by its id.
func (c *InvitationCodeClient) Get(ctx context.Context, id uint32) (*InvitationCode, error) {
	return c.Query().Where(invitationcode.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *InvitationCodeClient) GetX(ctx context.Context, id uint32) *InvitationCode {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *InvitationCodeClient) Hooks() []Hook {
	hooks := c.hooks.InvitationCode
	return append(hooks[:len(hooks):len(hooks)], invitationcode.Hooks[:]...)
}

// OrderPaymentStatementClient is a client for the OrderPaymentStatement schema.
type OrderPaymentStatementClient struct {
	config
}

// NewOrderPaymentStatementClient returns a client for the OrderPaymentStatement from the given config.
func NewOrderPaymentStatementClient(c config) *OrderPaymentStatementClient {
	return &OrderPaymentStatementClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `orderpaymentstatement.Hooks(f(g(h())))`.
func (c *OrderPaymentStatementClient) Use(hooks ...Hook) {
	c.hooks.OrderPaymentStatement = append(c.hooks.OrderPaymentStatement, hooks...)
}

// Create returns a builder for creating a OrderPaymentStatement entity.
func (c *OrderPaymentStatementClient) Create() *OrderPaymentStatementCreate {
	mutation := newOrderPaymentStatementMutation(c.config, OpCreate)
	return &OrderPaymentStatementCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of OrderPaymentStatement entities.
func (c *OrderPaymentStatementClient) CreateBulk(builders ...*OrderPaymentStatementCreate) *OrderPaymentStatementCreateBulk {
	return &OrderPaymentStatementCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for OrderPaymentStatement.
func (c *OrderPaymentStatementClient) Update() *OrderPaymentStatementUpdate {
	mutation := newOrderPaymentStatementMutation(c.config, OpUpdate)
	return &OrderPaymentStatementUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *OrderPaymentStatementClient) UpdateOne(ops *OrderPaymentStatement) *OrderPaymentStatementUpdateOne {
	mutation := newOrderPaymentStatementMutation(c.config, OpUpdateOne, withOrderPaymentStatement(ops))
	return &OrderPaymentStatementUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *OrderPaymentStatementClient) UpdateOneID(id uint32) *OrderPaymentStatementUpdateOne {
	mutation := newOrderPaymentStatementMutation(c.config, OpUpdateOne, withOrderPaymentStatementID(id))
	return &OrderPaymentStatementUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for OrderPaymentStatement.
func (c *OrderPaymentStatementClient) Delete() *OrderPaymentStatementDelete {
	mutation := newOrderPaymentStatementMutation(c.config, OpDelete)
	return &OrderPaymentStatementDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *OrderPaymentStatementClient) DeleteOne(ops *OrderPaymentStatement) *OrderPaymentStatementDeleteOne {
	return c.DeleteOneID(ops.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *OrderPaymentStatementClient) DeleteOneID(id uint32) *OrderPaymentStatementDeleteOne {
	builder := c.Delete().Where(orderpaymentstatement.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &OrderPaymentStatementDeleteOne{builder}
}

// Query returns a query builder for OrderPaymentStatement.
func (c *OrderPaymentStatementClient) Query() *OrderPaymentStatementQuery {
	return &OrderPaymentStatementQuery{
		config: c.config,
	}
}

// Get returns a OrderPaymentStatement entity by its id.
func (c *OrderPaymentStatementClient) Get(ctx context.Context, id uint32) (*OrderPaymentStatement, error) {
	return c.Query().Where(orderpaymentstatement.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *OrderPaymentStatementClient) GetX(ctx context.Context, id uint32) *OrderPaymentStatement {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *OrderPaymentStatementClient) Hooks() []Hook {
	hooks := c.hooks.OrderPaymentStatement
	return append(hooks[:len(hooks):len(hooks)], orderpaymentstatement.Hooks[:]...)
}

// OrderStatementClient is a client for the OrderStatement schema.
type OrderStatementClient struct {
	config
}

// NewOrderStatementClient returns a client for the OrderStatement from the given config.
func NewOrderStatementClient(c config) *OrderStatementClient {
	return &OrderStatementClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `orderstatement.Hooks(f(g(h())))`.
func (c *OrderStatementClient) Use(hooks ...Hook) {
	c.hooks.OrderStatement = append(c.hooks.OrderStatement, hooks...)
}

// Create returns a builder for creating a OrderStatement entity.
func (c *OrderStatementClient) Create() *OrderStatementCreate {
	mutation := newOrderStatementMutation(c.config, OpCreate)
	return &OrderStatementCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of OrderStatement entities.
func (c *OrderStatementClient) CreateBulk(builders ...*OrderStatementCreate) *OrderStatementCreateBulk {
	return &OrderStatementCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for OrderStatement.
func (c *OrderStatementClient) Update() *OrderStatementUpdate {
	mutation := newOrderStatementMutation(c.config, OpUpdate)
	return &OrderStatementUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *OrderStatementClient) UpdateOne(os *OrderStatement) *OrderStatementUpdateOne {
	mutation := newOrderStatementMutation(c.config, OpUpdateOne, withOrderStatement(os))
	return &OrderStatementUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *OrderStatementClient) UpdateOneID(id uint32) *OrderStatementUpdateOne {
	mutation := newOrderStatementMutation(c.config, OpUpdateOne, withOrderStatementID(id))
	return &OrderStatementUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for OrderStatement.
func (c *OrderStatementClient) Delete() *OrderStatementDelete {
	mutation := newOrderStatementMutation(c.config, OpDelete)
	return &OrderStatementDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *OrderStatementClient) DeleteOne(os *OrderStatement) *OrderStatementDeleteOne {
	return c.DeleteOneID(os.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *OrderStatementClient) DeleteOneID(id uint32) *OrderStatementDeleteOne {
	builder := c.Delete().Where(orderstatement.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &OrderStatementDeleteOne{builder}
}

// Query returns a query builder for OrderStatement.
func (c *OrderStatementClient) Query() *OrderStatementQuery {
	return &OrderStatementQuery{
		config: c.config,
	}
}

// Get returns a OrderStatement entity by its id.
func (c *OrderStatementClient) Get(ctx context.Context, id uint32) (*OrderStatement, error) {
	return c.Query().Where(orderstatement.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *OrderStatementClient) GetX(ctx context.Context, id uint32) *OrderStatement {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *OrderStatementClient) Hooks() []Hook {
	hooks := c.hooks.OrderStatement
	return append(hooks[:len(hooks):len(hooks)], orderstatement.Hooks[:]...)
}

// PubsubMessageClient is a client for the PubsubMessage schema.
type PubsubMessageClient struct {
	config
}

// NewPubsubMessageClient returns a client for the PubsubMessage from the given config.
func NewPubsubMessageClient(c config) *PubsubMessageClient {
	return &PubsubMessageClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `pubsubmessage.Hooks(f(g(h())))`.
func (c *PubsubMessageClient) Use(hooks ...Hook) {
	c.hooks.PubsubMessage = append(c.hooks.PubsubMessage, hooks...)
}

// Create returns a builder for creating a PubsubMessage entity.
func (c *PubsubMessageClient) Create() *PubsubMessageCreate {
	mutation := newPubsubMessageMutation(c.config, OpCreate)
	return &PubsubMessageCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of PubsubMessage entities.
func (c *PubsubMessageClient) CreateBulk(builders ...*PubsubMessageCreate) *PubsubMessageCreateBulk {
	return &PubsubMessageCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for PubsubMessage.
func (c *PubsubMessageClient) Update() *PubsubMessageUpdate {
	mutation := newPubsubMessageMutation(c.config, OpUpdate)
	return &PubsubMessageUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PubsubMessageClient) UpdateOne(pm *PubsubMessage) *PubsubMessageUpdateOne {
	mutation := newPubsubMessageMutation(c.config, OpUpdateOne, withPubsubMessage(pm))
	return &PubsubMessageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PubsubMessageClient) UpdateOneID(id uint32) *PubsubMessageUpdateOne {
	mutation := newPubsubMessageMutation(c.config, OpUpdateOne, withPubsubMessageID(id))
	return &PubsubMessageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for PubsubMessage.
func (c *PubsubMessageClient) Delete() *PubsubMessageDelete {
	mutation := newPubsubMessageMutation(c.config, OpDelete)
	return &PubsubMessageDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PubsubMessageClient) DeleteOne(pm *PubsubMessage) *PubsubMessageDeleteOne {
	return c.DeleteOneID(pm.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *PubsubMessageClient) DeleteOneID(id uint32) *PubsubMessageDeleteOne {
	builder := c.Delete().Where(pubsubmessage.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PubsubMessageDeleteOne{builder}
}

// Query returns a query builder for PubsubMessage.
func (c *PubsubMessageClient) Query() *PubsubMessageQuery {
	return &PubsubMessageQuery{
		config: c.config,
	}
}

// Get returns a PubsubMessage entity by its id.
func (c *PubsubMessageClient) Get(ctx context.Context, id uint32) (*PubsubMessage, error) {
	return c.Query().Where(pubsubmessage.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PubsubMessageClient) GetX(ctx context.Context, id uint32) *PubsubMessage {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *PubsubMessageClient) Hooks() []Hook {
	hooks := c.hooks.PubsubMessage
	return append(hooks[:len(hooks):len(hooks)], pubsubmessage.Hooks[:]...)
}

// RegistrationClient is a client for the Registration schema.
type RegistrationClient struct {
	config
}

// NewRegistrationClient returns a client for the Registration from the given config.
func NewRegistrationClient(c config) *RegistrationClient {
	return &RegistrationClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `registration.Hooks(f(g(h())))`.
func (c *RegistrationClient) Use(hooks ...Hook) {
	c.hooks.Registration = append(c.hooks.Registration, hooks...)
}

// Create returns a builder for creating a Registration entity.
func (c *RegistrationClient) Create() *RegistrationCreate {
	mutation := newRegistrationMutation(c.config, OpCreate)
	return &RegistrationCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Registration entities.
func (c *RegistrationClient) CreateBulk(builders ...*RegistrationCreate) *RegistrationCreateBulk {
	return &RegistrationCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Registration.
func (c *RegistrationClient) Update() *RegistrationUpdate {
	mutation := newRegistrationMutation(c.config, OpUpdate)
	return &RegistrationUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RegistrationClient) UpdateOne(r *Registration) *RegistrationUpdateOne {
	mutation := newRegistrationMutation(c.config, OpUpdateOne, withRegistration(r))
	return &RegistrationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RegistrationClient) UpdateOneID(id uint32) *RegistrationUpdateOne {
	mutation := newRegistrationMutation(c.config, OpUpdateOne, withRegistrationID(id))
	return &RegistrationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Registration.
func (c *RegistrationClient) Delete() *RegistrationDelete {
	mutation := newRegistrationMutation(c.config, OpDelete)
	return &RegistrationDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *RegistrationClient) DeleteOne(r *Registration) *RegistrationDeleteOne {
	return c.DeleteOneID(r.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *RegistrationClient) DeleteOneID(id uint32) *RegistrationDeleteOne {
	builder := c.Delete().Where(registration.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RegistrationDeleteOne{builder}
}

// Query returns a query builder for Registration.
func (c *RegistrationClient) Query() *RegistrationQuery {
	return &RegistrationQuery{
		config: c.config,
	}
}

// Get returns a Registration entity by its id.
func (c *RegistrationClient) Get(ctx context.Context, id uint32) (*Registration, error) {
	return c.Query().Where(registration.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RegistrationClient) GetX(ctx context.Context, id uint32) *Registration {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *RegistrationClient) Hooks() []Hook {
	hooks := c.hooks.Registration
	return append(hooks[:len(hooks):len(hooks)], registration.Hooks[:]...)
}

// StatementClient is a client for the Statement schema.
type StatementClient struct {
	config
}

// NewStatementClient returns a client for the Statement from the given config.
func NewStatementClient(c config) *StatementClient {
	return &StatementClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `statement.Hooks(f(g(h())))`.
func (c *StatementClient) Use(hooks ...Hook) {
	c.hooks.Statement = append(c.hooks.Statement, hooks...)
}

// Create returns a builder for creating a Statement entity.
func (c *StatementClient) Create() *StatementCreate {
	mutation := newStatementMutation(c.config, OpCreate)
	return &StatementCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Statement entities.
func (c *StatementClient) CreateBulk(builders ...*StatementCreate) *StatementCreateBulk {
	return &StatementCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Statement.
func (c *StatementClient) Update() *StatementUpdate {
	mutation := newStatementMutation(c.config, OpUpdate)
	return &StatementUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *StatementClient) UpdateOne(s *Statement) *StatementUpdateOne {
	mutation := newStatementMutation(c.config, OpUpdateOne, withStatement(s))
	return &StatementUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *StatementClient) UpdateOneID(id uint32) *StatementUpdateOne {
	mutation := newStatementMutation(c.config, OpUpdateOne, withStatementID(id))
	return &StatementUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Statement.
func (c *StatementClient) Delete() *StatementDelete {
	mutation := newStatementMutation(c.config, OpDelete)
	return &StatementDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *StatementClient) DeleteOne(s *Statement) *StatementDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *StatementClient) DeleteOneID(id uint32) *StatementDeleteOne {
	builder := c.Delete().Where(statement.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &StatementDeleteOne{builder}
}

// Query returns a query builder for Statement.
func (c *StatementClient) Query() *StatementQuery {
	return &StatementQuery{
		config: c.config,
	}
}

// Get returns a Statement entity by its id.
func (c *StatementClient) Get(ctx context.Context, id uint32) (*Statement, error) {
	return c.Query().Where(statement.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *StatementClient) GetX(ctx context.Context, id uint32) *Statement {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *StatementClient) Hooks() []Hook {
	hooks := c.hooks.Statement
	return append(hooks[:len(hooks):len(hooks)], statement.Hooks[:]...)
}

// TaskConfigClient is a client for the TaskConfig schema.
type TaskConfigClient struct {
	config
}

// NewTaskConfigClient returns a client for the TaskConfig from the given config.
func NewTaskConfigClient(c config) *TaskConfigClient {
	return &TaskConfigClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `taskconfig.Hooks(f(g(h())))`.
func (c *TaskConfigClient) Use(hooks ...Hook) {
	c.hooks.TaskConfig = append(c.hooks.TaskConfig, hooks...)
}

// Create returns a builder for creating a TaskConfig entity.
func (c *TaskConfigClient) Create() *TaskConfigCreate {
	mutation := newTaskConfigMutation(c.config, OpCreate)
	return &TaskConfigCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of TaskConfig entities.
func (c *TaskConfigClient) CreateBulk(builders ...*TaskConfigCreate) *TaskConfigCreateBulk {
	return &TaskConfigCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for TaskConfig.
func (c *TaskConfigClient) Update() *TaskConfigUpdate {
	mutation := newTaskConfigMutation(c.config, OpUpdate)
	return &TaskConfigUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TaskConfigClient) UpdateOne(tc *TaskConfig) *TaskConfigUpdateOne {
	mutation := newTaskConfigMutation(c.config, OpUpdateOne, withTaskConfig(tc))
	return &TaskConfigUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TaskConfigClient) UpdateOneID(id uint32) *TaskConfigUpdateOne {
	mutation := newTaskConfigMutation(c.config, OpUpdateOne, withTaskConfigID(id))
	return &TaskConfigUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for TaskConfig.
func (c *TaskConfigClient) Delete() *TaskConfigDelete {
	mutation := newTaskConfigMutation(c.config, OpDelete)
	return &TaskConfigDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *TaskConfigClient) DeleteOne(tc *TaskConfig) *TaskConfigDeleteOne {
	return c.DeleteOneID(tc.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *TaskConfigClient) DeleteOneID(id uint32) *TaskConfigDeleteOne {
	builder := c.Delete().Where(taskconfig.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TaskConfigDeleteOne{builder}
}

// Query returns a query builder for TaskConfig.
func (c *TaskConfigClient) Query() *TaskConfigQuery {
	return &TaskConfigQuery{
		config: c.config,
	}
}

// Get returns a TaskConfig entity by its id.
func (c *TaskConfigClient) Get(ctx context.Context, id uint32) (*TaskConfig, error) {
	return c.Query().Where(taskconfig.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TaskConfigClient) GetX(ctx context.Context, id uint32) *TaskConfig {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *TaskConfigClient) Hooks() []Hook {
	hooks := c.hooks.TaskConfig
	return append(hooks[:len(hooks):len(hooks)], taskconfig.Hooks[:]...)
}

// TaskUserClient is a client for the TaskUser schema.
type TaskUserClient struct {
	config
}

// NewTaskUserClient returns a client for the TaskUser from the given config.
func NewTaskUserClient(c config) *TaskUserClient {
	return &TaskUserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `taskuser.Hooks(f(g(h())))`.
func (c *TaskUserClient) Use(hooks ...Hook) {
	c.hooks.TaskUser = append(c.hooks.TaskUser, hooks...)
}

// Create returns a builder for creating a TaskUser entity.
func (c *TaskUserClient) Create() *TaskUserCreate {
	mutation := newTaskUserMutation(c.config, OpCreate)
	return &TaskUserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of TaskUser entities.
func (c *TaskUserClient) CreateBulk(builders ...*TaskUserCreate) *TaskUserCreateBulk {
	return &TaskUserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for TaskUser.
func (c *TaskUserClient) Update() *TaskUserUpdate {
	mutation := newTaskUserMutation(c.config, OpUpdate)
	return &TaskUserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TaskUserClient) UpdateOne(tu *TaskUser) *TaskUserUpdateOne {
	mutation := newTaskUserMutation(c.config, OpUpdateOne, withTaskUser(tu))
	return &TaskUserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TaskUserClient) UpdateOneID(id uint32) *TaskUserUpdateOne {
	mutation := newTaskUserMutation(c.config, OpUpdateOne, withTaskUserID(id))
	return &TaskUserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for TaskUser.
func (c *TaskUserClient) Delete() *TaskUserDelete {
	mutation := newTaskUserMutation(c.config, OpDelete)
	return &TaskUserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *TaskUserClient) DeleteOne(tu *TaskUser) *TaskUserDeleteOne {
	return c.DeleteOneID(tu.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *TaskUserClient) DeleteOneID(id uint32) *TaskUserDeleteOne {
	builder := c.Delete().Where(taskuser.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TaskUserDeleteOne{builder}
}

// Query returns a query builder for TaskUser.
func (c *TaskUserClient) Query() *TaskUserQuery {
	return &TaskUserQuery{
		config: c.config,
	}
}

// Get returns a TaskUser entity by its id.
func (c *TaskUserClient) Get(ctx context.Context, id uint32) (*TaskUser, error) {
	return c.Query().Where(taskuser.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TaskUserClient) GetX(ctx context.Context, id uint32) *TaskUser {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *TaskUserClient) Hooks() []Hook {
	hooks := c.hooks.TaskUser
	return append(hooks[:len(hooks):len(hooks)], taskuser.Hooks[:]...)
}

// UserCoinRewardClient is a client for the UserCoinReward schema.
type UserCoinRewardClient struct {
	config
}

// NewUserCoinRewardClient returns a client for the UserCoinReward from the given config.
func NewUserCoinRewardClient(c config) *UserCoinRewardClient {
	return &UserCoinRewardClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `usercoinreward.Hooks(f(g(h())))`.
func (c *UserCoinRewardClient) Use(hooks ...Hook) {
	c.hooks.UserCoinReward = append(c.hooks.UserCoinReward, hooks...)
}

// Create returns a builder for creating a UserCoinReward entity.
func (c *UserCoinRewardClient) Create() *UserCoinRewardCreate {
	mutation := newUserCoinRewardMutation(c.config, OpCreate)
	return &UserCoinRewardCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UserCoinReward entities.
func (c *UserCoinRewardClient) CreateBulk(builders ...*UserCoinRewardCreate) *UserCoinRewardCreateBulk {
	return &UserCoinRewardCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UserCoinReward.
func (c *UserCoinRewardClient) Update() *UserCoinRewardUpdate {
	mutation := newUserCoinRewardMutation(c.config, OpUpdate)
	return &UserCoinRewardUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserCoinRewardClient) UpdateOne(ucr *UserCoinReward) *UserCoinRewardUpdateOne {
	mutation := newUserCoinRewardMutation(c.config, OpUpdateOne, withUserCoinReward(ucr))
	return &UserCoinRewardUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserCoinRewardClient) UpdateOneID(id uint32) *UserCoinRewardUpdateOne {
	mutation := newUserCoinRewardMutation(c.config, OpUpdateOne, withUserCoinRewardID(id))
	return &UserCoinRewardUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UserCoinReward.
func (c *UserCoinRewardClient) Delete() *UserCoinRewardDelete {
	mutation := newUserCoinRewardMutation(c.config, OpDelete)
	return &UserCoinRewardDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserCoinRewardClient) DeleteOne(ucr *UserCoinReward) *UserCoinRewardDeleteOne {
	return c.DeleteOneID(ucr.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *UserCoinRewardClient) DeleteOneID(id uint32) *UserCoinRewardDeleteOne {
	builder := c.Delete().Where(usercoinreward.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserCoinRewardDeleteOne{builder}
}

// Query returns a query builder for UserCoinReward.
func (c *UserCoinRewardClient) Query() *UserCoinRewardQuery {
	return &UserCoinRewardQuery{
		config: c.config,
	}
}

// Get returns a UserCoinReward entity by its id.
func (c *UserCoinRewardClient) Get(ctx context.Context, id uint32) (*UserCoinReward, error) {
	return c.Query().Where(usercoinreward.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserCoinRewardClient) GetX(ctx context.Context, id uint32) *UserCoinReward {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *UserCoinRewardClient) Hooks() []Hook {
	hooks := c.hooks.UserCoinReward
	return append(hooks[:len(hooks):len(hooks)], usercoinreward.Hooks[:]...)
}

// UserCreditHistoryClient is a client for the UserCreditHistory schema.
type UserCreditHistoryClient struct {
	config
}

// NewUserCreditHistoryClient returns a client for the UserCreditHistory from the given config.
func NewUserCreditHistoryClient(c config) *UserCreditHistoryClient {
	return &UserCreditHistoryClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `usercredithistory.Hooks(f(g(h())))`.
func (c *UserCreditHistoryClient) Use(hooks ...Hook) {
	c.hooks.UserCreditHistory = append(c.hooks.UserCreditHistory, hooks...)
}

// Create returns a builder for creating a UserCreditHistory entity.
func (c *UserCreditHistoryClient) Create() *UserCreditHistoryCreate {
	mutation := newUserCreditHistoryMutation(c.config, OpCreate)
	return &UserCreditHistoryCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UserCreditHistory entities.
func (c *UserCreditHistoryClient) CreateBulk(builders ...*UserCreditHistoryCreate) *UserCreditHistoryCreateBulk {
	return &UserCreditHistoryCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UserCreditHistory.
func (c *UserCreditHistoryClient) Update() *UserCreditHistoryUpdate {
	mutation := newUserCreditHistoryMutation(c.config, OpUpdate)
	return &UserCreditHistoryUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserCreditHistoryClient) UpdateOne(uch *UserCreditHistory) *UserCreditHistoryUpdateOne {
	mutation := newUserCreditHistoryMutation(c.config, OpUpdateOne, withUserCreditHistory(uch))
	return &UserCreditHistoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserCreditHistoryClient) UpdateOneID(id uint32) *UserCreditHistoryUpdateOne {
	mutation := newUserCreditHistoryMutation(c.config, OpUpdateOne, withUserCreditHistoryID(id))
	return &UserCreditHistoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UserCreditHistory.
func (c *UserCreditHistoryClient) Delete() *UserCreditHistoryDelete {
	mutation := newUserCreditHistoryMutation(c.config, OpDelete)
	return &UserCreditHistoryDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserCreditHistoryClient) DeleteOne(uch *UserCreditHistory) *UserCreditHistoryDeleteOne {
	return c.DeleteOneID(uch.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *UserCreditHistoryClient) DeleteOneID(id uint32) *UserCreditHistoryDeleteOne {
	builder := c.Delete().Where(usercredithistory.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserCreditHistoryDeleteOne{builder}
}

// Query returns a query builder for UserCreditHistory.
func (c *UserCreditHistoryClient) Query() *UserCreditHistoryQuery {
	return &UserCreditHistoryQuery{
		config: c.config,
	}
}

// Get returns a UserCreditHistory entity by its id.
func (c *UserCreditHistoryClient) Get(ctx context.Context, id uint32) (*UserCreditHistory, error) {
	return c.Query().Where(usercredithistory.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserCreditHistoryClient) GetX(ctx context.Context, id uint32) *UserCreditHistory {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *UserCreditHistoryClient) Hooks() []Hook {
	hooks := c.hooks.UserCreditHistory
	return append(hooks[:len(hooks):len(hooks)], usercredithistory.Hooks[:]...)
}

// UserRewardClient is a client for the UserReward schema.
type UserRewardClient struct {
	config
}

// NewUserRewardClient returns a client for the UserReward from the given config.
func NewUserRewardClient(c config) *UserRewardClient {
	return &UserRewardClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `userreward.Hooks(f(g(h())))`.
func (c *UserRewardClient) Use(hooks ...Hook) {
	c.hooks.UserReward = append(c.hooks.UserReward, hooks...)
}

// Create returns a builder for creating a UserReward entity.
func (c *UserRewardClient) Create() *UserRewardCreate {
	mutation := newUserRewardMutation(c.config, OpCreate)
	return &UserRewardCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UserReward entities.
func (c *UserRewardClient) CreateBulk(builders ...*UserRewardCreate) *UserRewardCreateBulk {
	return &UserRewardCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UserReward.
func (c *UserRewardClient) Update() *UserRewardUpdate {
	mutation := newUserRewardMutation(c.config, OpUpdate)
	return &UserRewardUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserRewardClient) UpdateOne(ur *UserReward) *UserRewardUpdateOne {
	mutation := newUserRewardMutation(c.config, OpUpdateOne, withUserReward(ur))
	return &UserRewardUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserRewardClient) UpdateOneID(id uint32) *UserRewardUpdateOne {
	mutation := newUserRewardMutation(c.config, OpUpdateOne, withUserRewardID(id))
	return &UserRewardUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UserReward.
func (c *UserRewardClient) Delete() *UserRewardDelete {
	mutation := newUserRewardMutation(c.config, OpDelete)
	return &UserRewardDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserRewardClient) DeleteOne(ur *UserReward) *UserRewardDeleteOne {
	return c.DeleteOneID(ur.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *UserRewardClient) DeleteOneID(id uint32) *UserRewardDeleteOne {
	builder := c.Delete().Where(userreward.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserRewardDeleteOne{builder}
}

// Query returns a query builder for UserReward.
func (c *UserRewardClient) Query() *UserRewardQuery {
	return &UserRewardQuery{
		config: c.config,
	}
}

// Get returns a UserReward entity by its id.
func (c *UserRewardClient) Get(ctx context.Context, id uint32) (*UserReward, error) {
	return c.Query().Where(userreward.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserRewardClient) GetX(ctx context.Context, id uint32) *UserReward {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *UserRewardClient) Hooks() []Hook {
	hooks := c.hooks.UserReward
	return append(hooks[:len(hooks):len(hooks)], userreward.Hooks[:]...)
}
