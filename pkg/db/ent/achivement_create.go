// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/inspire-middleware/pkg/db/ent/achivement"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// AchivementCreate is the builder for creating a Achivement entity.
type AchivementCreate struct {
	config
	mutation *AchivementMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (ac *AchivementCreate) SetCreatedAt(u uint32) *AchivementCreate {
	ac.mutation.SetCreatedAt(u)
	return ac
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ac *AchivementCreate) SetNillableCreatedAt(u *uint32) *AchivementCreate {
	if u != nil {
		ac.SetCreatedAt(*u)
	}
	return ac
}

// SetUpdatedAt sets the "updated_at" field.
func (ac *AchivementCreate) SetUpdatedAt(u uint32) *AchivementCreate {
	ac.mutation.SetUpdatedAt(u)
	return ac
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ac *AchivementCreate) SetNillableUpdatedAt(u *uint32) *AchivementCreate {
	if u != nil {
		ac.SetUpdatedAt(*u)
	}
	return ac
}

// SetDeletedAt sets the "deleted_at" field.
func (ac *AchivementCreate) SetDeletedAt(u uint32) *AchivementCreate {
	ac.mutation.SetDeletedAt(u)
	return ac
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ac *AchivementCreate) SetNillableDeletedAt(u *uint32) *AchivementCreate {
	if u != nil {
		ac.SetDeletedAt(*u)
	}
	return ac
}

// SetAppID sets the "app_id" field.
func (ac *AchivementCreate) SetAppID(u uuid.UUID) *AchivementCreate {
	ac.mutation.SetAppID(u)
	return ac
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (ac *AchivementCreate) SetNillableAppID(u *uuid.UUID) *AchivementCreate {
	if u != nil {
		ac.SetAppID(*u)
	}
	return ac
}

// SetUserID sets the "user_id" field.
func (ac *AchivementCreate) SetUserID(u uuid.UUID) *AchivementCreate {
	ac.mutation.SetUserID(u)
	return ac
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (ac *AchivementCreate) SetNillableUserID(u *uuid.UUID) *AchivementCreate {
	if u != nil {
		ac.SetUserID(*u)
	}
	return ac
}

// SetGoodID sets the "good_id" field.
func (ac *AchivementCreate) SetGoodID(u uuid.UUID) *AchivementCreate {
	ac.mutation.SetGoodID(u)
	return ac
}

// SetNillableGoodID sets the "good_id" field if the given value is not nil.
func (ac *AchivementCreate) SetNillableGoodID(u *uuid.UUID) *AchivementCreate {
	if u != nil {
		ac.SetGoodID(*u)
	}
	return ac
}

// SetCoinTypeID sets the "coin_type_id" field.
func (ac *AchivementCreate) SetCoinTypeID(u uuid.UUID) *AchivementCreate {
	ac.mutation.SetCoinTypeID(u)
	return ac
}

// SetNillableCoinTypeID sets the "coin_type_id" field if the given value is not nil.
func (ac *AchivementCreate) SetNillableCoinTypeID(u *uuid.UUID) *AchivementCreate {
	if u != nil {
		ac.SetCoinTypeID(*u)
	}
	return ac
}

// SetTotalUnitsV1 sets the "total_units_v1" field.
func (ac *AchivementCreate) SetTotalUnitsV1(d decimal.Decimal) *AchivementCreate {
	ac.mutation.SetTotalUnitsV1(d)
	return ac
}

// SetNillableTotalUnitsV1 sets the "total_units_v1" field if the given value is not nil.
func (ac *AchivementCreate) SetNillableTotalUnitsV1(d *decimal.Decimal) *AchivementCreate {
	if d != nil {
		ac.SetTotalUnitsV1(*d)
	}
	return ac
}

// SetSelfUnitsV1 sets the "self_units_v1" field.
func (ac *AchivementCreate) SetSelfUnitsV1(d decimal.Decimal) *AchivementCreate {
	ac.mutation.SetSelfUnitsV1(d)
	return ac
}

// SetNillableSelfUnitsV1 sets the "self_units_v1" field if the given value is not nil.
func (ac *AchivementCreate) SetNillableSelfUnitsV1(d *decimal.Decimal) *AchivementCreate {
	if d != nil {
		ac.SetSelfUnitsV1(*d)
	}
	return ac
}

// SetTotalAmount sets the "total_amount" field.
func (ac *AchivementCreate) SetTotalAmount(d decimal.Decimal) *AchivementCreate {
	ac.mutation.SetTotalAmount(d)
	return ac
}

// SetNillableTotalAmount sets the "total_amount" field if the given value is not nil.
func (ac *AchivementCreate) SetNillableTotalAmount(d *decimal.Decimal) *AchivementCreate {
	if d != nil {
		ac.SetTotalAmount(*d)
	}
	return ac
}

// SetSelfAmount sets the "self_amount" field.
func (ac *AchivementCreate) SetSelfAmount(d decimal.Decimal) *AchivementCreate {
	ac.mutation.SetSelfAmount(d)
	return ac
}

// SetNillableSelfAmount sets the "self_amount" field if the given value is not nil.
func (ac *AchivementCreate) SetNillableSelfAmount(d *decimal.Decimal) *AchivementCreate {
	if d != nil {
		ac.SetSelfAmount(*d)
	}
	return ac
}

// SetTotalCommission sets the "total_commission" field.
func (ac *AchivementCreate) SetTotalCommission(d decimal.Decimal) *AchivementCreate {
	ac.mutation.SetTotalCommission(d)
	return ac
}

// SetNillableTotalCommission sets the "total_commission" field if the given value is not nil.
func (ac *AchivementCreate) SetNillableTotalCommission(d *decimal.Decimal) *AchivementCreate {
	if d != nil {
		ac.SetTotalCommission(*d)
	}
	return ac
}

// SetSelfCommission sets the "self_commission" field.
func (ac *AchivementCreate) SetSelfCommission(d decimal.Decimal) *AchivementCreate {
	ac.mutation.SetSelfCommission(d)
	return ac
}

// SetNillableSelfCommission sets the "self_commission" field if the given value is not nil.
func (ac *AchivementCreate) SetNillableSelfCommission(d *decimal.Decimal) *AchivementCreate {
	if d != nil {
		ac.SetSelfCommission(*d)
	}
	return ac
}

// SetID sets the "id" field.
func (ac *AchivementCreate) SetID(u uuid.UUID) *AchivementCreate {
	ac.mutation.SetID(u)
	return ac
}

// SetNillableID sets the "id" field if the given value is not nil.
func (ac *AchivementCreate) SetNillableID(u *uuid.UUID) *AchivementCreate {
	if u != nil {
		ac.SetID(*u)
	}
	return ac
}

// Mutation returns the AchivementMutation object of the builder.
func (ac *AchivementCreate) Mutation() *AchivementMutation {
	return ac.mutation
}

// Save creates the Achivement in the database.
func (ac *AchivementCreate) Save(ctx context.Context) (*Achivement, error) {
	var (
		err  error
		node *Achivement
	)
	if err := ac.defaults(); err != nil {
		return nil, err
	}
	if len(ac.hooks) == 0 {
		if err = ac.check(); err != nil {
			return nil, err
		}
		node, err = ac.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AchivementMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ac.check(); err != nil {
				return nil, err
			}
			ac.mutation = mutation
			if node, err = ac.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(ac.hooks) - 1; i >= 0; i-- {
			if ac.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ac.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, ac.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Achivement)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from AchivementMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ac *AchivementCreate) SaveX(ctx context.Context) *Achivement {
	v, err := ac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ac *AchivementCreate) Exec(ctx context.Context) error {
	_, err := ac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ac *AchivementCreate) ExecX(ctx context.Context) {
	if err := ac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ac *AchivementCreate) defaults() error {
	if _, ok := ac.mutation.CreatedAt(); !ok {
		if achivement.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized achivement.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := achivement.DefaultCreatedAt()
		ac.mutation.SetCreatedAt(v)
	}
	if _, ok := ac.mutation.UpdatedAt(); !ok {
		if achivement.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized achivement.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := achivement.DefaultUpdatedAt()
		ac.mutation.SetUpdatedAt(v)
	}
	if _, ok := ac.mutation.DeletedAt(); !ok {
		if achivement.DefaultDeletedAt == nil {
			return fmt.Errorf("ent: uninitialized achivement.DefaultDeletedAt (forgotten import ent/runtime?)")
		}
		v := achivement.DefaultDeletedAt()
		ac.mutation.SetDeletedAt(v)
	}
	if _, ok := ac.mutation.AppID(); !ok {
		if achivement.DefaultAppID == nil {
			return fmt.Errorf("ent: uninitialized achivement.DefaultAppID (forgotten import ent/runtime?)")
		}
		v := achivement.DefaultAppID()
		ac.mutation.SetAppID(v)
	}
	if _, ok := ac.mutation.UserID(); !ok {
		if achivement.DefaultUserID == nil {
			return fmt.Errorf("ent: uninitialized achivement.DefaultUserID (forgotten import ent/runtime?)")
		}
		v := achivement.DefaultUserID()
		ac.mutation.SetUserID(v)
	}
	if _, ok := ac.mutation.GoodID(); !ok {
		if achivement.DefaultGoodID == nil {
			return fmt.Errorf("ent: uninitialized achivement.DefaultGoodID (forgotten import ent/runtime?)")
		}
		v := achivement.DefaultGoodID()
		ac.mutation.SetGoodID(v)
	}
	if _, ok := ac.mutation.CoinTypeID(); !ok {
		if achivement.DefaultCoinTypeID == nil {
			return fmt.Errorf("ent: uninitialized achivement.DefaultCoinTypeID (forgotten import ent/runtime?)")
		}
		v := achivement.DefaultCoinTypeID()
		ac.mutation.SetCoinTypeID(v)
	}
	if _, ok := ac.mutation.TotalUnitsV1(); !ok {
		v := achivement.DefaultTotalUnitsV1
		ac.mutation.SetTotalUnitsV1(v)
	}
	if _, ok := ac.mutation.SelfUnitsV1(); !ok {
		v := achivement.DefaultSelfUnitsV1
		ac.mutation.SetSelfUnitsV1(v)
	}
	if _, ok := ac.mutation.TotalAmount(); !ok {
		v := achivement.DefaultTotalAmount
		ac.mutation.SetTotalAmount(v)
	}
	if _, ok := ac.mutation.SelfAmount(); !ok {
		v := achivement.DefaultSelfAmount
		ac.mutation.SetSelfAmount(v)
	}
	if _, ok := ac.mutation.TotalCommission(); !ok {
		v := achivement.DefaultTotalCommission
		ac.mutation.SetTotalCommission(v)
	}
	if _, ok := ac.mutation.SelfCommission(); !ok {
		v := achivement.DefaultSelfCommission
		ac.mutation.SetSelfCommission(v)
	}
	if _, ok := ac.mutation.ID(); !ok {
		if achivement.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized achivement.DefaultID (forgotten import ent/runtime?)")
		}
		v := achivement.DefaultID()
		ac.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (ac *AchivementCreate) check() error {
	if _, ok := ac.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Achivement.created_at"`)}
	}
	if _, ok := ac.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Achivement.updated_at"`)}
	}
	if _, ok := ac.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`ent: missing required field "Achivement.deleted_at"`)}
	}
	return nil
}

func (ac *AchivementCreate) sqlSave(ctx context.Context) (*Achivement, error) {
	_node, _spec := ac.createSpec()
	if err := sqlgraph.CreateNode(ctx, ac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (ac *AchivementCreate) createSpec() (*Achivement, *sqlgraph.CreateSpec) {
	var (
		_node = &Achivement{config: ac.config}
		_spec = &sqlgraph.CreateSpec{
			Table: achivement.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: achivement.FieldID,
			},
		}
	)
	_spec.OnConflict = ac.conflict
	if id, ok := ac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := ac.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: achivement.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := ac.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: achivement.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := ac.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: achivement.FieldDeletedAt,
		})
		_node.DeletedAt = value
	}
	if value, ok := ac.mutation.AppID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: achivement.FieldAppID,
		})
		_node.AppID = value
	}
	if value, ok := ac.mutation.UserID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: achivement.FieldUserID,
		})
		_node.UserID = value
	}
	if value, ok := ac.mutation.GoodID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: achivement.FieldGoodID,
		})
		_node.GoodID = value
	}
	if value, ok := ac.mutation.CoinTypeID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: achivement.FieldCoinTypeID,
		})
		_node.CoinTypeID = value
	}
	if value, ok := ac.mutation.TotalUnitsV1(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: achivement.FieldTotalUnitsV1,
		})
		_node.TotalUnitsV1 = value
	}
	if value, ok := ac.mutation.SelfUnitsV1(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: achivement.FieldSelfUnitsV1,
		})
		_node.SelfUnitsV1 = value
	}
	if value, ok := ac.mutation.TotalAmount(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: achivement.FieldTotalAmount,
		})
		_node.TotalAmount = value
	}
	if value, ok := ac.mutation.SelfAmount(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: achivement.FieldSelfAmount,
		})
		_node.SelfAmount = value
	}
	if value, ok := ac.mutation.TotalCommission(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: achivement.FieldTotalCommission,
		})
		_node.TotalCommission = value
	}
	if value, ok := ac.mutation.SelfCommission(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: achivement.FieldSelfCommission,
		})
		_node.SelfCommission = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Achivement.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AchivementUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (ac *AchivementCreate) OnConflict(opts ...sql.ConflictOption) *AchivementUpsertOne {
	ac.conflict = opts
	return &AchivementUpsertOne{
		create: ac,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Achivement.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (ac *AchivementCreate) OnConflictColumns(columns ...string) *AchivementUpsertOne {
	ac.conflict = append(ac.conflict, sql.ConflictColumns(columns...))
	return &AchivementUpsertOne{
		create: ac,
	}
}

type (
	// AchivementUpsertOne is the builder for "upsert"-ing
	//  one Achivement node.
	AchivementUpsertOne struct {
		create *AchivementCreate
	}

	// AchivementUpsert is the "OnConflict" setter.
	AchivementUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *AchivementUpsert) SetCreatedAt(v uint32) *AchivementUpsert {
	u.Set(achivement.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *AchivementUpsert) UpdateCreatedAt() *AchivementUpsert {
	u.SetExcluded(achivement.FieldCreatedAt)
	return u
}

// AddCreatedAt adds v to the "created_at" field.
func (u *AchivementUpsert) AddCreatedAt(v uint32) *AchivementUpsert {
	u.Add(achivement.FieldCreatedAt, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *AchivementUpsert) SetUpdatedAt(v uint32) *AchivementUpsert {
	u.Set(achivement.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AchivementUpsert) UpdateUpdatedAt() *AchivementUpsert {
	u.SetExcluded(achivement.FieldUpdatedAt)
	return u
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *AchivementUpsert) AddUpdatedAt(v uint32) *AchivementUpsert {
	u.Add(achivement.FieldUpdatedAt, v)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *AchivementUpsert) SetDeletedAt(v uint32) *AchivementUpsert {
	u.Set(achivement.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *AchivementUpsert) UpdateDeletedAt() *AchivementUpsert {
	u.SetExcluded(achivement.FieldDeletedAt)
	return u
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *AchivementUpsert) AddDeletedAt(v uint32) *AchivementUpsert {
	u.Add(achivement.FieldDeletedAt, v)
	return u
}

// SetAppID sets the "app_id" field.
func (u *AchivementUpsert) SetAppID(v uuid.UUID) *AchivementUpsert {
	u.Set(achivement.FieldAppID, v)
	return u
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *AchivementUpsert) UpdateAppID() *AchivementUpsert {
	u.SetExcluded(achivement.FieldAppID)
	return u
}

// ClearAppID clears the value of the "app_id" field.
func (u *AchivementUpsert) ClearAppID() *AchivementUpsert {
	u.SetNull(achivement.FieldAppID)
	return u
}

// SetUserID sets the "user_id" field.
func (u *AchivementUpsert) SetUserID(v uuid.UUID) *AchivementUpsert {
	u.Set(achivement.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *AchivementUpsert) UpdateUserID() *AchivementUpsert {
	u.SetExcluded(achivement.FieldUserID)
	return u
}

// ClearUserID clears the value of the "user_id" field.
func (u *AchivementUpsert) ClearUserID() *AchivementUpsert {
	u.SetNull(achivement.FieldUserID)
	return u
}

// SetGoodID sets the "good_id" field.
func (u *AchivementUpsert) SetGoodID(v uuid.UUID) *AchivementUpsert {
	u.Set(achivement.FieldGoodID, v)
	return u
}

// UpdateGoodID sets the "good_id" field to the value that was provided on create.
func (u *AchivementUpsert) UpdateGoodID() *AchivementUpsert {
	u.SetExcluded(achivement.FieldGoodID)
	return u
}

// ClearGoodID clears the value of the "good_id" field.
func (u *AchivementUpsert) ClearGoodID() *AchivementUpsert {
	u.SetNull(achivement.FieldGoodID)
	return u
}

// SetCoinTypeID sets the "coin_type_id" field.
func (u *AchivementUpsert) SetCoinTypeID(v uuid.UUID) *AchivementUpsert {
	u.Set(achivement.FieldCoinTypeID, v)
	return u
}

// UpdateCoinTypeID sets the "coin_type_id" field to the value that was provided on create.
func (u *AchivementUpsert) UpdateCoinTypeID() *AchivementUpsert {
	u.SetExcluded(achivement.FieldCoinTypeID)
	return u
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (u *AchivementUpsert) ClearCoinTypeID() *AchivementUpsert {
	u.SetNull(achivement.FieldCoinTypeID)
	return u
}

// SetTotalUnitsV1 sets the "total_units_v1" field.
func (u *AchivementUpsert) SetTotalUnitsV1(v decimal.Decimal) *AchivementUpsert {
	u.Set(achivement.FieldTotalUnitsV1, v)
	return u
}

// UpdateTotalUnitsV1 sets the "total_units_v1" field to the value that was provided on create.
func (u *AchivementUpsert) UpdateTotalUnitsV1() *AchivementUpsert {
	u.SetExcluded(achivement.FieldTotalUnitsV1)
	return u
}

// ClearTotalUnitsV1 clears the value of the "total_units_v1" field.
func (u *AchivementUpsert) ClearTotalUnitsV1() *AchivementUpsert {
	u.SetNull(achivement.FieldTotalUnitsV1)
	return u
}

// SetSelfUnitsV1 sets the "self_units_v1" field.
func (u *AchivementUpsert) SetSelfUnitsV1(v decimal.Decimal) *AchivementUpsert {
	u.Set(achivement.FieldSelfUnitsV1, v)
	return u
}

// UpdateSelfUnitsV1 sets the "self_units_v1" field to the value that was provided on create.
func (u *AchivementUpsert) UpdateSelfUnitsV1() *AchivementUpsert {
	u.SetExcluded(achivement.FieldSelfUnitsV1)
	return u
}

// ClearSelfUnitsV1 clears the value of the "self_units_v1" field.
func (u *AchivementUpsert) ClearSelfUnitsV1() *AchivementUpsert {
	u.SetNull(achivement.FieldSelfUnitsV1)
	return u
}

// SetTotalAmount sets the "total_amount" field.
func (u *AchivementUpsert) SetTotalAmount(v decimal.Decimal) *AchivementUpsert {
	u.Set(achivement.FieldTotalAmount, v)
	return u
}

// UpdateTotalAmount sets the "total_amount" field to the value that was provided on create.
func (u *AchivementUpsert) UpdateTotalAmount() *AchivementUpsert {
	u.SetExcluded(achivement.FieldTotalAmount)
	return u
}

// ClearTotalAmount clears the value of the "total_amount" field.
func (u *AchivementUpsert) ClearTotalAmount() *AchivementUpsert {
	u.SetNull(achivement.FieldTotalAmount)
	return u
}

// SetSelfAmount sets the "self_amount" field.
func (u *AchivementUpsert) SetSelfAmount(v decimal.Decimal) *AchivementUpsert {
	u.Set(achivement.FieldSelfAmount, v)
	return u
}

// UpdateSelfAmount sets the "self_amount" field to the value that was provided on create.
func (u *AchivementUpsert) UpdateSelfAmount() *AchivementUpsert {
	u.SetExcluded(achivement.FieldSelfAmount)
	return u
}

// ClearSelfAmount clears the value of the "self_amount" field.
func (u *AchivementUpsert) ClearSelfAmount() *AchivementUpsert {
	u.SetNull(achivement.FieldSelfAmount)
	return u
}

// SetTotalCommission sets the "total_commission" field.
func (u *AchivementUpsert) SetTotalCommission(v decimal.Decimal) *AchivementUpsert {
	u.Set(achivement.FieldTotalCommission, v)
	return u
}

// UpdateTotalCommission sets the "total_commission" field to the value that was provided on create.
func (u *AchivementUpsert) UpdateTotalCommission() *AchivementUpsert {
	u.SetExcluded(achivement.FieldTotalCommission)
	return u
}

// ClearTotalCommission clears the value of the "total_commission" field.
func (u *AchivementUpsert) ClearTotalCommission() *AchivementUpsert {
	u.SetNull(achivement.FieldTotalCommission)
	return u
}

// SetSelfCommission sets the "self_commission" field.
func (u *AchivementUpsert) SetSelfCommission(v decimal.Decimal) *AchivementUpsert {
	u.Set(achivement.FieldSelfCommission, v)
	return u
}

// UpdateSelfCommission sets the "self_commission" field to the value that was provided on create.
func (u *AchivementUpsert) UpdateSelfCommission() *AchivementUpsert {
	u.SetExcluded(achivement.FieldSelfCommission)
	return u
}

// ClearSelfCommission clears the value of the "self_commission" field.
func (u *AchivementUpsert) ClearSelfCommission() *AchivementUpsert {
	u.SetNull(achivement.FieldSelfCommission)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Achivement.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(achivement.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *AchivementUpsertOne) UpdateNewValues() *AchivementUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(achivement.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.Achivement.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *AchivementUpsertOne) Ignore() *AchivementUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AchivementUpsertOne) DoNothing() *AchivementUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AchivementCreate.OnConflict
// documentation for more info.
func (u *AchivementUpsertOne) Update(set func(*AchivementUpsert)) *AchivementUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AchivementUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *AchivementUpsertOne) SetCreatedAt(v uint32) *AchivementUpsertOne {
	return u.Update(func(s *AchivementUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *AchivementUpsertOne) AddCreatedAt(v uint32) *AchivementUpsertOne {
	return u.Update(func(s *AchivementUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *AchivementUpsertOne) UpdateCreatedAt() *AchivementUpsertOne {
	return u.Update(func(s *AchivementUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *AchivementUpsertOne) SetUpdatedAt(v uint32) *AchivementUpsertOne {
	return u.Update(func(s *AchivementUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *AchivementUpsertOne) AddUpdatedAt(v uint32) *AchivementUpsertOne {
	return u.Update(func(s *AchivementUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AchivementUpsertOne) UpdateUpdatedAt() *AchivementUpsertOne {
	return u.Update(func(s *AchivementUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *AchivementUpsertOne) SetDeletedAt(v uint32) *AchivementUpsertOne {
	return u.Update(func(s *AchivementUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *AchivementUpsertOne) AddDeletedAt(v uint32) *AchivementUpsertOne {
	return u.Update(func(s *AchivementUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *AchivementUpsertOne) UpdateDeletedAt() *AchivementUpsertOne {
	return u.Update(func(s *AchivementUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetAppID sets the "app_id" field.
func (u *AchivementUpsertOne) SetAppID(v uuid.UUID) *AchivementUpsertOne {
	return u.Update(func(s *AchivementUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *AchivementUpsertOne) UpdateAppID() *AchivementUpsertOne {
	return u.Update(func(s *AchivementUpsert) {
		s.UpdateAppID()
	})
}

// ClearAppID clears the value of the "app_id" field.
func (u *AchivementUpsertOne) ClearAppID() *AchivementUpsertOne {
	return u.Update(func(s *AchivementUpsert) {
		s.ClearAppID()
	})
}

// SetUserID sets the "user_id" field.
func (u *AchivementUpsertOne) SetUserID(v uuid.UUID) *AchivementUpsertOne {
	return u.Update(func(s *AchivementUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *AchivementUpsertOne) UpdateUserID() *AchivementUpsertOne {
	return u.Update(func(s *AchivementUpsert) {
		s.UpdateUserID()
	})
}

// ClearUserID clears the value of the "user_id" field.
func (u *AchivementUpsertOne) ClearUserID() *AchivementUpsertOne {
	return u.Update(func(s *AchivementUpsert) {
		s.ClearUserID()
	})
}

// SetGoodID sets the "good_id" field.
func (u *AchivementUpsertOne) SetGoodID(v uuid.UUID) *AchivementUpsertOne {
	return u.Update(func(s *AchivementUpsert) {
		s.SetGoodID(v)
	})
}

// UpdateGoodID sets the "good_id" field to the value that was provided on create.
func (u *AchivementUpsertOne) UpdateGoodID() *AchivementUpsertOne {
	return u.Update(func(s *AchivementUpsert) {
		s.UpdateGoodID()
	})
}

// ClearGoodID clears the value of the "good_id" field.
func (u *AchivementUpsertOne) ClearGoodID() *AchivementUpsertOne {
	return u.Update(func(s *AchivementUpsert) {
		s.ClearGoodID()
	})
}

// SetCoinTypeID sets the "coin_type_id" field.
func (u *AchivementUpsertOne) SetCoinTypeID(v uuid.UUID) *AchivementUpsertOne {
	return u.Update(func(s *AchivementUpsert) {
		s.SetCoinTypeID(v)
	})
}

// UpdateCoinTypeID sets the "coin_type_id" field to the value that was provided on create.
func (u *AchivementUpsertOne) UpdateCoinTypeID() *AchivementUpsertOne {
	return u.Update(func(s *AchivementUpsert) {
		s.UpdateCoinTypeID()
	})
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (u *AchivementUpsertOne) ClearCoinTypeID() *AchivementUpsertOne {
	return u.Update(func(s *AchivementUpsert) {
		s.ClearCoinTypeID()
	})
}

// SetTotalUnitsV1 sets the "total_units_v1" field.
func (u *AchivementUpsertOne) SetTotalUnitsV1(v decimal.Decimal) *AchivementUpsertOne {
	return u.Update(func(s *AchivementUpsert) {
		s.SetTotalUnitsV1(v)
	})
}

// UpdateTotalUnitsV1 sets the "total_units_v1" field to the value that was provided on create.
func (u *AchivementUpsertOne) UpdateTotalUnitsV1() *AchivementUpsertOne {
	return u.Update(func(s *AchivementUpsert) {
		s.UpdateTotalUnitsV1()
	})
}

// ClearTotalUnitsV1 clears the value of the "total_units_v1" field.
func (u *AchivementUpsertOne) ClearTotalUnitsV1() *AchivementUpsertOne {
	return u.Update(func(s *AchivementUpsert) {
		s.ClearTotalUnitsV1()
	})
}

// SetSelfUnitsV1 sets the "self_units_v1" field.
func (u *AchivementUpsertOne) SetSelfUnitsV1(v decimal.Decimal) *AchivementUpsertOne {
	return u.Update(func(s *AchivementUpsert) {
		s.SetSelfUnitsV1(v)
	})
}

// UpdateSelfUnitsV1 sets the "self_units_v1" field to the value that was provided on create.
func (u *AchivementUpsertOne) UpdateSelfUnitsV1() *AchivementUpsertOne {
	return u.Update(func(s *AchivementUpsert) {
		s.UpdateSelfUnitsV1()
	})
}

// ClearSelfUnitsV1 clears the value of the "self_units_v1" field.
func (u *AchivementUpsertOne) ClearSelfUnitsV1() *AchivementUpsertOne {
	return u.Update(func(s *AchivementUpsert) {
		s.ClearSelfUnitsV1()
	})
}

// SetTotalAmount sets the "total_amount" field.
func (u *AchivementUpsertOne) SetTotalAmount(v decimal.Decimal) *AchivementUpsertOne {
	return u.Update(func(s *AchivementUpsert) {
		s.SetTotalAmount(v)
	})
}

// UpdateTotalAmount sets the "total_amount" field to the value that was provided on create.
func (u *AchivementUpsertOne) UpdateTotalAmount() *AchivementUpsertOne {
	return u.Update(func(s *AchivementUpsert) {
		s.UpdateTotalAmount()
	})
}

// ClearTotalAmount clears the value of the "total_amount" field.
func (u *AchivementUpsertOne) ClearTotalAmount() *AchivementUpsertOne {
	return u.Update(func(s *AchivementUpsert) {
		s.ClearTotalAmount()
	})
}

// SetSelfAmount sets the "self_amount" field.
func (u *AchivementUpsertOne) SetSelfAmount(v decimal.Decimal) *AchivementUpsertOne {
	return u.Update(func(s *AchivementUpsert) {
		s.SetSelfAmount(v)
	})
}

// UpdateSelfAmount sets the "self_amount" field to the value that was provided on create.
func (u *AchivementUpsertOne) UpdateSelfAmount() *AchivementUpsertOne {
	return u.Update(func(s *AchivementUpsert) {
		s.UpdateSelfAmount()
	})
}

// ClearSelfAmount clears the value of the "self_amount" field.
func (u *AchivementUpsertOne) ClearSelfAmount() *AchivementUpsertOne {
	return u.Update(func(s *AchivementUpsert) {
		s.ClearSelfAmount()
	})
}

// SetTotalCommission sets the "total_commission" field.
func (u *AchivementUpsertOne) SetTotalCommission(v decimal.Decimal) *AchivementUpsertOne {
	return u.Update(func(s *AchivementUpsert) {
		s.SetTotalCommission(v)
	})
}

// UpdateTotalCommission sets the "total_commission" field to the value that was provided on create.
func (u *AchivementUpsertOne) UpdateTotalCommission() *AchivementUpsertOne {
	return u.Update(func(s *AchivementUpsert) {
		s.UpdateTotalCommission()
	})
}

// ClearTotalCommission clears the value of the "total_commission" field.
func (u *AchivementUpsertOne) ClearTotalCommission() *AchivementUpsertOne {
	return u.Update(func(s *AchivementUpsert) {
		s.ClearTotalCommission()
	})
}

// SetSelfCommission sets the "self_commission" field.
func (u *AchivementUpsertOne) SetSelfCommission(v decimal.Decimal) *AchivementUpsertOne {
	return u.Update(func(s *AchivementUpsert) {
		s.SetSelfCommission(v)
	})
}

// UpdateSelfCommission sets the "self_commission" field to the value that was provided on create.
func (u *AchivementUpsertOne) UpdateSelfCommission() *AchivementUpsertOne {
	return u.Update(func(s *AchivementUpsert) {
		s.UpdateSelfCommission()
	})
}

// ClearSelfCommission clears the value of the "self_commission" field.
func (u *AchivementUpsertOne) ClearSelfCommission() *AchivementUpsertOne {
	return u.Update(func(s *AchivementUpsert) {
		s.ClearSelfCommission()
	})
}

// Exec executes the query.
func (u *AchivementUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AchivementCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AchivementUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *AchivementUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: AchivementUpsertOne.ID is not supported by MySQL driver. Use AchivementUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *AchivementUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// AchivementCreateBulk is the builder for creating many Achivement entities in bulk.
type AchivementCreateBulk struct {
	config
	builders []*AchivementCreate
	conflict []sql.ConflictOption
}

// Save creates the Achivement entities in the database.
func (acb *AchivementCreateBulk) Save(ctx context.Context) ([]*Achivement, error) {
	specs := make([]*sqlgraph.CreateSpec, len(acb.builders))
	nodes := make([]*Achivement, len(acb.builders))
	mutators := make([]Mutator, len(acb.builders))
	for i := range acb.builders {
		func(i int, root context.Context) {
			builder := acb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AchivementMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, acb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = acb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, acb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, acb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (acb *AchivementCreateBulk) SaveX(ctx context.Context) []*Achivement {
	v, err := acb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (acb *AchivementCreateBulk) Exec(ctx context.Context) error {
	_, err := acb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acb *AchivementCreateBulk) ExecX(ctx context.Context) {
	if err := acb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Achivement.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AchivementUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (acb *AchivementCreateBulk) OnConflict(opts ...sql.ConflictOption) *AchivementUpsertBulk {
	acb.conflict = opts
	return &AchivementUpsertBulk{
		create: acb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Achivement.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (acb *AchivementCreateBulk) OnConflictColumns(columns ...string) *AchivementUpsertBulk {
	acb.conflict = append(acb.conflict, sql.ConflictColumns(columns...))
	return &AchivementUpsertBulk{
		create: acb,
	}
}

// AchivementUpsertBulk is the builder for "upsert"-ing
// a bulk of Achivement nodes.
type AchivementUpsertBulk struct {
	create *AchivementCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Achivement.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(achivement.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *AchivementUpsertBulk) UpdateNewValues() *AchivementUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(achivement.FieldID)
				return
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Achivement.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *AchivementUpsertBulk) Ignore() *AchivementUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AchivementUpsertBulk) DoNothing() *AchivementUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AchivementCreateBulk.OnConflict
// documentation for more info.
func (u *AchivementUpsertBulk) Update(set func(*AchivementUpsert)) *AchivementUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AchivementUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *AchivementUpsertBulk) SetCreatedAt(v uint32) *AchivementUpsertBulk {
	return u.Update(func(s *AchivementUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *AchivementUpsertBulk) AddCreatedAt(v uint32) *AchivementUpsertBulk {
	return u.Update(func(s *AchivementUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *AchivementUpsertBulk) UpdateCreatedAt() *AchivementUpsertBulk {
	return u.Update(func(s *AchivementUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *AchivementUpsertBulk) SetUpdatedAt(v uint32) *AchivementUpsertBulk {
	return u.Update(func(s *AchivementUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *AchivementUpsertBulk) AddUpdatedAt(v uint32) *AchivementUpsertBulk {
	return u.Update(func(s *AchivementUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AchivementUpsertBulk) UpdateUpdatedAt() *AchivementUpsertBulk {
	return u.Update(func(s *AchivementUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *AchivementUpsertBulk) SetDeletedAt(v uint32) *AchivementUpsertBulk {
	return u.Update(func(s *AchivementUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *AchivementUpsertBulk) AddDeletedAt(v uint32) *AchivementUpsertBulk {
	return u.Update(func(s *AchivementUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *AchivementUpsertBulk) UpdateDeletedAt() *AchivementUpsertBulk {
	return u.Update(func(s *AchivementUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetAppID sets the "app_id" field.
func (u *AchivementUpsertBulk) SetAppID(v uuid.UUID) *AchivementUpsertBulk {
	return u.Update(func(s *AchivementUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *AchivementUpsertBulk) UpdateAppID() *AchivementUpsertBulk {
	return u.Update(func(s *AchivementUpsert) {
		s.UpdateAppID()
	})
}

// ClearAppID clears the value of the "app_id" field.
func (u *AchivementUpsertBulk) ClearAppID() *AchivementUpsertBulk {
	return u.Update(func(s *AchivementUpsert) {
		s.ClearAppID()
	})
}

// SetUserID sets the "user_id" field.
func (u *AchivementUpsertBulk) SetUserID(v uuid.UUID) *AchivementUpsertBulk {
	return u.Update(func(s *AchivementUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *AchivementUpsertBulk) UpdateUserID() *AchivementUpsertBulk {
	return u.Update(func(s *AchivementUpsert) {
		s.UpdateUserID()
	})
}

// ClearUserID clears the value of the "user_id" field.
func (u *AchivementUpsertBulk) ClearUserID() *AchivementUpsertBulk {
	return u.Update(func(s *AchivementUpsert) {
		s.ClearUserID()
	})
}

// SetGoodID sets the "good_id" field.
func (u *AchivementUpsertBulk) SetGoodID(v uuid.UUID) *AchivementUpsertBulk {
	return u.Update(func(s *AchivementUpsert) {
		s.SetGoodID(v)
	})
}

// UpdateGoodID sets the "good_id" field to the value that was provided on create.
func (u *AchivementUpsertBulk) UpdateGoodID() *AchivementUpsertBulk {
	return u.Update(func(s *AchivementUpsert) {
		s.UpdateGoodID()
	})
}

// ClearGoodID clears the value of the "good_id" field.
func (u *AchivementUpsertBulk) ClearGoodID() *AchivementUpsertBulk {
	return u.Update(func(s *AchivementUpsert) {
		s.ClearGoodID()
	})
}

// SetCoinTypeID sets the "coin_type_id" field.
func (u *AchivementUpsertBulk) SetCoinTypeID(v uuid.UUID) *AchivementUpsertBulk {
	return u.Update(func(s *AchivementUpsert) {
		s.SetCoinTypeID(v)
	})
}

// UpdateCoinTypeID sets the "coin_type_id" field to the value that was provided on create.
func (u *AchivementUpsertBulk) UpdateCoinTypeID() *AchivementUpsertBulk {
	return u.Update(func(s *AchivementUpsert) {
		s.UpdateCoinTypeID()
	})
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (u *AchivementUpsertBulk) ClearCoinTypeID() *AchivementUpsertBulk {
	return u.Update(func(s *AchivementUpsert) {
		s.ClearCoinTypeID()
	})
}

// SetTotalUnitsV1 sets the "total_units_v1" field.
func (u *AchivementUpsertBulk) SetTotalUnitsV1(v decimal.Decimal) *AchivementUpsertBulk {
	return u.Update(func(s *AchivementUpsert) {
		s.SetTotalUnitsV1(v)
	})
}

// UpdateTotalUnitsV1 sets the "total_units_v1" field to the value that was provided on create.
func (u *AchivementUpsertBulk) UpdateTotalUnitsV1() *AchivementUpsertBulk {
	return u.Update(func(s *AchivementUpsert) {
		s.UpdateTotalUnitsV1()
	})
}

// ClearTotalUnitsV1 clears the value of the "total_units_v1" field.
func (u *AchivementUpsertBulk) ClearTotalUnitsV1() *AchivementUpsertBulk {
	return u.Update(func(s *AchivementUpsert) {
		s.ClearTotalUnitsV1()
	})
}

// SetSelfUnitsV1 sets the "self_units_v1" field.
func (u *AchivementUpsertBulk) SetSelfUnitsV1(v decimal.Decimal) *AchivementUpsertBulk {
	return u.Update(func(s *AchivementUpsert) {
		s.SetSelfUnitsV1(v)
	})
}

// UpdateSelfUnitsV1 sets the "self_units_v1" field to the value that was provided on create.
func (u *AchivementUpsertBulk) UpdateSelfUnitsV1() *AchivementUpsertBulk {
	return u.Update(func(s *AchivementUpsert) {
		s.UpdateSelfUnitsV1()
	})
}

// ClearSelfUnitsV1 clears the value of the "self_units_v1" field.
func (u *AchivementUpsertBulk) ClearSelfUnitsV1() *AchivementUpsertBulk {
	return u.Update(func(s *AchivementUpsert) {
		s.ClearSelfUnitsV1()
	})
}

// SetTotalAmount sets the "total_amount" field.
func (u *AchivementUpsertBulk) SetTotalAmount(v decimal.Decimal) *AchivementUpsertBulk {
	return u.Update(func(s *AchivementUpsert) {
		s.SetTotalAmount(v)
	})
}

// UpdateTotalAmount sets the "total_amount" field to the value that was provided on create.
func (u *AchivementUpsertBulk) UpdateTotalAmount() *AchivementUpsertBulk {
	return u.Update(func(s *AchivementUpsert) {
		s.UpdateTotalAmount()
	})
}

// ClearTotalAmount clears the value of the "total_amount" field.
func (u *AchivementUpsertBulk) ClearTotalAmount() *AchivementUpsertBulk {
	return u.Update(func(s *AchivementUpsert) {
		s.ClearTotalAmount()
	})
}

// SetSelfAmount sets the "self_amount" field.
func (u *AchivementUpsertBulk) SetSelfAmount(v decimal.Decimal) *AchivementUpsertBulk {
	return u.Update(func(s *AchivementUpsert) {
		s.SetSelfAmount(v)
	})
}

// UpdateSelfAmount sets the "self_amount" field to the value that was provided on create.
func (u *AchivementUpsertBulk) UpdateSelfAmount() *AchivementUpsertBulk {
	return u.Update(func(s *AchivementUpsert) {
		s.UpdateSelfAmount()
	})
}

// ClearSelfAmount clears the value of the "self_amount" field.
func (u *AchivementUpsertBulk) ClearSelfAmount() *AchivementUpsertBulk {
	return u.Update(func(s *AchivementUpsert) {
		s.ClearSelfAmount()
	})
}

// SetTotalCommission sets the "total_commission" field.
func (u *AchivementUpsertBulk) SetTotalCommission(v decimal.Decimal) *AchivementUpsertBulk {
	return u.Update(func(s *AchivementUpsert) {
		s.SetTotalCommission(v)
	})
}

// UpdateTotalCommission sets the "total_commission" field to the value that was provided on create.
func (u *AchivementUpsertBulk) UpdateTotalCommission() *AchivementUpsertBulk {
	return u.Update(func(s *AchivementUpsert) {
		s.UpdateTotalCommission()
	})
}

// ClearTotalCommission clears the value of the "total_commission" field.
func (u *AchivementUpsertBulk) ClearTotalCommission() *AchivementUpsertBulk {
	return u.Update(func(s *AchivementUpsert) {
		s.ClearTotalCommission()
	})
}

// SetSelfCommission sets the "self_commission" field.
func (u *AchivementUpsertBulk) SetSelfCommission(v decimal.Decimal) *AchivementUpsertBulk {
	return u.Update(func(s *AchivementUpsert) {
		s.SetSelfCommission(v)
	})
}

// UpdateSelfCommission sets the "self_commission" field to the value that was provided on create.
func (u *AchivementUpsertBulk) UpdateSelfCommission() *AchivementUpsertBulk {
	return u.Update(func(s *AchivementUpsert) {
		s.UpdateSelfCommission()
	})
}

// ClearSelfCommission clears the value of the "self_commission" field.
func (u *AchivementUpsertBulk) ClearSelfCommission() *AchivementUpsertBulk {
	return u.Update(func(s *AchivementUpsert) {
		s.ClearSelfCommission()
	})
}

// Exec executes the query.
func (u *AchivementUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the AchivementCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AchivementCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AchivementUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
