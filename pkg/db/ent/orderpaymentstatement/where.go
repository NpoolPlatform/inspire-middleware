// Code generated by ent, DO NOT EDIT.

package orderpaymentstatement

import (
	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/inspire-middleware/pkg/db/ent/predicate"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// ID filters vertices based on their ID field.
func ID(id uint32) predicate.OrderPaymentStatement {
	return predicate.OrderPaymentStatement(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint32) predicate.OrderPaymentStatement {
	return predicate.OrderPaymentStatement(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint32) predicate.OrderPaymentStatement {
	return predicate.OrderPaymentStatement(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint32) predicate.OrderPaymentStatement {
	return predicate.OrderPaymentStatement(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint32) predicate.OrderPaymentStatement {
	return predicate.OrderPaymentStatement(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint32) predicate.OrderPaymentStatement {
	return predicate.OrderPaymentStatement(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint32) predicate.OrderPaymentStatement {
	return predicate.OrderPaymentStatement(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint32) predicate.OrderPaymentStatement {
	return predicate.OrderPaymentStatement(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint32) predicate.OrderPaymentStatement {
	return predicate.OrderPaymentStatement(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v uint32) predicate.OrderPaymentStatement {
	return predicate.OrderPaymentStatement(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v uint32) predicate.OrderPaymentStatement {
	return predicate.OrderPaymentStatement(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v uint32) predicate.OrderPaymentStatement {
	return predicate.OrderPaymentStatement(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// EntID applies equality check predicate on the "ent_id" field. It's identical to EntIDEQ.
func EntID(v uuid.UUID) predicate.OrderPaymentStatement {
	return predicate.OrderPaymentStatement(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEntID), v))
	})
}

// StatementID applies equality check predicate on the "statement_id" field. It's identical to StatementIDEQ.
func StatementID(v uuid.UUID) predicate.OrderPaymentStatement {
	return predicate.OrderPaymentStatement(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatementID), v))
	})
}

// PaymentCoinTypeID applies equality check predicate on the "payment_coin_type_id" field. It's identical to PaymentCoinTypeIDEQ.
func PaymentCoinTypeID(v uuid.UUID) predicate.OrderPaymentStatement {
	return predicate.OrderPaymentStatement(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPaymentCoinTypeID), v))
	})
}

// Amount applies equality check predicate on the "amount" field. It's identical to AmountEQ.
func Amount(v decimal.Decimal) predicate.OrderPaymentStatement {
	return predicate.OrderPaymentStatement(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAmount), v))
	})
}

// CommissionAmount applies equality check predicate on the "commission_amount" field. It's identical to CommissionAmountEQ.
func CommissionAmount(v decimal.Decimal) predicate.OrderPaymentStatement {
	return predicate.OrderPaymentStatement(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCommissionAmount), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v uint32) predicate.OrderPaymentStatement {
	return predicate.OrderPaymentStatement(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v uint32) predicate.OrderPaymentStatement {
	return predicate.OrderPaymentStatement(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...uint32) predicate.OrderPaymentStatement {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderPaymentStatement(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...uint32) predicate.OrderPaymentStatement {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderPaymentStatement(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v uint32) predicate.OrderPaymentStatement {
	return predicate.OrderPaymentStatement(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v uint32) predicate.OrderPaymentStatement {
	return predicate.OrderPaymentStatement(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v uint32) predicate.OrderPaymentStatement {
	return predicate.OrderPaymentStatement(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v uint32) predicate.OrderPaymentStatement {
	return predicate.OrderPaymentStatement(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v uint32) predicate.OrderPaymentStatement {
	return predicate.OrderPaymentStatement(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v uint32) predicate.OrderPaymentStatement {
	return predicate.OrderPaymentStatement(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...uint32) predicate.OrderPaymentStatement {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderPaymentStatement(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...uint32) predicate.OrderPaymentStatement {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderPaymentStatement(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v uint32) predicate.OrderPaymentStatement {
	return predicate.OrderPaymentStatement(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v uint32) predicate.OrderPaymentStatement {
	return predicate.OrderPaymentStatement(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v uint32) predicate.OrderPaymentStatement {
	return predicate.OrderPaymentStatement(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v uint32) predicate.OrderPaymentStatement {
	return predicate.OrderPaymentStatement(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v uint32) predicate.OrderPaymentStatement {
	return predicate.OrderPaymentStatement(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v uint32) predicate.OrderPaymentStatement {
	return predicate.OrderPaymentStatement(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...uint32) predicate.OrderPaymentStatement {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderPaymentStatement(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...uint32) predicate.OrderPaymentStatement {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderPaymentStatement(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v uint32) predicate.OrderPaymentStatement {
	return predicate.OrderPaymentStatement(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v uint32) predicate.OrderPaymentStatement {
	return predicate.OrderPaymentStatement(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v uint32) predicate.OrderPaymentStatement {
	return predicate.OrderPaymentStatement(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v uint32) predicate.OrderPaymentStatement {
	return predicate.OrderPaymentStatement(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeletedAt), v))
	})
}

// EntIDEQ applies the EQ predicate on the "ent_id" field.
func EntIDEQ(v uuid.UUID) predicate.OrderPaymentStatement {
	return predicate.OrderPaymentStatement(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEntID), v))
	})
}

// EntIDNEQ applies the NEQ predicate on the "ent_id" field.
func EntIDNEQ(v uuid.UUID) predicate.OrderPaymentStatement {
	return predicate.OrderPaymentStatement(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEntID), v))
	})
}

// EntIDIn applies the In predicate on the "ent_id" field.
func EntIDIn(vs ...uuid.UUID) predicate.OrderPaymentStatement {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderPaymentStatement(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldEntID), v...))
	})
}

// EntIDNotIn applies the NotIn predicate on the "ent_id" field.
func EntIDNotIn(vs ...uuid.UUID) predicate.OrderPaymentStatement {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderPaymentStatement(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldEntID), v...))
	})
}

// EntIDGT applies the GT predicate on the "ent_id" field.
func EntIDGT(v uuid.UUID) predicate.OrderPaymentStatement {
	return predicate.OrderPaymentStatement(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEntID), v))
	})
}

// EntIDGTE applies the GTE predicate on the "ent_id" field.
func EntIDGTE(v uuid.UUID) predicate.OrderPaymentStatement {
	return predicate.OrderPaymentStatement(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEntID), v))
	})
}

// EntIDLT applies the LT predicate on the "ent_id" field.
func EntIDLT(v uuid.UUID) predicate.OrderPaymentStatement {
	return predicate.OrderPaymentStatement(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEntID), v))
	})
}

// EntIDLTE applies the LTE predicate on the "ent_id" field.
func EntIDLTE(v uuid.UUID) predicate.OrderPaymentStatement {
	return predicate.OrderPaymentStatement(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEntID), v))
	})
}

// StatementIDEQ applies the EQ predicate on the "statement_id" field.
func StatementIDEQ(v uuid.UUID) predicate.OrderPaymentStatement {
	return predicate.OrderPaymentStatement(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatementID), v))
	})
}

// StatementIDNEQ applies the NEQ predicate on the "statement_id" field.
func StatementIDNEQ(v uuid.UUID) predicate.OrderPaymentStatement {
	return predicate.OrderPaymentStatement(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStatementID), v))
	})
}

// StatementIDIn applies the In predicate on the "statement_id" field.
func StatementIDIn(vs ...uuid.UUID) predicate.OrderPaymentStatement {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderPaymentStatement(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldStatementID), v...))
	})
}

// StatementIDNotIn applies the NotIn predicate on the "statement_id" field.
func StatementIDNotIn(vs ...uuid.UUID) predicate.OrderPaymentStatement {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderPaymentStatement(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldStatementID), v...))
	})
}

// StatementIDGT applies the GT predicate on the "statement_id" field.
func StatementIDGT(v uuid.UUID) predicate.OrderPaymentStatement {
	return predicate.OrderPaymentStatement(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStatementID), v))
	})
}

// StatementIDGTE applies the GTE predicate on the "statement_id" field.
func StatementIDGTE(v uuid.UUID) predicate.OrderPaymentStatement {
	return predicate.OrderPaymentStatement(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStatementID), v))
	})
}

// StatementIDLT applies the LT predicate on the "statement_id" field.
func StatementIDLT(v uuid.UUID) predicate.OrderPaymentStatement {
	return predicate.OrderPaymentStatement(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStatementID), v))
	})
}

// StatementIDLTE applies the LTE predicate on the "statement_id" field.
func StatementIDLTE(v uuid.UUID) predicate.OrderPaymentStatement {
	return predicate.OrderPaymentStatement(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStatementID), v))
	})
}

// StatementIDIsNil applies the IsNil predicate on the "statement_id" field.
func StatementIDIsNil() predicate.OrderPaymentStatement {
	return predicate.OrderPaymentStatement(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldStatementID)))
	})
}

// StatementIDNotNil applies the NotNil predicate on the "statement_id" field.
func StatementIDNotNil() predicate.OrderPaymentStatement {
	return predicate.OrderPaymentStatement(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldStatementID)))
	})
}

// PaymentCoinTypeIDEQ applies the EQ predicate on the "payment_coin_type_id" field.
func PaymentCoinTypeIDEQ(v uuid.UUID) predicate.OrderPaymentStatement {
	return predicate.OrderPaymentStatement(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPaymentCoinTypeID), v))
	})
}

// PaymentCoinTypeIDNEQ applies the NEQ predicate on the "payment_coin_type_id" field.
func PaymentCoinTypeIDNEQ(v uuid.UUID) predicate.OrderPaymentStatement {
	return predicate.OrderPaymentStatement(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPaymentCoinTypeID), v))
	})
}

// PaymentCoinTypeIDIn applies the In predicate on the "payment_coin_type_id" field.
func PaymentCoinTypeIDIn(vs ...uuid.UUID) predicate.OrderPaymentStatement {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderPaymentStatement(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldPaymentCoinTypeID), v...))
	})
}

// PaymentCoinTypeIDNotIn applies the NotIn predicate on the "payment_coin_type_id" field.
func PaymentCoinTypeIDNotIn(vs ...uuid.UUID) predicate.OrderPaymentStatement {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderPaymentStatement(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldPaymentCoinTypeID), v...))
	})
}

// PaymentCoinTypeIDGT applies the GT predicate on the "payment_coin_type_id" field.
func PaymentCoinTypeIDGT(v uuid.UUID) predicate.OrderPaymentStatement {
	return predicate.OrderPaymentStatement(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPaymentCoinTypeID), v))
	})
}

// PaymentCoinTypeIDGTE applies the GTE predicate on the "payment_coin_type_id" field.
func PaymentCoinTypeIDGTE(v uuid.UUID) predicate.OrderPaymentStatement {
	return predicate.OrderPaymentStatement(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPaymentCoinTypeID), v))
	})
}

// PaymentCoinTypeIDLT applies the LT predicate on the "payment_coin_type_id" field.
func PaymentCoinTypeIDLT(v uuid.UUID) predicate.OrderPaymentStatement {
	return predicate.OrderPaymentStatement(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPaymentCoinTypeID), v))
	})
}

// PaymentCoinTypeIDLTE applies the LTE predicate on the "payment_coin_type_id" field.
func PaymentCoinTypeIDLTE(v uuid.UUID) predicate.OrderPaymentStatement {
	return predicate.OrderPaymentStatement(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPaymentCoinTypeID), v))
	})
}

// PaymentCoinTypeIDIsNil applies the IsNil predicate on the "payment_coin_type_id" field.
func PaymentCoinTypeIDIsNil() predicate.OrderPaymentStatement {
	return predicate.OrderPaymentStatement(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldPaymentCoinTypeID)))
	})
}

// PaymentCoinTypeIDNotNil applies the NotNil predicate on the "payment_coin_type_id" field.
func PaymentCoinTypeIDNotNil() predicate.OrderPaymentStatement {
	return predicate.OrderPaymentStatement(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldPaymentCoinTypeID)))
	})
}

// AmountEQ applies the EQ predicate on the "amount" field.
func AmountEQ(v decimal.Decimal) predicate.OrderPaymentStatement {
	return predicate.OrderPaymentStatement(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAmount), v))
	})
}

// AmountNEQ applies the NEQ predicate on the "amount" field.
func AmountNEQ(v decimal.Decimal) predicate.OrderPaymentStatement {
	return predicate.OrderPaymentStatement(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAmount), v))
	})
}

// AmountIn applies the In predicate on the "amount" field.
func AmountIn(vs ...decimal.Decimal) predicate.OrderPaymentStatement {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderPaymentStatement(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldAmount), v...))
	})
}

// AmountNotIn applies the NotIn predicate on the "amount" field.
func AmountNotIn(vs ...decimal.Decimal) predicate.OrderPaymentStatement {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderPaymentStatement(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldAmount), v...))
	})
}

// AmountGT applies the GT predicate on the "amount" field.
func AmountGT(v decimal.Decimal) predicate.OrderPaymentStatement {
	return predicate.OrderPaymentStatement(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAmount), v))
	})
}

// AmountGTE applies the GTE predicate on the "amount" field.
func AmountGTE(v decimal.Decimal) predicate.OrderPaymentStatement {
	return predicate.OrderPaymentStatement(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAmount), v))
	})
}

// AmountLT applies the LT predicate on the "amount" field.
func AmountLT(v decimal.Decimal) predicate.OrderPaymentStatement {
	return predicate.OrderPaymentStatement(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAmount), v))
	})
}

// AmountLTE applies the LTE predicate on the "amount" field.
func AmountLTE(v decimal.Decimal) predicate.OrderPaymentStatement {
	return predicate.OrderPaymentStatement(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAmount), v))
	})
}

// AmountIsNil applies the IsNil predicate on the "amount" field.
func AmountIsNil() predicate.OrderPaymentStatement {
	return predicate.OrderPaymentStatement(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldAmount)))
	})
}

// AmountNotNil applies the NotNil predicate on the "amount" field.
func AmountNotNil() predicate.OrderPaymentStatement {
	return predicate.OrderPaymentStatement(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldAmount)))
	})
}

// CommissionAmountEQ applies the EQ predicate on the "commission_amount" field.
func CommissionAmountEQ(v decimal.Decimal) predicate.OrderPaymentStatement {
	return predicate.OrderPaymentStatement(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCommissionAmount), v))
	})
}

// CommissionAmountNEQ applies the NEQ predicate on the "commission_amount" field.
func CommissionAmountNEQ(v decimal.Decimal) predicate.OrderPaymentStatement {
	return predicate.OrderPaymentStatement(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCommissionAmount), v))
	})
}

// CommissionAmountIn applies the In predicate on the "commission_amount" field.
func CommissionAmountIn(vs ...decimal.Decimal) predicate.OrderPaymentStatement {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderPaymentStatement(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCommissionAmount), v...))
	})
}

// CommissionAmountNotIn applies the NotIn predicate on the "commission_amount" field.
func CommissionAmountNotIn(vs ...decimal.Decimal) predicate.OrderPaymentStatement {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderPaymentStatement(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCommissionAmount), v...))
	})
}

// CommissionAmountGT applies the GT predicate on the "commission_amount" field.
func CommissionAmountGT(v decimal.Decimal) predicate.OrderPaymentStatement {
	return predicate.OrderPaymentStatement(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCommissionAmount), v))
	})
}

// CommissionAmountGTE applies the GTE predicate on the "commission_amount" field.
func CommissionAmountGTE(v decimal.Decimal) predicate.OrderPaymentStatement {
	return predicate.OrderPaymentStatement(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCommissionAmount), v))
	})
}

// CommissionAmountLT applies the LT predicate on the "commission_amount" field.
func CommissionAmountLT(v decimal.Decimal) predicate.OrderPaymentStatement {
	return predicate.OrderPaymentStatement(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCommissionAmount), v))
	})
}

// CommissionAmountLTE applies the LTE predicate on the "commission_amount" field.
func CommissionAmountLTE(v decimal.Decimal) predicate.OrderPaymentStatement {
	return predicate.OrderPaymentStatement(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCommissionAmount), v))
	})
}

// CommissionAmountIsNil applies the IsNil predicate on the "commission_amount" field.
func CommissionAmountIsNil() predicate.OrderPaymentStatement {
	return predicate.OrderPaymentStatement(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCommissionAmount)))
	})
}

// CommissionAmountNotNil applies the NotNil predicate on the "commission_amount" field.
func CommissionAmountNotNil() predicate.OrderPaymentStatement {
	return predicate.OrderPaymentStatement(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCommissionAmount)))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.OrderPaymentStatement) predicate.OrderPaymentStatement {
	return predicate.OrderPaymentStatement(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.OrderPaymentStatement) predicate.OrderPaymentStatement {
	return predicate.OrderPaymentStatement(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.OrderPaymentStatement) predicate.OrderPaymentStatement {
	return predicate.OrderPaymentStatement(func(s *sql.Selector) {
		p(s.Not())
	})
}
