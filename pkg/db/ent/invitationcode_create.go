// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/inspire-middleware/pkg/db/ent/invitationcode"
	"github.com/google/uuid"
)

// InvitationCodeCreate is the builder for creating a InvitationCode entity.
type InvitationCodeCreate struct {
	config
	mutation *InvitationCodeMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (icc *InvitationCodeCreate) SetCreatedAt(u uint32) *InvitationCodeCreate {
	icc.mutation.SetCreatedAt(u)
	return icc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (icc *InvitationCodeCreate) SetNillableCreatedAt(u *uint32) *InvitationCodeCreate {
	if u != nil {
		icc.SetCreatedAt(*u)
	}
	return icc
}

// SetUpdatedAt sets the "updated_at" field.
func (icc *InvitationCodeCreate) SetUpdatedAt(u uint32) *InvitationCodeCreate {
	icc.mutation.SetUpdatedAt(u)
	return icc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (icc *InvitationCodeCreate) SetNillableUpdatedAt(u *uint32) *InvitationCodeCreate {
	if u != nil {
		icc.SetUpdatedAt(*u)
	}
	return icc
}

// SetDeletedAt sets the "deleted_at" field.
func (icc *InvitationCodeCreate) SetDeletedAt(u uint32) *InvitationCodeCreate {
	icc.mutation.SetDeletedAt(u)
	return icc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (icc *InvitationCodeCreate) SetNillableDeletedAt(u *uint32) *InvitationCodeCreate {
	if u != nil {
		icc.SetDeletedAt(*u)
	}
	return icc
}

// SetAppID sets the "app_id" field.
func (icc *InvitationCodeCreate) SetAppID(u uuid.UUID) *InvitationCodeCreate {
	icc.mutation.SetAppID(u)
	return icc
}

// SetUserID sets the "user_id" field.
func (icc *InvitationCodeCreate) SetUserID(u uuid.UUID) *InvitationCodeCreate {
	icc.mutation.SetUserID(u)
	return icc
}

// SetInvitationCode sets the "invitation_code" field.
func (icc *InvitationCodeCreate) SetInvitationCode(s string) *InvitationCodeCreate {
	icc.mutation.SetInvitationCode(s)
	return icc
}

// SetNillableInvitationCode sets the "invitation_code" field if the given value is not nil.
func (icc *InvitationCodeCreate) SetNillableInvitationCode(s *string) *InvitationCodeCreate {
	if s != nil {
		icc.SetInvitationCode(*s)
	}
	return icc
}

// SetDisabled sets the "disabled" field.
func (icc *InvitationCodeCreate) SetDisabled(b bool) *InvitationCodeCreate {
	icc.mutation.SetDisabled(b)
	return icc
}

// SetNillableDisabled sets the "disabled" field if the given value is not nil.
func (icc *InvitationCodeCreate) SetNillableDisabled(b *bool) *InvitationCodeCreate {
	if b != nil {
		icc.SetDisabled(*b)
	}
	return icc
}

// SetID sets the "id" field.
func (icc *InvitationCodeCreate) SetID(u uuid.UUID) *InvitationCodeCreate {
	icc.mutation.SetID(u)
	return icc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (icc *InvitationCodeCreate) SetNillableID(u *uuid.UUID) *InvitationCodeCreate {
	if u != nil {
		icc.SetID(*u)
	}
	return icc
}

// Mutation returns the InvitationCodeMutation object of the builder.
func (icc *InvitationCodeCreate) Mutation() *InvitationCodeMutation {
	return icc.mutation
}

// Save creates the InvitationCode in the database.
func (icc *InvitationCodeCreate) Save(ctx context.Context) (*InvitationCode, error) {
	var (
		err  error
		node *InvitationCode
	)
	if err := icc.defaults(); err != nil {
		return nil, err
	}
	if len(icc.hooks) == 0 {
		if err = icc.check(); err != nil {
			return nil, err
		}
		node, err = icc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*InvitationCodeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = icc.check(); err != nil {
				return nil, err
			}
			icc.mutation = mutation
			if node, err = icc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(icc.hooks) - 1; i >= 0; i-- {
			if icc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = icc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, icc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*InvitationCode)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from InvitationCodeMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (icc *InvitationCodeCreate) SaveX(ctx context.Context) *InvitationCode {
	v, err := icc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (icc *InvitationCodeCreate) Exec(ctx context.Context) error {
	_, err := icc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (icc *InvitationCodeCreate) ExecX(ctx context.Context) {
	if err := icc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (icc *InvitationCodeCreate) defaults() error {
	if _, ok := icc.mutation.CreatedAt(); !ok {
		if invitationcode.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized invitationcode.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := invitationcode.DefaultCreatedAt()
		icc.mutation.SetCreatedAt(v)
	}
	if _, ok := icc.mutation.UpdatedAt(); !ok {
		if invitationcode.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized invitationcode.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := invitationcode.DefaultUpdatedAt()
		icc.mutation.SetUpdatedAt(v)
	}
	if _, ok := icc.mutation.DeletedAt(); !ok {
		if invitationcode.DefaultDeletedAt == nil {
			return fmt.Errorf("ent: uninitialized invitationcode.DefaultDeletedAt (forgotten import ent/runtime?)")
		}
		v := invitationcode.DefaultDeletedAt()
		icc.mutation.SetDeletedAt(v)
	}
	if _, ok := icc.mutation.InvitationCode(); !ok {
		v := invitationcode.DefaultInvitationCode
		icc.mutation.SetInvitationCode(v)
	}
	if _, ok := icc.mutation.Disabled(); !ok {
		v := invitationcode.DefaultDisabled
		icc.mutation.SetDisabled(v)
	}
	if _, ok := icc.mutation.ID(); !ok {
		if invitationcode.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized invitationcode.DefaultID (forgotten import ent/runtime?)")
		}
		v := invitationcode.DefaultID()
		icc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (icc *InvitationCodeCreate) check() error {
	if _, ok := icc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "InvitationCode.created_at"`)}
	}
	if _, ok := icc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "InvitationCode.updated_at"`)}
	}
	if _, ok := icc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`ent: missing required field "InvitationCode.deleted_at"`)}
	}
	if _, ok := icc.mutation.AppID(); !ok {
		return &ValidationError{Name: "app_id", err: errors.New(`ent: missing required field "InvitationCode.app_id"`)}
	}
	if _, ok := icc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "InvitationCode.user_id"`)}
	}
	return nil
}

func (icc *InvitationCodeCreate) sqlSave(ctx context.Context) (*InvitationCode, error) {
	_node, _spec := icc.createSpec()
	if err := sqlgraph.CreateNode(ctx, icc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (icc *InvitationCodeCreate) createSpec() (*InvitationCode, *sqlgraph.CreateSpec) {
	var (
		_node = &InvitationCode{config: icc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: invitationcode.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: invitationcode.FieldID,
			},
		}
	)
	_spec.OnConflict = icc.conflict
	if id, ok := icc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := icc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: invitationcode.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := icc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: invitationcode.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := icc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: invitationcode.FieldDeletedAt,
		})
		_node.DeletedAt = value
	}
	if value, ok := icc.mutation.AppID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: invitationcode.FieldAppID,
		})
		_node.AppID = value
	}
	if value, ok := icc.mutation.UserID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: invitationcode.FieldUserID,
		})
		_node.UserID = value
	}
	if value, ok := icc.mutation.InvitationCode(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: invitationcode.FieldInvitationCode,
		})
		_node.InvitationCode = value
	}
	if value, ok := icc.mutation.Disabled(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: invitationcode.FieldDisabled,
		})
		_node.Disabled = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.InvitationCode.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.InvitationCodeUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (icc *InvitationCodeCreate) OnConflict(opts ...sql.ConflictOption) *InvitationCodeUpsertOne {
	icc.conflict = opts
	return &InvitationCodeUpsertOne{
		create: icc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.InvitationCode.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (icc *InvitationCodeCreate) OnConflictColumns(columns ...string) *InvitationCodeUpsertOne {
	icc.conflict = append(icc.conflict, sql.ConflictColumns(columns...))
	return &InvitationCodeUpsertOne{
		create: icc,
	}
}

type (
	// InvitationCodeUpsertOne is the builder for "upsert"-ing
	//  one InvitationCode node.
	InvitationCodeUpsertOne struct {
		create *InvitationCodeCreate
	}

	// InvitationCodeUpsert is the "OnConflict" setter.
	InvitationCodeUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *InvitationCodeUpsert) SetCreatedAt(v uint32) *InvitationCodeUpsert {
	u.Set(invitationcode.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *InvitationCodeUpsert) UpdateCreatedAt() *InvitationCodeUpsert {
	u.SetExcluded(invitationcode.FieldCreatedAt)
	return u
}

// AddCreatedAt adds v to the "created_at" field.
func (u *InvitationCodeUpsert) AddCreatedAt(v uint32) *InvitationCodeUpsert {
	u.Add(invitationcode.FieldCreatedAt, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *InvitationCodeUpsert) SetUpdatedAt(v uint32) *InvitationCodeUpsert {
	u.Set(invitationcode.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *InvitationCodeUpsert) UpdateUpdatedAt() *InvitationCodeUpsert {
	u.SetExcluded(invitationcode.FieldUpdatedAt)
	return u
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *InvitationCodeUpsert) AddUpdatedAt(v uint32) *InvitationCodeUpsert {
	u.Add(invitationcode.FieldUpdatedAt, v)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *InvitationCodeUpsert) SetDeletedAt(v uint32) *InvitationCodeUpsert {
	u.Set(invitationcode.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *InvitationCodeUpsert) UpdateDeletedAt() *InvitationCodeUpsert {
	u.SetExcluded(invitationcode.FieldDeletedAt)
	return u
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *InvitationCodeUpsert) AddDeletedAt(v uint32) *InvitationCodeUpsert {
	u.Add(invitationcode.FieldDeletedAt, v)
	return u
}

// SetAppID sets the "app_id" field.
func (u *InvitationCodeUpsert) SetAppID(v uuid.UUID) *InvitationCodeUpsert {
	u.Set(invitationcode.FieldAppID, v)
	return u
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *InvitationCodeUpsert) UpdateAppID() *InvitationCodeUpsert {
	u.SetExcluded(invitationcode.FieldAppID)
	return u
}

// SetUserID sets the "user_id" field.
func (u *InvitationCodeUpsert) SetUserID(v uuid.UUID) *InvitationCodeUpsert {
	u.Set(invitationcode.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *InvitationCodeUpsert) UpdateUserID() *InvitationCodeUpsert {
	u.SetExcluded(invitationcode.FieldUserID)
	return u
}

// SetInvitationCode sets the "invitation_code" field.
func (u *InvitationCodeUpsert) SetInvitationCode(v string) *InvitationCodeUpsert {
	u.Set(invitationcode.FieldInvitationCode, v)
	return u
}

// UpdateInvitationCode sets the "invitation_code" field to the value that was provided on create.
func (u *InvitationCodeUpsert) UpdateInvitationCode() *InvitationCodeUpsert {
	u.SetExcluded(invitationcode.FieldInvitationCode)
	return u
}

// ClearInvitationCode clears the value of the "invitation_code" field.
func (u *InvitationCodeUpsert) ClearInvitationCode() *InvitationCodeUpsert {
	u.SetNull(invitationcode.FieldInvitationCode)
	return u
}

// SetDisabled sets the "disabled" field.
func (u *InvitationCodeUpsert) SetDisabled(v bool) *InvitationCodeUpsert {
	u.Set(invitationcode.FieldDisabled, v)
	return u
}

// UpdateDisabled sets the "disabled" field to the value that was provided on create.
func (u *InvitationCodeUpsert) UpdateDisabled() *InvitationCodeUpsert {
	u.SetExcluded(invitationcode.FieldDisabled)
	return u
}

// ClearDisabled clears the value of the "disabled" field.
func (u *InvitationCodeUpsert) ClearDisabled() *InvitationCodeUpsert {
	u.SetNull(invitationcode.FieldDisabled)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.InvitationCode.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(invitationcode.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *InvitationCodeUpsertOne) UpdateNewValues() *InvitationCodeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(invitationcode.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.InvitationCode.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *InvitationCodeUpsertOne) Ignore() *InvitationCodeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *InvitationCodeUpsertOne) DoNothing() *InvitationCodeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the InvitationCodeCreate.OnConflict
// documentation for more info.
func (u *InvitationCodeUpsertOne) Update(set func(*InvitationCodeUpsert)) *InvitationCodeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&InvitationCodeUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *InvitationCodeUpsertOne) SetCreatedAt(v uint32) *InvitationCodeUpsertOne {
	return u.Update(func(s *InvitationCodeUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *InvitationCodeUpsertOne) AddCreatedAt(v uint32) *InvitationCodeUpsertOne {
	return u.Update(func(s *InvitationCodeUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *InvitationCodeUpsertOne) UpdateCreatedAt() *InvitationCodeUpsertOne {
	return u.Update(func(s *InvitationCodeUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *InvitationCodeUpsertOne) SetUpdatedAt(v uint32) *InvitationCodeUpsertOne {
	return u.Update(func(s *InvitationCodeUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *InvitationCodeUpsertOne) AddUpdatedAt(v uint32) *InvitationCodeUpsertOne {
	return u.Update(func(s *InvitationCodeUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *InvitationCodeUpsertOne) UpdateUpdatedAt() *InvitationCodeUpsertOne {
	return u.Update(func(s *InvitationCodeUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *InvitationCodeUpsertOne) SetDeletedAt(v uint32) *InvitationCodeUpsertOne {
	return u.Update(func(s *InvitationCodeUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *InvitationCodeUpsertOne) AddDeletedAt(v uint32) *InvitationCodeUpsertOne {
	return u.Update(func(s *InvitationCodeUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *InvitationCodeUpsertOne) UpdateDeletedAt() *InvitationCodeUpsertOne {
	return u.Update(func(s *InvitationCodeUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetAppID sets the "app_id" field.
func (u *InvitationCodeUpsertOne) SetAppID(v uuid.UUID) *InvitationCodeUpsertOne {
	return u.Update(func(s *InvitationCodeUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *InvitationCodeUpsertOne) UpdateAppID() *InvitationCodeUpsertOne {
	return u.Update(func(s *InvitationCodeUpsert) {
		s.UpdateAppID()
	})
}

// SetUserID sets the "user_id" field.
func (u *InvitationCodeUpsertOne) SetUserID(v uuid.UUID) *InvitationCodeUpsertOne {
	return u.Update(func(s *InvitationCodeUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *InvitationCodeUpsertOne) UpdateUserID() *InvitationCodeUpsertOne {
	return u.Update(func(s *InvitationCodeUpsert) {
		s.UpdateUserID()
	})
}

// SetInvitationCode sets the "invitation_code" field.
func (u *InvitationCodeUpsertOne) SetInvitationCode(v string) *InvitationCodeUpsertOne {
	return u.Update(func(s *InvitationCodeUpsert) {
		s.SetInvitationCode(v)
	})
}

// UpdateInvitationCode sets the "invitation_code" field to the value that was provided on create.
func (u *InvitationCodeUpsertOne) UpdateInvitationCode() *InvitationCodeUpsertOne {
	return u.Update(func(s *InvitationCodeUpsert) {
		s.UpdateInvitationCode()
	})
}

// ClearInvitationCode clears the value of the "invitation_code" field.
func (u *InvitationCodeUpsertOne) ClearInvitationCode() *InvitationCodeUpsertOne {
	return u.Update(func(s *InvitationCodeUpsert) {
		s.ClearInvitationCode()
	})
}

// SetDisabled sets the "disabled" field.
func (u *InvitationCodeUpsertOne) SetDisabled(v bool) *InvitationCodeUpsertOne {
	return u.Update(func(s *InvitationCodeUpsert) {
		s.SetDisabled(v)
	})
}

// UpdateDisabled sets the "disabled" field to the value that was provided on create.
func (u *InvitationCodeUpsertOne) UpdateDisabled() *InvitationCodeUpsertOne {
	return u.Update(func(s *InvitationCodeUpsert) {
		s.UpdateDisabled()
	})
}

// ClearDisabled clears the value of the "disabled" field.
func (u *InvitationCodeUpsertOne) ClearDisabled() *InvitationCodeUpsertOne {
	return u.Update(func(s *InvitationCodeUpsert) {
		s.ClearDisabled()
	})
}

// Exec executes the query.
func (u *InvitationCodeUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for InvitationCodeCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *InvitationCodeUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *InvitationCodeUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: InvitationCodeUpsertOne.ID is not supported by MySQL driver. Use InvitationCodeUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *InvitationCodeUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// InvitationCodeCreateBulk is the builder for creating many InvitationCode entities in bulk.
type InvitationCodeCreateBulk struct {
	config
	builders []*InvitationCodeCreate
	conflict []sql.ConflictOption
}

// Save creates the InvitationCode entities in the database.
func (iccb *InvitationCodeCreateBulk) Save(ctx context.Context) ([]*InvitationCode, error) {
	specs := make([]*sqlgraph.CreateSpec, len(iccb.builders))
	nodes := make([]*InvitationCode, len(iccb.builders))
	mutators := make([]Mutator, len(iccb.builders))
	for i := range iccb.builders {
		func(i int, root context.Context) {
			builder := iccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*InvitationCodeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, iccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = iccb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, iccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, iccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (iccb *InvitationCodeCreateBulk) SaveX(ctx context.Context) []*InvitationCode {
	v, err := iccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (iccb *InvitationCodeCreateBulk) Exec(ctx context.Context) error {
	_, err := iccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iccb *InvitationCodeCreateBulk) ExecX(ctx context.Context) {
	if err := iccb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.InvitationCode.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.InvitationCodeUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (iccb *InvitationCodeCreateBulk) OnConflict(opts ...sql.ConflictOption) *InvitationCodeUpsertBulk {
	iccb.conflict = opts
	return &InvitationCodeUpsertBulk{
		create: iccb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.InvitationCode.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (iccb *InvitationCodeCreateBulk) OnConflictColumns(columns ...string) *InvitationCodeUpsertBulk {
	iccb.conflict = append(iccb.conflict, sql.ConflictColumns(columns...))
	return &InvitationCodeUpsertBulk{
		create: iccb,
	}
}

// InvitationCodeUpsertBulk is the builder for "upsert"-ing
// a bulk of InvitationCode nodes.
type InvitationCodeUpsertBulk struct {
	create *InvitationCodeCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.InvitationCode.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(invitationcode.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *InvitationCodeUpsertBulk) UpdateNewValues() *InvitationCodeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(invitationcode.FieldID)
				return
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.InvitationCode.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *InvitationCodeUpsertBulk) Ignore() *InvitationCodeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *InvitationCodeUpsertBulk) DoNothing() *InvitationCodeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the InvitationCodeCreateBulk.OnConflict
// documentation for more info.
func (u *InvitationCodeUpsertBulk) Update(set func(*InvitationCodeUpsert)) *InvitationCodeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&InvitationCodeUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *InvitationCodeUpsertBulk) SetCreatedAt(v uint32) *InvitationCodeUpsertBulk {
	return u.Update(func(s *InvitationCodeUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *InvitationCodeUpsertBulk) AddCreatedAt(v uint32) *InvitationCodeUpsertBulk {
	return u.Update(func(s *InvitationCodeUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *InvitationCodeUpsertBulk) UpdateCreatedAt() *InvitationCodeUpsertBulk {
	return u.Update(func(s *InvitationCodeUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *InvitationCodeUpsertBulk) SetUpdatedAt(v uint32) *InvitationCodeUpsertBulk {
	return u.Update(func(s *InvitationCodeUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *InvitationCodeUpsertBulk) AddUpdatedAt(v uint32) *InvitationCodeUpsertBulk {
	return u.Update(func(s *InvitationCodeUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *InvitationCodeUpsertBulk) UpdateUpdatedAt() *InvitationCodeUpsertBulk {
	return u.Update(func(s *InvitationCodeUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *InvitationCodeUpsertBulk) SetDeletedAt(v uint32) *InvitationCodeUpsertBulk {
	return u.Update(func(s *InvitationCodeUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *InvitationCodeUpsertBulk) AddDeletedAt(v uint32) *InvitationCodeUpsertBulk {
	return u.Update(func(s *InvitationCodeUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *InvitationCodeUpsertBulk) UpdateDeletedAt() *InvitationCodeUpsertBulk {
	return u.Update(func(s *InvitationCodeUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetAppID sets the "app_id" field.
func (u *InvitationCodeUpsertBulk) SetAppID(v uuid.UUID) *InvitationCodeUpsertBulk {
	return u.Update(func(s *InvitationCodeUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *InvitationCodeUpsertBulk) UpdateAppID() *InvitationCodeUpsertBulk {
	return u.Update(func(s *InvitationCodeUpsert) {
		s.UpdateAppID()
	})
}

// SetUserID sets the "user_id" field.
func (u *InvitationCodeUpsertBulk) SetUserID(v uuid.UUID) *InvitationCodeUpsertBulk {
	return u.Update(func(s *InvitationCodeUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *InvitationCodeUpsertBulk) UpdateUserID() *InvitationCodeUpsertBulk {
	return u.Update(func(s *InvitationCodeUpsert) {
		s.UpdateUserID()
	})
}

// SetInvitationCode sets the "invitation_code" field.
func (u *InvitationCodeUpsertBulk) SetInvitationCode(v string) *InvitationCodeUpsertBulk {
	return u.Update(func(s *InvitationCodeUpsert) {
		s.SetInvitationCode(v)
	})
}

// UpdateInvitationCode sets the "invitation_code" field to the value that was provided on create.
func (u *InvitationCodeUpsertBulk) UpdateInvitationCode() *InvitationCodeUpsertBulk {
	return u.Update(func(s *InvitationCodeUpsert) {
		s.UpdateInvitationCode()
	})
}

// ClearInvitationCode clears the value of the "invitation_code" field.
func (u *InvitationCodeUpsertBulk) ClearInvitationCode() *InvitationCodeUpsertBulk {
	return u.Update(func(s *InvitationCodeUpsert) {
		s.ClearInvitationCode()
	})
}

// SetDisabled sets the "disabled" field.
func (u *InvitationCodeUpsertBulk) SetDisabled(v bool) *InvitationCodeUpsertBulk {
	return u.Update(func(s *InvitationCodeUpsert) {
		s.SetDisabled(v)
	})
}

// UpdateDisabled sets the "disabled" field to the value that was provided on create.
func (u *InvitationCodeUpsertBulk) UpdateDisabled() *InvitationCodeUpsertBulk {
	return u.Update(func(s *InvitationCodeUpsert) {
		s.UpdateDisabled()
	})
}

// ClearDisabled clears the value of the "disabled" field.
func (u *InvitationCodeUpsertBulk) ClearDisabled() *InvitationCodeUpsertBulk {
	return u.Update(func(s *InvitationCodeUpsert) {
		s.ClearDisabled()
	})
}

// Exec executes the query.
func (u *InvitationCodeUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the InvitationCodeCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for InvitationCodeCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *InvitationCodeUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
