// Code generated by ent, DO NOT EDIT.

package achievementuser

import (
	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/inspire-middleware/pkg/db/ent/predicate"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// ID filters vertices based on their ID field.
func ID(id uint32) predicate.AchievementUser {
	return predicate.AchievementUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint32) predicate.AchievementUser {
	return predicate.AchievementUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint32) predicate.AchievementUser {
	return predicate.AchievementUser(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint32) predicate.AchievementUser {
	return predicate.AchievementUser(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint32) predicate.AchievementUser {
	return predicate.AchievementUser(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint32) predicate.AchievementUser {
	return predicate.AchievementUser(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint32) predicate.AchievementUser {
	return predicate.AchievementUser(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint32) predicate.AchievementUser {
	return predicate.AchievementUser(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint32) predicate.AchievementUser {
	return predicate.AchievementUser(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v uint32) predicate.AchievementUser {
	return predicate.AchievementUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v uint32) predicate.AchievementUser {
	return predicate.AchievementUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v uint32) predicate.AchievementUser {
	return predicate.AchievementUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// EntID applies equality check predicate on the "ent_id" field. It's identical to EntIDEQ.
func EntID(v uuid.UUID) predicate.AchievementUser {
	return predicate.AchievementUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEntID), v))
	})
}

// AppID applies equality check predicate on the "app_id" field. It's identical to AppIDEQ.
func AppID(v uuid.UUID) predicate.AchievementUser {
	return predicate.AchievementUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAppID), v))
	})
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v uuid.UUID) predicate.AchievementUser {
	return predicate.AchievementUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUserID), v))
	})
}

// TotalCommission applies equality check predicate on the "total_commission" field. It's identical to TotalCommissionEQ.
func TotalCommission(v decimal.Decimal) predicate.AchievementUser {
	return predicate.AchievementUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTotalCommission), v))
	})
}

// SelfCommission applies equality check predicate on the "self_commission" field. It's identical to SelfCommissionEQ.
func SelfCommission(v decimal.Decimal) predicate.AchievementUser {
	return predicate.AchievementUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSelfCommission), v))
	})
}

// DirectConsumeAmount applies equality check predicate on the "direct_consume_amount" field. It's identical to DirectConsumeAmountEQ.
func DirectConsumeAmount(v decimal.Decimal) predicate.AchievementUser {
	return predicate.AchievementUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDirectConsumeAmount), v))
	})
}

// InviteeConsumeAmount applies equality check predicate on the "invitee_consume_amount" field. It's identical to InviteeConsumeAmountEQ.
func InviteeConsumeAmount(v decimal.Decimal) predicate.AchievementUser {
	return predicate.AchievementUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldInviteeConsumeAmount), v))
	})
}

// DirectInvitees applies equality check predicate on the "direct_invitees" field. It's identical to DirectInviteesEQ.
func DirectInvitees(v uint32) predicate.AchievementUser {
	return predicate.AchievementUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDirectInvitees), v))
	})
}

// IndirectInvitees applies equality check predicate on the "indirect_invitees" field. It's identical to IndirectInviteesEQ.
func IndirectInvitees(v uint32) predicate.AchievementUser {
	return predicate.AchievementUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIndirectInvitees), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v uint32) predicate.AchievementUser {
	return predicate.AchievementUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v uint32) predicate.AchievementUser {
	return predicate.AchievementUser(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...uint32) predicate.AchievementUser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AchievementUser(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...uint32) predicate.AchievementUser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AchievementUser(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v uint32) predicate.AchievementUser {
	return predicate.AchievementUser(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v uint32) predicate.AchievementUser {
	return predicate.AchievementUser(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v uint32) predicate.AchievementUser {
	return predicate.AchievementUser(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v uint32) predicate.AchievementUser {
	return predicate.AchievementUser(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v uint32) predicate.AchievementUser {
	return predicate.AchievementUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v uint32) predicate.AchievementUser {
	return predicate.AchievementUser(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...uint32) predicate.AchievementUser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AchievementUser(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...uint32) predicate.AchievementUser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AchievementUser(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v uint32) predicate.AchievementUser {
	return predicate.AchievementUser(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v uint32) predicate.AchievementUser {
	return predicate.AchievementUser(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v uint32) predicate.AchievementUser {
	return predicate.AchievementUser(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v uint32) predicate.AchievementUser {
	return predicate.AchievementUser(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v uint32) predicate.AchievementUser {
	return predicate.AchievementUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v uint32) predicate.AchievementUser {
	return predicate.AchievementUser(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...uint32) predicate.AchievementUser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AchievementUser(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...uint32) predicate.AchievementUser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AchievementUser(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v uint32) predicate.AchievementUser {
	return predicate.AchievementUser(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v uint32) predicate.AchievementUser {
	return predicate.AchievementUser(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v uint32) predicate.AchievementUser {
	return predicate.AchievementUser(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v uint32) predicate.AchievementUser {
	return predicate.AchievementUser(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeletedAt), v))
	})
}

// EntIDEQ applies the EQ predicate on the "ent_id" field.
func EntIDEQ(v uuid.UUID) predicate.AchievementUser {
	return predicate.AchievementUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEntID), v))
	})
}

// EntIDNEQ applies the NEQ predicate on the "ent_id" field.
func EntIDNEQ(v uuid.UUID) predicate.AchievementUser {
	return predicate.AchievementUser(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEntID), v))
	})
}

// EntIDIn applies the In predicate on the "ent_id" field.
func EntIDIn(vs ...uuid.UUID) predicate.AchievementUser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AchievementUser(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldEntID), v...))
	})
}

// EntIDNotIn applies the NotIn predicate on the "ent_id" field.
func EntIDNotIn(vs ...uuid.UUID) predicate.AchievementUser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AchievementUser(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldEntID), v...))
	})
}

// EntIDGT applies the GT predicate on the "ent_id" field.
func EntIDGT(v uuid.UUID) predicate.AchievementUser {
	return predicate.AchievementUser(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEntID), v))
	})
}

// EntIDGTE applies the GTE predicate on the "ent_id" field.
func EntIDGTE(v uuid.UUID) predicate.AchievementUser {
	return predicate.AchievementUser(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEntID), v))
	})
}

// EntIDLT applies the LT predicate on the "ent_id" field.
func EntIDLT(v uuid.UUID) predicate.AchievementUser {
	return predicate.AchievementUser(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEntID), v))
	})
}

// EntIDLTE applies the LTE predicate on the "ent_id" field.
func EntIDLTE(v uuid.UUID) predicate.AchievementUser {
	return predicate.AchievementUser(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEntID), v))
	})
}

// AppIDEQ applies the EQ predicate on the "app_id" field.
func AppIDEQ(v uuid.UUID) predicate.AchievementUser {
	return predicate.AchievementUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAppID), v))
	})
}

// AppIDNEQ applies the NEQ predicate on the "app_id" field.
func AppIDNEQ(v uuid.UUID) predicate.AchievementUser {
	return predicate.AchievementUser(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAppID), v))
	})
}

// AppIDIn applies the In predicate on the "app_id" field.
func AppIDIn(vs ...uuid.UUID) predicate.AchievementUser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AchievementUser(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldAppID), v...))
	})
}

// AppIDNotIn applies the NotIn predicate on the "app_id" field.
func AppIDNotIn(vs ...uuid.UUID) predicate.AchievementUser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AchievementUser(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldAppID), v...))
	})
}

// AppIDGT applies the GT predicate on the "app_id" field.
func AppIDGT(v uuid.UUID) predicate.AchievementUser {
	return predicate.AchievementUser(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAppID), v))
	})
}

// AppIDGTE applies the GTE predicate on the "app_id" field.
func AppIDGTE(v uuid.UUID) predicate.AchievementUser {
	return predicate.AchievementUser(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAppID), v))
	})
}

// AppIDLT applies the LT predicate on the "app_id" field.
func AppIDLT(v uuid.UUID) predicate.AchievementUser {
	return predicate.AchievementUser(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAppID), v))
	})
}

// AppIDLTE applies the LTE predicate on the "app_id" field.
func AppIDLTE(v uuid.UUID) predicate.AchievementUser {
	return predicate.AchievementUser(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAppID), v))
	})
}

// AppIDIsNil applies the IsNil predicate on the "app_id" field.
func AppIDIsNil() predicate.AchievementUser {
	return predicate.AchievementUser(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldAppID)))
	})
}

// AppIDNotNil applies the NotNil predicate on the "app_id" field.
func AppIDNotNil() predicate.AchievementUser {
	return predicate.AchievementUser(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldAppID)))
	})
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v uuid.UUID) predicate.AchievementUser {
	return predicate.AchievementUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUserID), v))
	})
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v uuid.UUID) predicate.AchievementUser {
	return predicate.AchievementUser(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUserID), v))
	})
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...uuid.UUID) predicate.AchievementUser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AchievementUser(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUserID), v...))
	})
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...uuid.UUID) predicate.AchievementUser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AchievementUser(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUserID), v...))
	})
}

// UserIDGT applies the GT predicate on the "user_id" field.
func UserIDGT(v uuid.UUID) predicate.AchievementUser {
	return predicate.AchievementUser(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUserID), v))
	})
}

// UserIDGTE applies the GTE predicate on the "user_id" field.
func UserIDGTE(v uuid.UUID) predicate.AchievementUser {
	return predicate.AchievementUser(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUserID), v))
	})
}

// UserIDLT applies the LT predicate on the "user_id" field.
func UserIDLT(v uuid.UUID) predicate.AchievementUser {
	return predicate.AchievementUser(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUserID), v))
	})
}

// UserIDLTE applies the LTE predicate on the "user_id" field.
func UserIDLTE(v uuid.UUID) predicate.AchievementUser {
	return predicate.AchievementUser(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUserID), v))
	})
}

// UserIDIsNil applies the IsNil predicate on the "user_id" field.
func UserIDIsNil() predicate.AchievementUser {
	return predicate.AchievementUser(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldUserID)))
	})
}

// UserIDNotNil applies the NotNil predicate on the "user_id" field.
func UserIDNotNil() predicate.AchievementUser {
	return predicate.AchievementUser(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldUserID)))
	})
}

// TotalCommissionEQ applies the EQ predicate on the "total_commission" field.
func TotalCommissionEQ(v decimal.Decimal) predicate.AchievementUser {
	return predicate.AchievementUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTotalCommission), v))
	})
}

// TotalCommissionNEQ applies the NEQ predicate on the "total_commission" field.
func TotalCommissionNEQ(v decimal.Decimal) predicate.AchievementUser {
	return predicate.AchievementUser(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTotalCommission), v))
	})
}

// TotalCommissionIn applies the In predicate on the "total_commission" field.
func TotalCommissionIn(vs ...decimal.Decimal) predicate.AchievementUser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AchievementUser(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldTotalCommission), v...))
	})
}

// TotalCommissionNotIn applies the NotIn predicate on the "total_commission" field.
func TotalCommissionNotIn(vs ...decimal.Decimal) predicate.AchievementUser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AchievementUser(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldTotalCommission), v...))
	})
}

// TotalCommissionGT applies the GT predicate on the "total_commission" field.
func TotalCommissionGT(v decimal.Decimal) predicate.AchievementUser {
	return predicate.AchievementUser(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTotalCommission), v))
	})
}

// TotalCommissionGTE applies the GTE predicate on the "total_commission" field.
func TotalCommissionGTE(v decimal.Decimal) predicate.AchievementUser {
	return predicate.AchievementUser(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTotalCommission), v))
	})
}

// TotalCommissionLT applies the LT predicate on the "total_commission" field.
func TotalCommissionLT(v decimal.Decimal) predicate.AchievementUser {
	return predicate.AchievementUser(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTotalCommission), v))
	})
}

// TotalCommissionLTE applies the LTE predicate on the "total_commission" field.
func TotalCommissionLTE(v decimal.Decimal) predicate.AchievementUser {
	return predicate.AchievementUser(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTotalCommission), v))
	})
}

// TotalCommissionIsNil applies the IsNil predicate on the "total_commission" field.
func TotalCommissionIsNil() predicate.AchievementUser {
	return predicate.AchievementUser(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldTotalCommission)))
	})
}

// TotalCommissionNotNil applies the NotNil predicate on the "total_commission" field.
func TotalCommissionNotNil() predicate.AchievementUser {
	return predicate.AchievementUser(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldTotalCommission)))
	})
}

// SelfCommissionEQ applies the EQ predicate on the "self_commission" field.
func SelfCommissionEQ(v decimal.Decimal) predicate.AchievementUser {
	return predicate.AchievementUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSelfCommission), v))
	})
}

// SelfCommissionNEQ applies the NEQ predicate on the "self_commission" field.
func SelfCommissionNEQ(v decimal.Decimal) predicate.AchievementUser {
	return predicate.AchievementUser(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSelfCommission), v))
	})
}

// SelfCommissionIn applies the In predicate on the "self_commission" field.
func SelfCommissionIn(vs ...decimal.Decimal) predicate.AchievementUser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AchievementUser(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldSelfCommission), v...))
	})
}

// SelfCommissionNotIn applies the NotIn predicate on the "self_commission" field.
func SelfCommissionNotIn(vs ...decimal.Decimal) predicate.AchievementUser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AchievementUser(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldSelfCommission), v...))
	})
}

// SelfCommissionGT applies the GT predicate on the "self_commission" field.
func SelfCommissionGT(v decimal.Decimal) predicate.AchievementUser {
	return predicate.AchievementUser(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSelfCommission), v))
	})
}

// SelfCommissionGTE applies the GTE predicate on the "self_commission" field.
func SelfCommissionGTE(v decimal.Decimal) predicate.AchievementUser {
	return predicate.AchievementUser(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSelfCommission), v))
	})
}

// SelfCommissionLT applies the LT predicate on the "self_commission" field.
func SelfCommissionLT(v decimal.Decimal) predicate.AchievementUser {
	return predicate.AchievementUser(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSelfCommission), v))
	})
}

// SelfCommissionLTE applies the LTE predicate on the "self_commission" field.
func SelfCommissionLTE(v decimal.Decimal) predicate.AchievementUser {
	return predicate.AchievementUser(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSelfCommission), v))
	})
}

// SelfCommissionIsNil applies the IsNil predicate on the "self_commission" field.
func SelfCommissionIsNil() predicate.AchievementUser {
	return predicate.AchievementUser(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldSelfCommission)))
	})
}

// SelfCommissionNotNil applies the NotNil predicate on the "self_commission" field.
func SelfCommissionNotNil() predicate.AchievementUser {
	return predicate.AchievementUser(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldSelfCommission)))
	})
}

// DirectConsumeAmountEQ applies the EQ predicate on the "direct_consume_amount" field.
func DirectConsumeAmountEQ(v decimal.Decimal) predicate.AchievementUser {
	return predicate.AchievementUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDirectConsumeAmount), v))
	})
}

// DirectConsumeAmountNEQ applies the NEQ predicate on the "direct_consume_amount" field.
func DirectConsumeAmountNEQ(v decimal.Decimal) predicate.AchievementUser {
	return predicate.AchievementUser(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDirectConsumeAmount), v))
	})
}

// DirectConsumeAmountIn applies the In predicate on the "direct_consume_amount" field.
func DirectConsumeAmountIn(vs ...decimal.Decimal) predicate.AchievementUser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AchievementUser(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDirectConsumeAmount), v...))
	})
}

// DirectConsumeAmountNotIn applies the NotIn predicate on the "direct_consume_amount" field.
func DirectConsumeAmountNotIn(vs ...decimal.Decimal) predicate.AchievementUser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AchievementUser(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDirectConsumeAmount), v...))
	})
}

// DirectConsumeAmountGT applies the GT predicate on the "direct_consume_amount" field.
func DirectConsumeAmountGT(v decimal.Decimal) predicate.AchievementUser {
	return predicate.AchievementUser(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDirectConsumeAmount), v))
	})
}

// DirectConsumeAmountGTE applies the GTE predicate on the "direct_consume_amount" field.
func DirectConsumeAmountGTE(v decimal.Decimal) predicate.AchievementUser {
	return predicate.AchievementUser(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDirectConsumeAmount), v))
	})
}

// DirectConsumeAmountLT applies the LT predicate on the "direct_consume_amount" field.
func DirectConsumeAmountLT(v decimal.Decimal) predicate.AchievementUser {
	return predicate.AchievementUser(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDirectConsumeAmount), v))
	})
}

// DirectConsumeAmountLTE applies the LTE predicate on the "direct_consume_amount" field.
func DirectConsumeAmountLTE(v decimal.Decimal) predicate.AchievementUser {
	return predicate.AchievementUser(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDirectConsumeAmount), v))
	})
}

// DirectConsumeAmountIsNil applies the IsNil predicate on the "direct_consume_amount" field.
func DirectConsumeAmountIsNil() predicate.AchievementUser {
	return predicate.AchievementUser(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDirectConsumeAmount)))
	})
}

// DirectConsumeAmountNotNil applies the NotNil predicate on the "direct_consume_amount" field.
func DirectConsumeAmountNotNil() predicate.AchievementUser {
	return predicate.AchievementUser(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDirectConsumeAmount)))
	})
}

// InviteeConsumeAmountEQ applies the EQ predicate on the "invitee_consume_amount" field.
func InviteeConsumeAmountEQ(v decimal.Decimal) predicate.AchievementUser {
	return predicate.AchievementUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldInviteeConsumeAmount), v))
	})
}

// InviteeConsumeAmountNEQ applies the NEQ predicate on the "invitee_consume_amount" field.
func InviteeConsumeAmountNEQ(v decimal.Decimal) predicate.AchievementUser {
	return predicate.AchievementUser(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldInviteeConsumeAmount), v))
	})
}

// InviteeConsumeAmountIn applies the In predicate on the "invitee_consume_amount" field.
func InviteeConsumeAmountIn(vs ...decimal.Decimal) predicate.AchievementUser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AchievementUser(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldInviteeConsumeAmount), v...))
	})
}

// InviteeConsumeAmountNotIn applies the NotIn predicate on the "invitee_consume_amount" field.
func InviteeConsumeAmountNotIn(vs ...decimal.Decimal) predicate.AchievementUser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AchievementUser(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldInviteeConsumeAmount), v...))
	})
}

// InviteeConsumeAmountGT applies the GT predicate on the "invitee_consume_amount" field.
func InviteeConsumeAmountGT(v decimal.Decimal) predicate.AchievementUser {
	return predicate.AchievementUser(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldInviteeConsumeAmount), v))
	})
}

// InviteeConsumeAmountGTE applies the GTE predicate on the "invitee_consume_amount" field.
func InviteeConsumeAmountGTE(v decimal.Decimal) predicate.AchievementUser {
	return predicate.AchievementUser(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldInviteeConsumeAmount), v))
	})
}

// InviteeConsumeAmountLT applies the LT predicate on the "invitee_consume_amount" field.
func InviteeConsumeAmountLT(v decimal.Decimal) predicate.AchievementUser {
	return predicate.AchievementUser(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldInviteeConsumeAmount), v))
	})
}

// InviteeConsumeAmountLTE applies the LTE predicate on the "invitee_consume_amount" field.
func InviteeConsumeAmountLTE(v decimal.Decimal) predicate.AchievementUser {
	return predicate.AchievementUser(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldInviteeConsumeAmount), v))
	})
}

// InviteeConsumeAmountIsNil applies the IsNil predicate on the "invitee_consume_amount" field.
func InviteeConsumeAmountIsNil() predicate.AchievementUser {
	return predicate.AchievementUser(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldInviteeConsumeAmount)))
	})
}

// InviteeConsumeAmountNotNil applies the NotNil predicate on the "invitee_consume_amount" field.
func InviteeConsumeAmountNotNil() predicate.AchievementUser {
	return predicate.AchievementUser(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldInviteeConsumeAmount)))
	})
}

// DirectInviteesEQ applies the EQ predicate on the "direct_invitees" field.
func DirectInviteesEQ(v uint32) predicate.AchievementUser {
	return predicate.AchievementUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDirectInvitees), v))
	})
}

// DirectInviteesNEQ applies the NEQ predicate on the "direct_invitees" field.
func DirectInviteesNEQ(v uint32) predicate.AchievementUser {
	return predicate.AchievementUser(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDirectInvitees), v))
	})
}

// DirectInviteesIn applies the In predicate on the "direct_invitees" field.
func DirectInviteesIn(vs ...uint32) predicate.AchievementUser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AchievementUser(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDirectInvitees), v...))
	})
}

// DirectInviteesNotIn applies the NotIn predicate on the "direct_invitees" field.
func DirectInviteesNotIn(vs ...uint32) predicate.AchievementUser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AchievementUser(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDirectInvitees), v...))
	})
}

// DirectInviteesGT applies the GT predicate on the "direct_invitees" field.
func DirectInviteesGT(v uint32) predicate.AchievementUser {
	return predicate.AchievementUser(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDirectInvitees), v))
	})
}

// DirectInviteesGTE applies the GTE predicate on the "direct_invitees" field.
func DirectInviteesGTE(v uint32) predicate.AchievementUser {
	return predicate.AchievementUser(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDirectInvitees), v))
	})
}

// DirectInviteesLT applies the LT predicate on the "direct_invitees" field.
func DirectInviteesLT(v uint32) predicate.AchievementUser {
	return predicate.AchievementUser(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDirectInvitees), v))
	})
}

// DirectInviteesLTE applies the LTE predicate on the "direct_invitees" field.
func DirectInviteesLTE(v uint32) predicate.AchievementUser {
	return predicate.AchievementUser(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDirectInvitees), v))
	})
}

// DirectInviteesIsNil applies the IsNil predicate on the "direct_invitees" field.
func DirectInviteesIsNil() predicate.AchievementUser {
	return predicate.AchievementUser(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDirectInvitees)))
	})
}

// DirectInviteesNotNil applies the NotNil predicate on the "direct_invitees" field.
func DirectInviteesNotNil() predicate.AchievementUser {
	return predicate.AchievementUser(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDirectInvitees)))
	})
}

// IndirectInviteesEQ applies the EQ predicate on the "indirect_invitees" field.
func IndirectInviteesEQ(v uint32) predicate.AchievementUser {
	return predicate.AchievementUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIndirectInvitees), v))
	})
}

// IndirectInviteesNEQ applies the NEQ predicate on the "indirect_invitees" field.
func IndirectInviteesNEQ(v uint32) predicate.AchievementUser {
	return predicate.AchievementUser(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIndirectInvitees), v))
	})
}

// IndirectInviteesIn applies the In predicate on the "indirect_invitees" field.
func IndirectInviteesIn(vs ...uint32) predicate.AchievementUser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AchievementUser(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldIndirectInvitees), v...))
	})
}

// IndirectInviteesNotIn applies the NotIn predicate on the "indirect_invitees" field.
func IndirectInviteesNotIn(vs ...uint32) predicate.AchievementUser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AchievementUser(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldIndirectInvitees), v...))
	})
}

// IndirectInviteesGT applies the GT predicate on the "indirect_invitees" field.
func IndirectInviteesGT(v uint32) predicate.AchievementUser {
	return predicate.AchievementUser(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldIndirectInvitees), v))
	})
}

// IndirectInviteesGTE applies the GTE predicate on the "indirect_invitees" field.
func IndirectInviteesGTE(v uint32) predicate.AchievementUser {
	return predicate.AchievementUser(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldIndirectInvitees), v))
	})
}

// IndirectInviteesLT applies the LT predicate on the "indirect_invitees" field.
func IndirectInviteesLT(v uint32) predicate.AchievementUser {
	return predicate.AchievementUser(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldIndirectInvitees), v))
	})
}

// IndirectInviteesLTE applies the LTE predicate on the "indirect_invitees" field.
func IndirectInviteesLTE(v uint32) predicate.AchievementUser {
	return predicate.AchievementUser(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldIndirectInvitees), v))
	})
}

// IndirectInviteesIsNil applies the IsNil predicate on the "indirect_invitees" field.
func IndirectInviteesIsNil() predicate.AchievementUser {
	return predicate.AchievementUser(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldIndirectInvitees)))
	})
}

// IndirectInviteesNotNil applies the NotNil predicate on the "indirect_invitees" field.
func IndirectInviteesNotNil() predicate.AchievementUser {
	return predicate.AchievementUser(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldIndirectInvitees)))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.AchievementUser) predicate.AchievementUser {
	return predicate.AchievementUser(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.AchievementUser) predicate.AchievementUser {
	return predicate.AchievementUser(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.AchievementUser) predicate.AchievementUser {
	return predicate.AchievementUser(func(s *sql.Selector) {
		p(s.Not())
	})
}
