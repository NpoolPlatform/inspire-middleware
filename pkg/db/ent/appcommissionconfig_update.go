// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/inspire-middleware/pkg/db/ent/appcommissionconfig"
	"github.com/NpoolPlatform/inspire-middleware/pkg/db/ent/predicate"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// AppCommissionConfigUpdate is the builder for updating AppCommissionConfig entities.
type AppCommissionConfigUpdate struct {
	config
	hooks     []Hook
	mutation  *AppCommissionConfigMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the AppCommissionConfigUpdate builder.
func (accu *AppCommissionConfigUpdate) Where(ps ...predicate.AppCommissionConfig) *AppCommissionConfigUpdate {
	accu.mutation.Where(ps...)
	return accu
}

// SetCreatedAt sets the "created_at" field.
func (accu *AppCommissionConfigUpdate) SetCreatedAt(u uint32) *AppCommissionConfigUpdate {
	accu.mutation.ResetCreatedAt()
	accu.mutation.SetCreatedAt(u)
	return accu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (accu *AppCommissionConfigUpdate) SetNillableCreatedAt(u *uint32) *AppCommissionConfigUpdate {
	if u != nil {
		accu.SetCreatedAt(*u)
	}
	return accu
}

// AddCreatedAt adds u to the "created_at" field.
func (accu *AppCommissionConfigUpdate) AddCreatedAt(u int32) *AppCommissionConfigUpdate {
	accu.mutation.AddCreatedAt(u)
	return accu
}

// SetUpdatedAt sets the "updated_at" field.
func (accu *AppCommissionConfigUpdate) SetUpdatedAt(u uint32) *AppCommissionConfigUpdate {
	accu.mutation.ResetUpdatedAt()
	accu.mutation.SetUpdatedAt(u)
	return accu
}

// AddUpdatedAt adds u to the "updated_at" field.
func (accu *AppCommissionConfigUpdate) AddUpdatedAt(u int32) *AppCommissionConfigUpdate {
	accu.mutation.AddUpdatedAt(u)
	return accu
}

// SetDeletedAt sets the "deleted_at" field.
func (accu *AppCommissionConfigUpdate) SetDeletedAt(u uint32) *AppCommissionConfigUpdate {
	accu.mutation.ResetDeletedAt()
	accu.mutation.SetDeletedAt(u)
	return accu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (accu *AppCommissionConfigUpdate) SetNillableDeletedAt(u *uint32) *AppCommissionConfigUpdate {
	if u != nil {
		accu.SetDeletedAt(*u)
	}
	return accu
}

// AddDeletedAt adds u to the "deleted_at" field.
func (accu *AppCommissionConfigUpdate) AddDeletedAt(u int32) *AppCommissionConfigUpdate {
	accu.mutation.AddDeletedAt(u)
	return accu
}

// SetEntID sets the "ent_id" field.
func (accu *AppCommissionConfigUpdate) SetEntID(u uuid.UUID) *AppCommissionConfigUpdate {
	accu.mutation.SetEntID(u)
	return accu
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (accu *AppCommissionConfigUpdate) SetNillableEntID(u *uuid.UUID) *AppCommissionConfigUpdate {
	if u != nil {
		accu.SetEntID(*u)
	}
	return accu
}

// SetAppID sets the "app_id" field.
func (accu *AppCommissionConfigUpdate) SetAppID(u uuid.UUID) *AppCommissionConfigUpdate {
	accu.mutation.SetAppID(u)
	return accu
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (accu *AppCommissionConfigUpdate) SetNillableAppID(u *uuid.UUID) *AppCommissionConfigUpdate {
	if u != nil {
		accu.SetAppID(*u)
	}
	return accu
}

// ClearAppID clears the value of the "app_id" field.
func (accu *AppCommissionConfigUpdate) ClearAppID() *AppCommissionConfigUpdate {
	accu.mutation.ClearAppID()
	return accu
}

// SetThresholdAmount sets the "threshold_amount" field.
func (accu *AppCommissionConfigUpdate) SetThresholdAmount(d decimal.Decimal) *AppCommissionConfigUpdate {
	accu.mutation.SetThresholdAmount(d)
	return accu
}

// SetNillableThresholdAmount sets the "threshold_amount" field if the given value is not nil.
func (accu *AppCommissionConfigUpdate) SetNillableThresholdAmount(d *decimal.Decimal) *AppCommissionConfigUpdate {
	if d != nil {
		accu.SetThresholdAmount(*d)
	}
	return accu
}

// ClearThresholdAmount clears the value of the "threshold_amount" field.
func (accu *AppCommissionConfigUpdate) ClearThresholdAmount() *AppCommissionConfigUpdate {
	accu.mutation.ClearThresholdAmount()
	return accu
}

// SetAmountOrPercent sets the "amount_or_percent" field.
func (accu *AppCommissionConfigUpdate) SetAmountOrPercent(d decimal.Decimal) *AppCommissionConfigUpdate {
	accu.mutation.SetAmountOrPercent(d)
	return accu
}

// SetNillableAmountOrPercent sets the "amount_or_percent" field if the given value is not nil.
func (accu *AppCommissionConfigUpdate) SetNillableAmountOrPercent(d *decimal.Decimal) *AppCommissionConfigUpdate {
	if d != nil {
		accu.SetAmountOrPercent(*d)
	}
	return accu
}

// ClearAmountOrPercent clears the value of the "amount_or_percent" field.
func (accu *AppCommissionConfigUpdate) ClearAmountOrPercent() *AppCommissionConfigUpdate {
	accu.mutation.ClearAmountOrPercent()
	return accu
}

// SetStartAt sets the "start_at" field.
func (accu *AppCommissionConfigUpdate) SetStartAt(u uint32) *AppCommissionConfigUpdate {
	accu.mutation.ResetStartAt()
	accu.mutation.SetStartAt(u)
	return accu
}

// SetNillableStartAt sets the "start_at" field if the given value is not nil.
func (accu *AppCommissionConfigUpdate) SetNillableStartAt(u *uint32) *AppCommissionConfigUpdate {
	if u != nil {
		accu.SetStartAt(*u)
	}
	return accu
}

// AddStartAt adds u to the "start_at" field.
func (accu *AppCommissionConfigUpdate) AddStartAt(u int32) *AppCommissionConfigUpdate {
	accu.mutation.AddStartAt(u)
	return accu
}

// ClearStartAt clears the value of the "start_at" field.
func (accu *AppCommissionConfigUpdate) ClearStartAt() *AppCommissionConfigUpdate {
	accu.mutation.ClearStartAt()
	return accu
}

// SetEndAt sets the "end_at" field.
func (accu *AppCommissionConfigUpdate) SetEndAt(u uint32) *AppCommissionConfigUpdate {
	accu.mutation.ResetEndAt()
	accu.mutation.SetEndAt(u)
	return accu
}

// SetNillableEndAt sets the "end_at" field if the given value is not nil.
func (accu *AppCommissionConfigUpdate) SetNillableEndAt(u *uint32) *AppCommissionConfigUpdate {
	if u != nil {
		accu.SetEndAt(*u)
	}
	return accu
}

// AddEndAt adds u to the "end_at" field.
func (accu *AppCommissionConfigUpdate) AddEndAt(u int32) *AppCommissionConfigUpdate {
	accu.mutation.AddEndAt(u)
	return accu
}

// ClearEndAt clears the value of the "end_at" field.
func (accu *AppCommissionConfigUpdate) ClearEndAt() *AppCommissionConfigUpdate {
	accu.mutation.ClearEndAt()
	return accu
}

// SetInvites sets the "invites" field.
func (accu *AppCommissionConfigUpdate) SetInvites(u uint32) *AppCommissionConfigUpdate {
	accu.mutation.ResetInvites()
	accu.mutation.SetInvites(u)
	return accu
}

// SetNillableInvites sets the "invites" field if the given value is not nil.
func (accu *AppCommissionConfigUpdate) SetNillableInvites(u *uint32) *AppCommissionConfigUpdate {
	if u != nil {
		accu.SetInvites(*u)
	}
	return accu
}

// AddInvites adds u to the "invites" field.
func (accu *AppCommissionConfigUpdate) AddInvites(u int32) *AppCommissionConfigUpdate {
	accu.mutation.AddInvites(u)
	return accu
}

// ClearInvites clears the value of the "invites" field.
func (accu *AppCommissionConfigUpdate) ClearInvites() *AppCommissionConfigUpdate {
	accu.mutation.ClearInvites()
	return accu
}

// SetSettleType sets the "settle_type" field.
func (accu *AppCommissionConfigUpdate) SetSettleType(s string) *AppCommissionConfigUpdate {
	accu.mutation.SetSettleType(s)
	return accu
}

// SetNillableSettleType sets the "settle_type" field if the given value is not nil.
func (accu *AppCommissionConfigUpdate) SetNillableSettleType(s *string) *AppCommissionConfigUpdate {
	if s != nil {
		accu.SetSettleType(*s)
	}
	return accu
}

// ClearSettleType clears the value of the "settle_type" field.
func (accu *AppCommissionConfigUpdate) ClearSettleType() *AppCommissionConfigUpdate {
	accu.mutation.ClearSettleType()
	return accu
}

// Mutation returns the AppCommissionConfigMutation object of the builder.
func (accu *AppCommissionConfigUpdate) Mutation() *AppCommissionConfigMutation {
	return accu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (accu *AppCommissionConfigUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if err := accu.defaults(); err != nil {
		return 0, err
	}
	if len(accu.hooks) == 0 {
		affected, err = accu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AppCommissionConfigMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			accu.mutation = mutation
			affected, err = accu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(accu.hooks) - 1; i >= 0; i-- {
			if accu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = accu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, accu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (accu *AppCommissionConfigUpdate) SaveX(ctx context.Context) int {
	affected, err := accu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (accu *AppCommissionConfigUpdate) Exec(ctx context.Context) error {
	_, err := accu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (accu *AppCommissionConfigUpdate) ExecX(ctx context.Context) {
	if err := accu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (accu *AppCommissionConfigUpdate) defaults() error {
	if _, ok := accu.mutation.UpdatedAt(); !ok {
		if appcommissionconfig.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized appcommissionconfig.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := appcommissionconfig.UpdateDefaultUpdatedAt()
		accu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (accu *AppCommissionConfigUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *AppCommissionConfigUpdate {
	accu.modifiers = append(accu.modifiers, modifiers...)
	return accu
}

func (accu *AppCommissionConfigUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   appcommissionconfig.Table,
			Columns: appcommissionconfig.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: appcommissionconfig.FieldID,
			},
		},
	}
	if ps := accu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := accu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appcommissionconfig.FieldCreatedAt,
		})
	}
	if value, ok := accu.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appcommissionconfig.FieldCreatedAt,
		})
	}
	if value, ok := accu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appcommissionconfig.FieldUpdatedAt,
		})
	}
	if value, ok := accu.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appcommissionconfig.FieldUpdatedAt,
		})
	}
	if value, ok := accu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appcommissionconfig.FieldDeletedAt,
		})
	}
	if value, ok := accu.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appcommissionconfig.FieldDeletedAt,
		})
	}
	if value, ok := accu.mutation.EntID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: appcommissionconfig.FieldEntID,
		})
	}
	if value, ok := accu.mutation.AppID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: appcommissionconfig.FieldAppID,
		})
	}
	if accu.mutation.AppIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: appcommissionconfig.FieldAppID,
		})
	}
	if value, ok := accu.mutation.ThresholdAmount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: appcommissionconfig.FieldThresholdAmount,
		})
	}
	if accu.mutation.ThresholdAmountCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Column: appcommissionconfig.FieldThresholdAmount,
		})
	}
	if value, ok := accu.mutation.AmountOrPercent(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: appcommissionconfig.FieldAmountOrPercent,
		})
	}
	if accu.mutation.AmountOrPercentCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Column: appcommissionconfig.FieldAmountOrPercent,
		})
	}
	if value, ok := accu.mutation.StartAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appcommissionconfig.FieldStartAt,
		})
	}
	if value, ok := accu.mutation.AddedStartAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appcommissionconfig.FieldStartAt,
		})
	}
	if accu.mutation.StartAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Column: appcommissionconfig.FieldStartAt,
		})
	}
	if value, ok := accu.mutation.EndAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appcommissionconfig.FieldEndAt,
		})
	}
	if value, ok := accu.mutation.AddedEndAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appcommissionconfig.FieldEndAt,
		})
	}
	if accu.mutation.EndAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Column: appcommissionconfig.FieldEndAt,
		})
	}
	if value, ok := accu.mutation.Invites(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appcommissionconfig.FieldInvites,
		})
	}
	if value, ok := accu.mutation.AddedInvites(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appcommissionconfig.FieldInvites,
		})
	}
	if accu.mutation.InvitesCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Column: appcommissionconfig.FieldInvites,
		})
	}
	if value, ok := accu.mutation.SettleType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: appcommissionconfig.FieldSettleType,
		})
	}
	if accu.mutation.SettleTypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: appcommissionconfig.FieldSettleType,
		})
	}
	_spec.Modifiers = accu.modifiers
	if n, err = sqlgraph.UpdateNodes(ctx, accu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{appcommissionconfig.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// AppCommissionConfigUpdateOne is the builder for updating a single AppCommissionConfig entity.
type AppCommissionConfigUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *AppCommissionConfigMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetCreatedAt sets the "created_at" field.
func (accuo *AppCommissionConfigUpdateOne) SetCreatedAt(u uint32) *AppCommissionConfigUpdateOne {
	accuo.mutation.ResetCreatedAt()
	accuo.mutation.SetCreatedAt(u)
	return accuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (accuo *AppCommissionConfigUpdateOne) SetNillableCreatedAt(u *uint32) *AppCommissionConfigUpdateOne {
	if u != nil {
		accuo.SetCreatedAt(*u)
	}
	return accuo
}

// AddCreatedAt adds u to the "created_at" field.
func (accuo *AppCommissionConfigUpdateOne) AddCreatedAt(u int32) *AppCommissionConfigUpdateOne {
	accuo.mutation.AddCreatedAt(u)
	return accuo
}

// SetUpdatedAt sets the "updated_at" field.
func (accuo *AppCommissionConfigUpdateOne) SetUpdatedAt(u uint32) *AppCommissionConfigUpdateOne {
	accuo.mutation.ResetUpdatedAt()
	accuo.mutation.SetUpdatedAt(u)
	return accuo
}

// AddUpdatedAt adds u to the "updated_at" field.
func (accuo *AppCommissionConfigUpdateOne) AddUpdatedAt(u int32) *AppCommissionConfigUpdateOne {
	accuo.mutation.AddUpdatedAt(u)
	return accuo
}

// SetDeletedAt sets the "deleted_at" field.
func (accuo *AppCommissionConfigUpdateOne) SetDeletedAt(u uint32) *AppCommissionConfigUpdateOne {
	accuo.mutation.ResetDeletedAt()
	accuo.mutation.SetDeletedAt(u)
	return accuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (accuo *AppCommissionConfigUpdateOne) SetNillableDeletedAt(u *uint32) *AppCommissionConfigUpdateOne {
	if u != nil {
		accuo.SetDeletedAt(*u)
	}
	return accuo
}

// AddDeletedAt adds u to the "deleted_at" field.
func (accuo *AppCommissionConfigUpdateOne) AddDeletedAt(u int32) *AppCommissionConfigUpdateOne {
	accuo.mutation.AddDeletedAt(u)
	return accuo
}

// SetEntID sets the "ent_id" field.
func (accuo *AppCommissionConfigUpdateOne) SetEntID(u uuid.UUID) *AppCommissionConfigUpdateOne {
	accuo.mutation.SetEntID(u)
	return accuo
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (accuo *AppCommissionConfigUpdateOne) SetNillableEntID(u *uuid.UUID) *AppCommissionConfigUpdateOne {
	if u != nil {
		accuo.SetEntID(*u)
	}
	return accuo
}

// SetAppID sets the "app_id" field.
func (accuo *AppCommissionConfigUpdateOne) SetAppID(u uuid.UUID) *AppCommissionConfigUpdateOne {
	accuo.mutation.SetAppID(u)
	return accuo
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (accuo *AppCommissionConfigUpdateOne) SetNillableAppID(u *uuid.UUID) *AppCommissionConfigUpdateOne {
	if u != nil {
		accuo.SetAppID(*u)
	}
	return accuo
}

// ClearAppID clears the value of the "app_id" field.
func (accuo *AppCommissionConfigUpdateOne) ClearAppID() *AppCommissionConfigUpdateOne {
	accuo.mutation.ClearAppID()
	return accuo
}

// SetThresholdAmount sets the "threshold_amount" field.
func (accuo *AppCommissionConfigUpdateOne) SetThresholdAmount(d decimal.Decimal) *AppCommissionConfigUpdateOne {
	accuo.mutation.SetThresholdAmount(d)
	return accuo
}

// SetNillableThresholdAmount sets the "threshold_amount" field if the given value is not nil.
func (accuo *AppCommissionConfigUpdateOne) SetNillableThresholdAmount(d *decimal.Decimal) *AppCommissionConfigUpdateOne {
	if d != nil {
		accuo.SetThresholdAmount(*d)
	}
	return accuo
}

// ClearThresholdAmount clears the value of the "threshold_amount" field.
func (accuo *AppCommissionConfigUpdateOne) ClearThresholdAmount() *AppCommissionConfigUpdateOne {
	accuo.mutation.ClearThresholdAmount()
	return accuo
}

// SetAmountOrPercent sets the "amount_or_percent" field.
func (accuo *AppCommissionConfigUpdateOne) SetAmountOrPercent(d decimal.Decimal) *AppCommissionConfigUpdateOne {
	accuo.mutation.SetAmountOrPercent(d)
	return accuo
}

// SetNillableAmountOrPercent sets the "amount_or_percent" field if the given value is not nil.
func (accuo *AppCommissionConfigUpdateOne) SetNillableAmountOrPercent(d *decimal.Decimal) *AppCommissionConfigUpdateOne {
	if d != nil {
		accuo.SetAmountOrPercent(*d)
	}
	return accuo
}

// ClearAmountOrPercent clears the value of the "amount_or_percent" field.
func (accuo *AppCommissionConfigUpdateOne) ClearAmountOrPercent() *AppCommissionConfigUpdateOne {
	accuo.mutation.ClearAmountOrPercent()
	return accuo
}

// SetStartAt sets the "start_at" field.
func (accuo *AppCommissionConfigUpdateOne) SetStartAt(u uint32) *AppCommissionConfigUpdateOne {
	accuo.mutation.ResetStartAt()
	accuo.mutation.SetStartAt(u)
	return accuo
}

// SetNillableStartAt sets the "start_at" field if the given value is not nil.
func (accuo *AppCommissionConfigUpdateOne) SetNillableStartAt(u *uint32) *AppCommissionConfigUpdateOne {
	if u != nil {
		accuo.SetStartAt(*u)
	}
	return accuo
}

// AddStartAt adds u to the "start_at" field.
func (accuo *AppCommissionConfigUpdateOne) AddStartAt(u int32) *AppCommissionConfigUpdateOne {
	accuo.mutation.AddStartAt(u)
	return accuo
}

// ClearStartAt clears the value of the "start_at" field.
func (accuo *AppCommissionConfigUpdateOne) ClearStartAt() *AppCommissionConfigUpdateOne {
	accuo.mutation.ClearStartAt()
	return accuo
}

// SetEndAt sets the "end_at" field.
func (accuo *AppCommissionConfigUpdateOne) SetEndAt(u uint32) *AppCommissionConfigUpdateOne {
	accuo.mutation.ResetEndAt()
	accuo.mutation.SetEndAt(u)
	return accuo
}

// SetNillableEndAt sets the "end_at" field if the given value is not nil.
func (accuo *AppCommissionConfigUpdateOne) SetNillableEndAt(u *uint32) *AppCommissionConfigUpdateOne {
	if u != nil {
		accuo.SetEndAt(*u)
	}
	return accuo
}

// AddEndAt adds u to the "end_at" field.
func (accuo *AppCommissionConfigUpdateOne) AddEndAt(u int32) *AppCommissionConfigUpdateOne {
	accuo.mutation.AddEndAt(u)
	return accuo
}

// ClearEndAt clears the value of the "end_at" field.
func (accuo *AppCommissionConfigUpdateOne) ClearEndAt() *AppCommissionConfigUpdateOne {
	accuo.mutation.ClearEndAt()
	return accuo
}

// SetInvites sets the "invites" field.
func (accuo *AppCommissionConfigUpdateOne) SetInvites(u uint32) *AppCommissionConfigUpdateOne {
	accuo.mutation.ResetInvites()
	accuo.mutation.SetInvites(u)
	return accuo
}

// SetNillableInvites sets the "invites" field if the given value is not nil.
func (accuo *AppCommissionConfigUpdateOne) SetNillableInvites(u *uint32) *AppCommissionConfigUpdateOne {
	if u != nil {
		accuo.SetInvites(*u)
	}
	return accuo
}

// AddInvites adds u to the "invites" field.
func (accuo *AppCommissionConfigUpdateOne) AddInvites(u int32) *AppCommissionConfigUpdateOne {
	accuo.mutation.AddInvites(u)
	return accuo
}

// ClearInvites clears the value of the "invites" field.
func (accuo *AppCommissionConfigUpdateOne) ClearInvites() *AppCommissionConfigUpdateOne {
	accuo.mutation.ClearInvites()
	return accuo
}

// SetSettleType sets the "settle_type" field.
func (accuo *AppCommissionConfigUpdateOne) SetSettleType(s string) *AppCommissionConfigUpdateOne {
	accuo.mutation.SetSettleType(s)
	return accuo
}

// SetNillableSettleType sets the "settle_type" field if the given value is not nil.
func (accuo *AppCommissionConfigUpdateOne) SetNillableSettleType(s *string) *AppCommissionConfigUpdateOne {
	if s != nil {
		accuo.SetSettleType(*s)
	}
	return accuo
}

// ClearSettleType clears the value of the "settle_type" field.
func (accuo *AppCommissionConfigUpdateOne) ClearSettleType() *AppCommissionConfigUpdateOne {
	accuo.mutation.ClearSettleType()
	return accuo
}

// Mutation returns the AppCommissionConfigMutation object of the builder.
func (accuo *AppCommissionConfigUpdateOne) Mutation() *AppCommissionConfigMutation {
	return accuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (accuo *AppCommissionConfigUpdateOne) Select(field string, fields ...string) *AppCommissionConfigUpdateOne {
	accuo.fields = append([]string{field}, fields...)
	return accuo
}

// Save executes the query and returns the updated AppCommissionConfig entity.
func (accuo *AppCommissionConfigUpdateOne) Save(ctx context.Context) (*AppCommissionConfig, error) {
	var (
		err  error
		node *AppCommissionConfig
	)
	if err := accuo.defaults(); err != nil {
		return nil, err
	}
	if len(accuo.hooks) == 0 {
		node, err = accuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AppCommissionConfigMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			accuo.mutation = mutation
			node, err = accuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(accuo.hooks) - 1; i >= 0; i-- {
			if accuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = accuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, accuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*AppCommissionConfig)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from AppCommissionConfigMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (accuo *AppCommissionConfigUpdateOne) SaveX(ctx context.Context) *AppCommissionConfig {
	node, err := accuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (accuo *AppCommissionConfigUpdateOne) Exec(ctx context.Context) error {
	_, err := accuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (accuo *AppCommissionConfigUpdateOne) ExecX(ctx context.Context) {
	if err := accuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (accuo *AppCommissionConfigUpdateOne) defaults() error {
	if _, ok := accuo.mutation.UpdatedAt(); !ok {
		if appcommissionconfig.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized appcommissionconfig.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := appcommissionconfig.UpdateDefaultUpdatedAt()
		accuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (accuo *AppCommissionConfigUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *AppCommissionConfigUpdateOne {
	accuo.modifiers = append(accuo.modifiers, modifiers...)
	return accuo
}

func (accuo *AppCommissionConfigUpdateOne) sqlSave(ctx context.Context) (_node *AppCommissionConfig, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   appcommissionconfig.Table,
			Columns: appcommissionconfig.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: appcommissionconfig.FieldID,
			},
		},
	}
	id, ok := accuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "AppCommissionConfig.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := accuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, appcommissionconfig.FieldID)
		for _, f := range fields {
			if !appcommissionconfig.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != appcommissionconfig.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := accuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := accuo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appcommissionconfig.FieldCreatedAt,
		})
	}
	if value, ok := accuo.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appcommissionconfig.FieldCreatedAt,
		})
	}
	if value, ok := accuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appcommissionconfig.FieldUpdatedAt,
		})
	}
	if value, ok := accuo.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appcommissionconfig.FieldUpdatedAt,
		})
	}
	if value, ok := accuo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appcommissionconfig.FieldDeletedAt,
		})
	}
	if value, ok := accuo.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appcommissionconfig.FieldDeletedAt,
		})
	}
	if value, ok := accuo.mutation.EntID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: appcommissionconfig.FieldEntID,
		})
	}
	if value, ok := accuo.mutation.AppID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: appcommissionconfig.FieldAppID,
		})
	}
	if accuo.mutation.AppIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: appcommissionconfig.FieldAppID,
		})
	}
	if value, ok := accuo.mutation.ThresholdAmount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: appcommissionconfig.FieldThresholdAmount,
		})
	}
	if accuo.mutation.ThresholdAmountCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Column: appcommissionconfig.FieldThresholdAmount,
		})
	}
	if value, ok := accuo.mutation.AmountOrPercent(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: appcommissionconfig.FieldAmountOrPercent,
		})
	}
	if accuo.mutation.AmountOrPercentCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Column: appcommissionconfig.FieldAmountOrPercent,
		})
	}
	if value, ok := accuo.mutation.StartAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appcommissionconfig.FieldStartAt,
		})
	}
	if value, ok := accuo.mutation.AddedStartAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appcommissionconfig.FieldStartAt,
		})
	}
	if accuo.mutation.StartAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Column: appcommissionconfig.FieldStartAt,
		})
	}
	if value, ok := accuo.mutation.EndAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appcommissionconfig.FieldEndAt,
		})
	}
	if value, ok := accuo.mutation.AddedEndAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appcommissionconfig.FieldEndAt,
		})
	}
	if accuo.mutation.EndAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Column: appcommissionconfig.FieldEndAt,
		})
	}
	if value, ok := accuo.mutation.Invites(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appcommissionconfig.FieldInvites,
		})
	}
	if value, ok := accuo.mutation.AddedInvites(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appcommissionconfig.FieldInvites,
		})
	}
	if accuo.mutation.InvitesCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Column: appcommissionconfig.FieldInvites,
		})
	}
	if value, ok := accuo.mutation.SettleType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: appcommissionconfig.FieldSettleType,
		})
	}
	if accuo.mutation.SettleTypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: appcommissionconfig.FieldSettleType,
		})
	}
	_spec.Modifiers = accuo.modifiers
	_node = &AppCommissionConfig{config: accuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, accuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{appcommissionconfig.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
