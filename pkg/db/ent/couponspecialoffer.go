// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/inspire-middleware/pkg/db/ent/couponspecialoffer"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// CouponSpecialOffer is the model entity for the CouponSpecialOffer schema.
type CouponSpecialOffer struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt uint32 `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt uint32 `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt uint32 `json:"deleted_at,omitempty"`
	// AppID holds the value of the "app_id" field.
	AppID uuid.UUID `json:"app_id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID uuid.UUID `json:"user_id,omitempty"`
	// Amount holds the value of the "amount" field.
	Amount decimal.Decimal `json:"amount,omitempty"`
	// ReleasedByUserID holds the value of the "released_by_user_id" field.
	ReleasedByUserID uuid.UUID `json:"released_by_user_id,omitempty"`
	// StartAt holds the value of the "start_at" field.
	StartAt uint32 `json:"start_at,omitempty"`
	// DurationDays holds the value of the "duration_days" field.
	DurationDays uint32 `json:"duration_days,omitempty"`
	// Message holds the value of the "message" field.
	Message string `json:"message,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CouponSpecialOffer) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case couponspecialoffer.FieldAmount:
			values[i] = new(decimal.Decimal)
		case couponspecialoffer.FieldCreatedAt, couponspecialoffer.FieldUpdatedAt, couponspecialoffer.FieldDeletedAt, couponspecialoffer.FieldStartAt, couponspecialoffer.FieldDurationDays:
			values[i] = new(sql.NullInt64)
		case couponspecialoffer.FieldMessage:
			values[i] = new(sql.NullString)
		case couponspecialoffer.FieldID, couponspecialoffer.FieldAppID, couponspecialoffer.FieldUserID, couponspecialoffer.FieldReleasedByUserID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type CouponSpecialOffer", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CouponSpecialOffer fields.
func (cso *CouponSpecialOffer) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case couponspecialoffer.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				cso.ID = *value
			}
		case couponspecialoffer.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				cso.CreatedAt = uint32(value.Int64)
			}
		case couponspecialoffer.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				cso.UpdatedAt = uint32(value.Int64)
			}
		case couponspecialoffer.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				cso.DeletedAt = uint32(value.Int64)
			}
		case couponspecialoffer.FieldAppID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field app_id", values[i])
			} else if value != nil {
				cso.AppID = *value
			}
		case couponspecialoffer.FieldUserID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value != nil {
				cso.UserID = *value
			}
		case couponspecialoffer.FieldAmount:
			if value, ok := values[i].(*decimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field amount", values[i])
			} else if value != nil {
				cso.Amount = *value
			}
		case couponspecialoffer.FieldReleasedByUserID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field released_by_user_id", values[i])
			} else if value != nil {
				cso.ReleasedByUserID = *value
			}
		case couponspecialoffer.FieldStartAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field start_at", values[i])
			} else if value.Valid {
				cso.StartAt = uint32(value.Int64)
			}
		case couponspecialoffer.FieldDurationDays:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field duration_days", values[i])
			} else if value.Valid {
				cso.DurationDays = uint32(value.Int64)
			}
		case couponspecialoffer.FieldMessage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field message", values[i])
			} else if value.Valid {
				cso.Message = value.String
			}
		}
	}
	return nil
}

// Update returns a builder for updating this CouponSpecialOffer.
// Note that you need to call CouponSpecialOffer.Unwrap() before calling this method if this CouponSpecialOffer
// was returned from a transaction, and the transaction was committed or rolled back.
func (cso *CouponSpecialOffer) Update() *CouponSpecialOfferUpdateOne {
	return (&CouponSpecialOfferClient{config: cso.config}).UpdateOne(cso)
}

// Unwrap unwraps the CouponSpecialOffer entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (cso *CouponSpecialOffer) Unwrap() *CouponSpecialOffer {
	_tx, ok := cso.config.driver.(*txDriver)
	if !ok {
		panic("ent: CouponSpecialOffer is not a transactional entity")
	}
	cso.config.driver = _tx.drv
	return cso
}

// String implements the fmt.Stringer.
func (cso *CouponSpecialOffer) String() string {
	var builder strings.Builder
	builder.WriteString("CouponSpecialOffer(")
	builder.WriteString(fmt.Sprintf("id=%v, ", cso.ID))
	builder.WriteString("created_at=")
	builder.WriteString(fmt.Sprintf("%v", cso.CreatedAt))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(fmt.Sprintf("%v", cso.UpdatedAt))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(fmt.Sprintf("%v", cso.DeletedAt))
	builder.WriteString(", ")
	builder.WriteString("app_id=")
	builder.WriteString(fmt.Sprintf("%v", cso.AppID))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", cso.UserID))
	builder.WriteString(", ")
	builder.WriteString("amount=")
	builder.WriteString(fmt.Sprintf("%v", cso.Amount))
	builder.WriteString(", ")
	builder.WriteString("released_by_user_id=")
	builder.WriteString(fmt.Sprintf("%v", cso.ReleasedByUserID))
	builder.WriteString(", ")
	builder.WriteString("start_at=")
	builder.WriteString(fmt.Sprintf("%v", cso.StartAt))
	builder.WriteString(", ")
	builder.WriteString("duration_days=")
	builder.WriteString(fmt.Sprintf("%v", cso.DurationDays))
	builder.WriteString(", ")
	builder.WriteString("message=")
	builder.WriteString(cso.Message)
	builder.WriteByte(')')
	return builder.String()
}

// CouponSpecialOffers is a parsable slice of CouponSpecialOffer.
type CouponSpecialOffers []*CouponSpecialOffer

func (cso CouponSpecialOffers) config(cfg config) {
	for _i := range cso {
		cso[_i].config = cfg
	}
}
