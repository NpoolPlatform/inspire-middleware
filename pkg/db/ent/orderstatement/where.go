// Code generated by ent, DO NOT EDIT.

package orderstatement

import (
	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/inspire-middleware/pkg/db/ent/predicate"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// ID filters vertices based on their ID field.
func ID(id uint32) predicate.OrderStatement {
	return predicate.OrderStatement(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint32) predicate.OrderStatement {
	return predicate.OrderStatement(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint32) predicate.OrderStatement {
	return predicate.OrderStatement(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint32) predicate.OrderStatement {
	return predicate.OrderStatement(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint32) predicate.OrderStatement {
	return predicate.OrderStatement(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint32) predicate.OrderStatement {
	return predicate.OrderStatement(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint32) predicate.OrderStatement {
	return predicate.OrderStatement(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint32) predicate.OrderStatement {
	return predicate.OrderStatement(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint32) predicate.OrderStatement {
	return predicate.OrderStatement(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v uint32) predicate.OrderStatement {
	return predicate.OrderStatement(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v uint32) predicate.OrderStatement {
	return predicate.OrderStatement(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v uint32) predicate.OrderStatement {
	return predicate.OrderStatement(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// EntID applies equality check predicate on the "ent_id" field. It's identical to EntIDEQ.
func EntID(v uuid.UUID) predicate.OrderStatement {
	return predicate.OrderStatement(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEntID), v))
	})
}

// AppID applies equality check predicate on the "app_id" field. It's identical to AppIDEQ.
func AppID(v uuid.UUID) predicate.OrderStatement {
	return predicate.OrderStatement(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAppID), v))
	})
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v uuid.UUID) predicate.OrderStatement {
	return predicate.OrderStatement(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUserID), v))
	})
}

// GoodID applies equality check predicate on the "good_id" field. It's identical to GoodIDEQ.
func GoodID(v uuid.UUID) predicate.OrderStatement {
	return predicate.OrderStatement(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGoodID), v))
	})
}

// AppGoodID applies equality check predicate on the "app_good_id" field. It's identical to AppGoodIDEQ.
func AppGoodID(v uuid.UUID) predicate.OrderStatement {
	return predicate.OrderStatement(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAppGoodID), v))
	})
}

// OrderID applies equality check predicate on the "order_id" field. It's identical to OrderIDEQ.
func OrderID(v uuid.UUID) predicate.OrderStatement {
	return predicate.OrderStatement(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOrderID), v))
	})
}

// OrderUserID applies equality check predicate on the "order_user_id" field. It's identical to OrderUserIDEQ.
func OrderUserID(v uuid.UUID) predicate.OrderStatement {
	return predicate.OrderStatement(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOrderUserID), v))
	})
}

// GoodCoinTypeID applies equality check predicate on the "good_coin_type_id" field. It's identical to GoodCoinTypeIDEQ.
func GoodCoinTypeID(v uuid.UUID) predicate.OrderStatement {
	return predicate.OrderStatement(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGoodCoinTypeID), v))
	})
}

// Units applies equality check predicate on the "units" field. It's identical to UnitsEQ.
func Units(v decimal.Decimal) predicate.OrderStatement {
	return predicate.OrderStatement(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUnits), v))
	})
}

// GoodValueUsd applies equality check predicate on the "good_value_usd" field. It's identical to GoodValueUsdEQ.
func GoodValueUsd(v decimal.Decimal) predicate.OrderStatement {
	return predicate.OrderStatement(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGoodValueUsd), v))
	})
}

// PaymentAmountUsd applies equality check predicate on the "payment_amount_usd" field. It's identical to PaymentAmountUsdEQ.
func PaymentAmountUsd(v decimal.Decimal) predicate.OrderStatement {
	return predicate.OrderStatement(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPaymentAmountUsd), v))
	})
}

// CommissionAmountUsd applies equality check predicate on the "commission_amount_usd" field. It's identical to CommissionAmountUsdEQ.
func CommissionAmountUsd(v decimal.Decimal) predicate.OrderStatement {
	return predicate.OrderStatement(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCommissionAmountUsd), v))
	})
}

// AppConfigID applies equality check predicate on the "app_config_id" field. It's identical to AppConfigIDEQ.
func AppConfigID(v uuid.UUID) predicate.OrderStatement {
	return predicate.OrderStatement(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAppConfigID), v))
	})
}

// CommissionConfigID applies equality check predicate on the "commission_config_id" field. It's identical to CommissionConfigIDEQ.
func CommissionConfigID(v uuid.UUID) predicate.OrderStatement {
	return predicate.OrderStatement(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCommissionConfigID), v))
	})
}

// CommissionConfigType applies equality check predicate on the "commission_config_type" field. It's identical to CommissionConfigTypeEQ.
func CommissionConfigType(v string) predicate.OrderStatement {
	return predicate.OrderStatement(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCommissionConfigType), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v uint32) predicate.OrderStatement {
	return predicate.OrderStatement(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v uint32) predicate.OrderStatement {
	return predicate.OrderStatement(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...uint32) predicate.OrderStatement {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderStatement(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...uint32) predicate.OrderStatement {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderStatement(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v uint32) predicate.OrderStatement {
	return predicate.OrderStatement(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v uint32) predicate.OrderStatement {
	return predicate.OrderStatement(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v uint32) predicate.OrderStatement {
	return predicate.OrderStatement(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v uint32) predicate.OrderStatement {
	return predicate.OrderStatement(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v uint32) predicate.OrderStatement {
	return predicate.OrderStatement(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v uint32) predicate.OrderStatement {
	return predicate.OrderStatement(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...uint32) predicate.OrderStatement {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderStatement(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...uint32) predicate.OrderStatement {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderStatement(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v uint32) predicate.OrderStatement {
	return predicate.OrderStatement(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v uint32) predicate.OrderStatement {
	return predicate.OrderStatement(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v uint32) predicate.OrderStatement {
	return predicate.OrderStatement(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v uint32) predicate.OrderStatement {
	return predicate.OrderStatement(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v uint32) predicate.OrderStatement {
	return predicate.OrderStatement(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v uint32) predicate.OrderStatement {
	return predicate.OrderStatement(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...uint32) predicate.OrderStatement {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderStatement(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...uint32) predicate.OrderStatement {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderStatement(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v uint32) predicate.OrderStatement {
	return predicate.OrderStatement(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v uint32) predicate.OrderStatement {
	return predicate.OrderStatement(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v uint32) predicate.OrderStatement {
	return predicate.OrderStatement(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v uint32) predicate.OrderStatement {
	return predicate.OrderStatement(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeletedAt), v))
	})
}

// EntIDEQ applies the EQ predicate on the "ent_id" field.
func EntIDEQ(v uuid.UUID) predicate.OrderStatement {
	return predicate.OrderStatement(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEntID), v))
	})
}

// EntIDNEQ applies the NEQ predicate on the "ent_id" field.
func EntIDNEQ(v uuid.UUID) predicate.OrderStatement {
	return predicate.OrderStatement(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEntID), v))
	})
}

// EntIDIn applies the In predicate on the "ent_id" field.
func EntIDIn(vs ...uuid.UUID) predicate.OrderStatement {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderStatement(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldEntID), v...))
	})
}

// EntIDNotIn applies the NotIn predicate on the "ent_id" field.
func EntIDNotIn(vs ...uuid.UUID) predicate.OrderStatement {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderStatement(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldEntID), v...))
	})
}

// EntIDGT applies the GT predicate on the "ent_id" field.
func EntIDGT(v uuid.UUID) predicate.OrderStatement {
	return predicate.OrderStatement(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEntID), v))
	})
}

// EntIDGTE applies the GTE predicate on the "ent_id" field.
func EntIDGTE(v uuid.UUID) predicate.OrderStatement {
	return predicate.OrderStatement(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEntID), v))
	})
}

// EntIDLT applies the LT predicate on the "ent_id" field.
func EntIDLT(v uuid.UUID) predicate.OrderStatement {
	return predicate.OrderStatement(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEntID), v))
	})
}

// EntIDLTE applies the LTE predicate on the "ent_id" field.
func EntIDLTE(v uuid.UUID) predicate.OrderStatement {
	return predicate.OrderStatement(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEntID), v))
	})
}

// AppIDEQ applies the EQ predicate on the "app_id" field.
func AppIDEQ(v uuid.UUID) predicate.OrderStatement {
	return predicate.OrderStatement(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAppID), v))
	})
}

// AppIDNEQ applies the NEQ predicate on the "app_id" field.
func AppIDNEQ(v uuid.UUID) predicate.OrderStatement {
	return predicate.OrderStatement(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAppID), v))
	})
}

// AppIDIn applies the In predicate on the "app_id" field.
func AppIDIn(vs ...uuid.UUID) predicate.OrderStatement {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderStatement(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldAppID), v...))
	})
}

// AppIDNotIn applies the NotIn predicate on the "app_id" field.
func AppIDNotIn(vs ...uuid.UUID) predicate.OrderStatement {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderStatement(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldAppID), v...))
	})
}

// AppIDGT applies the GT predicate on the "app_id" field.
func AppIDGT(v uuid.UUID) predicate.OrderStatement {
	return predicate.OrderStatement(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAppID), v))
	})
}

// AppIDGTE applies the GTE predicate on the "app_id" field.
func AppIDGTE(v uuid.UUID) predicate.OrderStatement {
	return predicate.OrderStatement(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAppID), v))
	})
}

// AppIDLT applies the LT predicate on the "app_id" field.
func AppIDLT(v uuid.UUID) predicate.OrderStatement {
	return predicate.OrderStatement(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAppID), v))
	})
}

// AppIDLTE applies the LTE predicate on the "app_id" field.
func AppIDLTE(v uuid.UUID) predicate.OrderStatement {
	return predicate.OrderStatement(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAppID), v))
	})
}

// AppIDIsNil applies the IsNil predicate on the "app_id" field.
func AppIDIsNil() predicate.OrderStatement {
	return predicate.OrderStatement(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldAppID)))
	})
}

// AppIDNotNil applies the NotNil predicate on the "app_id" field.
func AppIDNotNil() predicate.OrderStatement {
	return predicate.OrderStatement(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldAppID)))
	})
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v uuid.UUID) predicate.OrderStatement {
	return predicate.OrderStatement(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUserID), v))
	})
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v uuid.UUID) predicate.OrderStatement {
	return predicate.OrderStatement(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUserID), v))
	})
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...uuid.UUID) predicate.OrderStatement {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderStatement(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUserID), v...))
	})
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...uuid.UUID) predicate.OrderStatement {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderStatement(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUserID), v...))
	})
}

// UserIDGT applies the GT predicate on the "user_id" field.
func UserIDGT(v uuid.UUID) predicate.OrderStatement {
	return predicate.OrderStatement(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUserID), v))
	})
}

// UserIDGTE applies the GTE predicate on the "user_id" field.
func UserIDGTE(v uuid.UUID) predicate.OrderStatement {
	return predicate.OrderStatement(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUserID), v))
	})
}

// UserIDLT applies the LT predicate on the "user_id" field.
func UserIDLT(v uuid.UUID) predicate.OrderStatement {
	return predicate.OrderStatement(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUserID), v))
	})
}

// UserIDLTE applies the LTE predicate on the "user_id" field.
func UserIDLTE(v uuid.UUID) predicate.OrderStatement {
	return predicate.OrderStatement(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUserID), v))
	})
}

// UserIDIsNil applies the IsNil predicate on the "user_id" field.
func UserIDIsNil() predicate.OrderStatement {
	return predicate.OrderStatement(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldUserID)))
	})
}

// UserIDNotNil applies the NotNil predicate on the "user_id" field.
func UserIDNotNil() predicate.OrderStatement {
	return predicate.OrderStatement(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldUserID)))
	})
}

// GoodIDEQ applies the EQ predicate on the "good_id" field.
func GoodIDEQ(v uuid.UUID) predicate.OrderStatement {
	return predicate.OrderStatement(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGoodID), v))
	})
}

// GoodIDNEQ applies the NEQ predicate on the "good_id" field.
func GoodIDNEQ(v uuid.UUID) predicate.OrderStatement {
	return predicate.OrderStatement(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldGoodID), v))
	})
}

// GoodIDIn applies the In predicate on the "good_id" field.
func GoodIDIn(vs ...uuid.UUID) predicate.OrderStatement {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderStatement(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldGoodID), v...))
	})
}

// GoodIDNotIn applies the NotIn predicate on the "good_id" field.
func GoodIDNotIn(vs ...uuid.UUID) predicate.OrderStatement {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderStatement(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldGoodID), v...))
	})
}

// GoodIDGT applies the GT predicate on the "good_id" field.
func GoodIDGT(v uuid.UUID) predicate.OrderStatement {
	return predicate.OrderStatement(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldGoodID), v))
	})
}

// GoodIDGTE applies the GTE predicate on the "good_id" field.
func GoodIDGTE(v uuid.UUID) predicate.OrderStatement {
	return predicate.OrderStatement(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldGoodID), v))
	})
}

// GoodIDLT applies the LT predicate on the "good_id" field.
func GoodIDLT(v uuid.UUID) predicate.OrderStatement {
	return predicate.OrderStatement(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldGoodID), v))
	})
}

// GoodIDLTE applies the LTE predicate on the "good_id" field.
func GoodIDLTE(v uuid.UUID) predicate.OrderStatement {
	return predicate.OrderStatement(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldGoodID), v))
	})
}

// GoodIDIsNil applies the IsNil predicate on the "good_id" field.
func GoodIDIsNil() predicate.OrderStatement {
	return predicate.OrderStatement(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldGoodID)))
	})
}

// GoodIDNotNil applies the NotNil predicate on the "good_id" field.
func GoodIDNotNil() predicate.OrderStatement {
	return predicate.OrderStatement(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldGoodID)))
	})
}

// AppGoodIDEQ applies the EQ predicate on the "app_good_id" field.
func AppGoodIDEQ(v uuid.UUID) predicate.OrderStatement {
	return predicate.OrderStatement(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAppGoodID), v))
	})
}

// AppGoodIDNEQ applies the NEQ predicate on the "app_good_id" field.
func AppGoodIDNEQ(v uuid.UUID) predicate.OrderStatement {
	return predicate.OrderStatement(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAppGoodID), v))
	})
}

// AppGoodIDIn applies the In predicate on the "app_good_id" field.
func AppGoodIDIn(vs ...uuid.UUID) predicate.OrderStatement {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderStatement(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldAppGoodID), v...))
	})
}

// AppGoodIDNotIn applies the NotIn predicate on the "app_good_id" field.
func AppGoodIDNotIn(vs ...uuid.UUID) predicate.OrderStatement {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderStatement(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldAppGoodID), v...))
	})
}

// AppGoodIDGT applies the GT predicate on the "app_good_id" field.
func AppGoodIDGT(v uuid.UUID) predicate.OrderStatement {
	return predicate.OrderStatement(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAppGoodID), v))
	})
}

// AppGoodIDGTE applies the GTE predicate on the "app_good_id" field.
func AppGoodIDGTE(v uuid.UUID) predicate.OrderStatement {
	return predicate.OrderStatement(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAppGoodID), v))
	})
}

// AppGoodIDLT applies the LT predicate on the "app_good_id" field.
func AppGoodIDLT(v uuid.UUID) predicate.OrderStatement {
	return predicate.OrderStatement(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAppGoodID), v))
	})
}

// AppGoodIDLTE applies the LTE predicate on the "app_good_id" field.
func AppGoodIDLTE(v uuid.UUID) predicate.OrderStatement {
	return predicate.OrderStatement(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAppGoodID), v))
	})
}

// AppGoodIDIsNil applies the IsNil predicate on the "app_good_id" field.
func AppGoodIDIsNil() predicate.OrderStatement {
	return predicate.OrderStatement(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldAppGoodID)))
	})
}

// AppGoodIDNotNil applies the NotNil predicate on the "app_good_id" field.
func AppGoodIDNotNil() predicate.OrderStatement {
	return predicate.OrderStatement(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldAppGoodID)))
	})
}

// OrderIDEQ applies the EQ predicate on the "order_id" field.
func OrderIDEQ(v uuid.UUID) predicate.OrderStatement {
	return predicate.OrderStatement(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOrderID), v))
	})
}

// OrderIDNEQ applies the NEQ predicate on the "order_id" field.
func OrderIDNEQ(v uuid.UUID) predicate.OrderStatement {
	return predicate.OrderStatement(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOrderID), v))
	})
}

// OrderIDIn applies the In predicate on the "order_id" field.
func OrderIDIn(vs ...uuid.UUID) predicate.OrderStatement {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderStatement(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldOrderID), v...))
	})
}

// OrderIDNotIn applies the NotIn predicate on the "order_id" field.
func OrderIDNotIn(vs ...uuid.UUID) predicate.OrderStatement {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderStatement(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldOrderID), v...))
	})
}

// OrderIDGT applies the GT predicate on the "order_id" field.
func OrderIDGT(v uuid.UUID) predicate.OrderStatement {
	return predicate.OrderStatement(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOrderID), v))
	})
}

// OrderIDGTE applies the GTE predicate on the "order_id" field.
func OrderIDGTE(v uuid.UUID) predicate.OrderStatement {
	return predicate.OrderStatement(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOrderID), v))
	})
}

// OrderIDLT applies the LT predicate on the "order_id" field.
func OrderIDLT(v uuid.UUID) predicate.OrderStatement {
	return predicate.OrderStatement(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOrderID), v))
	})
}

// OrderIDLTE applies the LTE predicate on the "order_id" field.
func OrderIDLTE(v uuid.UUID) predicate.OrderStatement {
	return predicate.OrderStatement(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOrderID), v))
	})
}

// OrderIDIsNil applies the IsNil predicate on the "order_id" field.
func OrderIDIsNil() predicate.OrderStatement {
	return predicate.OrderStatement(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldOrderID)))
	})
}

// OrderIDNotNil applies the NotNil predicate on the "order_id" field.
func OrderIDNotNil() predicate.OrderStatement {
	return predicate.OrderStatement(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldOrderID)))
	})
}

// OrderUserIDEQ applies the EQ predicate on the "order_user_id" field.
func OrderUserIDEQ(v uuid.UUID) predicate.OrderStatement {
	return predicate.OrderStatement(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOrderUserID), v))
	})
}

// OrderUserIDNEQ applies the NEQ predicate on the "order_user_id" field.
func OrderUserIDNEQ(v uuid.UUID) predicate.OrderStatement {
	return predicate.OrderStatement(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOrderUserID), v))
	})
}

// OrderUserIDIn applies the In predicate on the "order_user_id" field.
func OrderUserIDIn(vs ...uuid.UUID) predicate.OrderStatement {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderStatement(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldOrderUserID), v...))
	})
}

// OrderUserIDNotIn applies the NotIn predicate on the "order_user_id" field.
func OrderUserIDNotIn(vs ...uuid.UUID) predicate.OrderStatement {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderStatement(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldOrderUserID), v...))
	})
}

// OrderUserIDGT applies the GT predicate on the "order_user_id" field.
func OrderUserIDGT(v uuid.UUID) predicate.OrderStatement {
	return predicate.OrderStatement(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOrderUserID), v))
	})
}

// OrderUserIDGTE applies the GTE predicate on the "order_user_id" field.
func OrderUserIDGTE(v uuid.UUID) predicate.OrderStatement {
	return predicate.OrderStatement(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOrderUserID), v))
	})
}

// OrderUserIDLT applies the LT predicate on the "order_user_id" field.
func OrderUserIDLT(v uuid.UUID) predicate.OrderStatement {
	return predicate.OrderStatement(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOrderUserID), v))
	})
}

// OrderUserIDLTE applies the LTE predicate on the "order_user_id" field.
func OrderUserIDLTE(v uuid.UUID) predicate.OrderStatement {
	return predicate.OrderStatement(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOrderUserID), v))
	})
}

// OrderUserIDIsNil applies the IsNil predicate on the "order_user_id" field.
func OrderUserIDIsNil() predicate.OrderStatement {
	return predicate.OrderStatement(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldOrderUserID)))
	})
}

// OrderUserIDNotNil applies the NotNil predicate on the "order_user_id" field.
func OrderUserIDNotNil() predicate.OrderStatement {
	return predicate.OrderStatement(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldOrderUserID)))
	})
}

// GoodCoinTypeIDEQ applies the EQ predicate on the "good_coin_type_id" field.
func GoodCoinTypeIDEQ(v uuid.UUID) predicate.OrderStatement {
	return predicate.OrderStatement(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGoodCoinTypeID), v))
	})
}

// GoodCoinTypeIDNEQ applies the NEQ predicate on the "good_coin_type_id" field.
func GoodCoinTypeIDNEQ(v uuid.UUID) predicate.OrderStatement {
	return predicate.OrderStatement(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldGoodCoinTypeID), v))
	})
}

// GoodCoinTypeIDIn applies the In predicate on the "good_coin_type_id" field.
func GoodCoinTypeIDIn(vs ...uuid.UUID) predicate.OrderStatement {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderStatement(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldGoodCoinTypeID), v...))
	})
}

// GoodCoinTypeIDNotIn applies the NotIn predicate on the "good_coin_type_id" field.
func GoodCoinTypeIDNotIn(vs ...uuid.UUID) predicate.OrderStatement {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderStatement(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldGoodCoinTypeID), v...))
	})
}

// GoodCoinTypeIDGT applies the GT predicate on the "good_coin_type_id" field.
func GoodCoinTypeIDGT(v uuid.UUID) predicate.OrderStatement {
	return predicate.OrderStatement(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldGoodCoinTypeID), v))
	})
}

// GoodCoinTypeIDGTE applies the GTE predicate on the "good_coin_type_id" field.
func GoodCoinTypeIDGTE(v uuid.UUID) predicate.OrderStatement {
	return predicate.OrderStatement(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldGoodCoinTypeID), v))
	})
}

// GoodCoinTypeIDLT applies the LT predicate on the "good_coin_type_id" field.
func GoodCoinTypeIDLT(v uuid.UUID) predicate.OrderStatement {
	return predicate.OrderStatement(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldGoodCoinTypeID), v))
	})
}

// GoodCoinTypeIDLTE applies the LTE predicate on the "good_coin_type_id" field.
func GoodCoinTypeIDLTE(v uuid.UUID) predicate.OrderStatement {
	return predicate.OrderStatement(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldGoodCoinTypeID), v))
	})
}

// GoodCoinTypeIDIsNil applies the IsNil predicate on the "good_coin_type_id" field.
func GoodCoinTypeIDIsNil() predicate.OrderStatement {
	return predicate.OrderStatement(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldGoodCoinTypeID)))
	})
}

// GoodCoinTypeIDNotNil applies the NotNil predicate on the "good_coin_type_id" field.
func GoodCoinTypeIDNotNil() predicate.OrderStatement {
	return predicate.OrderStatement(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldGoodCoinTypeID)))
	})
}

// UnitsEQ applies the EQ predicate on the "units" field.
func UnitsEQ(v decimal.Decimal) predicate.OrderStatement {
	return predicate.OrderStatement(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUnits), v))
	})
}

// UnitsNEQ applies the NEQ predicate on the "units" field.
func UnitsNEQ(v decimal.Decimal) predicate.OrderStatement {
	return predicate.OrderStatement(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUnits), v))
	})
}

// UnitsIn applies the In predicate on the "units" field.
func UnitsIn(vs ...decimal.Decimal) predicate.OrderStatement {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderStatement(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUnits), v...))
	})
}

// UnitsNotIn applies the NotIn predicate on the "units" field.
func UnitsNotIn(vs ...decimal.Decimal) predicate.OrderStatement {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderStatement(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUnits), v...))
	})
}

// UnitsGT applies the GT predicate on the "units" field.
func UnitsGT(v decimal.Decimal) predicate.OrderStatement {
	return predicate.OrderStatement(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUnits), v))
	})
}

// UnitsGTE applies the GTE predicate on the "units" field.
func UnitsGTE(v decimal.Decimal) predicate.OrderStatement {
	return predicate.OrderStatement(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUnits), v))
	})
}

// UnitsLT applies the LT predicate on the "units" field.
func UnitsLT(v decimal.Decimal) predicate.OrderStatement {
	return predicate.OrderStatement(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUnits), v))
	})
}

// UnitsLTE applies the LTE predicate on the "units" field.
func UnitsLTE(v decimal.Decimal) predicate.OrderStatement {
	return predicate.OrderStatement(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUnits), v))
	})
}

// UnitsIsNil applies the IsNil predicate on the "units" field.
func UnitsIsNil() predicate.OrderStatement {
	return predicate.OrderStatement(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldUnits)))
	})
}

// UnitsNotNil applies the NotNil predicate on the "units" field.
func UnitsNotNil() predicate.OrderStatement {
	return predicate.OrderStatement(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldUnits)))
	})
}

// GoodValueUsdEQ applies the EQ predicate on the "good_value_usd" field.
func GoodValueUsdEQ(v decimal.Decimal) predicate.OrderStatement {
	return predicate.OrderStatement(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGoodValueUsd), v))
	})
}

// GoodValueUsdNEQ applies the NEQ predicate on the "good_value_usd" field.
func GoodValueUsdNEQ(v decimal.Decimal) predicate.OrderStatement {
	return predicate.OrderStatement(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldGoodValueUsd), v))
	})
}

// GoodValueUsdIn applies the In predicate on the "good_value_usd" field.
func GoodValueUsdIn(vs ...decimal.Decimal) predicate.OrderStatement {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderStatement(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldGoodValueUsd), v...))
	})
}

// GoodValueUsdNotIn applies the NotIn predicate on the "good_value_usd" field.
func GoodValueUsdNotIn(vs ...decimal.Decimal) predicate.OrderStatement {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderStatement(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldGoodValueUsd), v...))
	})
}

// GoodValueUsdGT applies the GT predicate on the "good_value_usd" field.
func GoodValueUsdGT(v decimal.Decimal) predicate.OrderStatement {
	return predicate.OrderStatement(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldGoodValueUsd), v))
	})
}

// GoodValueUsdGTE applies the GTE predicate on the "good_value_usd" field.
func GoodValueUsdGTE(v decimal.Decimal) predicate.OrderStatement {
	return predicate.OrderStatement(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldGoodValueUsd), v))
	})
}

// GoodValueUsdLT applies the LT predicate on the "good_value_usd" field.
func GoodValueUsdLT(v decimal.Decimal) predicate.OrderStatement {
	return predicate.OrderStatement(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldGoodValueUsd), v))
	})
}

// GoodValueUsdLTE applies the LTE predicate on the "good_value_usd" field.
func GoodValueUsdLTE(v decimal.Decimal) predicate.OrderStatement {
	return predicate.OrderStatement(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldGoodValueUsd), v))
	})
}

// GoodValueUsdIsNil applies the IsNil predicate on the "good_value_usd" field.
func GoodValueUsdIsNil() predicate.OrderStatement {
	return predicate.OrderStatement(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldGoodValueUsd)))
	})
}

// GoodValueUsdNotNil applies the NotNil predicate on the "good_value_usd" field.
func GoodValueUsdNotNil() predicate.OrderStatement {
	return predicate.OrderStatement(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldGoodValueUsd)))
	})
}

// PaymentAmountUsdEQ applies the EQ predicate on the "payment_amount_usd" field.
func PaymentAmountUsdEQ(v decimal.Decimal) predicate.OrderStatement {
	return predicate.OrderStatement(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPaymentAmountUsd), v))
	})
}

// PaymentAmountUsdNEQ applies the NEQ predicate on the "payment_amount_usd" field.
func PaymentAmountUsdNEQ(v decimal.Decimal) predicate.OrderStatement {
	return predicate.OrderStatement(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPaymentAmountUsd), v))
	})
}

// PaymentAmountUsdIn applies the In predicate on the "payment_amount_usd" field.
func PaymentAmountUsdIn(vs ...decimal.Decimal) predicate.OrderStatement {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderStatement(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldPaymentAmountUsd), v...))
	})
}

// PaymentAmountUsdNotIn applies the NotIn predicate on the "payment_amount_usd" field.
func PaymentAmountUsdNotIn(vs ...decimal.Decimal) predicate.OrderStatement {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderStatement(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldPaymentAmountUsd), v...))
	})
}

// PaymentAmountUsdGT applies the GT predicate on the "payment_amount_usd" field.
func PaymentAmountUsdGT(v decimal.Decimal) predicate.OrderStatement {
	return predicate.OrderStatement(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPaymentAmountUsd), v))
	})
}

// PaymentAmountUsdGTE applies the GTE predicate on the "payment_amount_usd" field.
func PaymentAmountUsdGTE(v decimal.Decimal) predicate.OrderStatement {
	return predicate.OrderStatement(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPaymentAmountUsd), v))
	})
}

// PaymentAmountUsdLT applies the LT predicate on the "payment_amount_usd" field.
func PaymentAmountUsdLT(v decimal.Decimal) predicate.OrderStatement {
	return predicate.OrderStatement(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPaymentAmountUsd), v))
	})
}

// PaymentAmountUsdLTE applies the LTE predicate on the "payment_amount_usd" field.
func PaymentAmountUsdLTE(v decimal.Decimal) predicate.OrderStatement {
	return predicate.OrderStatement(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPaymentAmountUsd), v))
	})
}

// PaymentAmountUsdIsNil applies the IsNil predicate on the "payment_amount_usd" field.
func PaymentAmountUsdIsNil() predicate.OrderStatement {
	return predicate.OrderStatement(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldPaymentAmountUsd)))
	})
}

// PaymentAmountUsdNotNil applies the NotNil predicate on the "payment_amount_usd" field.
func PaymentAmountUsdNotNil() predicate.OrderStatement {
	return predicate.OrderStatement(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldPaymentAmountUsd)))
	})
}

// CommissionAmountUsdEQ applies the EQ predicate on the "commission_amount_usd" field.
func CommissionAmountUsdEQ(v decimal.Decimal) predicate.OrderStatement {
	return predicate.OrderStatement(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCommissionAmountUsd), v))
	})
}

// CommissionAmountUsdNEQ applies the NEQ predicate on the "commission_amount_usd" field.
func CommissionAmountUsdNEQ(v decimal.Decimal) predicate.OrderStatement {
	return predicate.OrderStatement(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCommissionAmountUsd), v))
	})
}

// CommissionAmountUsdIn applies the In predicate on the "commission_amount_usd" field.
func CommissionAmountUsdIn(vs ...decimal.Decimal) predicate.OrderStatement {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderStatement(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCommissionAmountUsd), v...))
	})
}

// CommissionAmountUsdNotIn applies the NotIn predicate on the "commission_amount_usd" field.
func CommissionAmountUsdNotIn(vs ...decimal.Decimal) predicate.OrderStatement {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderStatement(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCommissionAmountUsd), v...))
	})
}

// CommissionAmountUsdGT applies the GT predicate on the "commission_amount_usd" field.
func CommissionAmountUsdGT(v decimal.Decimal) predicate.OrderStatement {
	return predicate.OrderStatement(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCommissionAmountUsd), v))
	})
}

// CommissionAmountUsdGTE applies the GTE predicate on the "commission_amount_usd" field.
func CommissionAmountUsdGTE(v decimal.Decimal) predicate.OrderStatement {
	return predicate.OrderStatement(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCommissionAmountUsd), v))
	})
}

// CommissionAmountUsdLT applies the LT predicate on the "commission_amount_usd" field.
func CommissionAmountUsdLT(v decimal.Decimal) predicate.OrderStatement {
	return predicate.OrderStatement(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCommissionAmountUsd), v))
	})
}

// CommissionAmountUsdLTE applies the LTE predicate on the "commission_amount_usd" field.
func CommissionAmountUsdLTE(v decimal.Decimal) predicate.OrderStatement {
	return predicate.OrderStatement(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCommissionAmountUsd), v))
	})
}

// CommissionAmountUsdIsNil applies the IsNil predicate on the "commission_amount_usd" field.
func CommissionAmountUsdIsNil() predicate.OrderStatement {
	return predicate.OrderStatement(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCommissionAmountUsd)))
	})
}

// CommissionAmountUsdNotNil applies the NotNil predicate on the "commission_amount_usd" field.
func CommissionAmountUsdNotNil() predicate.OrderStatement {
	return predicate.OrderStatement(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCommissionAmountUsd)))
	})
}

// AppConfigIDEQ applies the EQ predicate on the "app_config_id" field.
func AppConfigIDEQ(v uuid.UUID) predicate.OrderStatement {
	return predicate.OrderStatement(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAppConfigID), v))
	})
}

// AppConfigIDNEQ applies the NEQ predicate on the "app_config_id" field.
func AppConfigIDNEQ(v uuid.UUID) predicate.OrderStatement {
	return predicate.OrderStatement(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAppConfigID), v))
	})
}

// AppConfigIDIn applies the In predicate on the "app_config_id" field.
func AppConfigIDIn(vs ...uuid.UUID) predicate.OrderStatement {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderStatement(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldAppConfigID), v...))
	})
}

// AppConfigIDNotIn applies the NotIn predicate on the "app_config_id" field.
func AppConfigIDNotIn(vs ...uuid.UUID) predicate.OrderStatement {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderStatement(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldAppConfigID), v...))
	})
}

// AppConfigIDGT applies the GT predicate on the "app_config_id" field.
func AppConfigIDGT(v uuid.UUID) predicate.OrderStatement {
	return predicate.OrderStatement(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAppConfigID), v))
	})
}

// AppConfigIDGTE applies the GTE predicate on the "app_config_id" field.
func AppConfigIDGTE(v uuid.UUID) predicate.OrderStatement {
	return predicate.OrderStatement(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAppConfigID), v))
	})
}

// AppConfigIDLT applies the LT predicate on the "app_config_id" field.
func AppConfigIDLT(v uuid.UUID) predicate.OrderStatement {
	return predicate.OrderStatement(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAppConfigID), v))
	})
}

// AppConfigIDLTE applies the LTE predicate on the "app_config_id" field.
func AppConfigIDLTE(v uuid.UUID) predicate.OrderStatement {
	return predicate.OrderStatement(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAppConfigID), v))
	})
}

// AppConfigIDIsNil applies the IsNil predicate on the "app_config_id" field.
func AppConfigIDIsNil() predicate.OrderStatement {
	return predicate.OrderStatement(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldAppConfigID)))
	})
}

// AppConfigIDNotNil applies the NotNil predicate on the "app_config_id" field.
func AppConfigIDNotNil() predicate.OrderStatement {
	return predicate.OrderStatement(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldAppConfigID)))
	})
}

// CommissionConfigIDEQ applies the EQ predicate on the "commission_config_id" field.
func CommissionConfigIDEQ(v uuid.UUID) predicate.OrderStatement {
	return predicate.OrderStatement(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCommissionConfigID), v))
	})
}

// CommissionConfigIDNEQ applies the NEQ predicate on the "commission_config_id" field.
func CommissionConfigIDNEQ(v uuid.UUID) predicate.OrderStatement {
	return predicate.OrderStatement(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCommissionConfigID), v))
	})
}

// CommissionConfigIDIn applies the In predicate on the "commission_config_id" field.
func CommissionConfigIDIn(vs ...uuid.UUID) predicate.OrderStatement {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderStatement(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCommissionConfigID), v...))
	})
}

// CommissionConfigIDNotIn applies the NotIn predicate on the "commission_config_id" field.
func CommissionConfigIDNotIn(vs ...uuid.UUID) predicate.OrderStatement {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderStatement(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCommissionConfigID), v...))
	})
}

// CommissionConfigIDGT applies the GT predicate on the "commission_config_id" field.
func CommissionConfigIDGT(v uuid.UUID) predicate.OrderStatement {
	return predicate.OrderStatement(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCommissionConfigID), v))
	})
}

// CommissionConfigIDGTE applies the GTE predicate on the "commission_config_id" field.
func CommissionConfigIDGTE(v uuid.UUID) predicate.OrderStatement {
	return predicate.OrderStatement(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCommissionConfigID), v))
	})
}

// CommissionConfigIDLT applies the LT predicate on the "commission_config_id" field.
func CommissionConfigIDLT(v uuid.UUID) predicate.OrderStatement {
	return predicate.OrderStatement(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCommissionConfigID), v))
	})
}

// CommissionConfigIDLTE applies the LTE predicate on the "commission_config_id" field.
func CommissionConfigIDLTE(v uuid.UUID) predicate.OrderStatement {
	return predicate.OrderStatement(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCommissionConfigID), v))
	})
}

// CommissionConfigIDIsNil applies the IsNil predicate on the "commission_config_id" field.
func CommissionConfigIDIsNil() predicate.OrderStatement {
	return predicate.OrderStatement(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCommissionConfigID)))
	})
}

// CommissionConfigIDNotNil applies the NotNil predicate on the "commission_config_id" field.
func CommissionConfigIDNotNil() predicate.OrderStatement {
	return predicate.OrderStatement(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCommissionConfigID)))
	})
}

// CommissionConfigTypeEQ applies the EQ predicate on the "commission_config_type" field.
func CommissionConfigTypeEQ(v string) predicate.OrderStatement {
	return predicate.OrderStatement(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCommissionConfigType), v))
	})
}

// CommissionConfigTypeNEQ applies the NEQ predicate on the "commission_config_type" field.
func CommissionConfigTypeNEQ(v string) predicate.OrderStatement {
	return predicate.OrderStatement(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCommissionConfigType), v))
	})
}

// CommissionConfigTypeIn applies the In predicate on the "commission_config_type" field.
func CommissionConfigTypeIn(vs ...string) predicate.OrderStatement {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderStatement(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCommissionConfigType), v...))
	})
}

// CommissionConfigTypeNotIn applies the NotIn predicate on the "commission_config_type" field.
func CommissionConfigTypeNotIn(vs ...string) predicate.OrderStatement {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderStatement(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCommissionConfigType), v...))
	})
}

// CommissionConfigTypeGT applies the GT predicate on the "commission_config_type" field.
func CommissionConfigTypeGT(v string) predicate.OrderStatement {
	return predicate.OrderStatement(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCommissionConfigType), v))
	})
}

// CommissionConfigTypeGTE applies the GTE predicate on the "commission_config_type" field.
func CommissionConfigTypeGTE(v string) predicate.OrderStatement {
	return predicate.OrderStatement(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCommissionConfigType), v))
	})
}

// CommissionConfigTypeLT applies the LT predicate on the "commission_config_type" field.
func CommissionConfigTypeLT(v string) predicate.OrderStatement {
	return predicate.OrderStatement(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCommissionConfigType), v))
	})
}

// CommissionConfigTypeLTE applies the LTE predicate on the "commission_config_type" field.
func CommissionConfigTypeLTE(v string) predicate.OrderStatement {
	return predicate.OrderStatement(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCommissionConfigType), v))
	})
}

// CommissionConfigTypeContains applies the Contains predicate on the "commission_config_type" field.
func CommissionConfigTypeContains(v string) predicate.OrderStatement {
	return predicate.OrderStatement(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCommissionConfigType), v))
	})
}

// CommissionConfigTypeHasPrefix applies the HasPrefix predicate on the "commission_config_type" field.
func CommissionConfigTypeHasPrefix(v string) predicate.OrderStatement {
	return predicate.OrderStatement(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCommissionConfigType), v))
	})
}

// CommissionConfigTypeHasSuffix applies the HasSuffix predicate on the "commission_config_type" field.
func CommissionConfigTypeHasSuffix(v string) predicate.OrderStatement {
	return predicate.OrderStatement(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCommissionConfigType), v))
	})
}

// CommissionConfigTypeIsNil applies the IsNil predicate on the "commission_config_type" field.
func CommissionConfigTypeIsNil() predicate.OrderStatement {
	return predicate.OrderStatement(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCommissionConfigType)))
	})
}

// CommissionConfigTypeNotNil applies the NotNil predicate on the "commission_config_type" field.
func CommissionConfigTypeNotNil() predicate.OrderStatement {
	return predicate.OrderStatement(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCommissionConfigType)))
	})
}

// CommissionConfigTypeEqualFold applies the EqualFold predicate on the "commission_config_type" field.
func CommissionConfigTypeEqualFold(v string) predicate.OrderStatement {
	return predicate.OrderStatement(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCommissionConfigType), v))
	})
}

// CommissionConfigTypeContainsFold applies the ContainsFold predicate on the "commission_config_type" field.
func CommissionConfigTypeContainsFold(v string) predicate.OrderStatement {
	return predicate.OrderStatement(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCommissionConfigType), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.OrderStatement) predicate.OrderStatement {
	return predicate.OrderStatement(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.OrderStatement) predicate.OrderStatement {
	return predicate.OrderStatement(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.OrderStatement) predicate.OrderStatement {
	return predicate.OrderStatement(func(s *sql.Selector) {
		p(s.Not())
	})
}
