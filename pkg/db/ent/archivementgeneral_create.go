// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/inspire-middleware/pkg/db/ent/archivementgeneral"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// ArchivementGeneralCreate is the builder for creating a ArchivementGeneral entity.
type ArchivementGeneralCreate struct {
	config
	mutation *ArchivementGeneralMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (agc *ArchivementGeneralCreate) SetCreatedAt(u uint32) *ArchivementGeneralCreate {
	agc.mutation.SetCreatedAt(u)
	return agc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (agc *ArchivementGeneralCreate) SetNillableCreatedAt(u *uint32) *ArchivementGeneralCreate {
	if u != nil {
		agc.SetCreatedAt(*u)
	}
	return agc
}

// SetUpdatedAt sets the "updated_at" field.
func (agc *ArchivementGeneralCreate) SetUpdatedAt(u uint32) *ArchivementGeneralCreate {
	agc.mutation.SetUpdatedAt(u)
	return agc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (agc *ArchivementGeneralCreate) SetNillableUpdatedAt(u *uint32) *ArchivementGeneralCreate {
	if u != nil {
		agc.SetUpdatedAt(*u)
	}
	return agc
}

// SetDeletedAt sets the "deleted_at" field.
func (agc *ArchivementGeneralCreate) SetDeletedAt(u uint32) *ArchivementGeneralCreate {
	agc.mutation.SetDeletedAt(u)
	return agc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (agc *ArchivementGeneralCreate) SetNillableDeletedAt(u *uint32) *ArchivementGeneralCreate {
	if u != nil {
		agc.SetDeletedAt(*u)
	}
	return agc
}

// SetAppID sets the "app_id" field.
func (agc *ArchivementGeneralCreate) SetAppID(u uuid.UUID) *ArchivementGeneralCreate {
	agc.mutation.SetAppID(u)
	return agc
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (agc *ArchivementGeneralCreate) SetNillableAppID(u *uuid.UUID) *ArchivementGeneralCreate {
	if u != nil {
		agc.SetAppID(*u)
	}
	return agc
}

// SetUserID sets the "user_id" field.
func (agc *ArchivementGeneralCreate) SetUserID(u uuid.UUID) *ArchivementGeneralCreate {
	agc.mutation.SetUserID(u)
	return agc
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (agc *ArchivementGeneralCreate) SetNillableUserID(u *uuid.UUID) *ArchivementGeneralCreate {
	if u != nil {
		agc.SetUserID(*u)
	}
	return agc
}

// SetGoodID sets the "good_id" field.
func (agc *ArchivementGeneralCreate) SetGoodID(u uuid.UUID) *ArchivementGeneralCreate {
	agc.mutation.SetGoodID(u)
	return agc
}

// SetNillableGoodID sets the "good_id" field if the given value is not nil.
func (agc *ArchivementGeneralCreate) SetNillableGoodID(u *uuid.UUID) *ArchivementGeneralCreate {
	if u != nil {
		agc.SetGoodID(*u)
	}
	return agc
}

// SetCoinTypeID sets the "coin_type_id" field.
func (agc *ArchivementGeneralCreate) SetCoinTypeID(u uuid.UUID) *ArchivementGeneralCreate {
	agc.mutation.SetCoinTypeID(u)
	return agc
}

// SetNillableCoinTypeID sets the "coin_type_id" field if the given value is not nil.
func (agc *ArchivementGeneralCreate) SetNillableCoinTypeID(u *uuid.UUID) *ArchivementGeneralCreate {
	if u != nil {
		agc.SetCoinTypeID(*u)
	}
	return agc
}

// SetTotalUnitsV1 sets the "total_units_v1" field.
func (agc *ArchivementGeneralCreate) SetTotalUnitsV1(d decimal.Decimal) *ArchivementGeneralCreate {
	agc.mutation.SetTotalUnitsV1(d)
	return agc
}

// SetNillableTotalUnitsV1 sets the "total_units_v1" field if the given value is not nil.
func (agc *ArchivementGeneralCreate) SetNillableTotalUnitsV1(d *decimal.Decimal) *ArchivementGeneralCreate {
	if d != nil {
		agc.SetTotalUnitsV1(*d)
	}
	return agc
}

// SetSelfUnitsV1 sets the "self_units_v1" field.
func (agc *ArchivementGeneralCreate) SetSelfUnitsV1(d decimal.Decimal) *ArchivementGeneralCreate {
	agc.mutation.SetSelfUnitsV1(d)
	return agc
}

// SetNillableSelfUnitsV1 sets the "self_units_v1" field if the given value is not nil.
func (agc *ArchivementGeneralCreate) SetNillableSelfUnitsV1(d *decimal.Decimal) *ArchivementGeneralCreate {
	if d != nil {
		agc.SetSelfUnitsV1(*d)
	}
	return agc
}

// SetTotalAmount sets the "total_amount" field.
func (agc *ArchivementGeneralCreate) SetTotalAmount(d decimal.Decimal) *ArchivementGeneralCreate {
	agc.mutation.SetTotalAmount(d)
	return agc
}

// SetNillableTotalAmount sets the "total_amount" field if the given value is not nil.
func (agc *ArchivementGeneralCreate) SetNillableTotalAmount(d *decimal.Decimal) *ArchivementGeneralCreate {
	if d != nil {
		agc.SetTotalAmount(*d)
	}
	return agc
}

// SetSelfAmount sets the "self_amount" field.
func (agc *ArchivementGeneralCreate) SetSelfAmount(d decimal.Decimal) *ArchivementGeneralCreate {
	agc.mutation.SetSelfAmount(d)
	return agc
}

// SetNillableSelfAmount sets the "self_amount" field if the given value is not nil.
func (agc *ArchivementGeneralCreate) SetNillableSelfAmount(d *decimal.Decimal) *ArchivementGeneralCreate {
	if d != nil {
		agc.SetSelfAmount(*d)
	}
	return agc
}

// SetTotalCommission sets the "total_commission" field.
func (agc *ArchivementGeneralCreate) SetTotalCommission(d decimal.Decimal) *ArchivementGeneralCreate {
	agc.mutation.SetTotalCommission(d)
	return agc
}

// SetNillableTotalCommission sets the "total_commission" field if the given value is not nil.
func (agc *ArchivementGeneralCreate) SetNillableTotalCommission(d *decimal.Decimal) *ArchivementGeneralCreate {
	if d != nil {
		agc.SetTotalCommission(*d)
	}
	return agc
}

// SetSelfCommission sets the "self_commission" field.
func (agc *ArchivementGeneralCreate) SetSelfCommission(d decimal.Decimal) *ArchivementGeneralCreate {
	agc.mutation.SetSelfCommission(d)
	return agc
}

// SetNillableSelfCommission sets the "self_commission" field if the given value is not nil.
func (agc *ArchivementGeneralCreate) SetNillableSelfCommission(d *decimal.Decimal) *ArchivementGeneralCreate {
	if d != nil {
		agc.SetSelfCommission(*d)
	}
	return agc
}

// SetID sets the "id" field.
func (agc *ArchivementGeneralCreate) SetID(u uuid.UUID) *ArchivementGeneralCreate {
	agc.mutation.SetID(u)
	return agc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (agc *ArchivementGeneralCreate) SetNillableID(u *uuid.UUID) *ArchivementGeneralCreate {
	if u != nil {
		agc.SetID(*u)
	}
	return agc
}

// Mutation returns the ArchivementGeneralMutation object of the builder.
func (agc *ArchivementGeneralCreate) Mutation() *ArchivementGeneralMutation {
	return agc.mutation
}

// Save creates the ArchivementGeneral in the database.
func (agc *ArchivementGeneralCreate) Save(ctx context.Context) (*ArchivementGeneral, error) {
	var (
		err  error
		node *ArchivementGeneral
	)
	if err := agc.defaults(); err != nil {
		return nil, err
	}
	if len(agc.hooks) == 0 {
		if err = agc.check(); err != nil {
			return nil, err
		}
		node, err = agc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ArchivementGeneralMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = agc.check(); err != nil {
				return nil, err
			}
			agc.mutation = mutation
			if node, err = agc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(agc.hooks) - 1; i >= 0; i-- {
			if agc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = agc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, agc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*ArchivementGeneral)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from ArchivementGeneralMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (agc *ArchivementGeneralCreate) SaveX(ctx context.Context) *ArchivementGeneral {
	v, err := agc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (agc *ArchivementGeneralCreate) Exec(ctx context.Context) error {
	_, err := agc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (agc *ArchivementGeneralCreate) ExecX(ctx context.Context) {
	if err := agc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (agc *ArchivementGeneralCreate) defaults() error {
	if _, ok := agc.mutation.CreatedAt(); !ok {
		if archivementgeneral.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized archivementgeneral.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := archivementgeneral.DefaultCreatedAt()
		agc.mutation.SetCreatedAt(v)
	}
	if _, ok := agc.mutation.UpdatedAt(); !ok {
		if archivementgeneral.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized archivementgeneral.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := archivementgeneral.DefaultUpdatedAt()
		agc.mutation.SetUpdatedAt(v)
	}
	if _, ok := agc.mutation.DeletedAt(); !ok {
		if archivementgeneral.DefaultDeletedAt == nil {
			return fmt.Errorf("ent: uninitialized archivementgeneral.DefaultDeletedAt (forgotten import ent/runtime?)")
		}
		v := archivementgeneral.DefaultDeletedAt()
		agc.mutation.SetDeletedAt(v)
	}
	if _, ok := agc.mutation.AppID(); !ok {
		if archivementgeneral.DefaultAppID == nil {
			return fmt.Errorf("ent: uninitialized archivementgeneral.DefaultAppID (forgotten import ent/runtime?)")
		}
		v := archivementgeneral.DefaultAppID()
		agc.mutation.SetAppID(v)
	}
	if _, ok := agc.mutation.UserID(); !ok {
		if archivementgeneral.DefaultUserID == nil {
			return fmt.Errorf("ent: uninitialized archivementgeneral.DefaultUserID (forgotten import ent/runtime?)")
		}
		v := archivementgeneral.DefaultUserID()
		agc.mutation.SetUserID(v)
	}
	if _, ok := agc.mutation.GoodID(); !ok {
		if archivementgeneral.DefaultGoodID == nil {
			return fmt.Errorf("ent: uninitialized archivementgeneral.DefaultGoodID (forgotten import ent/runtime?)")
		}
		v := archivementgeneral.DefaultGoodID()
		agc.mutation.SetGoodID(v)
	}
	if _, ok := agc.mutation.CoinTypeID(); !ok {
		if archivementgeneral.DefaultCoinTypeID == nil {
			return fmt.Errorf("ent: uninitialized archivementgeneral.DefaultCoinTypeID (forgotten import ent/runtime?)")
		}
		v := archivementgeneral.DefaultCoinTypeID()
		agc.mutation.SetCoinTypeID(v)
	}
	if _, ok := agc.mutation.TotalUnitsV1(); !ok {
		v := archivementgeneral.DefaultTotalUnitsV1
		agc.mutation.SetTotalUnitsV1(v)
	}
	if _, ok := agc.mutation.SelfUnitsV1(); !ok {
		v := archivementgeneral.DefaultSelfUnitsV1
		agc.mutation.SetSelfUnitsV1(v)
	}
	if _, ok := agc.mutation.TotalAmount(); !ok {
		v := archivementgeneral.DefaultTotalAmount
		agc.mutation.SetTotalAmount(v)
	}
	if _, ok := agc.mutation.SelfAmount(); !ok {
		v := archivementgeneral.DefaultSelfAmount
		agc.mutation.SetSelfAmount(v)
	}
	if _, ok := agc.mutation.TotalCommission(); !ok {
		v := archivementgeneral.DefaultTotalCommission
		agc.mutation.SetTotalCommission(v)
	}
	if _, ok := agc.mutation.SelfCommission(); !ok {
		v := archivementgeneral.DefaultSelfCommission
		agc.mutation.SetSelfCommission(v)
	}
	if _, ok := agc.mutation.ID(); !ok {
		if archivementgeneral.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized archivementgeneral.DefaultID (forgotten import ent/runtime?)")
		}
		v := archivementgeneral.DefaultID()
		agc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (agc *ArchivementGeneralCreate) check() error {
	if _, ok := agc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "ArchivementGeneral.created_at"`)}
	}
	if _, ok := agc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "ArchivementGeneral.updated_at"`)}
	}
	if _, ok := agc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`ent: missing required field "ArchivementGeneral.deleted_at"`)}
	}
	return nil
}

func (agc *ArchivementGeneralCreate) sqlSave(ctx context.Context) (*ArchivementGeneral, error) {
	_node, _spec := agc.createSpec()
	if err := sqlgraph.CreateNode(ctx, agc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (agc *ArchivementGeneralCreate) createSpec() (*ArchivementGeneral, *sqlgraph.CreateSpec) {
	var (
		_node = &ArchivementGeneral{config: agc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: archivementgeneral.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: archivementgeneral.FieldID,
			},
		}
	)
	_spec.OnConflict = agc.conflict
	if id, ok := agc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := agc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: archivementgeneral.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := agc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: archivementgeneral.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := agc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: archivementgeneral.FieldDeletedAt,
		})
		_node.DeletedAt = value
	}
	if value, ok := agc.mutation.AppID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: archivementgeneral.FieldAppID,
		})
		_node.AppID = value
	}
	if value, ok := agc.mutation.UserID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: archivementgeneral.FieldUserID,
		})
		_node.UserID = value
	}
	if value, ok := agc.mutation.GoodID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: archivementgeneral.FieldGoodID,
		})
		_node.GoodID = value
	}
	if value, ok := agc.mutation.CoinTypeID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: archivementgeneral.FieldCoinTypeID,
		})
		_node.CoinTypeID = value
	}
	if value, ok := agc.mutation.TotalUnitsV1(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: archivementgeneral.FieldTotalUnitsV1,
		})
		_node.TotalUnitsV1 = value
	}
	if value, ok := agc.mutation.SelfUnitsV1(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: archivementgeneral.FieldSelfUnitsV1,
		})
		_node.SelfUnitsV1 = value
	}
	if value, ok := agc.mutation.TotalAmount(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: archivementgeneral.FieldTotalAmount,
		})
		_node.TotalAmount = value
	}
	if value, ok := agc.mutation.SelfAmount(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: archivementgeneral.FieldSelfAmount,
		})
		_node.SelfAmount = value
	}
	if value, ok := agc.mutation.TotalCommission(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: archivementgeneral.FieldTotalCommission,
		})
		_node.TotalCommission = value
	}
	if value, ok := agc.mutation.SelfCommission(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: archivementgeneral.FieldSelfCommission,
		})
		_node.SelfCommission = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ArchivementGeneral.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ArchivementGeneralUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (agc *ArchivementGeneralCreate) OnConflict(opts ...sql.ConflictOption) *ArchivementGeneralUpsertOne {
	agc.conflict = opts
	return &ArchivementGeneralUpsertOne{
		create: agc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ArchivementGeneral.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (agc *ArchivementGeneralCreate) OnConflictColumns(columns ...string) *ArchivementGeneralUpsertOne {
	agc.conflict = append(agc.conflict, sql.ConflictColumns(columns...))
	return &ArchivementGeneralUpsertOne{
		create: agc,
	}
}

type (
	// ArchivementGeneralUpsertOne is the builder for "upsert"-ing
	//  one ArchivementGeneral node.
	ArchivementGeneralUpsertOne struct {
		create *ArchivementGeneralCreate
	}

	// ArchivementGeneralUpsert is the "OnConflict" setter.
	ArchivementGeneralUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *ArchivementGeneralUpsert) SetCreatedAt(v uint32) *ArchivementGeneralUpsert {
	u.Set(archivementgeneral.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *ArchivementGeneralUpsert) UpdateCreatedAt() *ArchivementGeneralUpsert {
	u.SetExcluded(archivementgeneral.FieldCreatedAt)
	return u
}

// AddCreatedAt adds v to the "created_at" field.
func (u *ArchivementGeneralUpsert) AddCreatedAt(v uint32) *ArchivementGeneralUpsert {
	u.Add(archivementgeneral.FieldCreatedAt, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ArchivementGeneralUpsert) SetUpdatedAt(v uint32) *ArchivementGeneralUpsert {
	u.Set(archivementgeneral.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ArchivementGeneralUpsert) UpdateUpdatedAt() *ArchivementGeneralUpsert {
	u.SetExcluded(archivementgeneral.FieldUpdatedAt)
	return u
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *ArchivementGeneralUpsert) AddUpdatedAt(v uint32) *ArchivementGeneralUpsert {
	u.Add(archivementgeneral.FieldUpdatedAt, v)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *ArchivementGeneralUpsert) SetDeletedAt(v uint32) *ArchivementGeneralUpsert {
	u.Set(archivementgeneral.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *ArchivementGeneralUpsert) UpdateDeletedAt() *ArchivementGeneralUpsert {
	u.SetExcluded(archivementgeneral.FieldDeletedAt)
	return u
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *ArchivementGeneralUpsert) AddDeletedAt(v uint32) *ArchivementGeneralUpsert {
	u.Add(archivementgeneral.FieldDeletedAt, v)
	return u
}

// SetAppID sets the "app_id" field.
func (u *ArchivementGeneralUpsert) SetAppID(v uuid.UUID) *ArchivementGeneralUpsert {
	u.Set(archivementgeneral.FieldAppID, v)
	return u
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *ArchivementGeneralUpsert) UpdateAppID() *ArchivementGeneralUpsert {
	u.SetExcluded(archivementgeneral.FieldAppID)
	return u
}

// ClearAppID clears the value of the "app_id" field.
func (u *ArchivementGeneralUpsert) ClearAppID() *ArchivementGeneralUpsert {
	u.SetNull(archivementgeneral.FieldAppID)
	return u
}

// SetUserID sets the "user_id" field.
func (u *ArchivementGeneralUpsert) SetUserID(v uuid.UUID) *ArchivementGeneralUpsert {
	u.Set(archivementgeneral.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *ArchivementGeneralUpsert) UpdateUserID() *ArchivementGeneralUpsert {
	u.SetExcluded(archivementgeneral.FieldUserID)
	return u
}

// ClearUserID clears the value of the "user_id" field.
func (u *ArchivementGeneralUpsert) ClearUserID() *ArchivementGeneralUpsert {
	u.SetNull(archivementgeneral.FieldUserID)
	return u
}

// SetGoodID sets the "good_id" field.
func (u *ArchivementGeneralUpsert) SetGoodID(v uuid.UUID) *ArchivementGeneralUpsert {
	u.Set(archivementgeneral.FieldGoodID, v)
	return u
}

// UpdateGoodID sets the "good_id" field to the value that was provided on create.
func (u *ArchivementGeneralUpsert) UpdateGoodID() *ArchivementGeneralUpsert {
	u.SetExcluded(archivementgeneral.FieldGoodID)
	return u
}

// ClearGoodID clears the value of the "good_id" field.
func (u *ArchivementGeneralUpsert) ClearGoodID() *ArchivementGeneralUpsert {
	u.SetNull(archivementgeneral.FieldGoodID)
	return u
}

// SetCoinTypeID sets the "coin_type_id" field.
func (u *ArchivementGeneralUpsert) SetCoinTypeID(v uuid.UUID) *ArchivementGeneralUpsert {
	u.Set(archivementgeneral.FieldCoinTypeID, v)
	return u
}

// UpdateCoinTypeID sets the "coin_type_id" field to the value that was provided on create.
func (u *ArchivementGeneralUpsert) UpdateCoinTypeID() *ArchivementGeneralUpsert {
	u.SetExcluded(archivementgeneral.FieldCoinTypeID)
	return u
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (u *ArchivementGeneralUpsert) ClearCoinTypeID() *ArchivementGeneralUpsert {
	u.SetNull(archivementgeneral.FieldCoinTypeID)
	return u
}

// SetTotalUnitsV1 sets the "total_units_v1" field.
func (u *ArchivementGeneralUpsert) SetTotalUnitsV1(v decimal.Decimal) *ArchivementGeneralUpsert {
	u.Set(archivementgeneral.FieldTotalUnitsV1, v)
	return u
}

// UpdateTotalUnitsV1 sets the "total_units_v1" field to the value that was provided on create.
func (u *ArchivementGeneralUpsert) UpdateTotalUnitsV1() *ArchivementGeneralUpsert {
	u.SetExcluded(archivementgeneral.FieldTotalUnitsV1)
	return u
}

// ClearTotalUnitsV1 clears the value of the "total_units_v1" field.
func (u *ArchivementGeneralUpsert) ClearTotalUnitsV1() *ArchivementGeneralUpsert {
	u.SetNull(archivementgeneral.FieldTotalUnitsV1)
	return u
}

// SetSelfUnitsV1 sets the "self_units_v1" field.
func (u *ArchivementGeneralUpsert) SetSelfUnitsV1(v decimal.Decimal) *ArchivementGeneralUpsert {
	u.Set(archivementgeneral.FieldSelfUnitsV1, v)
	return u
}

// UpdateSelfUnitsV1 sets the "self_units_v1" field to the value that was provided on create.
func (u *ArchivementGeneralUpsert) UpdateSelfUnitsV1() *ArchivementGeneralUpsert {
	u.SetExcluded(archivementgeneral.FieldSelfUnitsV1)
	return u
}

// ClearSelfUnitsV1 clears the value of the "self_units_v1" field.
func (u *ArchivementGeneralUpsert) ClearSelfUnitsV1() *ArchivementGeneralUpsert {
	u.SetNull(archivementgeneral.FieldSelfUnitsV1)
	return u
}

// SetTotalAmount sets the "total_amount" field.
func (u *ArchivementGeneralUpsert) SetTotalAmount(v decimal.Decimal) *ArchivementGeneralUpsert {
	u.Set(archivementgeneral.FieldTotalAmount, v)
	return u
}

// UpdateTotalAmount sets the "total_amount" field to the value that was provided on create.
func (u *ArchivementGeneralUpsert) UpdateTotalAmount() *ArchivementGeneralUpsert {
	u.SetExcluded(archivementgeneral.FieldTotalAmount)
	return u
}

// ClearTotalAmount clears the value of the "total_amount" field.
func (u *ArchivementGeneralUpsert) ClearTotalAmount() *ArchivementGeneralUpsert {
	u.SetNull(archivementgeneral.FieldTotalAmount)
	return u
}

// SetSelfAmount sets the "self_amount" field.
func (u *ArchivementGeneralUpsert) SetSelfAmount(v decimal.Decimal) *ArchivementGeneralUpsert {
	u.Set(archivementgeneral.FieldSelfAmount, v)
	return u
}

// UpdateSelfAmount sets the "self_amount" field to the value that was provided on create.
func (u *ArchivementGeneralUpsert) UpdateSelfAmount() *ArchivementGeneralUpsert {
	u.SetExcluded(archivementgeneral.FieldSelfAmount)
	return u
}

// ClearSelfAmount clears the value of the "self_amount" field.
func (u *ArchivementGeneralUpsert) ClearSelfAmount() *ArchivementGeneralUpsert {
	u.SetNull(archivementgeneral.FieldSelfAmount)
	return u
}

// SetTotalCommission sets the "total_commission" field.
func (u *ArchivementGeneralUpsert) SetTotalCommission(v decimal.Decimal) *ArchivementGeneralUpsert {
	u.Set(archivementgeneral.FieldTotalCommission, v)
	return u
}

// UpdateTotalCommission sets the "total_commission" field to the value that was provided on create.
func (u *ArchivementGeneralUpsert) UpdateTotalCommission() *ArchivementGeneralUpsert {
	u.SetExcluded(archivementgeneral.FieldTotalCommission)
	return u
}

// ClearTotalCommission clears the value of the "total_commission" field.
func (u *ArchivementGeneralUpsert) ClearTotalCommission() *ArchivementGeneralUpsert {
	u.SetNull(archivementgeneral.FieldTotalCommission)
	return u
}

// SetSelfCommission sets the "self_commission" field.
func (u *ArchivementGeneralUpsert) SetSelfCommission(v decimal.Decimal) *ArchivementGeneralUpsert {
	u.Set(archivementgeneral.FieldSelfCommission, v)
	return u
}

// UpdateSelfCommission sets the "self_commission" field to the value that was provided on create.
func (u *ArchivementGeneralUpsert) UpdateSelfCommission() *ArchivementGeneralUpsert {
	u.SetExcluded(archivementgeneral.FieldSelfCommission)
	return u
}

// ClearSelfCommission clears the value of the "self_commission" field.
func (u *ArchivementGeneralUpsert) ClearSelfCommission() *ArchivementGeneralUpsert {
	u.SetNull(archivementgeneral.FieldSelfCommission)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.ArchivementGeneral.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(archivementgeneral.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *ArchivementGeneralUpsertOne) UpdateNewValues() *ArchivementGeneralUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(archivementgeneral.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.ArchivementGeneral.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *ArchivementGeneralUpsertOne) Ignore() *ArchivementGeneralUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ArchivementGeneralUpsertOne) DoNothing() *ArchivementGeneralUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ArchivementGeneralCreate.OnConflict
// documentation for more info.
func (u *ArchivementGeneralUpsertOne) Update(set func(*ArchivementGeneralUpsert)) *ArchivementGeneralUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ArchivementGeneralUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *ArchivementGeneralUpsertOne) SetCreatedAt(v uint32) *ArchivementGeneralUpsertOne {
	return u.Update(func(s *ArchivementGeneralUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *ArchivementGeneralUpsertOne) AddCreatedAt(v uint32) *ArchivementGeneralUpsertOne {
	return u.Update(func(s *ArchivementGeneralUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *ArchivementGeneralUpsertOne) UpdateCreatedAt() *ArchivementGeneralUpsertOne {
	return u.Update(func(s *ArchivementGeneralUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ArchivementGeneralUpsertOne) SetUpdatedAt(v uint32) *ArchivementGeneralUpsertOne {
	return u.Update(func(s *ArchivementGeneralUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *ArchivementGeneralUpsertOne) AddUpdatedAt(v uint32) *ArchivementGeneralUpsertOne {
	return u.Update(func(s *ArchivementGeneralUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ArchivementGeneralUpsertOne) UpdateUpdatedAt() *ArchivementGeneralUpsertOne {
	return u.Update(func(s *ArchivementGeneralUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *ArchivementGeneralUpsertOne) SetDeletedAt(v uint32) *ArchivementGeneralUpsertOne {
	return u.Update(func(s *ArchivementGeneralUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *ArchivementGeneralUpsertOne) AddDeletedAt(v uint32) *ArchivementGeneralUpsertOne {
	return u.Update(func(s *ArchivementGeneralUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *ArchivementGeneralUpsertOne) UpdateDeletedAt() *ArchivementGeneralUpsertOne {
	return u.Update(func(s *ArchivementGeneralUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetAppID sets the "app_id" field.
func (u *ArchivementGeneralUpsertOne) SetAppID(v uuid.UUID) *ArchivementGeneralUpsertOne {
	return u.Update(func(s *ArchivementGeneralUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *ArchivementGeneralUpsertOne) UpdateAppID() *ArchivementGeneralUpsertOne {
	return u.Update(func(s *ArchivementGeneralUpsert) {
		s.UpdateAppID()
	})
}

// ClearAppID clears the value of the "app_id" field.
func (u *ArchivementGeneralUpsertOne) ClearAppID() *ArchivementGeneralUpsertOne {
	return u.Update(func(s *ArchivementGeneralUpsert) {
		s.ClearAppID()
	})
}

// SetUserID sets the "user_id" field.
func (u *ArchivementGeneralUpsertOne) SetUserID(v uuid.UUID) *ArchivementGeneralUpsertOne {
	return u.Update(func(s *ArchivementGeneralUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *ArchivementGeneralUpsertOne) UpdateUserID() *ArchivementGeneralUpsertOne {
	return u.Update(func(s *ArchivementGeneralUpsert) {
		s.UpdateUserID()
	})
}

// ClearUserID clears the value of the "user_id" field.
func (u *ArchivementGeneralUpsertOne) ClearUserID() *ArchivementGeneralUpsertOne {
	return u.Update(func(s *ArchivementGeneralUpsert) {
		s.ClearUserID()
	})
}

// SetGoodID sets the "good_id" field.
func (u *ArchivementGeneralUpsertOne) SetGoodID(v uuid.UUID) *ArchivementGeneralUpsertOne {
	return u.Update(func(s *ArchivementGeneralUpsert) {
		s.SetGoodID(v)
	})
}

// UpdateGoodID sets the "good_id" field to the value that was provided on create.
func (u *ArchivementGeneralUpsertOne) UpdateGoodID() *ArchivementGeneralUpsertOne {
	return u.Update(func(s *ArchivementGeneralUpsert) {
		s.UpdateGoodID()
	})
}

// ClearGoodID clears the value of the "good_id" field.
func (u *ArchivementGeneralUpsertOne) ClearGoodID() *ArchivementGeneralUpsertOne {
	return u.Update(func(s *ArchivementGeneralUpsert) {
		s.ClearGoodID()
	})
}

// SetCoinTypeID sets the "coin_type_id" field.
func (u *ArchivementGeneralUpsertOne) SetCoinTypeID(v uuid.UUID) *ArchivementGeneralUpsertOne {
	return u.Update(func(s *ArchivementGeneralUpsert) {
		s.SetCoinTypeID(v)
	})
}

// UpdateCoinTypeID sets the "coin_type_id" field to the value that was provided on create.
func (u *ArchivementGeneralUpsertOne) UpdateCoinTypeID() *ArchivementGeneralUpsertOne {
	return u.Update(func(s *ArchivementGeneralUpsert) {
		s.UpdateCoinTypeID()
	})
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (u *ArchivementGeneralUpsertOne) ClearCoinTypeID() *ArchivementGeneralUpsertOne {
	return u.Update(func(s *ArchivementGeneralUpsert) {
		s.ClearCoinTypeID()
	})
}

// SetTotalUnitsV1 sets the "total_units_v1" field.
func (u *ArchivementGeneralUpsertOne) SetTotalUnitsV1(v decimal.Decimal) *ArchivementGeneralUpsertOne {
	return u.Update(func(s *ArchivementGeneralUpsert) {
		s.SetTotalUnitsV1(v)
	})
}

// UpdateTotalUnitsV1 sets the "total_units_v1" field to the value that was provided on create.
func (u *ArchivementGeneralUpsertOne) UpdateTotalUnitsV1() *ArchivementGeneralUpsertOne {
	return u.Update(func(s *ArchivementGeneralUpsert) {
		s.UpdateTotalUnitsV1()
	})
}

// ClearTotalUnitsV1 clears the value of the "total_units_v1" field.
func (u *ArchivementGeneralUpsertOne) ClearTotalUnitsV1() *ArchivementGeneralUpsertOne {
	return u.Update(func(s *ArchivementGeneralUpsert) {
		s.ClearTotalUnitsV1()
	})
}

// SetSelfUnitsV1 sets the "self_units_v1" field.
func (u *ArchivementGeneralUpsertOne) SetSelfUnitsV1(v decimal.Decimal) *ArchivementGeneralUpsertOne {
	return u.Update(func(s *ArchivementGeneralUpsert) {
		s.SetSelfUnitsV1(v)
	})
}

// UpdateSelfUnitsV1 sets the "self_units_v1" field to the value that was provided on create.
func (u *ArchivementGeneralUpsertOne) UpdateSelfUnitsV1() *ArchivementGeneralUpsertOne {
	return u.Update(func(s *ArchivementGeneralUpsert) {
		s.UpdateSelfUnitsV1()
	})
}

// ClearSelfUnitsV1 clears the value of the "self_units_v1" field.
func (u *ArchivementGeneralUpsertOne) ClearSelfUnitsV1() *ArchivementGeneralUpsertOne {
	return u.Update(func(s *ArchivementGeneralUpsert) {
		s.ClearSelfUnitsV1()
	})
}

// SetTotalAmount sets the "total_amount" field.
func (u *ArchivementGeneralUpsertOne) SetTotalAmount(v decimal.Decimal) *ArchivementGeneralUpsertOne {
	return u.Update(func(s *ArchivementGeneralUpsert) {
		s.SetTotalAmount(v)
	})
}

// UpdateTotalAmount sets the "total_amount" field to the value that was provided on create.
func (u *ArchivementGeneralUpsertOne) UpdateTotalAmount() *ArchivementGeneralUpsertOne {
	return u.Update(func(s *ArchivementGeneralUpsert) {
		s.UpdateTotalAmount()
	})
}

// ClearTotalAmount clears the value of the "total_amount" field.
func (u *ArchivementGeneralUpsertOne) ClearTotalAmount() *ArchivementGeneralUpsertOne {
	return u.Update(func(s *ArchivementGeneralUpsert) {
		s.ClearTotalAmount()
	})
}

// SetSelfAmount sets the "self_amount" field.
func (u *ArchivementGeneralUpsertOne) SetSelfAmount(v decimal.Decimal) *ArchivementGeneralUpsertOne {
	return u.Update(func(s *ArchivementGeneralUpsert) {
		s.SetSelfAmount(v)
	})
}

// UpdateSelfAmount sets the "self_amount" field to the value that was provided on create.
func (u *ArchivementGeneralUpsertOne) UpdateSelfAmount() *ArchivementGeneralUpsertOne {
	return u.Update(func(s *ArchivementGeneralUpsert) {
		s.UpdateSelfAmount()
	})
}

// ClearSelfAmount clears the value of the "self_amount" field.
func (u *ArchivementGeneralUpsertOne) ClearSelfAmount() *ArchivementGeneralUpsertOne {
	return u.Update(func(s *ArchivementGeneralUpsert) {
		s.ClearSelfAmount()
	})
}

// SetTotalCommission sets the "total_commission" field.
func (u *ArchivementGeneralUpsertOne) SetTotalCommission(v decimal.Decimal) *ArchivementGeneralUpsertOne {
	return u.Update(func(s *ArchivementGeneralUpsert) {
		s.SetTotalCommission(v)
	})
}

// UpdateTotalCommission sets the "total_commission" field to the value that was provided on create.
func (u *ArchivementGeneralUpsertOne) UpdateTotalCommission() *ArchivementGeneralUpsertOne {
	return u.Update(func(s *ArchivementGeneralUpsert) {
		s.UpdateTotalCommission()
	})
}

// ClearTotalCommission clears the value of the "total_commission" field.
func (u *ArchivementGeneralUpsertOne) ClearTotalCommission() *ArchivementGeneralUpsertOne {
	return u.Update(func(s *ArchivementGeneralUpsert) {
		s.ClearTotalCommission()
	})
}

// SetSelfCommission sets the "self_commission" field.
func (u *ArchivementGeneralUpsertOne) SetSelfCommission(v decimal.Decimal) *ArchivementGeneralUpsertOne {
	return u.Update(func(s *ArchivementGeneralUpsert) {
		s.SetSelfCommission(v)
	})
}

// UpdateSelfCommission sets the "self_commission" field to the value that was provided on create.
func (u *ArchivementGeneralUpsertOne) UpdateSelfCommission() *ArchivementGeneralUpsertOne {
	return u.Update(func(s *ArchivementGeneralUpsert) {
		s.UpdateSelfCommission()
	})
}

// ClearSelfCommission clears the value of the "self_commission" field.
func (u *ArchivementGeneralUpsertOne) ClearSelfCommission() *ArchivementGeneralUpsertOne {
	return u.Update(func(s *ArchivementGeneralUpsert) {
		s.ClearSelfCommission()
	})
}

// Exec executes the query.
func (u *ArchivementGeneralUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ArchivementGeneralCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ArchivementGeneralUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ArchivementGeneralUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: ArchivementGeneralUpsertOne.ID is not supported by MySQL driver. Use ArchivementGeneralUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ArchivementGeneralUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ArchivementGeneralCreateBulk is the builder for creating many ArchivementGeneral entities in bulk.
type ArchivementGeneralCreateBulk struct {
	config
	builders []*ArchivementGeneralCreate
	conflict []sql.ConflictOption
}

// Save creates the ArchivementGeneral entities in the database.
func (agcb *ArchivementGeneralCreateBulk) Save(ctx context.Context) ([]*ArchivementGeneral, error) {
	specs := make([]*sqlgraph.CreateSpec, len(agcb.builders))
	nodes := make([]*ArchivementGeneral, len(agcb.builders))
	mutators := make([]Mutator, len(agcb.builders))
	for i := range agcb.builders {
		func(i int, root context.Context) {
			builder := agcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ArchivementGeneralMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, agcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = agcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, agcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, agcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (agcb *ArchivementGeneralCreateBulk) SaveX(ctx context.Context) []*ArchivementGeneral {
	v, err := agcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (agcb *ArchivementGeneralCreateBulk) Exec(ctx context.Context) error {
	_, err := agcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (agcb *ArchivementGeneralCreateBulk) ExecX(ctx context.Context) {
	if err := agcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ArchivementGeneral.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ArchivementGeneralUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (agcb *ArchivementGeneralCreateBulk) OnConflict(opts ...sql.ConflictOption) *ArchivementGeneralUpsertBulk {
	agcb.conflict = opts
	return &ArchivementGeneralUpsertBulk{
		create: agcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ArchivementGeneral.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (agcb *ArchivementGeneralCreateBulk) OnConflictColumns(columns ...string) *ArchivementGeneralUpsertBulk {
	agcb.conflict = append(agcb.conflict, sql.ConflictColumns(columns...))
	return &ArchivementGeneralUpsertBulk{
		create: agcb,
	}
}

// ArchivementGeneralUpsertBulk is the builder for "upsert"-ing
// a bulk of ArchivementGeneral nodes.
type ArchivementGeneralUpsertBulk struct {
	create *ArchivementGeneralCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.ArchivementGeneral.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(archivementgeneral.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *ArchivementGeneralUpsertBulk) UpdateNewValues() *ArchivementGeneralUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(archivementgeneral.FieldID)
				return
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ArchivementGeneral.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *ArchivementGeneralUpsertBulk) Ignore() *ArchivementGeneralUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ArchivementGeneralUpsertBulk) DoNothing() *ArchivementGeneralUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ArchivementGeneralCreateBulk.OnConflict
// documentation for more info.
func (u *ArchivementGeneralUpsertBulk) Update(set func(*ArchivementGeneralUpsert)) *ArchivementGeneralUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ArchivementGeneralUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *ArchivementGeneralUpsertBulk) SetCreatedAt(v uint32) *ArchivementGeneralUpsertBulk {
	return u.Update(func(s *ArchivementGeneralUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *ArchivementGeneralUpsertBulk) AddCreatedAt(v uint32) *ArchivementGeneralUpsertBulk {
	return u.Update(func(s *ArchivementGeneralUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *ArchivementGeneralUpsertBulk) UpdateCreatedAt() *ArchivementGeneralUpsertBulk {
	return u.Update(func(s *ArchivementGeneralUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ArchivementGeneralUpsertBulk) SetUpdatedAt(v uint32) *ArchivementGeneralUpsertBulk {
	return u.Update(func(s *ArchivementGeneralUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *ArchivementGeneralUpsertBulk) AddUpdatedAt(v uint32) *ArchivementGeneralUpsertBulk {
	return u.Update(func(s *ArchivementGeneralUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ArchivementGeneralUpsertBulk) UpdateUpdatedAt() *ArchivementGeneralUpsertBulk {
	return u.Update(func(s *ArchivementGeneralUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *ArchivementGeneralUpsertBulk) SetDeletedAt(v uint32) *ArchivementGeneralUpsertBulk {
	return u.Update(func(s *ArchivementGeneralUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *ArchivementGeneralUpsertBulk) AddDeletedAt(v uint32) *ArchivementGeneralUpsertBulk {
	return u.Update(func(s *ArchivementGeneralUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *ArchivementGeneralUpsertBulk) UpdateDeletedAt() *ArchivementGeneralUpsertBulk {
	return u.Update(func(s *ArchivementGeneralUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetAppID sets the "app_id" field.
func (u *ArchivementGeneralUpsertBulk) SetAppID(v uuid.UUID) *ArchivementGeneralUpsertBulk {
	return u.Update(func(s *ArchivementGeneralUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *ArchivementGeneralUpsertBulk) UpdateAppID() *ArchivementGeneralUpsertBulk {
	return u.Update(func(s *ArchivementGeneralUpsert) {
		s.UpdateAppID()
	})
}

// ClearAppID clears the value of the "app_id" field.
func (u *ArchivementGeneralUpsertBulk) ClearAppID() *ArchivementGeneralUpsertBulk {
	return u.Update(func(s *ArchivementGeneralUpsert) {
		s.ClearAppID()
	})
}

// SetUserID sets the "user_id" field.
func (u *ArchivementGeneralUpsertBulk) SetUserID(v uuid.UUID) *ArchivementGeneralUpsertBulk {
	return u.Update(func(s *ArchivementGeneralUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *ArchivementGeneralUpsertBulk) UpdateUserID() *ArchivementGeneralUpsertBulk {
	return u.Update(func(s *ArchivementGeneralUpsert) {
		s.UpdateUserID()
	})
}

// ClearUserID clears the value of the "user_id" field.
func (u *ArchivementGeneralUpsertBulk) ClearUserID() *ArchivementGeneralUpsertBulk {
	return u.Update(func(s *ArchivementGeneralUpsert) {
		s.ClearUserID()
	})
}

// SetGoodID sets the "good_id" field.
func (u *ArchivementGeneralUpsertBulk) SetGoodID(v uuid.UUID) *ArchivementGeneralUpsertBulk {
	return u.Update(func(s *ArchivementGeneralUpsert) {
		s.SetGoodID(v)
	})
}

// UpdateGoodID sets the "good_id" field to the value that was provided on create.
func (u *ArchivementGeneralUpsertBulk) UpdateGoodID() *ArchivementGeneralUpsertBulk {
	return u.Update(func(s *ArchivementGeneralUpsert) {
		s.UpdateGoodID()
	})
}

// ClearGoodID clears the value of the "good_id" field.
func (u *ArchivementGeneralUpsertBulk) ClearGoodID() *ArchivementGeneralUpsertBulk {
	return u.Update(func(s *ArchivementGeneralUpsert) {
		s.ClearGoodID()
	})
}

// SetCoinTypeID sets the "coin_type_id" field.
func (u *ArchivementGeneralUpsertBulk) SetCoinTypeID(v uuid.UUID) *ArchivementGeneralUpsertBulk {
	return u.Update(func(s *ArchivementGeneralUpsert) {
		s.SetCoinTypeID(v)
	})
}

// UpdateCoinTypeID sets the "coin_type_id" field to the value that was provided on create.
func (u *ArchivementGeneralUpsertBulk) UpdateCoinTypeID() *ArchivementGeneralUpsertBulk {
	return u.Update(func(s *ArchivementGeneralUpsert) {
		s.UpdateCoinTypeID()
	})
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (u *ArchivementGeneralUpsertBulk) ClearCoinTypeID() *ArchivementGeneralUpsertBulk {
	return u.Update(func(s *ArchivementGeneralUpsert) {
		s.ClearCoinTypeID()
	})
}

// SetTotalUnitsV1 sets the "total_units_v1" field.
func (u *ArchivementGeneralUpsertBulk) SetTotalUnitsV1(v decimal.Decimal) *ArchivementGeneralUpsertBulk {
	return u.Update(func(s *ArchivementGeneralUpsert) {
		s.SetTotalUnitsV1(v)
	})
}

// UpdateTotalUnitsV1 sets the "total_units_v1" field to the value that was provided on create.
func (u *ArchivementGeneralUpsertBulk) UpdateTotalUnitsV1() *ArchivementGeneralUpsertBulk {
	return u.Update(func(s *ArchivementGeneralUpsert) {
		s.UpdateTotalUnitsV1()
	})
}

// ClearTotalUnitsV1 clears the value of the "total_units_v1" field.
func (u *ArchivementGeneralUpsertBulk) ClearTotalUnitsV1() *ArchivementGeneralUpsertBulk {
	return u.Update(func(s *ArchivementGeneralUpsert) {
		s.ClearTotalUnitsV1()
	})
}

// SetSelfUnitsV1 sets the "self_units_v1" field.
func (u *ArchivementGeneralUpsertBulk) SetSelfUnitsV1(v decimal.Decimal) *ArchivementGeneralUpsertBulk {
	return u.Update(func(s *ArchivementGeneralUpsert) {
		s.SetSelfUnitsV1(v)
	})
}

// UpdateSelfUnitsV1 sets the "self_units_v1" field to the value that was provided on create.
func (u *ArchivementGeneralUpsertBulk) UpdateSelfUnitsV1() *ArchivementGeneralUpsertBulk {
	return u.Update(func(s *ArchivementGeneralUpsert) {
		s.UpdateSelfUnitsV1()
	})
}

// ClearSelfUnitsV1 clears the value of the "self_units_v1" field.
func (u *ArchivementGeneralUpsertBulk) ClearSelfUnitsV1() *ArchivementGeneralUpsertBulk {
	return u.Update(func(s *ArchivementGeneralUpsert) {
		s.ClearSelfUnitsV1()
	})
}

// SetTotalAmount sets the "total_amount" field.
func (u *ArchivementGeneralUpsertBulk) SetTotalAmount(v decimal.Decimal) *ArchivementGeneralUpsertBulk {
	return u.Update(func(s *ArchivementGeneralUpsert) {
		s.SetTotalAmount(v)
	})
}

// UpdateTotalAmount sets the "total_amount" field to the value that was provided on create.
func (u *ArchivementGeneralUpsertBulk) UpdateTotalAmount() *ArchivementGeneralUpsertBulk {
	return u.Update(func(s *ArchivementGeneralUpsert) {
		s.UpdateTotalAmount()
	})
}

// ClearTotalAmount clears the value of the "total_amount" field.
func (u *ArchivementGeneralUpsertBulk) ClearTotalAmount() *ArchivementGeneralUpsertBulk {
	return u.Update(func(s *ArchivementGeneralUpsert) {
		s.ClearTotalAmount()
	})
}

// SetSelfAmount sets the "self_amount" field.
func (u *ArchivementGeneralUpsertBulk) SetSelfAmount(v decimal.Decimal) *ArchivementGeneralUpsertBulk {
	return u.Update(func(s *ArchivementGeneralUpsert) {
		s.SetSelfAmount(v)
	})
}

// UpdateSelfAmount sets the "self_amount" field to the value that was provided on create.
func (u *ArchivementGeneralUpsertBulk) UpdateSelfAmount() *ArchivementGeneralUpsertBulk {
	return u.Update(func(s *ArchivementGeneralUpsert) {
		s.UpdateSelfAmount()
	})
}

// ClearSelfAmount clears the value of the "self_amount" field.
func (u *ArchivementGeneralUpsertBulk) ClearSelfAmount() *ArchivementGeneralUpsertBulk {
	return u.Update(func(s *ArchivementGeneralUpsert) {
		s.ClearSelfAmount()
	})
}

// SetTotalCommission sets the "total_commission" field.
func (u *ArchivementGeneralUpsertBulk) SetTotalCommission(v decimal.Decimal) *ArchivementGeneralUpsertBulk {
	return u.Update(func(s *ArchivementGeneralUpsert) {
		s.SetTotalCommission(v)
	})
}

// UpdateTotalCommission sets the "total_commission" field to the value that was provided on create.
func (u *ArchivementGeneralUpsertBulk) UpdateTotalCommission() *ArchivementGeneralUpsertBulk {
	return u.Update(func(s *ArchivementGeneralUpsert) {
		s.UpdateTotalCommission()
	})
}

// ClearTotalCommission clears the value of the "total_commission" field.
func (u *ArchivementGeneralUpsertBulk) ClearTotalCommission() *ArchivementGeneralUpsertBulk {
	return u.Update(func(s *ArchivementGeneralUpsert) {
		s.ClearTotalCommission()
	})
}

// SetSelfCommission sets the "self_commission" field.
func (u *ArchivementGeneralUpsertBulk) SetSelfCommission(v decimal.Decimal) *ArchivementGeneralUpsertBulk {
	return u.Update(func(s *ArchivementGeneralUpsert) {
		s.SetSelfCommission(v)
	})
}

// UpdateSelfCommission sets the "self_commission" field to the value that was provided on create.
func (u *ArchivementGeneralUpsertBulk) UpdateSelfCommission() *ArchivementGeneralUpsertBulk {
	return u.Update(func(s *ArchivementGeneralUpsert) {
		s.UpdateSelfCommission()
	})
}

// ClearSelfCommission clears the value of the "self_commission" field.
func (u *ArchivementGeneralUpsertBulk) ClearSelfCommission() *ArchivementGeneralUpsertBulk {
	return u.Update(func(s *ArchivementGeneralUpsert) {
		s.ClearSelfCommission()
	})
}

// Exec executes the query.
func (u *ArchivementGeneralUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the ArchivementGeneralCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ArchivementGeneralCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ArchivementGeneralUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
