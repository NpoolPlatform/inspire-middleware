// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/inspire-middleware/pkg/db/ent/appgoodscope"
	"github.com/NpoolPlatform/inspire-middleware/pkg/db/ent/predicate"
	"github.com/google/uuid"
)

// AppGoodScopeUpdate is the builder for updating AppGoodScope entities.
type AppGoodScopeUpdate struct {
	config
	hooks     []Hook
	mutation  *AppGoodScopeMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the AppGoodScopeUpdate builder.
func (agsu *AppGoodScopeUpdate) Where(ps ...predicate.AppGoodScope) *AppGoodScopeUpdate {
	agsu.mutation.Where(ps...)
	return agsu
}

// SetCreatedAt sets the "created_at" field.
func (agsu *AppGoodScopeUpdate) SetCreatedAt(u uint32) *AppGoodScopeUpdate {
	agsu.mutation.ResetCreatedAt()
	agsu.mutation.SetCreatedAt(u)
	return agsu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (agsu *AppGoodScopeUpdate) SetNillableCreatedAt(u *uint32) *AppGoodScopeUpdate {
	if u != nil {
		agsu.SetCreatedAt(*u)
	}
	return agsu
}

// AddCreatedAt adds u to the "created_at" field.
func (agsu *AppGoodScopeUpdate) AddCreatedAt(u int32) *AppGoodScopeUpdate {
	agsu.mutation.AddCreatedAt(u)
	return agsu
}

// SetUpdatedAt sets the "updated_at" field.
func (agsu *AppGoodScopeUpdate) SetUpdatedAt(u uint32) *AppGoodScopeUpdate {
	agsu.mutation.ResetUpdatedAt()
	agsu.mutation.SetUpdatedAt(u)
	return agsu
}

// AddUpdatedAt adds u to the "updated_at" field.
func (agsu *AppGoodScopeUpdate) AddUpdatedAt(u int32) *AppGoodScopeUpdate {
	agsu.mutation.AddUpdatedAt(u)
	return agsu
}

// SetDeletedAt sets the "deleted_at" field.
func (agsu *AppGoodScopeUpdate) SetDeletedAt(u uint32) *AppGoodScopeUpdate {
	agsu.mutation.ResetDeletedAt()
	agsu.mutation.SetDeletedAt(u)
	return agsu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (agsu *AppGoodScopeUpdate) SetNillableDeletedAt(u *uint32) *AppGoodScopeUpdate {
	if u != nil {
		agsu.SetDeletedAt(*u)
	}
	return agsu
}

// AddDeletedAt adds u to the "deleted_at" field.
func (agsu *AppGoodScopeUpdate) AddDeletedAt(u int32) *AppGoodScopeUpdate {
	agsu.mutation.AddDeletedAt(u)
	return agsu
}

// SetEntID sets the "ent_id" field.
func (agsu *AppGoodScopeUpdate) SetEntID(u uuid.UUID) *AppGoodScopeUpdate {
	agsu.mutation.SetEntID(u)
	return agsu
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (agsu *AppGoodScopeUpdate) SetNillableEntID(u *uuid.UUID) *AppGoodScopeUpdate {
	if u != nil {
		agsu.SetEntID(*u)
	}
	return agsu
}

// SetAppID sets the "app_id" field.
func (agsu *AppGoodScopeUpdate) SetAppID(u uuid.UUID) *AppGoodScopeUpdate {
	agsu.mutation.SetAppID(u)
	return agsu
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (agsu *AppGoodScopeUpdate) SetNillableAppID(u *uuid.UUID) *AppGoodScopeUpdate {
	if u != nil {
		agsu.SetAppID(*u)
	}
	return agsu
}

// ClearAppID clears the value of the "app_id" field.
func (agsu *AppGoodScopeUpdate) ClearAppID() *AppGoodScopeUpdate {
	agsu.mutation.ClearAppID()
	return agsu
}

// SetAppGoodID sets the "app_good_id" field.
func (agsu *AppGoodScopeUpdate) SetAppGoodID(u uuid.UUID) *AppGoodScopeUpdate {
	agsu.mutation.SetAppGoodID(u)
	return agsu
}

// SetNillableAppGoodID sets the "app_good_id" field if the given value is not nil.
func (agsu *AppGoodScopeUpdate) SetNillableAppGoodID(u *uuid.UUID) *AppGoodScopeUpdate {
	if u != nil {
		agsu.SetAppGoodID(*u)
	}
	return agsu
}

// ClearAppGoodID clears the value of the "app_good_id" field.
func (agsu *AppGoodScopeUpdate) ClearAppGoodID() *AppGoodScopeUpdate {
	agsu.mutation.ClearAppGoodID()
	return agsu
}

// SetCouponID sets the "coupon_id" field.
func (agsu *AppGoodScopeUpdate) SetCouponID(u uuid.UUID) *AppGoodScopeUpdate {
	agsu.mutation.SetCouponID(u)
	return agsu
}

// SetNillableCouponID sets the "coupon_id" field if the given value is not nil.
func (agsu *AppGoodScopeUpdate) SetNillableCouponID(u *uuid.UUID) *AppGoodScopeUpdate {
	if u != nil {
		agsu.SetCouponID(*u)
	}
	return agsu
}

// ClearCouponID clears the value of the "coupon_id" field.
func (agsu *AppGoodScopeUpdate) ClearCouponID() *AppGoodScopeUpdate {
	agsu.mutation.ClearCouponID()
	return agsu
}

// SetCouponScope sets the "coupon_scope" field.
func (agsu *AppGoodScopeUpdate) SetCouponScope(s string) *AppGoodScopeUpdate {
	agsu.mutation.SetCouponScope(s)
	return agsu
}

// SetNillableCouponScope sets the "coupon_scope" field if the given value is not nil.
func (agsu *AppGoodScopeUpdate) SetNillableCouponScope(s *string) *AppGoodScopeUpdate {
	if s != nil {
		agsu.SetCouponScope(*s)
	}
	return agsu
}

// ClearCouponScope clears the value of the "coupon_scope" field.
func (agsu *AppGoodScopeUpdate) ClearCouponScope() *AppGoodScopeUpdate {
	agsu.mutation.ClearCouponScope()
	return agsu
}

// Mutation returns the AppGoodScopeMutation object of the builder.
func (agsu *AppGoodScopeUpdate) Mutation() *AppGoodScopeMutation {
	return agsu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (agsu *AppGoodScopeUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if err := agsu.defaults(); err != nil {
		return 0, err
	}
	if len(agsu.hooks) == 0 {
		affected, err = agsu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AppGoodScopeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			agsu.mutation = mutation
			affected, err = agsu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(agsu.hooks) - 1; i >= 0; i-- {
			if agsu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = agsu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, agsu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (agsu *AppGoodScopeUpdate) SaveX(ctx context.Context) int {
	affected, err := agsu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (agsu *AppGoodScopeUpdate) Exec(ctx context.Context) error {
	_, err := agsu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (agsu *AppGoodScopeUpdate) ExecX(ctx context.Context) {
	if err := agsu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (agsu *AppGoodScopeUpdate) defaults() error {
	if _, ok := agsu.mutation.UpdatedAt(); !ok {
		if appgoodscope.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized appgoodscope.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := appgoodscope.UpdateDefaultUpdatedAt()
		agsu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (agsu *AppGoodScopeUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *AppGoodScopeUpdate {
	agsu.modifiers = append(agsu.modifiers, modifiers...)
	return agsu
}

func (agsu *AppGoodScopeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   appgoodscope.Table,
			Columns: appgoodscope.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: appgoodscope.FieldID,
			},
		},
	}
	if ps := agsu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := agsu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appgoodscope.FieldCreatedAt,
		})
	}
	if value, ok := agsu.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appgoodscope.FieldCreatedAt,
		})
	}
	if value, ok := agsu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appgoodscope.FieldUpdatedAt,
		})
	}
	if value, ok := agsu.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appgoodscope.FieldUpdatedAt,
		})
	}
	if value, ok := agsu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appgoodscope.FieldDeletedAt,
		})
	}
	if value, ok := agsu.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appgoodscope.FieldDeletedAt,
		})
	}
	if value, ok := agsu.mutation.EntID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: appgoodscope.FieldEntID,
		})
	}
	if value, ok := agsu.mutation.AppID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: appgoodscope.FieldAppID,
		})
	}
	if agsu.mutation.AppIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: appgoodscope.FieldAppID,
		})
	}
	if value, ok := agsu.mutation.AppGoodID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: appgoodscope.FieldAppGoodID,
		})
	}
	if agsu.mutation.AppGoodIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: appgoodscope.FieldAppGoodID,
		})
	}
	if value, ok := agsu.mutation.CouponID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: appgoodscope.FieldCouponID,
		})
	}
	if agsu.mutation.CouponIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: appgoodscope.FieldCouponID,
		})
	}
	if value, ok := agsu.mutation.CouponScope(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: appgoodscope.FieldCouponScope,
		})
	}
	if agsu.mutation.CouponScopeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: appgoodscope.FieldCouponScope,
		})
	}
	_spec.Modifiers = agsu.modifiers
	if n, err = sqlgraph.UpdateNodes(ctx, agsu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{appgoodscope.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// AppGoodScopeUpdateOne is the builder for updating a single AppGoodScope entity.
type AppGoodScopeUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *AppGoodScopeMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetCreatedAt sets the "created_at" field.
func (agsuo *AppGoodScopeUpdateOne) SetCreatedAt(u uint32) *AppGoodScopeUpdateOne {
	agsuo.mutation.ResetCreatedAt()
	agsuo.mutation.SetCreatedAt(u)
	return agsuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (agsuo *AppGoodScopeUpdateOne) SetNillableCreatedAt(u *uint32) *AppGoodScopeUpdateOne {
	if u != nil {
		agsuo.SetCreatedAt(*u)
	}
	return agsuo
}

// AddCreatedAt adds u to the "created_at" field.
func (agsuo *AppGoodScopeUpdateOne) AddCreatedAt(u int32) *AppGoodScopeUpdateOne {
	agsuo.mutation.AddCreatedAt(u)
	return agsuo
}

// SetUpdatedAt sets the "updated_at" field.
func (agsuo *AppGoodScopeUpdateOne) SetUpdatedAt(u uint32) *AppGoodScopeUpdateOne {
	agsuo.mutation.ResetUpdatedAt()
	agsuo.mutation.SetUpdatedAt(u)
	return agsuo
}

// AddUpdatedAt adds u to the "updated_at" field.
func (agsuo *AppGoodScopeUpdateOne) AddUpdatedAt(u int32) *AppGoodScopeUpdateOne {
	agsuo.mutation.AddUpdatedAt(u)
	return agsuo
}

// SetDeletedAt sets the "deleted_at" field.
func (agsuo *AppGoodScopeUpdateOne) SetDeletedAt(u uint32) *AppGoodScopeUpdateOne {
	agsuo.mutation.ResetDeletedAt()
	agsuo.mutation.SetDeletedAt(u)
	return agsuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (agsuo *AppGoodScopeUpdateOne) SetNillableDeletedAt(u *uint32) *AppGoodScopeUpdateOne {
	if u != nil {
		agsuo.SetDeletedAt(*u)
	}
	return agsuo
}

// AddDeletedAt adds u to the "deleted_at" field.
func (agsuo *AppGoodScopeUpdateOne) AddDeletedAt(u int32) *AppGoodScopeUpdateOne {
	agsuo.mutation.AddDeletedAt(u)
	return agsuo
}

// SetEntID sets the "ent_id" field.
func (agsuo *AppGoodScopeUpdateOne) SetEntID(u uuid.UUID) *AppGoodScopeUpdateOne {
	agsuo.mutation.SetEntID(u)
	return agsuo
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (agsuo *AppGoodScopeUpdateOne) SetNillableEntID(u *uuid.UUID) *AppGoodScopeUpdateOne {
	if u != nil {
		agsuo.SetEntID(*u)
	}
	return agsuo
}

// SetAppID sets the "app_id" field.
func (agsuo *AppGoodScopeUpdateOne) SetAppID(u uuid.UUID) *AppGoodScopeUpdateOne {
	agsuo.mutation.SetAppID(u)
	return agsuo
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (agsuo *AppGoodScopeUpdateOne) SetNillableAppID(u *uuid.UUID) *AppGoodScopeUpdateOne {
	if u != nil {
		agsuo.SetAppID(*u)
	}
	return agsuo
}

// ClearAppID clears the value of the "app_id" field.
func (agsuo *AppGoodScopeUpdateOne) ClearAppID() *AppGoodScopeUpdateOne {
	agsuo.mutation.ClearAppID()
	return agsuo
}

// SetAppGoodID sets the "app_good_id" field.
func (agsuo *AppGoodScopeUpdateOne) SetAppGoodID(u uuid.UUID) *AppGoodScopeUpdateOne {
	agsuo.mutation.SetAppGoodID(u)
	return agsuo
}

// SetNillableAppGoodID sets the "app_good_id" field if the given value is not nil.
func (agsuo *AppGoodScopeUpdateOne) SetNillableAppGoodID(u *uuid.UUID) *AppGoodScopeUpdateOne {
	if u != nil {
		agsuo.SetAppGoodID(*u)
	}
	return agsuo
}

// ClearAppGoodID clears the value of the "app_good_id" field.
func (agsuo *AppGoodScopeUpdateOne) ClearAppGoodID() *AppGoodScopeUpdateOne {
	agsuo.mutation.ClearAppGoodID()
	return agsuo
}

// SetCouponID sets the "coupon_id" field.
func (agsuo *AppGoodScopeUpdateOne) SetCouponID(u uuid.UUID) *AppGoodScopeUpdateOne {
	agsuo.mutation.SetCouponID(u)
	return agsuo
}

// SetNillableCouponID sets the "coupon_id" field if the given value is not nil.
func (agsuo *AppGoodScopeUpdateOne) SetNillableCouponID(u *uuid.UUID) *AppGoodScopeUpdateOne {
	if u != nil {
		agsuo.SetCouponID(*u)
	}
	return agsuo
}

// ClearCouponID clears the value of the "coupon_id" field.
func (agsuo *AppGoodScopeUpdateOne) ClearCouponID() *AppGoodScopeUpdateOne {
	agsuo.mutation.ClearCouponID()
	return agsuo
}

// SetCouponScope sets the "coupon_scope" field.
func (agsuo *AppGoodScopeUpdateOne) SetCouponScope(s string) *AppGoodScopeUpdateOne {
	agsuo.mutation.SetCouponScope(s)
	return agsuo
}

// SetNillableCouponScope sets the "coupon_scope" field if the given value is not nil.
func (agsuo *AppGoodScopeUpdateOne) SetNillableCouponScope(s *string) *AppGoodScopeUpdateOne {
	if s != nil {
		agsuo.SetCouponScope(*s)
	}
	return agsuo
}

// ClearCouponScope clears the value of the "coupon_scope" field.
func (agsuo *AppGoodScopeUpdateOne) ClearCouponScope() *AppGoodScopeUpdateOne {
	agsuo.mutation.ClearCouponScope()
	return agsuo
}

// Mutation returns the AppGoodScopeMutation object of the builder.
func (agsuo *AppGoodScopeUpdateOne) Mutation() *AppGoodScopeMutation {
	return agsuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (agsuo *AppGoodScopeUpdateOne) Select(field string, fields ...string) *AppGoodScopeUpdateOne {
	agsuo.fields = append([]string{field}, fields...)
	return agsuo
}

// Save executes the query and returns the updated AppGoodScope entity.
func (agsuo *AppGoodScopeUpdateOne) Save(ctx context.Context) (*AppGoodScope, error) {
	var (
		err  error
		node *AppGoodScope
	)
	if err := agsuo.defaults(); err != nil {
		return nil, err
	}
	if len(agsuo.hooks) == 0 {
		node, err = agsuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AppGoodScopeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			agsuo.mutation = mutation
			node, err = agsuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(agsuo.hooks) - 1; i >= 0; i-- {
			if agsuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = agsuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, agsuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*AppGoodScope)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from AppGoodScopeMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (agsuo *AppGoodScopeUpdateOne) SaveX(ctx context.Context) *AppGoodScope {
	node, err := agsuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (agsuo *AppGoodScopeUpdateOne) Exec(ctx context.Context) error {
	_, err := agsuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (agsuo *AppGoodScopeUpdateOne) ExecX(ctx context.Context) {
	if err := agsuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (agsuo *AppGoodScopeUpdateOne) defaults() error {
	if _, ok := agsuo.mutation.UpdatedAt(); !ok {
		if appgoodscope.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized appgoodscope.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := appgoodscope.UpdateDefaultUpdatedAt()
		agsuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (agsuo *AppGoodScopeUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *AppGoodScopeUpdateOne {
	agsuo.modifiers = append(agsuo.modifiers, modifiers...)
	return agsuo
}

func (agsuo *AppGoodScopeUpdateOne) sqlSave(ctx context.Context) (_node *AppGoodScope, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   appgoodscope.Table,
			Columns: appgoodscope.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: appgoodscope.FieldID,
			},
		},
	}
	id, ok := agsuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "AppGoodScope.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := agsuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, appgoodscope.FieldID)
		for _, f := range fields {
			if !appgoodscope.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != appgoodscope.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := agsuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := agsuo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appgoodscope.FieldCreatedAt,
		})
	}
	if value, ok := agsuo.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appgoodscope.FieldCreatedAt,
		})
	}
	if value, ok := agsuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appgoodscope.FieldUpdatedAt,
		})
	}
	if value, ok := agsuo.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appgoodscope.FieldUpdatedAt,
		})
	}
	if value, ok := agsuo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appgoodscope.FieldDeletedAt,
		})
	}
	if value, ok := agsuo.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appgoodscope.FieldDeletedAt,
		})
	}
	if value, ok := agsuo.mutation.EntID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: appgoodscope.FieldEntID,
		})
	}
	if value, ok := agsuo.mutation.AppID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: appgoodscope.FieldAppID,
		})
	}
	if agsuo.mutation.AppIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: appgoodscope.FieldAppID,
		})
	}
	if value, ok := agsuo.mutation.AppGoodID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: appgoodscope.FieldAppGoodID,
		})
	}
	if agsuo.mutation.AppGoodIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: appgoodscope.FieldAppGoodID,
		})
	}
	if value, ok := agsuo.mutation.CouponID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: appgoodscope.FieldCouponID,
		})
	}
	if agsuo.mutation.CouponIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: appgoodscope.FieldCouponID,
		})
	}
	if value, ok := agsuo.mutation.CouponScope(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: appgoodscope.FieldCouponScope,
		})
	}
	if agsuo.mutation.CouponScopeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: appgoodscope.FieldCouponScope,
		})
	}
	_spec.Modifiers = agsuo.modifiers
	_node = &AppGoodScope{config: agsuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, agsuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{appgoodscope.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
