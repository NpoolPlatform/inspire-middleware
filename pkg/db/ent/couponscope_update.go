// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/inspire-middleware/pkg/db/ent/couponscope"
	"github.com/NpoolPlatform/inspire-middleware/pkg/db/ent/predicate"
	"github.com/google/uuid"
)

// CouponScopeUpdate is the builder for updating CouponScope entities.
type CouponScopeUpdate struct {
	config
	hooks     []Hook
	mutation  *CouponScopeMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the CouponScopeUpdate builder.
func (csu *CouponScopeUpdate) Where(ps ...predicate.CouponScope) *CouponScopeUpdate {
	csu.mutation.Where(ps...)
	return csu
}

// SetCreatedAt sets the "created_at" field.
func (csu *CouponScopeUpdate) SetCreatedAt(u uint32) *CouponScopeUpdate {
	csu.mutation.ResetCreatedAt()
	csu.mutation.SetCreatedAt(u)
	return csu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (csu *CouponScopeUpdate) SetNillableCreatedAt(u *uint32) *CouponScopeUpdate {
	if u != nil {
		csu.SetCreatedAt(*u)
	}
	return csu
}

// AddCreatedAt adds u to the "created_at" field.
func (csu *CouponScopeUpdate) AddCreatedAt(u int32) *CouponScopeUpdate {
	csu.mutation.AddCreatedAt(u)
	return csu
}

// SetUpdatedAt sets the "updated_at" field.
func (csu *CouponScopeUpdate) SetUpdatedAt(u uint32) *CouponScopeUpdate {
	csu.mutation.ResetUpdatedAt()
	csu.mutation.SetUpdatedAt(u)
	return csu
}

// AddUpdatedAt adds u to the "updated_at" field.
func (csu *CouponScopeUpdate) AddUpdatedAt(u int32) *CouponScopeUpdate {
	csu.mutation.AddUpdatedAt(u)
	return csu
}

// SetDeletedAt sets the "deleted_at" field.
func (csu *CouponScopeUpdate) SetDeletedAt(u uint32) *CouponScopeUpdate {
	csu.mutation.ResetDeletedAt()
	csu.mutation.SetDeletedAt(u)
	return csu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (csu *CouponScopeUpdate) SetNillableDeletedAt(u *uint32) *CouponScopeUpdate {
	if u != nil {
		csu.SetDeletedAt(*u)
	}
	return csu
}

// AddDeletedAt adds u to the "deleted_at" field.
func (csu *CouponScopeUpdate) AddDeletedAt(u int32) *CouponScopeUpdate {
	csu.mutation.AddDeletedAt(u)
	return csu
}

// SetAppID sets the "app_id" field.
func (csu *CouponScopeUpdate) SetAppID(u uuid.UUID) *CouponScopeUpdate {
	csu.mutation.SetAppID(u)
	return csu
}

// SetCouponID sets the "coupon_id" field.
func (csu *CouponScopeUpdate) SetCouponID(u uuid.UUID) *CouponScopeUpdate {
	csu.mutation.SetCouponID(u)
	return csu
}

// SetAppGoodID sets the "app_good_id" field.
func (csu *CouponScopeUpdate) SetAppGoodID(u uuid.UUID) *CouponScopeUpdate {
	csu.mutation.SetAppGoodID(u)
	return csu
}

// SetNillableAppGoodID sets the "app_good_id" field if the given value is not nil.
func (csu *CouponScopeUpdate) SetNillableAppGoodID(u *uuid.UUID) *CouponScopeUpdate {
	if u != nil {
		csu.SetAppGoodID(*u)
	}
	return csu
}

// ClearAppGoodID clears the value of the "app_good_id" field.
func (csu *CouponScopeUpdate) ClearAppGoodID() *CouponScopeUpdate {
	csu.mutation.ClearAppGoodID()
	return csu
}

// SetCouponScope sets the "coupon_scope" field.
func (csu *CouponScopeUpdate) SetCouponScope(s string) *CouponScopeUpdate {
	csu.mutation.SetCouponScope(s)
	return csu
}

// SetNillableCouponScope sets the "coupon_scope" field if the given value is not nil.
func (csu *CouponScopeUpdate) SetNillableCouponScope(s *string) *CouponScopeUpdate {
	if s != nil {
		csu.SetCouponScope(*s)
	}
	return csu
}

// ClearCouponScope clears the value of the "coupon_scope" field.
func (csu *CouponScopeUpdate) ClearCouponScope() *CouponScopeUpdate {
	csu.mutation.ClearCouponScope()
	return csu
}

// Mutation returns the CouponScopeMutation object of the builder.
func (csu *CouponScopeUpdate) Mutation() *CouponScopeMutation {
	return csu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (csu *CouponScopeUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if err := csu.defaults(); err != nil {
		return 0, err
	}
	if len(csu.hooks) == 0 {
		affected, err = csu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CouponScopeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			csu.mutation = mutation
			affected, err = csu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(csu.hooks) - 1; i >= 0; i-- {
			if csu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = csu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, csu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (csu *CouponScopeUpdate) SaveX(ctx context.Context) int {
	affected, err := csu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (csu *CouponScopeUpdate) Exec(ctx context.Context) error {
	_, err := csu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (csu *CouponScopeUpdate) ExecX(ctx context.Context) {
	if err := csu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (csu *CouponScopeUpdate) defaults() error {
	if _, ok := csu.mutation.UpdatedAt(); !ok {
		if couponscope.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized couponscope.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := couponscope.UpdateDefaultUpdatedAt()
		csu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (csu *CouponScopeUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *CouponScopeUpdate {
	csu.modifiers = append(csu.modifiers, modifiers...)
	return csu
}

func (csu *CouponScopeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   couponscope.Table,
			Columns: couponscope.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: couponscope.FieldID,
			},
		},
	}
	if ps := csu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := csu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: couponscope.FieldCreatedAt,
		})
	}
	if value, ok := csu.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: couponscope.FieldCreatedAt,
		})
	}
	if value, ok := csu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: couponscope.FieldUpdatedAt,
		})
	}
	if value, ok := csu.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: couponscope.FieldUpdatedAt,
		})
	}
	if value, ok := csu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: couponscope.FieldDeletedAt,
		})
	}
	if value, ok := csu.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: couponscope.FieldDeletedAt,
		})
	}
	if value, ok := csu.mutation.AppID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: couponscope.FieldAppID,
		})
	}
	if value, ok := csu.mutation.CouponID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: couponscope.FieldCouponID,
		})
	}
	if value, ok := csu.mutation.AppGoodID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: couponscope.FieldAppGoodID,
		})
	}
	if csu.mutation.AppGoodIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: couponscope.FieldAppGoodID,
		})
	}
	if value, ok := csu.mutation.CouponScope(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: couponscope.FieldCouponScope,
		})
	}
	if csu.mutation.CouponScopeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: couponscope.FieldCouponScope,
		})
	}
	_spec.Modifiers = csu.modifiers
	if n, err = sqlgraph.UpdateNodes(ctx, csu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{couponscope.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// CouponScopeUpdateOne is the builder for updating a single CouponScope entity.
type CouponScopeUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *CouponScopeMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetCreatedAt sets the "created_at" field.
func (csuo *CouponScopeUpdateOne) SetCreatedAt(u uint32) *CouponScopeUpdateOne {
	csuo.mutation.ResetCreatedAt()
	csuo.mutation.SetCreatedAt(u)
	return csuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (csuo *CouponScopeUpdateOne) SetNillableCreatedAt(u *uint32) *CouponScopeUpdateOne {
	if u != nil {
		csuo.SetCreatedAt(*u)
	}
	return csuo
}

// AddCreatedAt adds u to the "created_at" field.
func (csuo *CouponScopeUpdateOne) AddCreatedAt(u int32) *CouponScopeUpdateOne {
	csuo.mutation.AddCreatedAt(u)
	return csuo
}

// SetUpdatedAt sets the "updated_at" field.
func (csuo *CouponScopeUpdateOne) SetUpdatedAt(u uint32) *CouponScopeUpdateOne {
	csuo.mutation.ResetUpdatedAt()
	csuo.mutation.SetUpdatedAt(u)
	return csuo
}

// AddUpdatedAt adds u to the "updated_at" field.
func (csuo *CouponScopeUpdateOne) AddUpdatedAt(u int32) *CouponScopeUpdateOne {
	csuo.mutation.AddUpdatedAt(u)
	return csuo
}

// SetDeletedAt sets the "deleted_at" field.
func (csuo *CouponScopeUpdateOne) SetDeletedAt(u uint32) *CouponScopeUpdateOne {
	csuo.mutation.ResetDeletedAt()
	csuo.mutation.SetDeletedAt(u)
	return csuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (csuo *CouponScopeUpdateOne) SetNillableDeletedAt(u *uint32) *CouponScopeUpdateOne {
	if u != nil {
		csuo.SetDeletedAt(*u)
	}
	return csuo
}

// AddDeletedAt adds u to the "deleted_at" field.
func (csuo *CouponScopeUpdateOne) AddDeletedAt(u int32) *CouponScopeUpdateOne {
	csuo.mutation.AddDeletedAt(u)
	return csuo
}

// SetAppID sets the "app_id" field.
func (csuo *CouponScopeUpdateOne) SetAppID(u uuid.UUID) *CouponScopeUpdateOne {
	csuo.mutation.SetAppID(u)
	return csuo
}

// SetCouponID sets the "coupon_id" field.
func (csuo *CouponScopeUpdateOne) SetCouponID(u uuid.UUID) *CouponScopeUpdateOne {
	csuo.mutation.SetCouponID(u)
	return csuo
}

// SetAppGoodID sets the "app_good_id" field.
func (csuo *CouponScopeUpdateOne) SetAppGoodID(u uuid.UUID) *CouponScopeUpdateOne {
	csuo.mutation.SetAppGoodID(u)
	return csuo
}

// SetNillableAppGoodID sets the "app_good_id" field if the given value is not nil.
func (csuo *CouponScopeUpdateOne) SetNillableAppGoodID(u *uuid.UUID) *CouponScopeUpdateOne {
	if u != nil {
		csuo.SetAppGoodID(*u)
	}
	return csuo
}

// ClearAppGoodID clears the value of the "app_good_id" field.
func (csuo *CouponScopeUpdateOne) ClearAppGoodID() *CouponScopeUpdateOne {
	csuo.mutation.ClearAppGoodID()
	return csuo
}

// SetCouponScope sets the "coupon_scope" field.
func (csuo *CouponScopeUpdateOne) SetCouponScope(s string) *CouponScopeUpdateOne {
	csuo.mutation.SetCouponScope(s)
	return csuo
}

// SetNillableCouponScope sets the "coupon_scope" field if the given value is not nil.
func (csuo *CouponScopeUpdateOne) SetNillableCouponScope(s *string) *CouponScopeUpdateOne {
	if s != nil {
		csuo.SetCouponScope(*s)
	}
	return csuo
}

// ClearCouponScope clears the value of the "coupon_scope" field.
func (csuo *CouponScopeUpdateOne) ClearCouponScope() *CouponScopeUpdateOne {
	csuo.mutation.ClearCouponScope()
	return csuo
}

// Mutation returns the CouponScopeMutation object of the builder.
func (csuo *CouponScopeUpdateOne) Mutation() *CouponScopeMutation {
	return csuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (csuo *CouponScopeUpdateOne) Select(field string, fields ...string) *CouponScopeUpdateOne {
	csuo.fields = append([]string{field}, fields...)
	return csuo
}

// Save executes the query and returns the updated CouponScope entity.
func (csuo *CouponScopeUpdateOne) Save(ctx context.Context) (*CouponScope, error) {
	var (
		err  error
		node *CouponScope
	)
	if err := csuo.defaults(); err != nil {
		return nil, err
	}
	if len(csuo.hooks) == 0 {
		node, err = csuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CouponScopeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			csuo.mutation = mutation
			node, err = csuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(csuo.hooks) - 1; i >= 0; i-- {
			if csuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = csuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, csuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*CouponScope)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from CouponScopeMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (csuo *CouponScopeUpdateOne) SaveX(ctx context.Context) *CouponScope {
	node, err := csuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (csuo *CouponScopeUpdateOne) Exec(ctx context.Context) error {
	_, err := csuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (csuo *CouponScopeUpdateOne) ExecX(ctx context.Context) {
	if err := csuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (csuo *CouponScopeUpdateOne) defaults() error {
	if _, ok := csuo.mutation.UpdatedAt(); !ok {
		if couponscope.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized couponscope.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := couponscope.UpdateDefaultUpdatedAt()
		csuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (csuo *CouponScopeUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *CouponScopeUpdateOne {
	csuo.modifiers = append(csuo.modifiers, modifiers...)
	return csuo
}

func (csuo *CouponScopeUpdateOne) sqlSave(ctx context.Context) (_node *CouponScope, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   couponscope.Table,
			Columns: couponscope.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: couponscope.FieldID,
			},
		},
	}
	id, ok := csuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "CouponScope.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := csuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, couponscope.FieldID)
		for _, f := range fields {
			if !couponscope.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != couponscope.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := csuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := csuo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: couponscope.FieldCreatedAt,
		})
	}
	if value, ok := csuo.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: couponscope.FieldCreatedAt,
		})
	}
	if value, ok := csuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: couponscope.FieldUpdatedAt,
		})
	}
	if value, ok := csuo.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: couponscope.FieldUpdatedAt,
		})
	}
	if value, ok := csuo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: couponscope.FieldDeletedAt,
		})
	}
	if value, ok := csuo.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: couponscope.FieldDeletedAt,
		})
	}
	if value, ok := csuo.mutation.AppID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: couponscope.FieldAppID,
		})
	}
	if value, ok := csuo.mutation.CouponID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: couponscope.FieldCouponID,
		})
	}
	if value, ok := csuo.mutation.AppGoodID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: couponscope.FieldAppGoodID,
		})
	}
	if csuo.mutation.AppGoodIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: couponscope.FieldAppGoodID,
		})
	}
	if value, ok := csuo.mutation.CouponScope(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: couponscope.FieldCouponScope,
		})
	}
	if csuo.mutation.CouponScopeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: couponscope.FieldCouponScope,
		})
	}
	_spec.Modifiers = csuo.modifiers
	_node = &CouponScope{config: csuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, csuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{couponscope.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
