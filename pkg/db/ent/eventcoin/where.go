// Code generated by ent, DO NOT EDIT.

package eventcoin

import (
	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/inspire-middleware/pkg/db/ent/predicate"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// ID filters vertices based on their ID field.
func ID(id uint32) predicate.EventCoin {
	return predicate.EventCoin(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint32) predicate.EventCoin {
	return predicate.EventCoin(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint32) predicate.EventCoin {
	return predicate.EventCoin(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint32) predicate.EventCoin {
	return predicate.EventCoin(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint32) predicate.EventCoin {
	return predicate.EventCoin(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint32) predicate.EventCoin {
	return predicate.EventCoin(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint32) predicate.EventCoin {
	return predicate.EventCoin(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint32) predicate.EventCoin {
	return predicate.EventCoin(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint32) predicate.EventCoin {
	return predicate.EventCoin(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v uint32) predicate.EventCoin {
	return predicate.EventCoin(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v uint32) predicate.EventCoin {
	return predicate.EventCoin(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v uint32) predicate.EventCoin {
	return predicate.EventCoin(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// EntID applies equality check predicate on the "ent_id" field. It's identical to EntIDEQ.
func EntID(v uuid.UUID) predicate.EventCoin {
	return predicate.EventCoin(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEntID), v))
	})
}

// AppID applies equality check predicate on the "app_id" field. It's identical to AppIDEQ.
func AppID(v uuid.UUID) predicate.EventCoin {
	return predicate.EventCoin(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAppID), v))
	})
}

// EventID applies equality check predicate on the "event_id" field. It's identical to EventIDEQ.
func EventID(v uuid.UUID) predicate.EventCoin {
	return predicate.EventCoin(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEventID), v))
	})
}

// CoinConfigID applies equality check predicate on the "coin_config_id" field. It's identical to CoinConfigIDEQ.
func CoinConfigID(v uuid.UUID) predicate.EventCoin {
	return predicate.EventCoin(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCoinConfigID), v))
	})
}

// CoinValue applies equality check predicate on the "coin_value" field. It's identical to CoinValueEQ.
func CoinValue(v decimal.Decimal) predicate.EventCoin {
	return predicate.EventCoin(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCoinValue), v))
	})
}

// CoinPerUsd applies equality check predicate on the "coin_per_usd" field. It's identical to CoinPerUsdEQ.
func CoinPerUsd(v decimal.Decimal) predicate.EventCoin {
	return predicate.EventCoin(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCoinPerUsd), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v uint32) predicate.EventCoin {
	return predicate.EventCoin(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v uint32) predicate.EventCoin {
	return predicate.EventCoin(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...uint32) predicate.EventCoin {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EventCoin(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...uint32) predicate.EventCoin {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EventCoin(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v uint32) predicate.EventCoin {
	return predicate.EventCoin(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v uint32) predicate.EventCoin {
	return predicate.EventCoin(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v uint32) predicate.EventCoin {
	return predicate.EventCoin(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v uint32) predicate.EventCoin {
	return predicate.EventCoin(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v uint32) predicate.EventCoin {
	return predicate.EventCoin(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v uint32) predicate.EventCoin {
	return predicate.EventCoin(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...uint32) predicate.EventCoin {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EventCoin(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...uint32) predicate.EventCoin {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EventCoin(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v uint32) predicate.EventCoin {
	return predicate.EventCoin(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v uint32) predicate.EventCoin {
	return predicate.EventCoin(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v uint32) predicate.EventCoin {
	return predicate.EventCoin(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v uint32) predicate.EventCoin {
	return predicate.EventCoin(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v uint32) predicate.EventCoin {
	return predicate.EventCoin(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v uint32) predicate.EventCoin {
	return predicate.EventCoin(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...uint32) predicate.EventCoin {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EventCoin(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...uint32) predicate.EventCoin {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EventCoin(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v uint32) predicate.EventCoin {
	return predicate.EventCoin(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v uint32) predicate.EventCoin {
	return predicate.EventCoin(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v uint32) predicate.EventCoin {
	return predicate.EventCoin(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v uint32) predicate.EventCoin {
	return predicate.EventCoin(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeletedAt), v))
	})
}

// EntIDEQ applies the EQ predicate on the "ent_id" field.
func EntIDEQ(v uuid.UUID) predicate.EventCoin {
	return predicate.EventCoin(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEntID), v))
	})
}

// EntIDNEQ applies the NEQ predicate on the "ent_id" field.
func EntIDNEQ(v uuid.UUID) predicate.EventCoin {
	return predicate.EventCoin(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEntID), v))
	})
}

// EntIDIn applies the In predicate on the "ent_id" field.
func EntIDIn(vs ...uuid.UUID) predicate.EventCoin {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EventCoin(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldEntID), v...))
	})
}

// EntIDNotIn applies the NotIn predicate on the "ent_id" field.
func EntIDNotIn(vs ...uuid.UUID) predicate.EventCoin {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EventCoin(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldEntID), v...))
	})
}

// EntIDGT applies the GT predicate on the "ent_id" field.
func EntIDGT(v uuid.UUID) predicate.EventCoin {
	return predicate.EventCoin(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEntID), v))
	})
}

// EntIDGTE applies the GTE predicate on the "ent_id" field.
func EntIDGTE(v uuid.UUID) predicate.EventCoin {
	return predicate.EventCoin(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEntID), v))
	})
}

// EntIDLT applies the LT predicate on the "ent_id" field.
func EntIDLT(v uuid.UUID) predicate.EventCoin {
	return predicate.EventCoin(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEntID), v))
	})
}

// EntIDLTE applies the LTE predicate on the "ent_id" field.
func EntIDLTE(v uuid.UUID) predicate.EventCoin {
	return predicate.EventCoin(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEntID), v))
	})
}

// AppIDEQ applies the EQ predicate on the "app_id" field.
func AppIDEQ(v uuid.UUID) predicate.EventCoin {
	return predicate.EventCoin(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAppID), v))
	})
}

// AppIDNEQ applies the NEQ predicate on the "app_id" field.
func AppIDNEQ(v uuid.UUID) predicate.EventCoin {
	return predicate.EventCoin(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAppID), v))
	})
}

// AppIDIn applies the In predicate on the "app_id" field.
func AppIDIn(vs ...uuid.UUID) predicate.EventCoin {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EventCoin(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldAppID), v...))
	})
}

// AppIDNotIn applies the NotIn predicate on the "app_id" field.
func AppIDNotIn(vs ...uuid.UUID) predicate.EventCoin {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EventCoin(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldAppID), v...))
	})
}

// AppIDGT applies the GT predicate on the "app_id" field.
func AppIDGT(v uuid.UUID) predicate.EventCoin {
	return predicate.EventCoin(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAppID), v))
	})
}

// AppIDGTE applies the GTE predicate on the "app_id" field.
func AppIDGTE(v uuid.UUID) predicate.EventCoin {
	return predicate.EventCoin(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAppID), v))
	})
}

// AppIDLT applies the LT predicate on the "app_id" field.
func AppIDLT(v uuid.UUID) predicate.EventCoin {
	return predicate.EventCoin(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAppID), v))
	})
}

// AppIDLTE applies the LTE predicate on the "app_id" field.
func AppIDLTE(v uuid.UUID) predicate.EventCoin {
	return predicate.EventCoin(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAppID), v))
	})
}

// AppIDIsNil applies the IsNil predicate on the "app_id" field.
func AppIDIsNil() predicate.EventCoin {
	return predicate.EventCoin(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldAppID)))
	})
}

// AppIDNotNil applies the NotNil predicate on the "app_id" field.
func AppIDNotNil() predicate.EventCoin {
	return predicate.EventCoin(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldAppID)))
	})
}

// EventIDEQ applies the EQ predicate on the "event_id" field.
func EventIDEQ(v uuid.UUID) predicate.EventCoin {
	return predicate.EventCoin(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEventID), v))
	})
}

// EventIDNEQ applies the NEQ predicate on the "event_id" field.
func EventIDNEQ(v uuid.UUID) predicate.EventCoin {
	return predicate.EventCoin(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEventID), v))
	})
}

// EventIDIn applies the In predicate on the "event_id" field.
func EventIDIn(vs ...uuid.UUID) predicate.EventCoin {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EventCoin(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldEventID), v...))
	})
}

// EventIDNotIn applies the NotIn predicate on the "event_id" field.
func EventIDNotIn(vs ...uuid.UUID) predicate.EventCoin {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EventCoin(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldEventID), v...))
	})
}

// EventIDGT applies the GT predicate on the "event_id" field.
func EventIDGT(v uuid.UUID) predicate.EventCoin {
	return predicate.EventCoin(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEventID), v))
	})
}

// EventIDGTE applies the GTE predicate on the "event_id" field.
func EventIDGTE(v uuid.UUID) predicate.EventCoin {
	return predicate.EventCoin(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEventID), v))
	})
}

// EventIDLT applies the LT predicate on the "event_id" field.
func EventIDLT(v uuid.UUID) predicate.EventCoin {
	return predicate.EventCoin(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEventID), v))
	})
}

// EventIDLTE applies the LTE predicate on the "event_id" field.
func EventIDLTE(v uuid.UUID) predicate.EventCoin {
	return predicate.EventCoin(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEventID), v))
	})
}

// EventIDIsNil applies the IsNil predicate on the "event_id" field.
func EventIDIsNil() predicate.EventCoin {
	return predicate.EventCoin(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldEventID)))
	})
}

// EventIDNotNil applies the NotNil predicate on the "event_id" field.
func EventIDNotNil() predicate.EventCoin {
	return predicate.EventCoin(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldEventID)))
	})
}

// CoinConfigIDEQ applies the EQ predicate on the "coin_config_id" field.
func CoinConfigIDEQ(v uuid.UUID) predicate.EventCoin {
	return predicate.EventCoin(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCoinConfigID), v))
	})
}

// CoinConfigIDNEQ applies the NEQ predicate on the "coin_config_id" field.
func CoinConfigIDNEQ(v uuid.UUID) predicate.EventCoin {
	return predicate.EventCoin(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCoinConfigID), v))
	})
}

// CoinConfigIDIn applies the In predicate on the "coin_config_id" field.
func CoinConfigIDIn(vs ...uuid.UUID) predicate.EventCoin {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EventCoin(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCoinConfigID), v...))
	})
}

// CoinConfigIDNotIn applies the NotIn predicate on the "coin_config_id" field.
func CoinConfigIDNotIn(vs ...uuid.UUID) predicate.EventCoin {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EventCoin(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCoinConfigID), v...))
	})
}

// CoinConfigIDGT applies the GT predicate on the "coin_config_id" field.
func CoinConfigIDGT(v uuid.UUID) predicate.EventCoin {
	return predicate.EventCoin(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCoinConfigID), v))
	})
}

// CoinConfigIDGTE applies the GTE predicate on the "coin_config_id" field.
func CoinConfigIDGTE(v uuid.UUID) predicate.EventCoin {
	return predicate.EventCoin(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCoinConfigID), v))
	})
}

// CoinConfigIDLT applies the LT predicate on the "coin_config_id" field.
func CoinConfigIDLT(v uuid.UUID) predicate.EventCoin {
	return predicate.EventCoin(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCoinConfigID), v))
	})
}

// CoinConfigIDLTE applies the LTE predicate on the "coin_config_id" field.
func CoinConfigIDLTE(v uuid.UUID) predicate.EventCoin {
	return predicate.EventCoin(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCoinConfigID), v))
	})
}

// CoinConfigIDIsNil applies the IsNil predicate on the "coin_config_id" field.
func CoinConfigIDIsNil() predicate.EventCoin {
	return predicate.EventCoin(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCoinConfigID)))
	})
}

// CoinConfigIDNotNil applies the NotNil predicate on the "coin_config_id" field.
func CoinConfigIDNotNil() predicate.EventCoin {
	return predicate.EventCoin(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCoinConfigID)))
	})
}

// CoinValueEQ applies the EQ predicate on the "coin_value" field.
func CoinValueEQ(v decimal.Decimal) predicate.EventCoin {
	return predicate.EventCoin(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCoinValue), v))
	})
}

// CoinValueNEQ applies the NEQ predicate on the "coin_value" field.
func CoinValueNEQ(v decimal.Decimal) predicate.EventCoin {
	return predicate.EventCoin(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCoinValue), v))
	})
}

// CoinValueIn applies the In predicate on the "coin_value" field.
func CoinValueIn(vs ...decimal.Decimal) predicate.EventCoin {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EventCoin(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCoinValue), v...))
	})
}

// CoinValueNotIn applies the NotIn predicate on the "coin_value" field.
func CoinValueNotIn(vs ...decimal.Decimal) predicate.EventCoin {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EventCoin(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCoinValue), v...))
	})
}

// CoinValueGT applies the GT predicate on the "coin_value" field.
func CoinValueGT(v decimal.Decimal) predicate.EventCoin {
	return predicate.EventCoin(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCoinValue), v))
	})
}

// CoinValueGTE applies the GTE predicate on the "coin_value" field.
func CoinValueGTE(v decimal.Decimal) predicate.EventCoin {
	return predicate.EventCoin(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCoinValue), v))
	})
}

// CoinValueLT applies the LT predicate on the "coin_value" field.
func CoinValueLT(v decimal.Decimal) predicate.EventCoin {
	return predicate.EventCoin(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCoinValue), v))
	})
}

// CoinValueLTE applies the LTE predicate on the "coin_value" field.
func CoinValueLTE(v decimal.Decimal) predicate.EventCoin {
	return predicate.EventCoin(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCoinValue), v))
	})
}

// CoinValueIsNil applies the IsNil predicate on the "coin_value" field.
func CoinValueIsNil() predicate.EventCoin {
	return predicate.EventCoin(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCoinValue)))
	})
}

// CoinValueNotNil applies the NotNil predicate on the "coin_value" field.
func CoinValueNotNil() predicate.EventCoin {
	return predicate.EventCoin(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCoinValue)))
	})
}

// CoinPerUsdEQ applies the EQ predicate on the "coin_per_usd" field.
func CoinPerUsdEQ(v decimal.Decimal) predicate.EventCoin {
	return predicate.EventCoin(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCoinPerUsd), v))
	})
}

// CoinPerUsdNEQ applies the NEQ predicate on the "coin_per_usd" field.
func CoinPerUsdNEQ(v decimal.Decimal) predicate.EventCoin {
	return predicate.EventCoin(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCoinPerUsd), v))
	})
}

// CoinPerUsdIn applies the In predicate on the "coin_per_usd" field.
func CoinPerUsdIn(vs ...decimal.Decimal) predicate.EventCoin {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EventCoin(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCoinPerUsd), v...))
	})
}

// CoinPerUsdNotIn applies the NotIn predicate on the "coin_per_usd" field.
func CoinPerUsdNotIn(vs ...decimal.Decimal) predicate.EventCoin {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EventCoin(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCoinPerUsd), v...))
	})
}

// CoinPerUsdGT applies the GT predicate on the "coin_per_usd" field.
func CoinPerUsdGT(v decimal.Decimal) predicate.EventCoin {
	return predicate.EventCoin(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCoinPerUsd), v))
	})
}

// CoinPerUsdGTE applies the GTE predicate on the "coin_per_usd" field.
func CoinPerUsdGTE(v decimal.Decimal) predicate.EventCoin {
	return predicate.EventCoin(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCoinPerUsd), v))
	})
}

// CoinPerUsdLT applies the LT predicate on the "coin_per_usd" field.
func CoinPerUsdLT(v decimal.Decimal) predicate.EventCoin {
	return predicate.EventCoin(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCoinPerUsd), v))
	})
}

// CoinPerUsdLTE applies the LTE predicate on the "coin_per_usd" field.
func CoinPerUsdLTE(v decimal.Decimal) predicate.EventCoin {
	return predicate.EventCoin(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCoinPerUsd), v))
	})
}

// CoinPerUsdIsNil applies the IsNil predicate on the "coin_per_usd" field.
func CoinPerUsdIsNil() predicate.EventCoin {
	return predicate.EventCoin(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCoinPerUsd)))
	})
}

// CoinPerUsdNotNil applies the NotNil predicate on the "coin_per_usd" field.
func CoinPerUsdNotNil() predicate.EventCoin {
	return predicate.EventCoin(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCoinPerUsd)))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.EventCoin) predicate.EventCoin {
	return predicate.EventCoin(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.EventCoin) predicate.EventCoin {
	return predicate.EventCoin(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.EventCoin) predicate.EventCoin {
	return predicate.EventCoin(func(s *sql.Selector) {
		p(s.Not())
	})
}
