// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/inspire-middleware/pkg/db/ent/coupondiscount"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// CouponDiscountCreate is the builder for creating a CouponDiscount entity.
type CouponDiscountCreate struct {
	config
	mutation *CouponDiscountMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (cdc *CouponDiscountCreate) SetCreatedAt(u uint32) *CouponDiscountCreate {
	cdc.mutation.SetCreatedAt(u)
	return cdc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cdc *CouponDiscountCreate) SetNillableCreatedAt(u *uint32) *CouponDiscountCreate {
	if u != nil {
		cdc.SetCreatedAt(*u)
	}
	return cdc
}

// SetUpdatedAt sets the "updated_at" field.
func (cdc *CouponDiscountCreate) SetUpdatedAt(u uint32) *CouponDiscountCreate {
	cdc.mutation.SetUpdatedAt(u)
	return cdc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (cdc *CouponDiscountCreate) SetNillableUpdatedAt(u *uint32) *CouponDiscountCreate {
	if u != nil {
		cdc.SetUpdatedAt(*u)
	}
	return cdc
}

// SetDeletedAt sets the "deleted_at" field.
func (cdc *CouponDiscountCreate) SetDeletedAt(u uint32) *CouponDiscountCreate {
	cdc.mutation.SetDeletedAt(u)
	return cdc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (cdc *CouponDiscountCreate) SetNillableDeletedAt(u *uint32) *CouponDiscountCreate {
	if u != nil {
		cdc.SetDeletedAt(*u)
	}
	return cdc
}

// SetAppID sets the "app_id" field.
func (cdc *CouponDiscountCreate) SetAppID(u uuid.UUID) *CouponDiscountCreate {
	cdc.mutation.SetAppID(u)
	return cdc
}

// SetDiscount sets the "discount" field.
func (cdc *CouponDiscountCreate) SetDiscount(d decimal.Decimal) *CouponDiscountCreate {
	cdc.mutation.SetDiscount(d)
	return cdc
}

// SetNillableDiscount sets the "discount" field if the given value is not nil.
func (cdc *CouponDiscountCreate) SetNillableDiscount(d *decimal.Decimal) *CouponDiscountCreate {
	if d != nil {
		cdc.SetDiscount(*d)
	}
	return cdc
}

// SetCirculation sets the "circulation" field.
func (cdc *CouponDiscountCreate) SetCirculation(d decimal.Decimal) *CouponDiscountCreate {
	cdc.mutation.SetCirculation(d)
	return cdc
}

// SetNillableCirculation sets the "circulation" field if the given value is not nil.
func (cdc *CouponDiscountCreate) SetNillableCirculation(d *decimal.Decimal) *CouponDiscountCreate {
	if d != nil {
		cdc.SetCirculation(*d)
	}
	return cdc
}

// SetReleasedByUserID sets the "released_by_user_id" field.
func (cdc *CouponDiscountCreate) SetReleasedByUserID(u uuid.UUID) *CouponDiscountCreate {
	cdc.mutation.SetReleasedByUserID(u)
	return cdc
}

// SetStartAt sets the "start_at" field.
func (cdc *CouponDiscountCreate) SetStartAt(u uint32) *CouponDiscountCreate {
	cdc.mutation.SetStartAt(u)
	return cdc
}

// SetNillableStartAt sets the "start_at" field if the given value is not nil.
func (cdc *CouponDiscountCreate) SetNillableStartAt(u *uint32) *CouponDiscountCreate {
	if u != nil {
		cdc.SetStartAt(*u)
	}
	return cdc
}

// SetDurationDays sets the "duration_days" field.
func (cdc *CouponDiscountCreate) SetDurationDays(u uint32) *CouponDiscountCreate {
	cdc.mutation.SetDurationDays(u)
	return cdc
}

// SetNillableDurationDays sets the "duration_days" field if the given value is not nil.
func (cdc *CouponDiscountCreate) SetNillableDurationDays(u *uint32) *CouponDiscountCreate {
	if u != nil {
		cdc.SetDurationDays(*u)
	}
	return cdc
}

// SetMessage sets the "message" field.
func (cdc *CouponDiscountCreate) SetMessage(s string) *CouponDiscountCreate {
	cdc.mutation.SetMessage(s)
	return cdc
}

// SetNillableMessage sets the "message" field if the given value is not nil.
func (cdc *CouponDiscountCreate) SetNillableMessage(s *string) *CouponDiscountCreate {
	if s != nil {
		cdc.SetMessage(*s)
	}
	return cdc
}

// SetName sets the "name" field.
func (cdc *CouponDiscountCreate) SetName(s string) *CouponDiscountCreate {
	cdc.mutation.SetName(s)
	return cdc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (cdc *CouponDiscountCreate) SetNillableName(s *string) *CouponDiscountCreate {
	if s != nil {
		cdc.SetName(*s)
	}
	return cdc
}

// SetAllocated sets the "allocated" field.
func (cdc *CouponDiscountCreate) SetAllocated(u uint32) *CouponDiscountCreate {
	cdc.mutation.SetAllocated(u)
	return cdc
}

// SetNillableAllocated sets the "allocated" field if the given value is not nil.
func (cdc *CouponDiscountCreate) SetNillableAllocated(u *uint32) *CouponDiscountCreate {
	if u != nil {
		cdc.SetAllocated(*u)
	}
	return cdc
}

// SetID sets the "id" field.
func (cdc *CouponDiscountCreate) SetID(u uuid.UUID) *CouponDiscountCreate {
	cdc.mutation.SetID(u)
	return cdc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (cdc *CouponDiscountCreate) SetNillableID(u *uuid.UUID) *CouponDiscountCreate {
	if u != nil {
		cdc.SetID(*u)
	}
	return cdc
}

// Mutation returns the CouponDiscountMutation object of the builder.
func (cdc *CouponDiscountCreate) Mutation() *CouponDiscountMutation {
	return cdc.mutation
}

// Save creates the CouponDiscount in the database.
func (cdc *CouponDiscountCreate) Save(ctx context.Context) (*CouponDiscount, error) {
	var (
		err  error
		node *CouponDiscount
	)
	if err := cdc.defaults(); err != nil {
		return nil, err
	}
	if len(cdc.hooks) == 0 {
		if err = cdc.check(); err != nil {
			return nil, err
		}
		node, err = cdc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CouponDiscountMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cdc.check(); err != nil {
				return nil, err
			}
			cdc.mutation = mutation
			if node, err = cdc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(cdc.hooks) - 1; i >= 0; i-- {
			if cdc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cdc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, cdc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*CouponDiscount)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from CouponDiscountMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (cdc *CouponDiscountCreate) SaveX(ctx context.Context) *CouponDiscount {
	v, err := cdc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cdc *CouponDiscountCreate) Exec(ctx context.Context) error {
	_, err := cdc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cdc *CouponDiscountCreate) ExecX(ctx context.Context) {
	if err := cdc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cdc *CouponDiscountCreate) defaults() error {
	if _, ok := cdc.mutation.CreatedAt(); !ok {
		if coupondiscount.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized coupondiscount.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := coupondiscount.DefaultCreatedAt()
		cdc.mutation.SetCreatedAt(v)
	}
	if _, ok := cdc.mutation.UpdatedAt(); !ok {
		if coupondiscount.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized coupondiscount.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := coupondiscount.DefaultUpdatedAt()
		cdc.mutation.SetUpdatedAt(v)
	}
	if _, ok := cdc.mutation.DeletedAt(); !ok {
		if coupondiscount.DefaultDeletedAt == nil {
			return fmt.Errorf("ent: uninitialized coupondiscount.DefaultDeletedAt (forgotten import ent/runtime?)")
		}
		v := coupondiscount.DefaultDeletedAt()
		cdc.mutation.SetDeletedAt(v)
	}
	if _, ok := cdc.mutation.Discount(); !ok {
		v := coupondiscount.DefaultDiscount
		cdc.mutation.SetDiscount(v)
	}
	if _, ok := cdc.mutation.Circulation(); !ok {
		v := coupondiscount.DefaultCirculation
		cdc.mutation.SetCirculation(v)
	}
	if _, ok := cdc.mutation.StartAt(); !ok {
		v := coupondiscount.DefaultStartAt
		cdc.mutation.SetStartAt(v)
	}
	if _, ok := cdc.mutation.DurationDays(); !ok {
		v := coupondiscount.DefaultDurationDays
		cdc.mutation.SetDurationDays(v)
	}
	if _, ok := cdc.mutation.Message(); !ok {
		v := coupondiscount.DefaultMessage
		cdc.mutation.SetMessage(v)
	}
	if _, ok := cdc.mutation.Name(); !ok {
		v := coupondiscount.DefaultName
		cdc.mutation.SetName(v)
	}
	if _, ok := cdc.mutation.Allocated(); !ok {
		v := coupondiscount.DefaultAllocated
		cdc.mutation.SetAllocated(v)
	}
	if _, ok := cdc.mutation.ID(); !ok {
		if coupondiscount.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized coupondiscount.DefaultID (forgotten import ent/runtime?)")
		}
		v := coupondiscount.DefaultID()
		cdc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (cdc *CouponDiscountCreate) check() error {
	if _, ok := cdc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "CouponDiscount.created_at"`)}
	}
	if _, ok := cdc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "CouponDiscount.updated_at"`)}
	}
	if _, ok := cdc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`ent: missing required field "CouponDiscount.deleted_at"`)}
	}
	if _, ok := cdc.mutation.AppID(); !ok {
		return &ValidationError{Name: "app_id", err: errors.New(`ent: missing required field "CouponDiscount.app_id"`)}
	}
	if _, ok := cdc.mutation.ReleasedByUserID(); !ok {
		return &ValidationError{Name: "released_by_user_id", err: errors.New(`ent: missing required field "CouponDiscount.released_by_user_id"`)}
	}
	return nil
}

func (cdc *CouponDiscountCreate) sqlSave(ctx context.Context) (*CouponDiscount, error) {
	_node, _spec := cdc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cdc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (cdc *CouponDiscountCreate) createSpec() (*CouponDiscount, *sqlgraph.CreateSpec) {
	var (
		_node = &CouponDiscount{config: cdc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: coupondiscount.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: coupondiscount.FieldID,
			},
		}
	)
	_spec.OnConflict = cdc.conflict
	if id, ok := cdc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := cdc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: coupondiscount.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := cdc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: coupondiscount.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := cdc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: coupondiscount.FieldDeletedAt,
		})
		_node.DeletedAt = value
	}
	if value, ok := cdc.mutation.AppID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: coupondiscount.FieldAppID,
		})
		_node.AppID = value
	}
	if value, ok := cdc.mutation.Discount(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: coupondiscount.FieldDiscount,
		})
		_node.Discount = value
	}
	if value, ok := cdc.mutation.Circulation(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: coupondiscount.FieldCirculation,
		})
		_node.Circulation = value
	}
	if value, ok := cdc.mutation.ReleasedByUserID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: coupondiscount.FieldReleasedByUserID,
		})
		_node.ReleasedByUserID = value
	}
	if value, ok := cdc.mutation.StartAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: coupondiscount.FieldStartAt,
		})
		_node.StartAt = value
	}
	if value, ok := cdc.mutation.DurationDays(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: coupondiscount.FieldDurationDays,
		})
		_node.DurationDays = value
	}
	if value, ok := cdc.mutation.Message(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: coupondiscount.FieldMessage,
		})
		_node.Message = value
	}
	if value, ok := cdc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: coupondiscount.FieldName,
		})
		_node.Name = value
	}
	if value, ok := cdc.mutation.Allocated(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: coupondiscount.FieldAllocated,
		})
		_node.Allocated = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.CouponDiscount.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CouponDiscountUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (cdc *CouponDiscountCreate) OnConflict(opts ...sql.ConflictOption) *CouponDiscountUpsertOne {
	cdc.conflict = opts
	return &CouponDiscountUpsertOne{
		create: cdc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.CouponDiscount.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (cdc *CouponDiscountCreate) OnConflictColumns(columns ...string) *CouponDiscountUpsertOne {
	cdc.conflict = append(cdc.conflict, sql.ConflictColumns(columns...))
	return &CouponDiscountUpsertOne{
		create: cdc,
	}
}

type (
	// CouponDiscountUpsertOne is the builder for "upsert"-ing
	//  one CouponDiscount node.
	CouponDiscountUpsertOne struct {
		create *CouponDiscountCreate
	}

	// CouponDiscountUpsert is the "OnConflict" setter.
	CouponDiscountUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *CouponDiscountUpsert) SetCreatedAt(v uint32) *CouponDiscountUpsert {
	u.Set(coupondiscount.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *CouponDiscountUpsert) UpdateCreatedAt() *CouponDiscountUpsert {
	u.SetExcluded(coupondiscount.FieldCreatedAt)
	return u
}

// AddCreatedAt adds v to the "created_at" field.
func (u *CouponDiscountUpsert) AddCreatedAt(v uint32) *CouponDiscountUpsert {
	u.Add(coupondiscount.FieldCreatedAt, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *CouponDiscountUpsert) SetUpdatedAt(v uint32) *CouponDiscountUpsert {
	u.Set(coupondiscount.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *CouponDiscountUpsert) UpdateUpdatedAt() *CouponDiscountUpsert {
	u.SetExcluded(coupondiscount.FieldUpdatedAt)
	return u
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *CouponDiscountUpsert) AddUpdatedAt(v uint32) *CouponDiscountUpsert {
	u.Add(coupondiscount.FieldUpdatedAt, v)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *CouponDiscountUpsert) SetDeletedAt(v uint32) *CouponDiscountUpsert {
	u.Set(coupondiscount.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *CouponDiscountUpsert) UpdateDeletedAt() *CouponDiscountUpsert {
	u.SetExcluded(coupondiscount.FieldDeletedAt)
	return u
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *CouponDiscountUpsert) AddDeletedAt(v uint32) *CouponDiscountUpsert {
	u.Add(coupondiscount.FieldDeletedAt, v)
	return u
}

// SetAppID sets the "app_id" field.
func (u *CouponDiscountUpsert) SetAppID(v uuid.UUID) *CouponDiscountUpsert {
	u.Set(coupondiscount.FieldAppID, v)
	return u
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *CouponDiscountUpsert) UpdateAppID() *CouponDiscountUpsert {
	u.SetExcluded(coupondiscount.FieldAppID)
	return u
}

// SetDiscount sets the "discount" field.
func (u *CouponDiscountUpsert) SetDiscount(v decimal.Decimal) *CouponDiscountUpsert {
	u.Set(coupondiscount.FieldDiscount, v)
	return u
}

// UpdateDiscount sets the "discount" field to the value that was provided on create.
func (u *CouponDiscountUpsert) UpdateDiscount() *CouponDiscountUpsert {
	u.SetExcluded(coupondiscount.FieldDiscount)
	return u
}

// ClearDiscount clears the value of the "discount" field.
func (u *CouponDiscountUpsert) ClearDiscount() *CouponDiscountUpsert {
	u.SetNull(coupondiscount.FieldDiscount)
	return u
}

// SetCirculation sets the "circulation" field.
func (u *CouponDiscountUpsert) SetCirculation(v decimal.Decimal) *CouponDiscountUpsert {
	u.Set(coupondiscount.FieldCirculation, v)
	return u
}

// UpdateCirculation sets the "circulation" field to the value that was provided on create.
func (u *CouponDiscountUpsert) UpdateCirculation() *CouponDiscountUpsert {
	u.SetExcluded(coupondiscount.FieldCirculation)
	return u
}

// ClearCirculation clears the value of the "circulation" field.
func (u *CouponDiscountUpsert) ClearCirculation() *CouponDiscountUpsert {
	u.SetNull(coupondiscount.FieldCirculation)
	return u
}

// SetReleasedByUserID sets the "released_by_user_id" field.
func (u *CouponDiscountUpsert) SetReleasedByUserID(v uuid.UUID) *CouponDiscountUpsert {
	u.Set(coupondiscount.FieldReleasedByUserID, v)
	return u
}

// UpdateReleasedByUserID sets the "released_by_user_id" field to the value that was provided on create.
func (u *CouponDiscountUpsert) UpdateReleasedByUserID() *CouponDiscountUpsert {
	u.SetExcluded(coupondiscount.FieldReleasedByUserID)
	return u
}

// SetStartAt sets the "start_at" field.
func (u *CouponDiscountUpsert) SetStartAt(v uint32) *CouponDiscountUpsert {
	u.Set(coupondiscount.FieldStartAt, v)
	return u
}

// UpdateStartAt sets the "start_at" field to the value that was provided on create.
func (u *CouponDiscountUpsert) UpdateStartAt() *CouponDiscountUpsert {
	u.SetExcluded(coupondiscount.FieldStartAt)
	return u
}

// AddStartAt adds v to the "start_at" field.
func (u *CouponDiscountUpsert) AddStartAt(v uint32) *CouponDiscountUpsert {
	u.Add(coupondiscount.FieldStartAt, v)
	return u
}

// ClearStartAt clears the value of the "start_at" field.
func (u *CouponDiscountUpsert) ClearStartAt() *CouponDiscountUpsert {
	u.SetNull(coupondiscount.FieldStartAt)
	return u
}

// SetDurationDays sets the "duration_days" field.
func (u *CouponDiscountUpsert) SetDurationDays(v uint32) *CouponDiscountUpsert {
	u.Set(coupondiscount.FieldDurationDays, v)
	return u
}

// UpdateDurationDays sets the "duration_days" field to the value that was provided on create.
func (u *CouponDiscountUpsert) UpdateDurationDays() *CouponDiscountUpsert {
	u.SetExcluded(coupondiscount.FieldDurationDays)
	return u
}

// AddDurationDays adds v to the "duration_days" field.
func (u *CouponDiscountUpsert) AddDurationDays(v uint32) *CouponDiscountUpsert {
	u.Add(coupondiscount.FieldDurationDays, v)
	return u
}

// ClearDurationDays clears the value of the "duration_days" field.
func (u *CouponDiscountUpsert) ClearDurationDays() *CouponDiscountUpsert {
	u.SetNull(coupondiscount.FieldDurationDays)
	return u
}

// SetMessage sets the "message" field.
func (u *CouponDiscountUpsert) SetMessage(v string) *CouponDiscountUpsert {
	u.Set(coupondiscount.FieldMessage, v)
	return u
}

// UpdateMessage sets the "message" field to the value that was provided on create.
func (u *CouponDiscountUpsert) UpdateMessage() *CouponDiscountUpsert {
	u.SetExcluded(coupondiscount.FieldMessage)
	return u
}

// ClearMessage clears the value of the "message" field.
func (u *CouponDiscountUpsert) ClearMessage() *CouponDiscountUpsert {
	u.SetNull(coupondiscount.FieldMessage)
	return u
}

// SetName sets the "name" field.
func (u *CouponDiscountUpsert) SetName(v string) *CouponDiscountUpsert {
	u.Set(coupondiscount.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *CouponDiscountUpsert) UpdateName() *CouponDiscountUpsert {
	u.SetExcluded(coupondiscount.FieldName)
	return u
}

// ClearName clears the value of the "name" field.
func (u *CouponDiscountUpsert) ClearName() *CouponDiscountUpsert {
	u.SetNull(coupondiscount.FieldName)
	return u
}

// SetAllocated sets the "allocated" field.
func (u *CouponDiscountUpsert) SetAllocated(v uint32) *CouponDiscountUpsert {
	u.Set(coupondiscount.FieldAllocated, v)
	return u
}

// UpdateAllocated sets the "allocated" field to the value that was provided on create.
func (u *CouponDiscountUpsert) UpdateAllocated() *CouponDiscountUpsert {
	u.SetExcluded(coupondiscount.FieldAllocated)
	return u
}

// AddAllocated adds v to the "allocated" field.
func (u *CouponDiscountUpsert) AddAllocated(v uint32) *CouponDiscountUpsert {
	u.Add(coupondiscount.FieldAllocated, v)
	return u
}

// ClearAllocated clears the value of the "allocated" field.
func (u *CouponDiscountUpsert) ClearAllocated() *CouponDiscountUpsert {
	u.SetNull(coupondiscount.FieldAllocated)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.CouponDiscount.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(coupondiscount.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *CouponDiscountUpsertOne) UpdateNewValues() *CouponDiscountUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(coupondiscount.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.CouponDiscount.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *CouponDiscountUpsertOne) Ignore() *CouponDiscountUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CouponDiscountUpsertOne) DoNothing() *CouponDiscountUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CouponDiscountCreate.OnConflict
// documentation for more info.
func (u *CouponDiscountUpsertOne) Update(set func(*CouponDiscountUpsert)) *CouponDiscountUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CouponDiscountUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *CouponDiscountUpsertOne) SetCreatedAt(v uint32) *CouponDiscountUpsertOne {
	return u.Update(func(s *CouponDiscountUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *CouponDiscountUpsertOne) AddCreatedAt(v uint32) *CouponDiscountUpsertOne {
	return u.Update(func(s *CouponDiscountUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *CouponDiscountUpsertOne) UpdateCreatedAt() *CouponDiscountUpsertOne {
	return u.Update(func(s *CouponDiscountUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *CouponDiscountUpsertOne) SetUpdatedAt(v uint32) *CouponDiscountUpsertOne {
	return u.Update(func(s *CouponDiscountUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *CouponDiscountUpsertOne) AddUpdatedAt(v uint32) *CouponDiscountUpsertOne {
	return u.Update(func(s *CouponDiscountUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *CouponDiscountUpsertOne) UpdateUpdatedAt() *CouponDiscountUpsertOne {
	return u.Update(func(s *CouponDiscountUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *CouponDiscountUpsertOne) SetDeletedAt(v uint32) *CouponDiscountUpsertOne {
	return u.Update(func(s *CouponDiscountUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *CouponDiscountUpsertOne) AddDeletedAt(v uint32) *CouponDiscountUpsertOne {
	return u.Update(func(s *CouponDiscountUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *CouponDiscountUpsertOne) UpdateDeletedAt() *CouponDiscountUpsertOne {
	return u.Update(func(s *CouponDiscountUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetAppID sets the "app_id" field.
func (u *CouponDiscountUpsertOne) SetAppID(v uuid.UUID) *CouponDiscountUpsertOne {
	return u.Update(func(s *CouponDiscountUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *CouponDiscountUpsertOne) UpdateAppID() *CouponDiscountUpsertOne {
	return u.Update(func(s *CouponDiscountUpsert) {
		s.UpdateAppID()
	})
}

// SetDiscount sets the "discount" field.
func (u *CouponDiscountUpsertOne) SetDiscount(v decimal.Decimal) *CouponDiscountUpsertOne {
	return u.Update(func(s *CouponDiscountUpsert) {
		s.SetDiscount(v)
	})
}

// UpdateDiscount sets the "discount" field to the value that was provided on create.
func (u *CouponDiscountUpsertOne) UpdateDiscount() *CouponDiscountUpsertOne {
	return u.Update(func(s *CouponDiscountUpsert) {
		s.UpdateDiscount()
	})
}

// ClearDiscount clears the value of the "discount" field.
func (u *CouponDiscountUpsertOne) ClearDiscount() *CouponDiscountUpsertOne {
	return u.Update(func(s *CouponDiscountUpsert) {
		s.ClearDiscount()
	})
}

// SetCirculation sets the "circulation" field.
func (u *CouponDiscountUpsertOne) SetCirculation(v decimal.Decimal) *CouponDiscountUpsertOne {
	return u.Update(func(s *CouponDiscountUpsert) {
		s.SetCirculation(v)
	})
}

// UpdateCirculation sets the "circulation" field to the value that was provided on create.
func (u *CouponDiscountUpsertOne) UpdateCirculation() *CouponDiscountUpsertOne {
	return u.Update(func(s *CouponDiscountUpsert) {
		s.UpdateCirculation()
	})
}

// ClearCirculation clears the value of the "circulation" field.
func (u *CouponDiscountUpsertOne) ClearCirculation() *CouponDiscountUpsertOne {
	return u.Update(func(s *CouponDiscountUpsert) {
		s.ClearCirculation()
	})
}

// SetReleasedByUserID sets the "released_by_user_id" field.
func (u *CouponDiscountUpsertOne) SetReleasedByUserID(v uuid.UUID) *CouponDiscountUpsertOne {
	return u.Update(func(s *CouponDiscountUpsert) {
		s.SetReleasedByUserID(v)
	})
}

// UpdateReleasedByUserID sets the "released_by_user_id" field to the value that was provided on create.
func (u *CouponDiscountUpsertOne) UpdateReleasedByUserID() *CouponDiscountUpsertOne {
	return u.Update(func(s *CouponDiscountUpsert) {
		s.UpdateReleasedByUserID()
	})
}

// SetStartAt sets the "start_at" field.
func (u *CouponDiscountUpsertOne) SetStartAt(v uint32) *CouponDiscountUpsertOne {
	return u.Update(func(s *CouponDiscountUpsert) {
		s.SetStartAt(v)
	})
}

// AddStartAt adds v to the "start_at" field.
func (u *CouponDiscountUpsertOne) AddStartAt(v uint32) *CouponDiscountUpsertOne {
	return u.Update(func(s *CouponDiscountUpsert) {
		s.AddStartAt(v)
	})
}

// UpdateStartAt sets the "start_at" field to the value that was provided on create.
func (u *CouponDiscountUpsertOne) UpdateStartAt() *CouponDiscountUpsertOne {
	return u.Update(func(s *CouponDiscountUpsert) {
		s.UpdateStartAt()
	})
}

// ClearStartAt clears the value of the "start_at" field.
func (u *CouponDiscountUpsertOne) ClearStartAt() *CouponDiscountUpsertOne {
	return u.Update(func(s *CouponDiscountUpsert) {
		s.ClearStartAt()
	})
}

// SetDurationDays sets the "duration_days" field.
func (u *CouponDiscountUpsertOne) SetDurationDays(v uint32) *CouponDiscountUpsertOne {
	return u.Update(func(s *CouponDiscountUpsert) {
		s.SetDurationDays(v)
	})
}

// AddDurationDays adds v to the "duration_days" field.
func (u *CouponDiscountUpsertOne) AddDurationDays(v uint32) *CouponDiscountUpsertOne {
	return u.Update(func(s *CouponDiscountUpsert) {
		s.AddDurationDays(v)
	})
}

// UpdateDurationDays sets the "duration_days" field to the value that was provided on create.
func (u *CouponDiscountUpsertOne) UpdateDurationDays() *CouponDiscountUpsertOne {
	return u.Update(func(s *CouponDiscountUpsert) {
		s.UpdateDurationDays()
	})
}

// ClearDurationDays clears the value of the "duration_days" field.
func (u *CouponDiscountUpsertOne) ClearDurationDays() *CouponDiscountUpsertOne {
	return u.Update(func(s *CouponDiscountUpsert) {
		s.ClearDurationDays()
	})
}

// SetMessage sets the "message" field.
func (u *CouponDiscountUpsertOne) SetMessage(v string) *CouponDiscountUpsertOne {
	return u.Update(func(s *CouponDiscountUpsert) {
		s.SetMessage(v)
	})
}

// UpdateMessage sets the "message" field to the value that was provided on create.
func (u *CouponDiscountUpsertOne) UpdateMessage() *CouponDiscountUpsertOne {
	return u.Update(func(s *CouponDiscountUpsert) {
		s.UpdateMessage()
	})
}

// ClearMessage clears the value of the "message" field.
func (u *CouponDiscountUpsertOne) ClearMessage() *CouponDiscountUpsertOne {
	return u.Update(func(s *CouponDiscountUpsert) {
		s.ClearMessage()
	})
}

// SetName sets the "name" field.
func (u *CouponDiscountUpsertOne) SetName(v string) *CouponDiscountUpsertOne {
	return u.Update(func(s *CouponDiscountUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *CouponDiscountUpsertOne) UpdateName() *CouponDiscountUpsertOne {
	return u.Update(func(s *CouponDiscountUpsert) {
		s.UpdateName()
	})
}

// ClearName clears the value of the "name" field.
func (u *CouponDiscountUpsertOne) ClearName() *CouponDiscountUpsertOne {
	return u.Update(func(s *CouponDiscountUpsert) {
		s.ClearName()
	})
}

// SetAllocated sets the "allocated" field.
func (u *CouponDiscountUpsertOne) SetAllocated(v uint32) *CouponDiscountUpsertOne {
	return u.Update(func(s *CouponDiscountUpsert) {
		s.SetAllocated(v)
	})
}

// AddAllocated adds v to the "allocated" field.
func (u *CouponDiscountUpsertOne) AddAllocated(v uint32) *CouponDiscountUpsertOne {
	return u.Update(func(s *CouponDiscountUpsert) {
		s.AddAllocated(v)
	})
}

// UpdateAllocated sets the "allocated" field to the value that was provided on create.
func (u *CouponDiscountUpsertOne) UpdateAllocated() *CouponDiscountUpsertOne {
	return u.Update(func(s *CouponDiscountUpsert) {
		s.UpdateAllocated()
	})
}

// ClearAllocated clears the value of the "allocated" field.
func (u *CouponDiscountUpsertOne) ClearAllocated() *CouponDiscountUpsertOne {
	return u.Update(func(s *CouponDiscountUpsert) {
		s.ClearAllocated()
	})
}

// Exec executes the query.
func (u *CouponDiscountUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for CouponDiscountCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CouponDiscountUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *CouponDiscountUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: CouponDiscountUpsertOne.ID is not supported by MySQL driver. Use CouponDiscountUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *CouponDiscountUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// CouponDiscountCreateBulk is the builder for creating many CouponDiscount entities in bulk.
type CouponDiscountCreateBulk struct {
	config
	builders []*CouponDiscountCreate
	conflict []sql.ConflictOption
}

// Save creates the CouponDiscount entities in the database.
func (cdcb *CouponDiscountCreateBulk) Save(ctx context.Context) ([]*CouponDiscount, error) {
	specs := make([]*sqlgraph.CreateSpec, len(cdcb.builders))
	nodes := make([]*CouponDiscount, len(cdcb.builders))
	mutators := make([]Mutator, len(cdcb.builders))
	for i := range cdcb.builders {
		func(i int, root context.Context) {
			builder := cdcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CouponDiscountMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cdcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = cdcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cdcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cdcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (cdcb *CouponDiscountCreateBulk) SaveX(ctx context.Context) []*CouponDiscount {
	v, err := cdcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cdcb *CouponDiscountCreateBulk) Exec(ctx context.Context) error {
	_, err := cdcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cdcb *CouponDiscountCreateBulk) ExecX(ctx context.Context) {
	if err := cdcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.CouponDiscount.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CouponDiscountUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (cdcb *CouponDiscountCreateBulk) OnConflict(opts ...sql.ConflictOption) *CouponDiscountUpsertBulk {
	cdcb.conflict = opts
	return &CouponDiscountUpsertBulk{
		create: cdcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.CouponDiscount.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (cdcb *CouponDiscountCreateBulk) OnConflictColumns(columns ...string) *CouponDiscountUpsertBulk {
	cdcb.conflict = append(cdcb.conflict, sql.ConflictColumns(columns...))
	return &CouponDiscountUpsertBulk{
		create: cdcb,
	}
}

// CouponDiscountUpsertBulk is the builder for "upsert"-ing
// a bulk of CouponDiscount nodes.
type CouponDiscountUpsertBulk struct {
	create *CouponDiscountCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.CouponDiscount.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(coupondiscount.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *CouponDiscountUpsertBulk) UpdateNewValues() *CouponDiscountUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(coupondiscount.FieldID)
				return
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.CouponDiscount.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *CouponDiscountUpsertBulk) Ignore() *CouponDiscountUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CouponDiscountUpsertBulk) DoNothing() *CouponDiscountUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CouponDiscountCreateBulk.OnConflict
// documentation for more info.
func (u *CouponDiscountUpsertBulk) Update(set func(*CouponDiscountUpsert)) *CouponDiscountUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CouponDiscountUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *CouponDiscountUpsertBulk) SetCreatedAt(v uint32) *CouponDiscountUpsertBulk {
	return u.Update(func(s *CouponDiscountUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *CouponDiscountUpsertBulk) AddCreatedAt(v uint32) *CouponDiscountUpsertBulk {
	return u.Update(func(s *CouponDiscountUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *CouponDiscountUpsertBulk) UpdateCreatedAt() *CouponDiscountUpsertBulk {
	return u.Update(func(s *CouponDiscountUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *CouponDiscountUpsertBulk) SetUpdatedAt(v uint32) *CouponDiscountUpsertBulk {
	return u.Update(func(s *CouponDiscountUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *CouponDiscountUpsertBulk) AddUpdatedAt(v uint32) *CouponDiscountUpsertBulk {
	return u.Update(func(s *CouponDiscountUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *CouponDiscountUpsertBulk) UpdateUpdatedAt() *CouponDiscountUpsertBulk {
	return u.Update(func(s *CouponDiscountUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *CouponDiscountUpsertBulk) SetDeletedAt(v uint32) *CouponDiscountUpsertBulk {
	return u.Update(func(s *CouponDiscountUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *CouponDiscountUpsertBulk) AddDeletedAt(v uint32) *CouponDiscountUpsertBulk {
	return u.Update(func(s *CouponDiscountUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *CouponDiscountUpsertBulk) UpdateDeletedAt() *CouponDiscountUpsertBulk {
	return u.Update(func(s *CouponDiscountUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetAppID sets the "app_id" field.
func (u *CouponDiscountUpsertBulk) SetAppID(v uuid.UUID) *CouponDiscountUpsertBulk {
	return u.Update(func(s *CouponDiscountUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *CouponDiscountUpsertBulk) UpdateAppID() *CouponDiscountUpsertBulk {
	return u.Update(func(s *CouponDiscountUpsert) {
		s.UpdateAppID()
	})
}

// SetDiscount sets the "discount" field.
func (u *CouponDiscountUpsertBulk) SetDiscount(v decimal.Decimal) *CouponDiscountUpsertBulk {
	return u.Update(func(s *CouponDiscountUpsert) {
		s.SetDiscount(v)
	})
}

// UpdateDiscount sets the "discount" field to the value that was provided on create.
func (u *CouponDiscountUpsertBulk) UpdateDiscount() *CouponDiscountUpsertBulk {
	return u.Update(func(s *CouponDiscountUpsert) {
		s.UpdateDiscount()
	})
}

// ClearDiscount clears the value of the "discount" field.
func (u *CouponDiscountUpsertBulk) ClearDiscount() *CouponDiscountUpsertBulk {
	return u.Update(func(s *CouponDiscountUpsert) {
		s.ClearDiscount()
	})
}

// SetCirculation sets the "circulation" field.
func (u *CouponDiscountUpsertBulk) SetCirculation(v decimal.Decimal) *CouponDiscountUpsertBulk {
	return u.Update(func(s *CouponDiscountUpsert) {
		s.SetCirculation(v)
	})
}

// UpdateCirculation sets the "circulation" field to the value that was provided on create.
func (u *CouponDiscountUpsertBulk) UpdateCirculation() *CouponDiscountUpsertBulk {
	return u.Update(func(s *CouponDiscountUpsert) {
		s.UpdateCirculation()
	})
}

// ClearCirculation clears the value of the "circulation" field.
func (u *CouponDiscountUpsertBulk) ClearCirculation() *CouponDiscountUpsertBulk {
	return u.Update(func(s *CouponDiscountUpsert) {
		s.ClearCirculation()
	})
}

// SetReleasedByUserID sets the "released_by_user_id" field.
func (u *CouponDiscountUpsertBulk) SetReleasedByUserID(v uuid.UUID) *CouponDiscountUpsertBulk {
	return u.Update(func(s *CouponDiscountUpsert) {
		s.SetReleasedByUserID(v)
	})
}

// UpdateReleasedByUserID sets the "released_by_user_id" field to the value that was provided on create.
func (u *CouponDiscountUpsertBulk) UpdateReleasedByUserID() *CouponDiscountUpsertBulk {
	return u.Update(func(s *CouponDiscountUpsert) {
		s.UpdateReleasedByUserID()
	})
}

// SetStartAt sets the "start_at" field.
func (u *CouponDiscountUpsertBulk) SetStartAt(v uint32) *CouponDiscountUpsertBulk {
	return u.Update(func(s *CouponDiscountUpsert) {
		s.SetStartAt(v)
	})
}

// AddStartAt adds v to the "start_at" field.
func (u *CouponDiscountUpsertBulk) AddStartAt(v uint32) *CouponDiscountUpsertBulk {
	return u.Update(func(s *CouponDiscountUpsert) {
		s.AddStartAt(v)
	})
}

// UpdateStartAt sets the "start_at" field to the value that was provided on create.
func (u *CouponDiscountUpsertBulk) UpdateStartAt() *CouponDiscountUpsertBulk {
	return u.Update(func(s *CouponDiscountUpsert) {
		s.UpdateStartAt()
	})
}

// ClearStartAt clears the value of the "start_at" field.
func (u *CouponDiscountUpsertBulk) ClearStartAt() *CouponDiscountUpsertBulk {
	return u.Update(func(s *CouponDiscountUpsert) {
		s.ClearStartAt()
	})
}

// SetDurationDays sets the "duration_days" field.
func (u *CouponDiscountUpsertBulk) SetDurationDays(v uint32) *CouponDiscountUpsertBulk {
	return u.Update(func(s *CouponDiscountUpsert) {
		s.SetDurationDays(v)
	})
}

// AddDurationDays adds v to the "duration_days" field.
func (u *CouponDiscountUpsertBulk) AddDurationDays(v uint32) *CouponDiscountUpsertBulk {
	return u.Update(func(s *CouponDiscountUpsert) {
		s.AddDurationDays(v)
	})
}

// UpdateDurationDays sets the "duration_days" field to the value that was provided on create.
func (u *CouponDiscountUpsertBulk) UpdateDurationDays() *CouponDiscountUpsertBulk {
	return u.Update(func(s *CouponDiscountUpsert) {
		s.UpdateDurationDays()
	})
}

// ClearDurationDays clears the value of the "duration_days" field.
func (u *CouponDiscountUpsertBulk) ClearDurationDays() *CouponDiscountUpsertBulk {
	return u.Update(func(s *CouponDiscountUpsert) {
		s.ClearDurationDays()
	})
}

// SetMessage sets the "message" field.
func (u *CouponDiscountUpsertBulk) SetMessage(v string) *CouponDiscountUpsertBulk {
	return u.Update(func(s *CouponDiscountUpsert) {
		s.SetMessage(v)
	})
}

// UpdateMessage sets the "message" field to the value that was provided on create.
func (u *CouponDiscountUpsertBulk) UpdateMessage() *CouponDiscountUpsertBulk {
	return u.Update(func(s *CouponDiscountUpsert) {
		s.UpdateMessage()
	})
}

// ClearMessage clears the value of the "message" field.
func (u *CouponDiscountUpsertBulk) ClearMessage() *CouponDiscountUpsertBulk {
	return u.Update(func(s *CouponDiscountUpsert) {
		s.ClearMessage()
	})
}

// SetName sets the "name" field.
func (u *CouponDiscountUpsertBulk) SetName(v string) *CouponDiscountUpsertBulk {
	return u.Update(func(s *CouponDiscountUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *CouponDiscountUpsertBulk) UpdateName() *CouponDiscountUpsertBulk {
	return u.Update(func(s *CouponDiscountUpsert) {
		s.UpdateName()
	})
}

// ClearName clears the value of the "name" field.
func (u *CouponDiscountUpsertBulk) ClearName() *CouponDiscountUpsertBulk {
	return u.Update(func(s *CouponDiscountUpsert) {
		s.ClearName()
	})
}

// SetAllocated sets the "allocated" field.
func (u *CouponDiscountUpsertBulk) SetAllocated(v uint32) *CouponDiscountUpsertBulk {
	return u.Update(func(s *CouponDiscountUpsert) {
		s.SetAllocated(v)
	})
}

// AddAllocated adds v to the "allocated" field.
func (u *CouponDiscountUpsertBulk) AddAllocated(v uint32) *CouponDiscountUpsertBulk {
	return u.Update(func(s *CouponDiscountUpsert) {
		s.AddAllocated(v)
	})
}

// UpdateAllocated sets the "allocated" field to the value that was provided on create.
func (u *CouponDiscountUpsertBulk) UpdateAllocated() *CouponDiscountUpsertBulk {
	return u.Update(func(s *CouponDiscountUpsert) {
		s.UpdateAllocated()
	})
}

// ClearAllocated clears the value of the "allocated" field.
func (u *CouponDiscountUpsertBulk) ClearAllocated() *CouponDiscountUpsertBulk {
	return u.Update(func(s *CouponDiscountUpsert) {
		s.ClearAllocated()
	})
}

// Exec executes the query.
func (u *CouponDiscountUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the CouponDiscountCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for CouponDiscountCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CouponDiscountUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
