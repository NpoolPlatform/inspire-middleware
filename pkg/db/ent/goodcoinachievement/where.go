// Code generated by ent, DO NOT EDIT.

package goodcoinachievement

import (
	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/inspire-middleware/pkg/db/ent/predicate"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// ID filters vertices based on their ID field.
func ID(id uint32) predicate.GoodCoinAchievement {
	return predicate.GoodCoinAchievement(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint32) predicate.GoodCoinAchievement {
	return predicate.GoodCoinAchievement(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint32) predicate.GoodCoinAchievement {
	return predicate.GoodCoinAchievement(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint32) predicate.GoodCoinAchievement {
	return predicate.GoodCoinAchievement(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint32) predicate.GoodCoinAchievement {
	return predicate.GoodCoinAchievement(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint32) predicate.GoodCoinAchievement {
	return predicate.GoodCoinAchievement(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint32) predicate.GoodCoinAchievement {
	return predicate.GoodCoinAchievement(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint32) predicate.GoodCoinAchievement {
	return predicate.GoodCoinAchievement(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint32) predicate.GoodCoinAchievement {
	return predicate.GoodCoinAchievement(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v uint32) predicate.GoodCoinAchievement {
	return predicate.GoodCoinAchievement(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v uint32) predicate.GoodCoinAchievement {
	return predicate.GoodCoinAchievement(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v uint32) predicate.GoodCoinAchievement {
	return predicate.GoodCoinAchievement(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// EntID applies equality check predicate on the "ent_id" field. It's identical to EntIDEQ.
func EntID(v uuid.UUID) predicate.GoodCoinAchievement {
	return predicate.GoodCoinAchievement(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEntID), v))
	})
}

// AppID applies equality check predicate on the "app_id" field. It's identical to AppIDEQ.
func AppID(v uuid.UUID) predicate.GoodCoinAchievement {
	return predicate.GoodCoinAchievement(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAppID), v))
	})
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v uuid.UUID) predicate.GoodCoinAchievement {
	return predicate.GoodCoinAchievement(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUserID), v))
	})
}

// GoodCoinTypeID applies equality check predicate on the "good_coin_type_id" field. It's identical to GoodCoinTypeIDEQ.
func GoodCoinTypeID(v uuid.UUID) predicate.GoodCoinAchievement {
	return predicate.GoodCoinAchievement(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGoodCoinTypeID), v))
	})
}

// TotalUnits applies equality check predicate on the "total_units" field. It's identical to TotalUnitsEQ.
func TotalUnits(v decimal.Decimal) predicate.GoodCoinAchievement {
	return predicate.GoodCoinAchievement(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTotalUnits), v))
	})
}

// SelfUnits applies equality check predicate on the "self_units" field. It's identical to SelfUnitsEQ.
func SelfUnits(v decimal.Decimal) predicate.GoodCoinAchievement {
	return predicate.GoodCoinAchievement(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSelfUnits), v))
	})
}

// TotalAmountUsd applies equality check predicate on the "total_amount_usd" field. It's identical to TotalAmountUsdEQ.
func TotalAmountUsd(v decimal.Decimal) predicate.GoodCoinAchievement {
	return predicate.GoodCoinAchievement(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTotalAmountUsd), v))
	})
}

// SelfAmountUsd applies equality check predicate on the "self_amount_usd" field. It's identical to SelfAmountUsdEQ.
func SelfAmountUsd(v decimal.Decimal) predicate.GoodCoinAchievement {
	return predicate.GoodCoinAchievement(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSelfAmountUsd), v))
	})
}

// TotalCommissionUsd applies equality check predicate on the "total_commission_usd" field. It's identical to TotalCommissionUsdEQ.
func TotalCommissionUsd(v decimal.Decimal) predicate.GoodCoinAchievement {
	return predicate.GoodCoinAchievement(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTotalCommissionUsd), v))
	})
}

// SelfCommissionUsd applies equality check predicate on the "self_commission_usd" field. It's identical to SelfCommissionUsdEQ.
func SelfCommissionUsd(v decimal.Decimal) predicate.GoodCoinAchievement {
	return predicate.GoodCoinAchievement(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSelfCommissionUsd), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v uint32) predicate.GoodCoinAchievement {
	return predicate.GoodCoinAchievement(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v uint32) predicate.GoodCoinAchievement {
	return predicate.GoodCoinAchievement(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...uint32) predicate.GoodCoinAchievement {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GoodCoinAchievement(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...uint32) predicate.GoodCoinAchievement {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GoodCoinAchievement(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v uint32) predicate.GoodCoinAchievement {
	return predicate.GoodCoinAchievement(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v uint32) predicate.GoodCoinAchievement {
	return predicate.GoodCoinAchievement(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v uint32) predicate.GoodCoinAchievement {
	return predicate.GoodCoinAchievement(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v uint32) predicate.GoodCoinAchievement {
	return predicate.GoodCoinAchievement(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v uint32) predicate.GoodCoinAchievement {
	return predicate.GoodCoinAchievement(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v uint32) predicate.GoodCoinAchievement {
	return predicate.GoodCoinAchievement(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...uint32) predicate.GoodCoinAchievement {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GoodCoinAchievement(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...uint32) predicate.GoodCoinAchievement {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GoodCoinAchievement(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v uint32) predicate.GoodCoinAchievement {
	return predicate.GoodCoinAchievement(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v uint32) predicate.GoodCoinAchievement {
	return predicate.GoodCoinAchievement(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v uint32) predicate.GoodCoinAchievement {
	return predicate.GoodCoinAchievement(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v uint32) predicate.GoodCoinAchievement {
	return predicate.GoodCoinAchievement(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v uint32) predicate.GoodCoinAchievement {
	return predicate.GoodCoinAchievement(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v uint32) predicate.GoodCoinAchievement {
	return predicate.GoodCoinAchievement(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...uint32) predicate.GoodCoinAchievement {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GoodCoinAchievement(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...uint32) predicate.GoodCoinAchievement {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GoodCoinAchievement(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v uint32) predicate.GoodCoinAchievement {
	return predicate.GoodCoinAchievement(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v uint32) predicate.GoodCoinAchievement {
	return predicate.GoodCoinAchievement(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v uint32) predicate.GoodCoinAchievement {
	return predicate.GoodCoinAchievement(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v uint32) predicate.GoodCoinAchievement {
	return predicate.GoodCoinAchievement(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeletedAt), v))
	})
}

// EntIDEQ applies the EQ predicate on the "ent_id" field.
func EntIDEQ(v uuid.UUID) predicate.GoodCoinAchievement {
	return predicate.GoodCoinAchievement(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEntID), v))
	})
}

// EntIDNEQ applies the NEQ predicate on the "ent_id" field.
func EntIDNEQ(v uuid.UUID) predicate.GoodCoinAchievement {
	return predicate.GoodCoinAchievement(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEntID), v))
	})
}

// EntIDIn applies the In predicate on the "ent_id" field.
func EntIDIn(vs ...uuid.UUID) predicate.GoodCoinAchievement {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GoodCoinAchievement(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldEntID), v...))
	})
}

// EntIDNotIn applies the NotIn predicate on the "ent_id" field.
func EntIDNotIn(vs ...uuid.UUID) predicate.GoodCoinAchievement {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GoodCoinAchievement(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldEntID), v...))
	})
}

// EntIDGT applies the GT predicate on the "ent_id" field.
func EntIDGT(v uuid.UUID) predicate.GoodCoinAchievement {
	return predicate.GoodCoinAchievement(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEntID), v))
	})
}

// EntIDGTE applies the GTE predicate on the "ent_id" field.
func EntIDGTE(v uuid.UUID) predicate.GoodCoinAchievement {
	return predicate.GoodCoinAchievement(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEntID), v))
	})
}

// EntIDLT applies the LT predicate on the "ent_id" field.
func EntIDLT(v uuid.UUID) predicate.GoodCoinAchievement {
	return predicate.GoodCoinAchievement(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEntID), v))
	})
}

// EntIDLTE applies the LTE predicate on the "ent_id" field.
func EntIDLTE(v uuid.UUID) predicate.GoodCoinAchievement {
	return predicate.GoodCoinAchievement(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEntID), v))
	})
}

// AppIDEQ applies the EQ predicate on the "app_id" field.
func AppIDEQ(v uuid.UUID) predicate.GoodCoinAchievement {
	return predicate.GoodCoinAchievement(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAppID), v))
	})
}

// AppIDNEQ applies the NEQ predicate on the "app_id" field.
func AppIDNEQ(v uuid.UUID) predicate.GoodCoinAchievement {
	return predicate.GoodCoinAchievement(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAppID), v))
	})
}

// AppIDIn applies the In predicate on the "app_id" field.
func AppIDIn(vs ...uuid.UUID) predicate.GoodCoinAchievement {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GoodCoinAchievement(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldAppID), v...))
	})
}

// AppIDNotIn applies the NotIn predicate on the "app_id" field.
func AppIDNotIn(vs ...uuid.UUID) predicate.GoodCoinAchievement {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GoodCoinAchievement(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldAppID), v...))
	})
}

// AppIDGT applies the GT predicate on the "app_id" field.
func AppIDGT(v uuid.UUID) predicate.GoodCoinAchievement {
	return predicate.GoodCoinAchievement(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAppID), v))
	})
}

// AppIDGTE applies the GTE predicate on the "app_id" field.
func AppIDGTE(v uuid.UUID) predicate.GoodCoinAchievement {
	return predicate.GoodCoinAchievement(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAppID), v))
	})
}

// AppIDLT applies the LT predicate on the "app_id" field.
func AppIDLT(v uuid.UUID) predicate.GoodCoinAchievement {
	return predicate.GoodCoinAchievement(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAppID), v))
	})
}

// AppIDLTE applies the LTE predicate on the "app_id" field.
func AppIDLTE(v uuid.UUID) predicate.GoodCoinAchievement {
	return predicate.GoodCoinAchievement(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAppID), v))
	})
}

// AppIDIsNil applies the IsNil predicate on the "app_id" field.
func AppIDIsNil() predicate.GoodCoinAchievement {
	return predicate.GoodCoinAchievement(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldAppID)))
	})
}

// AppIDNotNil applies the NotNil predicate on the "app_id" field.
func AppIDNotNil() predicate.GoodCoinAchievement {
	return predicate.GoodCoinAchievement(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldAppID)))
	})
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v uuid.UUID) predicate.GoodCoinAchievement {
	return predicate.GoodCoinAchievement(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUserID), v))
	})
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v uuid.UUID) predicate.GoodCoinAchievement {
	return predicate.GoodCoinAchievement(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUserID), v))
	})
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...uuid.UUID) predicate.GoodCoinAchievement {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GoodCoinAchievement(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUserID), v...))
	})
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...uuid.UUID) predicate.GoodCoinAchievement {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GoodCoinAchievement(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUserID), v...))
	})
}

// UserIDGT applies the GT predicate on the "user_id" field.
func UserIDGT(v uuid.UUID) predicate.GoodCoinAchievement {
	return predicate.GoodCoinAchievement(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUserID), v))
	})
}

// UserIDGTE applies the GTE predicate on the "user_id" field.
func UserIDGTE(v uuid.UUID) predicate.GoodCoinAchievement {
	return predicate.GoodCoinAchievement(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUserID), v))
	})
}

// UserIDLT applies the LT predicate on the "user_id" field.
func UserIDLT(v uuid.UUID) predicate.GoodCoinAchievement {
	return predicate.GoodCoinAchievement(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUserID), v))
	})
}

// UserIDLTE applies the LTE predicate on the "user_id" field.
func UserIDLTE(v uuid.UUID) predicate.GoodCoinAchievement {
	return predicate.GoodCoinAchievement(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUserID), v))
	})
}

// UserIDIsNil applies the IsNil predicate on the "user_id" field.
func UserIDIsNil() predicate.GoodCoinAchievement {
	return predicate.GoodCoinAchievement(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldUserID)))
	})
}

// UserIDNotNil applies the NotNil predicate on the "user_id" field.
func UserIDNotNil() predicate.GoodCoinAchievement {
	return predicate.GoodCoinAchievement(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldUserID)))
	})
}

// GoodCoinTypeIDEQ applies the EQ predicate on the "good_coin_type_id" field.
func GoodCoinTypeIDEQ(v uuid.UUID) predicate.GoodCoinAchievement {
	return predicate.GoodCoinAchievement(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGoodCoinTypeID), v))
	})
}

// GoodCoinTypeIDNEQ applies the NEQ predicate on the "good_coin_type_id" field.
func GoodCoinTypeIDNEQ(v uuid.UUID) predicate.GoodCoinAchievement {
	return predicate.GoodCoinAchievement(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldGoodCoinTypeID), v))
	})
}

// GoodCoinTypeIDIn applies the In predicate on the "good_coin_type_id" field.
func GoodCoinTypeIDIn(vs ...uuid.UUID) predicate.GoodCoinAchievement {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GoodCoinAchievement(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldGoodCoinTypeID), v...))
	})
}

// GoodCoinTypeIDNotIn applies the NotIn predicate on the "good_coin_type_id" field.
func GoodCoinTypeIDNotIn(vs ...uuid.UUID) predicate.GoodCoinAchievement {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GoodCoinAchievement(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldGoodCoinTypeID), v...))
	})
}

// GoodCoinTypeIDGT applies the GT predicate on the "good_coin_type_id" field.
func GoodCoinTypeIDGT(v uuid.UUID) predicate.GoodCoinAchievement {
	return predicate.GoodCoinAchievement(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldGoodCoinTypeID), v))
	})
}

// GoodCoinTypeIDGTE applies the GTE predicate on the "good_coin_type_id" field.
func GoodCoinTypeIDGTE(v uuid.UUID) predicate.GoodCoinAchievement {
	return predicate.GoodCoinAchievement(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldGoodCoinTypeID), v))
	})
}

// GoodCoinTypeIDLT applies the LT predicate on the "good_coin_type_id" field.
func GoodCoinTypeIDLT(v uuid.UUID) predicate.GoodCoinAchievement {
	return predicate.GoodCoinAchievement(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldGoodCoinTypeID), v))
	})
}

// GoodCoinTypeIDLTE applies the LTE predicate on the "good_coin_type_id" field.
func GoodCoinTypeIDLTE(v uuid.UUID) predicate.GoodCoinAchievement {
	return predicate.GoodCoinAchievement(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldGoodCoinTypeID), v))
	})
}

// GoodCoinTypeIDIsNil applies the IsNil predicate on the "good_coin_type_id" field.
func GoodCoinTypeIDIsNil() predicate.GoodCoinAchievement {
	return predicate.GoodCoinAchievement(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldGoodCoinTypeID)))
	})
}

// GoodCoinTypeIDNotNil applies the NotNil predicate on the "good_coin_type_id" field.
func GoodCoinTypeIDNotNil() predicate.GoodCoinAchievement {
	return predicate.GoodCoinAchievement(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldGoodCoinTypeID)))
	})
}

// TotalUnitsEQ applies the EQ predicate on the "total_units" field.
func TotalUnitsEQ(v decimal.Decimal) predicate.GoodCoinAchievement {
	return predicate.GoodCoinAchievement(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTotalUnits), v))
	})
}

// TotalUnitsNEQ applies the NEQ predicate on the "total_units" field.
func TotalUnitsNEQ(v decimal.Decimal) predicate.GoodCoinAchievement {
	return predicate.GoodCoinAchievement(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTotalUnits), v))
	})
}

// TotalUnitsIn applies the In predicate on the "total_units" field.
func TotalUnitsIn(vs ...decimal.Decimal) predicate.GoodCoinAchievement {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GoodCoinAchievement(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldTotalUnits), v...))
	})
}

// TotalUnitsNotIn applies the NotIn predicate on the "total_units" field.
func TotalUnitsNotIn(vs ...decimal.Decimal) predicate.GoodCoinAchievement {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GoodCoinAchievement(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldTotalUnits), v...))
	})
}

// TotalUnitsGT applies the GT predicate on the "total_units" field.
func TotalUnitsGT(v decimal.Decimal) predicate.GoodCoinAchievement {
	return predicate.GoodCoinAchievement(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTotalUnits), v))
	})
}

// TotalUnitsGTE applies the GTE predicate on the "total_units" field.
func TotalUnitsGTE(v decimal.Decimal) predicate.GoodCoinAchievement {
	return predicate.GoodCoinAchievement(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTotalUnits), v))
	})
}

// TotalUnitsLT applies the LT predicate on the "total_units" field.
func TotalUnitsLT(v decimal.Decimal) predicate.GoodCoinAchievement {
	return predicate.GoodCoinAchievement(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTotalUnits), v))
	})
}

// TotalUnitsLTE applies the LTE predicate on the "total_units" field.
func TotalUnitsLTE(v decimal.Decimal) predicate.GoodCoinAchievement {
	return predicate.GoodCoinAchievement(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTotalUnits), v))
	})
}

// TotalUnitsIsNil applies the IsNil predicate on the "total_units" field.
func TotalUnitsIsNil() predicate.GoodCoinAchievement {
	return predicate.GoodCoinAchievement(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldTotalUnits)))
	})
}

// TotalUnitsNotNil applies the NotNil predicate on the "total_units" field.
func TotalUnitsNotNil() predicate.GoodCoinAchievement {
	return predicate.GoodCoinAchievement(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldTotalUnits)))
	})
}

// SelfUnitsEQ applies the EQ predicate on the "self_units" field.
func SelfUnitsEQ(v decimal.Decimal) predicate.GoodCoinAchievement {
	return predicate.GoodCoinAchievement(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSelfUnits), v))
	})
}

// SelfUnitsNEQ applies the NEQ predicate on the "self_units" field.
func SelfUnitsNEQ(v decimal.Decimal) predicate.GoodCoinAchievement {
	return predicate.GoodCoinAchievement(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSelfUnits), v))
	})
}

// SelfUnitsIn applies the In predicate on the "self_units" field.
func SelfUnitsIn(vs ...decimal.Decimal) predicate.GoodCoinAchievement {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GoodCoinAchievement(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldSelfUnits), v...))
	})
}

// SelfUnitsNotIn applies the NotIn predicate on the "self_units" field.
func SelfUnitsNotIn(vs ...decimal.Decimal) predicate.GoodCoinAchievement {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GoodCoinAchievement(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldSelfUnits), v...))
	})
}

// SelfUnitsGT applies the GT predicate on the "self_units" field.
func SelfUnitsGT(v decimal.Decimal) predicate.GoodCoinAchievement {
	return predicate.GoodCoinAchievement(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSelfUnits), v))
	})
}

// SelfUnitsGTE applies the GTE predicate on the "self_units" field.
func SelfUnitsGTE(v decimal.Decimal) predicate.GoodCoinAchievement {
	return predicate.GoodCoinAchievement(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSelfUnits), v))
	})
}

// SelfUnitsLT applies the LT predicate on the "self_units" field.
func SelfUnitsLT(v decimal.Decimal) predicate.GoodCoinAchievement {
	return predicate.GoodCoinAchievement(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSelfUnits), v))
	})
}

// SelfUnitsLTE applies the LTE predicate on the "self_units" field.
func SelfUnitsLTE(v decimal.Decimal) predicate.GoodCoinAchievement {
	return predicate.GoodCoinAchievement(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSelfUnits), v))
	})
}

// SelfUnitsIsNil applies the IsNil predicate on the "self_units" field.
func SelfUnitsIsNil() predicate.GoodCoinAchievement {
	return predicate.GoodCoinAchievement(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldSelfUnits)))
	})
}

// SelfUnitsNotNil applies the NotNil predicate on the "self_units" field.
func SelfUnitsNotNil() predicate.GoodCoinAchievement {
	return predicate.GoodCoinAchievement(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldSelfUnits)))
	})
}

// TotalAmountUsdEQ applies the EQ predicate on the "total_amount_usd" field.
func TotalAmountUsdEQ(v decimal.Decimal) predicate.GoodCoinAchievement {
	return predicate.GoodCoinAchievement(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTotalAmountUsd), v))
	})
}

// TotalAmountUsdNEQ applies the NEQ predicate on the "total_amount_usd" field.
func TotalAmountUsdNEQ(v decimal.Decimal) predicate.GoodCoinAchievement {
	return predicate.GoodCoinAchievement(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTotalAmountUsd), v))
	})
}

// TotalAmountUsdIn applies the In predicate on the "total_amount_usd" field.
func TotalAmountUsdIn(vs ...decimal.Decimal) predicate.GoodCoinAchievement {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GoodCoinAchievement(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldTotalAmountUsd), v...))
	})
}

// TotalAmountUsdNotIn applies the NotIn predicate on the "total_amount_usd" field.
func TotalAmountUsdNotIn(vs ...decimal.Decimal) predicate.GoodCoinAchievement {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GoodCoinAchievement(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldTotalAmountUsd), v...))
	})
}

// TotalAmountUsdGT applies the GT predicate on the "total_amount_usd" field.
func TotalAmountUsdGT(v decimal.Decimal) predicate.GoodCoinAchievement {
	return predicate.GoodCoinAchievement(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTotalAmountUsd), v))
	})
}

// TotalAmountUsdGTE applies the GTE predicate on the "total_amount_usd" field.
func TotalAmountUsdGTE(v decimal.Decimal) predicate.GoodCoinAchievement {
	return predicate.GoodCoinAchievement(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTotalAmountUsd), v))
	})
}

// TotalAmountUsdLT applies the LT predicate on the "total_amount_usd" field.
func TotalAmountUsdLT(v decimal.Decimal) predicate.GoodCoinAchievement {
	return predicate.GoodCoinAchievement(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTotalAmountUsd), v))
	})
}

// TotalAmountUsdLTE applies the LTE predicate on the "total_amount_usd" field.
func TotalAmountUsdLTE(v decimal.Decimal) predicate.GoodCoinAchievement {
	return predicate.GoodCoinAchievement(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTotalAmountUsd), v))
	})
}

// TotalAmountUsdIsNil applies the IsNil predicate on the "total_amount_usd" field.
func TotalAmountUsdIsNil() predicate.GoodCoinAchievement {
	return predicate.GoodCoinAchievement(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldTotalAmountUsd)))
	})
}

// TotalAmountUsdNotNil applies the NotNil predicate on the "total_amount_usd" field.
func TotalAmountUsdNotNil() predicate.GoodCoinAchievement {
	return predicate.GoodCoinAchievement(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldTotalAmountUsd)))
	})
}

// SelfAmountUsdEQ applies the EQ predicate on the "self_amount_usd" field.
func SelfAmountUsdEQ(v decimal.Decimal) predicate.GoodCoinAchievement {
	return predicate.GoodCoinAchievement(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSelfAmountUsd), v))
	})
}

// SelfAmountUsdNEQ applies the NEQ predicate on the "self_amount_usd" field.
func SelfAmountUsdNEQ(v decimal.Decimal) predicate.GoodCoinAchievement {
	return predicate.GoodCoinAchievement(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSelfAmountUsd), v))
	})
}

// SelfAmountUsdIn applies the In predicate on the "self_amount_usd" field.
func SelfAmountUsdIn(vs ...decimal.Decimal) predicate.GoodCoinAchievement {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GoodCoinAchievement(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldSelfAmountUsd), v...))
	})
}

// SelfAmountUsdNotIn applies the NotIn predicate on the "self_amount_usd" field.
func SelfAmountUsdNotIn(vs ...decimal.Decimal) predicate.GoodCoinAchievement {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GoodCoinAchievement(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldSelfAmountUsd), v...))
	})
}

// SelfAmountUsdGT applies the GT predicate on the "self_amount_usd" field.
func SelfAmountUsdGT(v decimal.Decimal) predicate.GoodCoinAchievement {
	return predicate.GoodCoinAchievement(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSelfAmountUsd), v))
	})
}

// SelfAmountUsdGTE applies the GTE predicate on the "self_amount_usd" field.
func SelfAmountUsdGTE(v decimal.Decimal) predicate.GoodCoinAchievement {
	return predicate.GoodCoinAchievement(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSelfAmountUsd), v))
	})
}

// SelfAmountUsdLT applies the LT predicate on the "self_amount_usd" field.
func SelfAmountUsdLT(v decimal.Decimal) predicate.GoodCoinAchievement {
	return predicate.GoodCoinAchievement(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSelfAmountUsd), v))
	})
}

// SelfAmountUsdLTE applies the LTE predicate on the "self_amount_usd" field.
func SelfAmountUsdLTE(v decimal.Decimal) predicate.GoodCoinAchievement {
	return predicate.GoodCoinAchievement(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSelfAmountUsd), v))
	})
}

// SelfAmountUsdIsNil applies the IsNil predicate on the "self_amount_usd" field.
func SelfAmountUsdIsNil() predicate.GoodCoinAchievement {
	return predicate.GoodCoinAchievement(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldSelfAmountUsd)))
	})
}

// SelfAmountUsdNotNil applies the NotNil predicate on the "self_amount_usd" field.
func SelfAmountUsdNotNil() predicate.GoodCoinAchievement {
	return predicate.GoodCoinAchievement(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldSelfAmountUsd)))
	})
}

// TotalCommissionUsdEQ applies the EQ predicate on the "total_commission_usd" field.
func TotalCommissionUsdEQ(v decimal.Decimal) predicate.GoodCoinAchievement {
	return predicate.GoodCoinAchievement(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTotalCommissionUsd), v))
	})
}

// TotalCommissionUsdNEQ applies the NEQ predicate on the "total_commission_usd" field.
func TotalCommissionUsdNEQ(v decimal.Decimal) predicate.GoodCoinAchievement {
	return predicate.GoodCoinAchievement(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTotalCommissionUsd), v))
	})
}

// TotalCommissionUsdIn applies the In predicate on the "total_commission_usd" field.
func TotalCommissionUsdIn(vs ...decimal.Decimal) predicate.GoodCoinAchievement {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GoodCoinAchievement(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldTotalCommissionUsd), v...))
	})
}

// TotalCommissionUsdNotIn applies the NotIn predicate on the "total_commission_usd" field.
func TotalCommissionUsdNotIn(vs ...decimal.Decimal) predicate.GoodCoinAchievement {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GoodCoinAchievement(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldTotalCommissionUsd), v...))
	})
}

// TotalCommissionUsdGT applies the GT predicate on the "total_commission_usd" field.
func TotalCommissionUsdGT(v decimal.Decimal) predicate.GoodCoinAchievement {
	return predicate.GoodCoinAchievement(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTotalCommissionUsd), v))
	})
}

// TotalCommissionUsdGTE applies the GTE predicate on the "total_commission_usd" field.
func TotalCommissionUsdGTE(v decimal.Decimal) predicate.GoodCoinAchievement {
	return predicate.GoodCoinAchievement(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTotalCommissionUsd), v))
	})
}

// TotalCommissionUsdLT applies the LT predicate on the "total_commission_usd" field.
func TotalCommissionUsdLT(v decimal.Decimal) predicate.GoodCoinAchievement {
	return predicate.GoodCoinAchievement(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTotalCommissionUsd), v))
	})
}

// TotalCommissionUsdLTE applies the LTE predicate on the "total_commission_usd" field.
func TotalCommissionUsdLTE(v decimal.Decimal) predicate.GoodCoinAchievement {
	return predicate.GoodCoinAchievement(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTotalCommissionUsd), v))
	})
}

// TotalCommissionUsdIsNil applies the IsNil predicate on the "total_commission_usd" field.
func TotalCommissionUsdIsNil() predicate.GoodCoinAchievement {
	return predicate.GoodCoinAchievement(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldTotalCommissionUsd)))
	})
}

// TotalCommissionUsdNotNil applies the NotNil predicate on the "total_commission_usd" field.
func TotalCommissionUsdNotNil() predicate.GoodCoinAchievement {
	return predicate.GoodCoinAchievement(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldTotalCommissionUsd)))
	})
}

// SelfCommissionUsdEQ applies the EQ predicate on the "self_commission_usd" field.
func SelfCommissionUsdEQ(v decimal.Decimal) predicate.GoodCoinAchievement {
	return predicate.GoodCoinAchievement(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSelfCommissionUsd), v))
	})
}

// SelfCommissionUsdNEQ applies the NEQ predicate on the "self_commission_usd" field.
func SelfCommissionUsdNEQ(v decimal.Decimal) predicate.GoodCoinAchievement {
	return predicate.GoodCoinAchievement(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSelfCommissionUsd), v))
	})
}

// SelfCommissionUsdIn applies the In predicate on the "self_commission_usd" field.
func SelfCommissionUsdIn(vs ...decimal.Decimal) predicate.GoodCoinAchievement {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GoodCoinAchievement(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldSelfCommissionUsd), v...))
	})
}

// SelfCommissionUsdNotIn applies the NotIn predicate on the "self_commission_usd" field.
func SelfCommissionUsdNotIn(vs ...decimal.Decimal) predicate.GoodCoinAchievement {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GoodCoinAchievement(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldSelfCommissionUsd), v...))
	})
}

// SelfCommissionUsdGT applies the GT predicate on the "self_commission_usd" field.
func SelfCommissionUsdGT(v decimal.Decimal) predicate.GoodCoinAchievement {
	return predicate.GoodCoinAchievement(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSelfCommissionUsd), v))
	})
}

// SelfCommissionUsdGTE applies the GTE predicate on the "self_commission_usd" field.
func SelfCommissionUsdGTE(v decimal.Decimal) predicate.GoodCoinAchievement {
	return predicate.GoodCoinAchievement(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSelfCommissionUsd), v))
	})
}

// SelfCommissionUsdLT applies the LT predicate on the "self_commission_usd" field.
func SelfCommissionUsdLT(v decimal.Decimal) predicate.GoodCoinAchievement {
	return predicate.GoodCoinAchievement(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSelfCommissionUsd), v))
	})
}

// SelfCommissionUsdLTE applies the LTE predicate on the "self_commission_usd" field.
func SelfCommissionUsdLTE(v decimal.Decimal) predicate.GoodCoinAchievement {
	return predicate.GoodCoinAchievement(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSelfCommissionUsd), v))
	})
}

// SelfCommissionUsdIsNil applies the IsNil predicate on the "self_commission_usd" field.
func SelfCommissionUsdIsNil() predicate.GoodCoinAchievement {
	return predicate.GoodCoinAchievement(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldSelfCommissionUsd)))
	})
}

// SelfCommissionUsdNotNil applies the NotNil predicate on the "self_commission_usd" field.
func SelfCommissionUsdNotNil() predicate.GoodCoinAchievement {
	return predicate.GoodCoinAchievement(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldSelfCommissionUsd)))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.GoodCoinAchievement) predicate.GoodCoinAchievement {
	return predicate.GoodCoinAchievement(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.GoodCoinAchievement) predicate.GoodCoinAchievement {
	return predicate.GoodCoinAchievement(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.GoodCoinAchievement) predicate.GoodCoinAchievement {
	return predicate.GoodCoinAchievement(func(s *sql.Selector) {
		p(s.Not())
	})
}
