// Code generated by ent, DO NOT EDIT.

package taskconfig

import (
	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/inspire-middleware/pkg/db/ent/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uint32) predicate.TaskConfig {
	return predicate.TaskConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint32) predicate.TaskConfig {
	return predicate.TaskConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint32) predicate.TaskConfig {
	return predicate.TaskConfig(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint32) predicate.TaskConfig {
	return predicate.TaskConfig(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint32) predicate.TaskConfig {
	return predicate.TaskConfig(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint32) predicate.TaskConfig {
	return predicate.TaskConfig(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint32) predicate.TaskConfig {
	return predicate.TaskConfig(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint32) predicate.TaskConfig {
	return predicate.TaskConfig(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint32) predicate.TaskConfig {
	return predicate.TaskConfig(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v uint32) predicate.TaskConfig {
	return predicate.TaskConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v uint32) predicate.TaskConfig {
	return predicate.TaskConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v uint32) predicate.TaskConfig {
	return predicate.TaskConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// EntID applies equality check predicate on the "ent_id" field. It's identical to EntIDEQ.
func EntID(v uuid.UUID) predicate.TaskConfig {
	return predicate.TaskConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEntID), v))
	})
}

// AppID applies equality check predicate on the "app_id" field. It's identical to AppIDEQ.
func AppID(v uuid.UUID) predicate.TaskConfig {
	return predicate.TaskConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAppID), v))
	})
}

// EventID applies equality check predicate on the "event_id" field. It's identical to EventIDEQ.
func EventID(v uuid.UUID) predicate.TaskConfig {
	return predicate.TaskConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEventID), v))
	})
}

// TaskType applies equality check predicate on the "task_type" field. It's identical to TaskTypeEQ.
func TaskType(v string) predicate.TaskConfig {
	return predicate.TaskConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTaskType), v))
	})
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.TaskConfig {
	return predicate.TaskConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// TaskDesc applies equality check predicate on the "task_desc" field. It's identical to TaskDescEQ.
func TaskDesc(v string) predicate.TaskConfig {
	return predicate.TaskConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTaskDesc), v))
	})
}

// StepGuide applies equality check predicate on the "step_guide" field. It's identical to StepGuideEQ.
func StepGuide(v string) predicate.TaskConfig {
	return predicate.TaskConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStepGuide), v))
	})
}

// RecommendMessage applies equality check predicate on the "recommend_message" field. It's identical to RecommendMessageEQ.
func RecommendMessage(v string) predicate.TaskConfig {
	return predicate.TaskConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRecommendMessage), v))
	})
}

// Index applies equality check predicate on the "index" field. It's identical to IndexEQ.
func Index(v uint32) predicate.TaskConfig {
	return predicate.TaskConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIndex), v))
	})
}

// LastTaskID applies equality check predicate on the "last_task_id" field. It's identical to LastTaskIDEQ.
func LastTaskID(v uuid.UUID) predicate.TaskConfig {
	return predicate.TaskConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLastTaskID), v))
	})
}

// MaxRewardCount applies equality check predicate on the "max_reward_count" field. It's identical to MaxRewardCountEQ.
func MaxRewardCount(v uint32) predicate.TaskConfig {
	return predicate.TaskConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMaxRewardCount), v))
	})
}

// CooldownSecond applies equality check predicate on the "cooldown_second" field. It's identical to CooldownSecondEQ.
func CooldownSecond(v uint32) predicate.TaskConfig {
	return predicate.TaskConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCooldownSecond), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v uint32) predicate.TaskConfig {
	return predicate.TaskConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v uint32) predicate.TaskConfig {
	return predicate.TaskConfig(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...uint32) predicate.TaskConfig {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TaskConfig(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...uint32) predicate.TaskConfig {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TaskConfig(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v uint32) predicate.TaskConfig {
	return predicate.TaskConfig(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v uint32) predicate.TaskConfig {
	return predicate.TaskConfig(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v uint32) predicate.TaskConfig {
	return predicate.TaskConfig(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v uint32) predicate.TaskConfig {
	return predicate.TaskConfig(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v uint32) predicate.TaskConfig {
	return predicate.TaskConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v uint32) predicate.TaskConfig {
	return predicate.TaskConfig(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...uint32) predicate.TaskConfig {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TaskConfig(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...uint32) predicate.TaskConfig {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TaskConfig(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v uint32) predicate.TaskConfig {
	return predicate.TaskConfig(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v uint32) predicate.TaskConfig {
	return predicate.TaskConfig(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v uint32) predicate.TaskConfig {
	return predicate.TaskConfig(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v uint32) predicate.TaskConfig {
	return predicate.TaskConfig(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v uint32) predicate.TaskConfig {
	return predicate.TaskConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v uint32) predicate.TaskConfig {
	return predicate.TaskConfig(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...uint32) predicate.TaskConfig {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TaskConfig(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...uint32) predicate.TaskConfig {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TaskConfig(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v uint32) predicate.TaskConfig {
	return predicate.TaskConfig(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v uint32) predicate.TaskConfig {
	return predicate.TaskConfig(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v uint32) predicate.TaskConfig {
	return predicate.TaskConfig(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v uint32) predicate.TaskConfig {
	return predicate.TaskConfig(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeletedAt), v))
	})
}

// EntIDEQ applies the EQ predicate on the "ent_id" field.
func EntIDEQ(v uuid.UUID) predicate.TaskConfig {
	return predicate.TaskConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEntID), v))
	})
}

// EntIDNEQ applies the NEQ predicate on the "ent_id" field.
func EntIDNEQ(v uuid.UUID) predicate.TaskConfig {
	return predicate.TaskConfig(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEntID), v))
	})
}

// EntIDIn applies the In predicate on the "ent_id" field.
func EntIDIn(vs ...uuid.UUID) predicate.TaskConfig {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TaskConfig(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldEntID), v...))
	})
}

// EntIDNotIn applies the NotIn predicate on the "ent_id" field.
func EntIDNotIn(vs ...uuid.UUID) predicate.TaskConfig {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TaskConfig(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldEntID), v...))
	})
}

// EntIDGT applies the GT predicate on the "ent_id" field.
func EntIDGT(v uuid.UUID) predicate.TaskConfig {
	return predicate.TaskConfig(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEntID), v))
	})
}

// EntIDGTE applies the GTE predicate on the "ent_id" field.
func EntIDGTE(v uuid.UUID) predicate.TaskConfig {
	return predicate.TaskConfig(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEntID), v))
	})
}

// EntIDLT applies the LT predicate on the "ent_id" field.
func EntIDLT(v uuid.UUID) predicate.TaskConfig {
	return predicate.TaskConfig(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEntID), v))
	})
}

// EntIDLTE applies the LTE predicate on the "ent_id" field.
func EntIDLTE(v uuid.UUID) predicate.TaskConfig {
	return predicate.TaskConfig(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEntID), v))
	})
}

// AppIDEQ applies the EQ predicate on the "app_id" field.
func AppIDEQ(v uuid.UUID) predicate.TaskConfig {
	return predicate.TaskConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAppID), v))
	})
}

// AppIDNEQ applies the NEQ predicate on the "app_id" field.
func AppIDNEQ(v uuid.UUID) predicate.TaskConfig {
	return predicate.TaskConfig(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAppID), v))
	})
}

// AppIDIn applies the In predicate on the "app_id" field.
func AppIDIn(vs ...uuid.UUID) predicate.TaskConfig {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TaskConfig(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldAppID), v...))
	})
}

// AppIDNotIn applies the NotIn predicate on the "app_id" field.
func AppIDNotIn(vs ...uuid.UUID) predicate.TaskConfig {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TaskConfig(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldAppID), v...))
	})
}

// AppIDGT applies the GT predicate on the "app_id" field.
func AppIDGT(v uuid.UUID) predicate.TaskConfig {
	return predicate.TaskConfig(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAppID), v))
	})
}

// AppIDGTE applies the GTE predicate on the "app_id" field.
func AppIDGTE(v uuid.UUID) predicate.TaskConfig {
	return predicate.TaskConfig(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAppID), v))
	})
}

// AppIDLT applies the LT predicate on the "app_id" field.
func AppIDLT(v uuid.UUID) predicate.TaskConfig {
	return predicate.TaskConfig(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAppID), v))
	})
}

// AppIDLTE applies the LTE predicate on the "app_id" field.
func AppIDLTE(v uuid.UUID) predicate.TaskConfig {
	return predicate.TaskConfig(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAppID), v))
	})
}

// AppIDIsNil applies the IsNil predicate on the "app_id" field.
func AppIDIsNil() predicate.TaskConfig {
	return predicate.TaskConfig(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldAppID)))
	})
}

// AppIDNotNil applies the NotNil predicate on the "app_id" field.
func AppIDNotNil() predicate.TaskConfig {
	return predicate.TaskConfig(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldAppID)))
	})
}

// EventIDEQ applies the EQ predicate on the "event_id" field.
func EventIDEQ(v uuid.UUID) predicate.TaskConfig {
	return predicate.TaskConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEventID), v))
	})
}

// EventIDNEQ applies the NEQ predicate on the "event_id" field.
func EventIDNEQ(v uuid.UUID) predicate.TaskConfig {
	return predicate.TaskConfig(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEventID), v))
	})
}

// EventIDIn applies the In predicate on the "event_id" field.
func EventIDIn(vs ...uuid.UUID) predicate.TaskConfig {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TaskConfig(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldEventID), v...))
	})
}

// EventIDNotIn applies the NotIn predicate on the "event_id" field.
func EventIDNotIn(vs ...uuid.UUID) predicate.TaskConfig {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TaskConfig(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldEventID), v...))
	})
}

// EventIDGT applies the GT predicate on the "event_id" field.
func EventIDGT(v uuid.UUID) predicate.TaskConfig {
	return predicate.TaskConfig(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEventID), v))
	})
}

// EventIDGTE applies the GTE predicate on the "event_id" field.
func EventIDGTE(v uuid.UUID) predicate.TaskConfig {
	return predicate.TaskConfig(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEventID), v))
	})
}

// EventIDLT applies the LT predicate on the "event_id" field.
func EventIDLT(v uuid.UUID) predicate.TaskConfig {
	return predicate.TaskConfig(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEventID), v))
	})
}

// EventIDLTE applies the LTE predicate on the "event_id" field.
func EventIDLTE(v uuid.UUID) predicate.TaskConfig {
	return predicate.TaskConfig(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEventID), v))
	})
}

// EventIDIsNil applies the IsNil predicate on the "event_id" field.
func EventIDIsNil() predicate.TaskConfig {
	return predicate.TaskConfig(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldEventID)))
	})
}

// EventIDNotNil applies the NotNil predicate on the "event_id" field.
func EventIDNotNil() predicate.TaskConfig {
	return predicate.TaskConfig(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldEventID)))
	})
}

// TaskTypeEQ applies the EQ predicate on the "task_type" field.
func TaskTypeEQ(v string) predicate.TaskConfig {
	return predicate.TaskConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTaskType), v))
	})
}

// TaskTypeNEQ applies the NEQ predicate on the "task_type" field.
func TaskTypeNEQ(v string) predicate.TaskConfig {
	return predicate.TaskConfig(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTaskType), v))
	})
}

// TaskTypeIn applies the In predicate on the "task_type" field.
func TaskTypeIn(vs ...string) predicate.TaskConfig {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TaskConfig(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldTaskType), v...))
	})
}

// TaskTypeNotIn applies the NotIn predicate on the "task_type" field.
func TaskTypeNotIn(vs ...string) predicate.TaskConfig {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TaskConfig(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldTaskType), v...))
	})
}

// TaskTypeGT applies the GT predicate on the "task_type" field.
func TaskTypeGT(v string) predicate.TaskConfig {
	return predicate.TaskConfig(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTaskType), v))
	})
}

// TaskTypeGTE applies the GTE predicate on the "task_type" field.
func TaskTypeGTE(v string) predicate.TaskConfig {
	return predicate.TaskConfig(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTaskType), v))
	})
}

// TaskTypeLT applies the LT predicate on the "task_type" field.
func TaskTypeLT(v string) predicate.TaskConfig {
	return predicate.TaskConfig(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTaskType), v))
	})
}

// TaskTypeLTE applies the LTE predicate on the "task_type" field.
func TaskTypeLTE(v string) predicate.TaskConfig {
	return predicate.TaskConfig(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTaskType), v))
	})
}

// TaskTypeContains applies the Contains predicate on the "task_type" field.
func TaskTypeContains(v string) predicate.TaskConfig {
	return predicate.TaskConfig(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTaskType), v))
	})
}

// TaskTypeHasPrefix applies the HasPrefix predicate on the "task_type" field.
func TaskTypeHasPrefix(v string) predicate.TaskConfig {
	return predicate.TaskConfig(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTaskType), v))
	})
}

// TaskTypeHasSuffix applies the HasSuffix predicate on the "task_type" field.
func TaskTypeHasSuffix(v string) predicate.TaskConfig {
	return predicate.TaskConfig(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTaskType), v))
	})
}

// TaskTypeIsNil applies the IsNil predicate on the "task_type" field.
func TaskTypeIsNil() predicate.TaskConfig {
	return predicate.TaskConfig(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldTaskType)))
	})
}

// TaskTypeNotNil applies the NotNil predicate on the "task_type" field.
func TaskTypeNotNil() predicate.TaskConfig {
	return predicate.TaskConfig(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldTaskType)))
	})
}

// TaskTypeEqualFold applies the EqualFold predicate on the "task_type" field.
func TaskTypeEqualFold(v string) predicate.TaskConfig {
	return predicate.TaskConfig(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTaskType), v))
	})
}

// TaskTypeContainsFold applies the ContainsFold predicate on the "task_type" field.
func TaskTypeContainsFold(v string) predicate.TaskConfig {
	return predicate.TaskConfig(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTaskType), v))
	})
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.TaskConfig {
	return predicate.TaskConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.TaskConfig {
	return predicate.TaskConfig(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldName), v))
	})
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.TaskConfig {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TaskConfig(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldName), v...))
	})
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.TaskConfig {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TaskConfig(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldName), v...))
	})
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.TaskConfig {
	return predicate.TaskConfig(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldName), v))
	})
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.TaskConfig {
	return predicate.TaskConfig(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldName), v))
	})
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.TaskConfig {
	return predicate.TaskConfig(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldName), v))
	})
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.TaskConfig {
	return predicate.TaskConfig(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldName), v))
	})
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.TaskConfig {
	return predicate.TaskConfig(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldName), v))
	})
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.TaskConfig {
	return predicate.TaskConfig(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldName), v))
	})
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.TaskConfig {
	return predicate.TaskConfig(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldName), v))
	})
}

// NameIsNil applies the IsNil predicate on the "name" field.
func NameIsNil() predicate.TaskConfig {
	return predicate.TaskConfig(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldName)))
	})
}

// NameNotNil applies the NotNil predicate on the "name" field.
func NameNotNil() predicate.TaskConfig {
	return predicate.TaskConfig(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldName)))
	})
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.TaskConfig {
	return predicate.TaskConfig(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldName), v))
	})
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.TaskConfig {
	return predicate.TaskConfig(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldName), v))
	})
}

// TaskDescEQ applies the EQ predicate on the "task_desc" field.
func TaskDescEQ(v string) predicate.TaskConfig {
	return predicate.TaskConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTaskDesc), v))
	})
}

// TaskDescNEQ applies the NEQ predicate on the "task_desc" field.
func TaskDescNEQ(v string) predicate.TaskConfig {
	return predicate.TaskConfig(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTaskDesc), v))
	})
}

// TaskDescIn applies the In predicate on the "task_desc" field.
func TaskDescIn(vs ...string) predicate.TaskConfig {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TaskConfig(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldTaskDesc), v...))
	})
}

// TaskDescNotIn applies the NotIn predicate on the "task_desc" field.
func TaskDescNotIn(vs ...string) predicate.TaskConfig {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TaskConfig(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldTaskDesc), v...))
	})
}

// TaskDescGT applies the GT predicate on the "task_desc" field.
func TaskDescGT(v string) predicate.TaskConfig {
	return predicate.TaskConfig(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTaskDesc), v))
	})
}

// TaskDescGTE applies the GTE predicate on the "task_desc" field.
func TaskDescGTE(v string) predicate.TaskConfig {
	return predicate.TaskConfig(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTaskDesc), v))
	})
}

// TaskDescLT applies the LT predicate on the "task_desc" field.
func TaskDescLT(v string) predicate.TaskConfig {
	return predicate.TaskConfig(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTaskDesc), v))
	})
}

// TaskDescLTE applies the LTE predicate on the "task_desc" field.
func TaskDescLTE(v string) predicate.TaskConfig {
	return predicate.TaskConfig(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTaskDesc), v))
	})
}

// TaskDescContains applies the Contains predicate on the "task_desc" field.
func TaskDescContains(v string) predicate.TaskConfig {
	return predicate.TaskConfig(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTaskDesc), v))
	})
}

// TaskDescHasPrefix applies the HasPrefix predicate on the "task_desc" field.
func TaskDescHasPrefix(v string) predicate.TaskConfig {
	return predicate.TaskConfig(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTaskDesc), v))
	})
}

// TaskDescHasSuffix applies the HasSuffix predicate on the "task_desc" field.
func TaskDescHasSuffix(v string) predicate.TaskConfig {
	return predicate.TaskConfig(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTaskDesc), v))
	})
}

// TaskDescIsNil applies the IsNil predicate on the "task_desc" field.
func TaskDescIsNil() predicate.TaskConfig {
	return predicate.TaskConfig(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldTaskDesc)))
	})
}

// TaskDescNotNil applies the NotNil predicate on the "task_desc" field.
func TaskDescNotNil() predicate.TaskConfig {
	return predicate.TaskConfig(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldTaskDesc)))
	})
}

// TaskDescEqualFold applies the EqualFold predicate on the "task_desc" field.
func TaskDescEqualFold(v string) predicate.TaskConfig {
	return predicate.TaskConfig(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTaskDesc), v))
	})
}

// TaskDescContainsFold applies the ContainsFold predicate on the "task_desc" field.
func TaskDescContainsFold(v string) predicate.TaskConfig {
	return predicate.TaskConfig(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTaskDesc), v))
	})
}

// StepGuideEQ applies the EQ predicate on the "step_guide" field.
func StepGuideEQ(v string) predicate.TaskConfig {
	return predicate.TaskConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStepGuide), v))
	})
}

// StepGuideNEQ applies the NEQ predicate on the "step_guide" field.
func StepGuideNEQ(v string) predicate.TaskConfig {
	return predicate.TaskConfig(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStepGuide), v))
	})
}

// StepGuideIn applies the In predicate on the "step_guide" field.
func StepGuideIn(vs ...string) predicate.TaskConfig {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TaskConfig(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldStepGuide), v...))
	})
}

// StepGuideNotIn applies the NotIn predicate on the "step_guide" field.
func StepGuideNotIn(vs ...string) predicate.TaskConfig {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TaskConfig(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldStepGuide), v...))
	})
}

// StepGuideGT applies the GT predicate on the "step_guide" field.
func StepGuideGT(v string) predicate.TaskConfig {
	return predicate.TaskConfig(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStepGuide), v))
	})
}

// StepGuideGTE applies the GTE predicate on the "step_guide" field.
func StepGuideGTE(v string) predicate.TaskConfig {
	return predicate.TaskConfig(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStepGuide), v))
	})
}

// StepGuideLT applies the LT predicate on the "step_guide" field.
func StepGuideLT(v string) predicate.TaskConfig {
	return predicate.TaskConfig(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStepGuide), v))
	})
}

// StepGuideLTE applies the LTE predicate on the "step_guide" field.
func StepGuideLTE(v string) predicate.TaskConfig {
	return predicate.TaskConfig(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStepGuide), v))
	})
}

// StepGuideContains applies the Contains predicate on the "step_guide" field.
func StepGuideContains(v string) predicate.TaskConfig {
	return predicate.TaskConfig(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldStepGuide), v))
	})
}

// StepGuideHasPrefix applies the HasPrefix predicate on the "step_guide" field.
func StepGuideHasPrefix(v string) predicate.TaskConfig {
	return predicate.TaskConfig(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldStepGuide), v))
	})
}

// StepGuideHasSuffix applies the HasSuffix predicate on the "step_guide" field.
func StepGuideHasSuffix(v string) predicate.TaskConfig {
	return predicate.TaskConfig(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldStepGuide), v))
	})
}

// StepGuideIsNil applies the IsNil predicate on the "step_guide" field.
func StepGuideIsNil() predicate.TaskConfig {
	return predicate.TaskConfig(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldStepGuide)))
	})
}

// StepGuideNotNil applies the NotNil predicate on the "step_guide" field.
func StepGuideNotNil() predicate.TaskConfig {
	return predicate.TaskConfig(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldStepGuide)))
	})
}

// StepGuideEqualFold applies the EqualFold predicate on the "step_guide" field.
func StepGuideEqualFold(v string) predicate.TaskConfig {
	return predicate.TaskConfig(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldStepGuide), v))
	})
}

// StepGuideContainsFold applies the ContainsFold predicate on the "step_guide" field.
func StepGuideContainsFold(v string) predicate.TaskConfig {
	return predicate.TaskConfig(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldStepGuide), v))
	})
}

// RecommendMessageEQ applies the EQ predicate on the "recommend_message" field.
func RecommendMessageEQ(v string) predicate.TaskConfig {
	return predicate.TaskConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRecommendMessage), v))
	})
}

// RecommendMessageNEQ applies the NEQ predicate on the "recommend_message" field.
func RecommendMessageNEQ(v string) predicate.TaskConfig {
	return predicate.TaskConfig(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRecommendMessage), v))
	})
}

// RecommendMessageIn applies the In predicate on the "recommend_message" field.
func RecommendMessageIn(vs ...string) predicate.TaskConfig {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TaskConfig(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldRecommendMessage), v...))
	})
}

// RecommendMessageNotIn applies the NotIn predicate on the "recommend_message" field.
func RecommendMessageNotIn(vs ...string) predicate.TaskConfig {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TaskConfig(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldRecommendMessage), v...))
	})
}

// RecommendMessageGT applies the GT predicate on the "recommend_message" field.
func RecommendMessageGT(v string) predicate.TaskConfig {
	return predicate.TaskConfig(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRecommendMessage), v))
	})
}

// RecommendMessageGTE applies the GTE predicate on the "recommend_message" field.
func RecommendMessageGTE(v string) predicate.TaskConfig {
	return predicate.TaskConfig(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRecommendMessage), v))
	})
}

// RecommendMessageLT applies the LT predicate on the "recommend_message" field.
func RecommendMessageLT(v string) predicate.TaskConfig {
	return predicate.TaskConfig(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRecommendMessage), v))
	})
}

// RecommendMessageLTE applies the LTE predicate on the "recommend_message" field.
func RecommendMessageLTE(v string) predicate.TaskConfig {
	return predicate.TaskConfig(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRecommendMessage), v))
	})
}

// RecommendMessageContains applies the Contains predicate on the "recommend_message" field.
func RecommendMessageContains(v string) predicate.TaskConfig {
	return predicate.TaskConfig(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldRecommendMessage), v))
	})
}

// RecommendMessageHasPrefix applies the HasPrefix predicate on the "recommend_message" field.
func RecommendMessageHasPrefix(v string) predicate.TaskConfig {
	return predicate.TaskConfig(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldRecommendMessage), v))
	})
}

// RecommendMessageHasSuffix applies the HasSuffix predicate on the "recommend_message" field.
func RecommendMessageHasSuffix(v string) predicate.TaskConfig {
	return predicate.TaskConfig(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldRecommendMessage), v))
	})
}

// RecommendMessageIsNil applies the IsNil predicate on the "recommend_message" field.
func RecommendMessageIsNil() predicate.TaskConfig {
	return predicate.TaskConfig(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldRecommendMessage)))
	})
}

// RecommendMessageNotNil applies the NotNil predicate on the "recommend_message" field.
func RecommendMessageNotNil() predicate.TaskConfig {
	return predicate.TaskConfig(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldRecommendMessage)))
	})
}

// RecommendMessageEqualFold applies the EqualFold predicate on the "recommend_message" field.
func RecommendMessageEqualFold(v string) predicate.TaskConfig {
	return predicate.TaskConfig(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldRecommendMessage), v))
	})
}

// RecommendMessageContainsFold applies the ContainsFold predicate on the "recommend_message" field.
func RecommendMessageContainsFold(v string) predicate.TaskConfig {
	return predicate.TaskConfig(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldRecommendMessage), v))
	})
}

// IndexEQ applies the EQ predicate on the "index" field.
func IndexEQ(v uint32) predicate.TaskConfig {
	return predicate.TaskConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIndex), v))
	})
}

// IndexNEQ applies the NEQ predicate on the "index" field.
func IndexNEQ(v uint32) predicate.TaskConfig {
	return predicate.TaskConfig(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIndex), v))
	})
}

// IndexIn applies the In predicate on the "index" field.
func IndexIn(vs ...uint32) predicate.TaskConfig {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TaskConfig(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldIndex), v...))
	})
}

// IndexNotIn applies the NotIn predicate on the "index" field.
func IndexNotIn(vs ...uint32) predicate.TaskConfig {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TaskConfig(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldIndex), v...))
	})
}

// IndexGT applies the GT predicate on the "index" field.
func IndexGT(v uint32) predicate.TaskConfig {
	return predicate.TaskConfig(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldIndex), v))
	})
}

// IndexGTE applies the GTE predicate on the "index" field.
func IndexGTE(v uint32) predicate.TaskConfig {
	return predicate.TaskConfig(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldIndex), v))
	})
}

// IndexLT applies the LT predicate on the "index" field.
func IndexLT(v uint32) predicate.TaskConfig {
	return predicate.TaskConfig(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldIndex), v))
	})
}

// IndexLTE applies the LTE predicate on the "index" field.
func IndexLTE(v uint32) predicate.TaskConfig {
	return predicate.TaskConfig(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldIndex), v))
	})
}

// IndexIsNil applies the IsNil predicate on the "index" field.
func IndexIsNil() predicate.TaskConfig {
	return predicate.TaskConfig(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldIndex)))
	})
}

// IndexNotNil applies the NotNil predicate on the "index" field.
func IndexNotNil() predicate.TaskConfig {
	return predicate.TaskConfig(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldIndex)))
	})
}

// LastTaskIDEQ applies the EQ predicate on the "last_task_id" field.
func LastTaskIDEQ(v uuid.UUID) predicate.TaskConfig {
	return predicate.TaskConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLastTaskID), v))
	})
}

// LastTaskIDNEQ applies the NEQ predicate on the "last_task_id" field.
func LastTaskIDNEQ(v uuid.UUID) predicate.TaskConfig {
	return predicate.TaskConfig(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLastTaskID), v))
	})
}

// LastTaskIDIn applies the In predicate on the "last_task_id" field.
func LastTaskIDIn(vs ...uuid.UUID) predicate.TaskConfig {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TaskConfig(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldLastTaskID), v...))
	})
}

// LastTaskIDNotIn applies the NotIn predicate on the "last_task_id" field.
func LastTaskIDNotIn(vs ...uuid.UUID) predicate.TaskConfig {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TaskConfig(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldLastTaskID), v...))
	})
}

// LastTaskIDGT applies the GT predicate on the "last_task_id" field.
func LastTaskIDGT(v uuid.UUID) predicate.TaskConfig {
	return predicate.TaskConfig(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLastTaskID), v))
	})
}

// LastTaskIDGTE applies the GTE predicate on the "last_task_id" field.
func LastTaskIDGTE(v uuid.UUID) predicate.TaskConfig {
	return predicate.TaskConfig(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLastTaskID), v))
	})
}

// LastTaskIDLT applies the LT predicate on the "last_task_id" field.
func LastTaskIDLT(v uuid.UUID) predicate.TaskConfig {
	return predicate.TaskConfig(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLastTaskID), v))
	})
}

// LastTaskIDLTE applies the LTE predicate on the "last_task_id" field.
func LastTaskIDLTE(v uuid.UUID) predicate.TaskConfig {
	return predicate.TaskConfig(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLastTaskID), v))
	})
}

// LastTaskIDIsNil applies the IsNil predicate on the "last_task_id" field.
func LastTaskIDIsNil() predicate.TaskConfig {
	return predicate.TaskConfig(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldLastTaskID)))
	})
}

// LastTaskIDNotNil applies the NotNil predicate on the "last_task_id" field.
func LastTaskIDNotNil() predicate.TaskConfig {
	return predicate.TaskConfig(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldLastTaskID)))
	})
}

// MaxRewardCountEQ applies the EQ predicate on the "max_reward_count" field.
func MaxRewardCountEQ(v uint32) predicate.TaskConfig {
	return predicate.TaskConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMaxRewardCount), v))
	})
}

// MaxRewardCountNEQ applies the NEQ predicate on the "max_reward_count" field.
func MaxRewardCountNEQ(v uint32) predicate.TaskConfig {
	return predicate.TaskConfig(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMaxRewardCount), v))
	})
}

// MaxRewardCountIn applies the In predicate on the "max_reward_count" field.
func MaxRewardCountIn(vs ...uint32) predicate.TaskConfig {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TaskConfig(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldMaxRewardCount), v...))
	})
}

// MaxRewardCountNotIn applies the NotIn predicate on the "max_reward_count" field.
func MaxRewardCountNotIn(vs ...uint32) predicate.TaskConfig {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TaskConfig(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldMaxRewardCount), v...))
	})
}

// MaxRewardCountGT applies the GT predicate on the "max_reward_count" field.
func MaxRewardCountGT(v uint32) predicate.TaskConfig {
	return predicate.TaskConfig(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMaxRewardCount), v))
	})
}

// MaxRewardCountGTE applies the GTE predicate on the "max_reward_count" field.
func MaxRewardCountGTE(v uint32) predicate.TaskConfig {
	return predicate.TaskConfig(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMaxRewardCount), v))
	})
}

// MaxRewardCountLT applies the LT predicate on the "max_reward_count" field.
func MaxRewardCountLT(v uint32) predicate.TaskConfig {
	return predicate.TaskConfig(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMaxRewardCount), v))
	})
}

// MaxRewardCountLTE applies the LTE predicate on the "max_reward_count" field.
func MaxRewardCountLTE(v uint32) predicate.TaskConfig {
	return predicate.TaskConfig(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMaxRewardCount), v))
	})
}

// MaxRewardCountIsNil applies the IsNil predicate on the "max_reward_count" field.
func MaxRewardCountIsNil() predicate.TaskConfig {
	return predicate.TaskConfig(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldMaxRewardCount)))
	})
}

// MaxRewardCountNotNil applies the NotNil predicate on the "max_reward_count" field.
func MaxRewardCountNotNil() predicate.TaskConfig {
	return predicate.TaskConfig(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldMaxRewardCount)))
	})
}

// CooldownSecondEQ applies the EQ predicate on the "cooldown_second" field.
func CooldownSecondEQ(v uint32) predicate.TaskConfig {
	return predicate.TaskConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCooldownSecond), v))
	})
}

// CooldownSecondNEQ applies the NEQ predicate on the "cooldown_second" field.
func CooldownSecondNEQ(v uint32) predicate.TaskConfig {
	return predicate.TaskConfig(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCooldownSecond), v))
	})
}

// CooldownSecondIn applies the In predicate on the "cooldown_second" field.
func CooldownSecondIn(vs ...uint32) predicate.TaskConfig {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TaskConfig(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCooldownSecond), v...))
	})
}

// CooldownSecondNotIn applies the NotIn predicate on the "cooldown_second" field.
func CooldownSecondNotIn(vs ...uint32) predicate.TaskConfig {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TaskConfig(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCooldownSecond), v...))
	})
}

// CooldownSecondGT applies the GT predicate on the "cooldown_second" field.
func CooldownSecondGT(v uint32) predicate.TaskConfig {
	return predicate.TaskConfig(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCooldownSecond), v))
	})
}

// CooldownSecondGTE applies the GTE predicate on the "cooldown_second" field.
func CooldownSecondGTE(v uint32) predicate.TaskConfig {
	return predicate.TaskConfig(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCooldownSecond), v))
	})
}

// CooldownSecondLT applies the LT predicate on the "cooldown_second" field.
func CooldownSecondLT(v uint32) predicate.TaskConfig {
	return predicate.TaskConfig(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCooldownSecond), v))
	})
}

// CooldownSecondLTE applies the LTE predicate on the "cooldown_second" field.
func CooldownSecondLTE(v uint32) predicate.TaskConfig {
	return predicate.TaskConfig(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCooldownSecond), v))
	})
}

// CooldownSecondIsNil applies the IsNil predicate on the "cooldown_second" field.
func CooldownSecondIsNil() predicate.TaskConfig {
	return predicate.TaskConfig(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCooldownSecond)))
	})
}

// CooldownSecondNotNil applies the NotNil predicate on the "cooldown_second" field.
func CooldownSecondNotNil() predicate.TaskConfig {
	return predicate.TaskConfig(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCooldownSecond)))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.TaskConfig) predicate.TaskConfig {
	return predicate.TaskConfig(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.TaskConfig) predicate.TaskConfig {
	return predicate.TaskConfig(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.TaskConfig) predicate.TaskConfig {
	return predicate.TaskConfig(func(s *sql.Selector) {
		p(s.Not())
	})
}
