// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/inspire-middleware/pkg/db/ent/achivement"
	"github.com/NpoolPlatform/inspire-middleware/pkg/db/ent/predicate"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// AchivementUpdate is the builder for updating Achivement entities.
type AchivementUpdate struct {
	config
	hooks     []Hook
	mutation  *AchivementMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the AchivementUpdate builder.
func (au *AchivementUpdate) Where(ps ...predicate.Achivement) *AchivementUpdate {
	au.mutation.Where(ps...)
	return au
}

// SetCreatedAt sets the "created_at" field.
func (au *AchivementUpdate) SetCreatedAt(u uint32) *AchivementUpdate {
	au.mutation.ResetCreatedAt()
	au.mutation.SetCreatedAt(u)
	return au
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (au *AchivementUpdate) SetNillableCreatedAt(u *uint32) *AchivementUpdate {
	if u != nil {
		au.SetCreatedAt(*u)
	}
	return au
}

// AddCreatedAt adds u to the "created_at" field.
func (au *AchivementUpdate) AddCreatedAt(u int32) *AchivementUpdate {
	au.mutation.AddCreatedAt(u)
	return au
}

// SetUpdatedAt sets the "updated_at" field.
func (au *AchivementUpdate) SetUpdatedAt(u uint32) *AchivementUpdate {
	au.mutation.ResetUpdatedAt()
	au.mutation.SetUpdatedAt(u)
	return au
}

// AddUpdatedAt adds u to the "updated_at" field.
func (au *AchivementUpdate) AddUpdatedAt(u int32) *AchivementUpdate {
	au.mutation.AddUpdatedAt(u)
	return au
}

// SetDeletedAt sets the "deleted_at" field.
func (au *AchivementUpdate) SetDeletedAt(u uint32) *AchivementUpdate {
	au.mutation.ResetDeletedAt()
	au.mutation.SetDeletedAt(u)
	return au
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (au *AchivementUpdate) SetNillableDeletedAt(u *uint32) *AchivementUpdate {
	if u != nil {
		au.SetDeletedAt(*u)
	}
	return au
}

// AddDeletedAt adds u to the "deleted_at" field.
func (au *AchivementUpdate) AddDeletedAt(u int32) *AchivementUpdate {
	au.mutation.AddDeletedAt(u)
	return au
}

// SetAppID sets the "app_id" field.
func (au *AchivementUpdate) SetAppID(u uuid.UUID) *AchivementUpdate {
	au.mutation.SetAppID(u)
	return au
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (au *AchivementUpdate) SetNillableAppID(u *uuid.UUID) *AchivementUpdate {
	if u != nil {
		au.SetAppID(*u)
	}
	return au
}

// ClearAppID clears the value of the "app_id" field.
func (au *AchivementUpdate) ClearAppID() *AchivementUpdate {
	au.mutation.ClearAppID()
	return au
}

// SetUserID sets the "user_id" field.
func (au *AchivementUpdate) SetUserID(u uuid.UUID) *AchivementUpdate {
	au.mutation.SetUserID(u)
	return au
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (au *AchivementUpdate) SetNillableUserID(u *uuid.UUID) *AchivementUpdate {
	if u != nil {
		au.SetUserID(*u)
	}
	return au
}

// ClearUserID clears the value of the "user_id" field.
func (au *AchivementUpdate) ClearUserID() *AchivementUpdate {
	au.mutation.ClearUserID()
	return au
}

// SetGoodID sets the "good_id" field.
func (au *AchivementUpdate) SetGoodID(u uuid.UUID) *AchivementUpdate {
	au.mutation.SetGoodID(u)
	return au
}

// SetNillableGoodID sets the "good_id" field if the given value is not nil.
func (au *AchivementUpdate) SetNillableGoodID(u *uuid.UUID) *AchivementUpdate {
	if u != nil {
		au.SetGoodID(*u)
	}
	return au
}

// ClearGoodID clears the value of the "good_id" field.
func (au *AchivementUpdate) ClearGoodID() *AchivementUpdate {
	au.mutation.ClearGoodID()
	return au
}

// SetCoinTypeID sets the "coin_type_id" field.
func (au *AchivementUpdate) SetCoinTypeID(u uuid.UUID) *AchivementUpdate {
	au.mutation.SetCoinTypeID(u)
	return au
}

// SetNillableCoinTypeID sets the "coin_type_id" field if the given value is not nil.
func (au *AchivementUpdate) SetNillableCoinTypeID(u *uuid.UUID) *AchivementUpdate {
	if u != nil {
		au.SetCoinTypeID(*u)
	}
	return au
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (au *AchivementUpdate) ClearCoinTypeID() *AchivementUpdate {
	au.mutation.ClearCoinTypeID()
	return au
}

// SetTotalUnitsV1 sets the "total_units_v1" field.
func (au *AchivementUpdate) SetTotalUnitsV1(d decimal.Decimal) *AchivementUpdate {
	au.mutation.SetTotalUnitsV1(d)
	return au
}

// SetNillableTotalUnitsV1 sets the "total_units_v1" field if the given value is not nil.
func (au *AchivementUpdate) SetNillableTotalUnitsV1(d *decimal.Decimal) *AchivementUpdate {
	if d != nil {
		au.SetTotalUnitsV1(*d)
	}
	return au
}

// ClearTotalUnitsV1 clears the value of the "total_units_v1" field.
func (au *AchivementUpdate) ClearTotalUnitsV1() *AchivementUpdate {
	au.mutation.ClearTotalUnitsV1()
	return au
}

// SetSelfUnitsV1 sets the "self_units_v1" field.
func (au *AchivementUpdate) SetSelfUnitsV1(d decimal.Decimal) *AchivementUpdate {
	au.mutation.SetSelfUnitsV1(d)
	return au
}

// SetNillableSelfUnitsV1 sets the "self_units_v1" field if the given value is not nil.
func (au *AchivementUpdate) SetNillableSelfUnitsV1(d *decimal.Decimal) *AchivementUpdate {
	if d != nil {
		au.SetSelfUnitsV1(*d)
	}
	return au
}

// ClearSelfUnitsV1 clears the value of the "self_units_v1" field.
func (au *AchivementUpdate) ClearSelfUnitsV1() *AchivementUpdate {
	au.mutation.ClearSelfUnitsV1()
	return au
}

// SetTotalAmount sets the "total_amount" field.
func (au *AchivementUpdate) SetTotalAmount(d decimal.Decimal) *AchivementUpdate {
	au.mutation.SetTotalAmount(d)
	return au
}

// SetNillableTotalAmount sets the "total_amount" field if the given value is not nil.
func (au *AchivementUpdate) SetNillableTotalAmount(d *decimal.Decimal) *AchivementUpdate {
	if d != nil {
		au.SetTotalAmount(*d)
	}
	return au
}

// ClearTotalAmount clears the value of the "total_amount" field.
func (au *AchivementUpdate) ClearTotalAmount() *AchivementUpdate {
	au.mutation.ClearTotalAmount()
	return au
}

// SetSelfAmount sets the "self_amount" field.
func (au *AchivementUpdate) SetSelfAmount(d decimal.Decimal) *AchivementUpdate {
	au.mutation.SetSelfAmount(d)
	return au
}

// SetNillableSelfAmount sets the "self_amount" field if the given value is not nil.
func (au *AchivementUpdate) SetNillableSelfAmount(d *decimal.Decimal) *AchivementUpdate {
	if d != nil {
		au.SetSelfAmount(*d)
	}
	return au
}

// ClearSelfAmount clears the value of the "self_amount" field.
func (au *AchivementUpdate) ClearSelfAmount() *AchivementUpdate {
	au.mutation.ClearSelfAmount()
	return au
}

// SetTotalCommission sets the "total_commission" field.
func (au *AchivementUpdate) SetTotalCommission(d decimal.Decimal) *AchivementUpdate {
	au.mutation.SetTotalCommission(d)
	return au
}

// SetNillableTotalCommission sets the "total_commission" field if the given value is not nil.
func (au *AchivementUpdate) SetNillableTotalCommission(d *decimal.Decimal) *AchivementUpdate {
	if d != nil {
		au.SetTotalCommission(*d)
	}
	return au
}

// ClearTotalCommission clears the value of the "total_commission" field.
func (au *AchivementUpdate) ClearTotalCommission() *AchivementUpdate {
	au.mutation.ClearTotalCommission()
	return au
}

// SetSelfCommission sets the "self_commission" field.
func (au *AchivementUpdate) SetSelfCommission(d decimal.Decimal) *AchivementUpdate {
	au.mutation.SetSelfCommission(d)
	return au
}

// SetNillableSelfCommission sets the "self_commission" field if the given value is not nil.
func (au *AchivementUpdate) SetNillableSelfCommission(d *decimal.Decimal) *AchivementUpdate {
	if d != nil {
		au.SetSelfCommission(*d)
	}
	return au
}

// ClearSelfCommission clears the value of the "self_commission" field.
func (au *AchivementUpdate) ClearSelfCommission() *AchivementUpdate {
	au.mutation.ClearSelfCommission()
	return au
}

// Mutation returns the AchivementMutation object of the builder.
func (au *AchivementUpdate) Mutation() *AchivementMutation {
	return au.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (au *AchivementUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if err := au.defaults(); err != nil {
		return 0, err
	}
	if len(au.hooks) == 0 {
		affected, err = au.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AchivementMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			au.mutation = mutation
			affected, err = au.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(au.hooks) - 1; i >= 0; i-- {
			if au.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = au.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, au.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (au *AchivementUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *AchivementUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *AchivementUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (au *AchivementUpdate) defaults() error {
	if _, ok := au.mutation.UpdatedAt(); !ok {
		if achivement.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized achivement.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := achivement.UpdateDefaultUpdatedAt()
		au.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (au *AchivementUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *AchivementUpdate {
	au.modifiers = append(au.modifiers, modifiers...)
	return au
}

func (au *AchivementUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   achivement.Table,
			Columns: achivement.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: achivement.FieldID,
			},
		},
	}
	if ps := au.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := au.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: achivement.FieldCreatedAt,
		})
	}
	if value, ok := au.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: achivement.FieldCreatedAt,
		})
	}
	if value, ok := au.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: achivement.FieldUpdatedAt,
		})
	}
	if value, ok := au.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: achivement.FieldUpdatedAt,
		})
	}
	if value, ok := au.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: achivement.FieldDeletedAt,
		})
	}
	if value, ok := au.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: achivement.FieldDeletedAt,
		})
	}
	if value, ok := au.mutation.AppID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: achivement.FieldAppID,
		})
	}
	if au.mutation.AppIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: achivement.FieldAppID,
		})
	}
	if value, ok := au.mutation.UserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: achivement.FieldUserID,
		})
	}
	if au.mutation.UserIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: achivement.FieldUserID,
		})
	}
	if value, ok := au.mutation.GoodID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: achivement.FieldGoodID,
		})
	}
	if au.mutation.GoodIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: achivement.FieldGoodID,
		})
	}
	if value, ok := au.mutation.CoinTypeID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: achivement.FieldCoinTypeID,
		})
	}
	if au.mutation.CoinTypeIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: achivement.FieldCoinTypeID,
		})
	}
	if value, ok := au.mutation.TotalUnitsV1(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: achivement.FieldTotalUnitsV1,
		})
	}
	if au.mutation.TotalUnitsV1Cleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Column: achivement.FieldTotalUnitsV1,
		})
	}
	if value, ok := au.mutation.SelfUnitsV1(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: achivement.FieldSelfUnitsV1,
		})
	}
	if au.mutation.SelfUnitsV1Cleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Column: achivement.FieldSelfUnitsV1,
		})
	}
	if value, ok := au.mutation.TotalAmount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: achivement.FieldTotalAmount,
		})
	}
	if au.mutation.TotalAmountCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Column: achivement.FieldTotalAmount,
		})
	}
	if value, ok := au.mutation.SelfAmount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: achivement.FieldSelfAmount,
		})
	}
	if au.mutation.SelfAmountCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Column: achivement.FieldSelfAmount,
		})
	}
	if value, ok := au.mutation.TotalCommission(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: achivement.FieldTotalCommission,
		})
	}
	if au.mutation.TotalCommissionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Column: achivement.FieldTotalCommission,
		})
	}
	if value, ok := au.mutation.SelfCommission(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: achivement.FieldSelfCommission,
		})
	}
	if au.mutation.SelfCommissionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Column: achivement.FieldSelfCommission,
		})
	}
	_spec.Modifiers = au.modifiers
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{achivement.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// AchivementUpdateOne is the builder for updating a single Achivement entity.
type AchivementUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *AchivementMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetCreatedAt sets the "created_at" field.
func (auo *AchivementUpdateOne) SetCreatedAt(u uint32) *AchivementUpdateOne {
	auo.mutation.ResetCreatedAt()
	auo.mutation.SetCreatedAt(u)
	return auo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (auo *AchivementUpdateOne) SetNillableCreatedAt(u *uint32) *AchivementUpdateOne {
	if u != nil {
		auo.SetCreatedAt(*u)
	}
	return auo
}

// AddCreatedAt adds u to the "created_at" field.
func (auo *AchivementUpdateOne) AddCreatedAt(u int32) *AchivementUpdateOne {
	auo.mutation.AddCreatedAt(u)
	return auo
}

// SetUpdatedAt sets the "updated_at" field.
func (auo *AchivementUpdateOne) SetUpdatedAt(u uint32) *AchivementUpdateOne {
	auo.mutation.ResetUpdatedAt()
	auo.mutation.SetUpdatedAt(u)
	return auo
}

// AddUpdatedAt adds u to the "updated_at" field.
func (auo *AchivementUpdateOne) AddUpdatedAt(u int32) *AchivementUpdateOne {
	auo.mutation.AddUpdatedAt(u)
	return auo
}

// SetDeletedAt sets the "deleted_at" field.
func (auo *AchivementUpdateOne) SetDeletedAt(u uint32) *AchivementUpdateOne {
	auo.mutation.ResetDeletedAt()
	auo.mutation.SetDeletedAt(u)
	return auo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (auo *AchivementUpdateOne) SetNillableDeletedAt(u *uint32) *AchivementUpdateOne {
	if u != nil {
		auo.SetDeletedAt(*u)
	}
	return auo
}

// AddDeletedAt adds u to the "deleted_at" field.
func (auo *AchivementUpdateOne) AddDeletedAt(u int32) *AchivementUpdateOne {
	auo.mutation.AddDeletedAt(u)
	return auo
}

// SetAppID sets the "app_id" field.
func (auo *AchivementUpdateOne) SetAppID(u uuid.UUID) *AchivementUpdateOne {
	auo.mutation.SetAppID(u)
	return auo
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (auo *AchivementUpdateOne) SetNillableAppID(u *uuid.UUID) *AchivementUpdateOne {
	if u != nil {
		auo.SetAppID(*u)
	}
	return auo
}

// ClearAppID clears the value of the "app_id" field.
func (auo *AchivementUpdateOne) ClearAppID() *AchivementUpdateOne {
	auo.mutation.ClearAppID()
	return auo
}

// SetUserID sets the "user_id" field.
func (auo *AchivementUpdateOne) SetUserID(u uuid.UUID) *AchivementUpdateOne {
	auo.mutation.SetUserID(u)
	return auo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (auo *AchivementUpdateOne) SetNillableUserID(u *uuid.UUID) *AchivementUpdateOne {
	if u != nil {
		auo.SetUserID(*u)
	}
	return auo
}

// ClearUserID clears the value of the "user_id" field.
func (auo *AchivementUpdateOne) ClearUserID() *AchivementUpdateOne {
	auo.mutation.ClearUserID()
	return auo
}

// SetGoodID sets the "good_id" field.
func (auo *AchivementUpdateOne) SetGoodID(u uuid.UUID) *AchivementUpdateOne {
	auo.mutation.SetGoodID(u)
	return auo
}

// SetNillableGoodID sets the "good_id" field if the given value is not nil.
func (auo *AchivementUpdateOne) SetNillableGoodID(u *uuid.UUID) *AchivementUpdateOne {
	if u != nil {
		auo.SetGoodID(*u)
	}
	return auo
}

// ClearGoodID clears the value of the "good_id" field.
func (auo *AchivementUpdateOne) ClearGoodID() *AchivementUpdateOne {
	auo.mutation.ClearGoodID()
	return auo
}

// SetCoinTypeID sets the "coin_type_id" field.
func (auo *AchivementUpdateOne) SetCoinTypeID(u uuid.UUID) *AchivementUpdateOne {
	auo.mutation.SetCoinTypeID(u)
	return auo
}

// SetNillableCoinTypeID sets the "coin_type_id" field if the given value is not nil.
func (auo *AchivementUpdateOne) SetNillableCoinTypeID(u *uuid.UUID) *AchivementUpdateOne {
	if u != nil {
		auo.SetCoinTypeID(*u)
	}
	return auo
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (auo *AchivementUpdateOne) ClearCoinTypeID() *AchivementUpdateOne {
	auo.mutation.ClearCoinTypeID()
	return auo
}

// SetTotalUnitsV1 sets the "total_units_v1" field.
func (auo *AchivementUpdateOne) SetTotalUnitsV1(d decimal.Decimal) *AchivementUpdateOne {
	auo.mutation.SetTotalUnitsV1(d)
	return auo
}

// SetNillableTotalUnitsV1 sets the "total_units_v1" field if the given value is not nil.
func (auo *AchivementUpdateOne) SetNillableTotalUnitsV1(d *decimal.Decimal) *AchivementUpdateOne {
	if d != nil {
		auo.SetTotalUnitsV1(*d)
	}
	return auo
}

// ClearTotalUnitsV1 clears the value of the "total_units_v1" field.
func (auo *AchivementUpdateOne) ClearTotalUnitsV1() *AchivementUpdateOne {
	auo.mutation.ClearTotalUnitsV1()
	return auo
}

// SetSelfUnitsV1 sets the "self_units_v1" field.
func (auo *AchivementUpdateOne) SetSelfUnitsV1(d decimal.Decimal) *AchivementUpdateOne {
	auo.mutation.SetSelfUnitsV1(d)
	return auo
}

// SetNillableSelfUnitsV1 sets the "self_units_v1" field if the given value is not nil.
func (auo *AchivementUpdateOne) SetNillableSelfUnitsV1(d *decimal.Decimal) *AchivementUpdateOne {
	if d != nil {
		auo.SetSelfUnitsV1(*d)
	}
	return auo
}

// ClearSelfUnitsV1 clears the value of the "self_units_v1" field.
func (auo *AchivementUpdateOne) ClearSelfUnitsV1() *AchivementUpdateOne {
	auo.mutation.ClearSelfUnitsV1()
	return auo
}

// SetTotalAmount sets the "total_amount" field.
func (auo *AchivementUpdateOne) SetTotalAmount(d decimal.Decimal) *AchivementUpdateOne {
	auo.mutation.SetTotalAmount(d)
	return auo
}

// SetNillableTotalAmount sets the "total_amount" field if the given value is not nil.
func (auo *AchivementUpdateOne) SetNillableTotalAmount(d *decimal.Decimal) *AchivementUpdateOne {
	if d != nil {
		auo.SetTotalAmount(*d)
	}
	return auo
}

// ClearTotalAmount clears the value of the "total_amount" field.
func (auo *AchivementUpdateOne) ClearTotalAmount() *AchivementUpdateOne {
	auo.mutation.ClearTotalAmount()
	return auo
}

// SetSelfAmount sets the "self_amount" field.
func (auo *AchivementUpdateOne) SetSelfAmount(d decimal.Decimal) *AchivementUpdateOne {
	auo.mutation.SetSelfAmount(d)
	return auo
}

// SetNillableSelfAmount sets the "self_amount" field if the given value is not nil.
func (auo *AchivementUpdateOne) SetNillableSelfAmount(d *decimal.Decimal) *AchivementUpdateOne {
	if d != nil {
		auo.SetSelfAmount(*d)
	}
	return auo
}

// ClearSelfAmount clears the value of the "self_amount" field.
func (auo *AchivementUpdateOne) ClearSelfAmount() *AchivementUpdateOne {
	auo.mutation.ClearSelfAmount()
	return auo
}

// SetTotalCommission sets the "total_commission" field.
func (auo *AchivementUpdateOne) SetTotalCommission(d decimal.Decimal) *AchivementUpdateOne {
	auo.mutation.SetTotalCommission(d)
	return auo
}

// SetNillableTotalCommission sets the "total_commission" field if the given value is not nil.
func (auo *AchivementUpdateOne) SetNillableTotalCommission(d *decimal.Decimal) *AchivementUpdateOne {
	if d != nil {
		auo.SetTotalCommission(*d)
	}
	return auo
}

// ClearTotalCommission clears the value of the "total_commission" field.
func (auo *AchivementUpdateOne) ClearTotalCommission() *AchivementUpdateOne {
	auo.mutation.ClearTotalCommission()
	return auo
}

// SetSelfCommission sets the "self_commission" field.
func (auo *AchivementUpdateOne) SetSelfCommission(d decimal.Decimal) *AchivementUpdateOne {
	auo.mutation.SetSelfCommission(d)
	return auo
}

// SetNillableSelfCommission sets the "self_commission" field if the given value is not nil.
func (auo *AchivementUpdateOne) SetNillableSelfCommission(d *decimal.Decimal) *AchivementUpdateOne {
	if d != nil {
		auo.SetSelfCommission(*d)
	}
	return auo
}

// ClearSelfCommission clears the value of the "self_commission" field.
func (auo *AchivementUpdateOne) ClearSelfCommission() *AchivementUpdateOne {
	auo.mutation.ClearSelfCommission()
	return auo
}

// Mutation returns the AchivementMutation object of the builder.
func (auo *AchivementUpdateOne) Mutation() *AchivementMutation {
	return auo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (auo *AchivementUpdateOne) Select(field string, fields ...string) *AchivementUpdateOne {
	auo.fields = append([]string{field}, fields...)
	return auo
}

// Save executes the query and returns the updated Achivement entity.
func (auo *AchivementUpdateOne) Save(ctx context.Context) (*Achivement, error) {
	var (
		err  error
		node *Achivement
	)
	if err := auo.defaults(); err != nil {
		return nil, err
	}
	if len(auo.hooks) == 0 {
		node, err = auo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AchivementMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			auo.mutation = mutation
			node, err = auo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(auo.hooks) - 1; i >= 0; i-- {
			if auo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = auo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, auo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Achivement)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from AchivementMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (auo *AchivementUpdateOne) SaveX(ctx context.Context) *Achivement {
	node, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auo *AchivementUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *AchivementUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (auo *AchivementUpdateOne) defaults() error {
	if _, ok := auo.mutation.UpdatedAt(); !ok {
		if achivement.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized achivement.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := achivement.UpdateDefaultUpdatedAt()
		auo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (auo *AchivementUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *AchivementUpdateOne {
	auo.modifiers = append(auo.modifiers, modifiers...)
	return auo
}

func (auo *AchivementUpdateOne) sqlSave(ctx context.Context) (_node *Achivement, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   achivement.Table,
			Columns: achivement.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: achivement.FieldID,
			},
		},
	}
	id, ok := auo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Achivement.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := auo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, achivement.FieldID)
		for _, f := range fields {
			if !achivement.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != achivement.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := auo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := auo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: achivement.FieldCreatedAt,
		})
	}
	if value, ok := auo.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: achivement.FieldCreatedAt,
		})
	}
	if value, ok := auo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: achivement.FieldUpdatedAt,
		})
	}
	if value, ok := auo.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: achivement.FieldUpdatedAt,
		})
	}
	if value, ok := auo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: achivement.FieldDeletedAt,
		})
	}
	if value, ok := auo.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: achivement.FieldDeletedAt,
		})
	}
	if value, ok := auo.mutation.AppID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: achivement.FieldAppID,
		})
	}
	if auo.mutation.AppIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: achivement.FieldAppID,
		})
	}
	if value, ok := auo.mutation.UserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: achivement.FieldUserID,
		})
	}
	if auo.mutation.UserIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: achivement.FieldUserID,
		})
	}
	if value, ok := auo.mutation.GoodID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: achivement.FieldGoodID,
		})
	}
	if auo.mutation.GoodIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: achivement.FieldGoodID,
		})
	}
	if value, ok := auo.mutation.CoinTypeID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: achivement.FieldCoinTypeID,
		})
	}
	if auo.mutation.CoinTypeIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: achivement.FieldCoinTypeID,
		})
	}
	if value, ok := auo.mutation.TotalUnitsV1(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: achivement.FieldTotalUnitsV1,
		})
	}
	if auo.mutation.TotalUnitsV1Cleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Column: achivement.FieldTotalUnitsV1,
		})
	}
	if value, ok := auo.mutation.SelfUnitsV1(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: achivement.FieldSelfUnitsV1,
		})
	}
	if auo.mutation.SelfUnitsV1Cleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Column: achivement.FieldSelfUnitsV1,
		})
	}
	if value, ok := auo.mutation.TotalAmount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: achivement.FieldTotalAmount,
		})
	}
	if auo.mutation.TotalAmountCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Column: achivement.FieldTotalAmount,
		})
	}
	if value, ok := auo.mutation.SelfAmount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: achivement.FieldSelfAmount,
		})
	}
	if auo.mutation.SelfAmountCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Column: achivement.FieldSelfAmount,
		})
	}
	if value, ok := auo.mutation.TotalCommission(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: achivement.FieldTotalCommission,
		})
	}
	if auo.mutation.TotalCommissionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Column: achivement.FieldTotalCommission,
		})
	}
	if value, ok := auo.mutation.SelfCommission(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: achivement.FieldSelfCommission,
		})
	}
	if auo.mutation.SelfCommissionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Column: achivement.FieldSelfCommission,
		})
	}
	_spec.Modifiers = auo.modifiers
	_node = &Achivement{config: auo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, auo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{achivement.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
