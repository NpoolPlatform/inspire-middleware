// Code generated by ent, DO NOT EDIT.

package ent

import (
	"github.com/NpoolPlatform/inspire-middleware/pkg/db/ent/achivement"
	"github.com/NpoolPlatform/inspire-middleware/pkg/db/ent/commission"
	"github.com/NpoolPlatform/inspire-middleware/pkg/db/ent/coupon"
	"github.com/NpoolPlatform/inspire-middleware/pkg/db/ent/couponallocated"
	"github.com/NpoolPlatform/inspire-middleware/pkg/db/ent/coupondiscount"
	"github.com/NpoolPlatform/inspire-middleware/pkg/db/ent/couponfixamount"
	"github.com/NpoolPlatform/inspire-middleware/pkg/db/ent/couponspecialoffer"
	"github.com/NpoolPlatform/inspire-middleware/pkg/db/ent/event"
	"github.com/NpoolPlatform/inspire-middleware/pkg/db/ent/goodorderpercent"
	"github.com/NpoolPlatform/inspire-middleware/pkg/db/ent/goodordervaluepercent"
	"github.com/NpoolPlatform/inspire-middleware/pkg/db/ent/invitationcode"
	"github.com/NpoolPlatform/inspire-middleware/pkg/db/ent/pubsubmessage"
	"github.com/NpoolPlatform/inspire-middleware/pkg/db/ent/registration"
	"github.com/NpoolPlatform/inspire-middleware/pkg/db/ent/statement"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/entql"
	"entgo.io/ent/schema/field"
)

// schemaGraph holds a representation of ent/schema at runtime.
var schemaGraph = func() *sqlgraph.Schema {
	graph := &sqlgraph.Schema{Nodes: make([]*sqlgraph.Node, 14)}
	graph.Nodes[0] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   achivement.Table,
			Columns: achivement.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: achivement.FieldID,
			},
		},
		Type: "Achivement",
		Fields: map[string]*sqlgraph.FieldSpec{
			achivement.FieldCreatedAt:       {Type: field.TypeUint32, Column: achivement.FieldCreatedAt},
			achivement.FieldUpdatedAt:       {Type: field.TypeUint32, Column: achivement.FieldUpdatedAt},
			achivement.FieldDeletedAt:       {Type: field.TypeUint32, Column: achivement.FieldDeletedAt},
			achivement.FieldAppID:           {Type: field.TypeUUID, Column: achivement.FieldAppID},
			achivement.FieldUserID:          {Type: field.TypeUUID, Column: achivement.FieldUserID},
			achivement.FieldGoodID:          {Type: field.TypeUUID, Column: achivement.FieldGoodID},
			achivement.FieldCoinTypeID:      {Type: field.TypeUUID, Column: achivement.FieldCoinTypeID},
			achivement.FieldTotalUnitsV1:    {Type: field.TypeOther, Column: achivement.FieldTotalUnitsV1},
			achivement.FieldSelfUnitsV1:     {Type: field.TypeOther, Column: achivement.FieldSelfUnitsV1},
			achivement.FieldTotalAmount:     {Type: field.TypeOther, Column: achivement.FieldTotalAmount},
			achivement.FieldSelfAmount:      {Type: field.TypeOther, Column: achivement.FieldSelfAmount},
			achivement.FieldTotalCommission: {Type: field.TypeOther, Column: achivement.FieldTotalCommission},
			achivement.FieldSelfCommission:  {Type: field.TypeOther, Column: achivement.FieldSelfCommission},
		},
	}
	graph.Nodes[1] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   commission.Table,
			Columns: commission.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: commission.FieldID,
			},
		},
		Type: "Commission",
		Fields: map[string]*sqlgraph.FieldSpec{
			commission.FieldCreatedAt:       {Type: field.TypeUint32, Column: commission.FieldCreatedAt},
			commission.FieldUpdatedAt:       {Type: field.TypeUint32, Column: commission.FieldUpdatedAt},
			commission.FieldDeletedAt:       {Type: field.TypeUint32, Column: commission.FieldDeletedAt},
			commission.FieldAppID:           {Type: field.TypeUUID, Column: commission.FieldAppID},
			commission.FieldUserID:          {Type: field.TypeUUID, Column: commission.FieldUserID},
			commission.FieldGoodID:          {Type: field.TypeUUID, Column: commission.FieldGoodID},
			commission.FieldAmountOrPercent: {Type: field.TypeOther, Column: commission.FieldAmountOrPercent},
			commission.FieldStartAt:         {Type: field.TypeUint32, Column: commission.FieldStartAt},
			commission.FieldEndAt:           {Type: field.TypeUint32, Column: commission.FieldEndAt},
			commission.FieldSettleType:      {Type: field.TypeString, Column: commission.FieldSettleType},
			commission.FieldSettleMode:      {Type: field.TypeString, Column: commission.FieldSettleMode},
			commission.FieldSettleInterval:  {Type: field.TypeString, Column: commission.FieldSettleInterval},
			commission.FieldThreshold:       {Type: field.TypeOther, Column: commission.FieldThreshold},
			commission.FieldOrderLimit:      {Type: field.TypeUint32, Column: commission.FieldOrderLimit},
		},
	}
	graph.Nodes[2] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   coupon.Table,
			Columns: coupon.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: coupon.FieldID,
			},
		},
		Type: "Coupon",
		Fields: map[string]*sqlgraph.FieldSpec{
			coupon.FieldCreatedAt:        {Type: field.TypeUint32, Column: coupon.FieldCreatedAt},
			coupon.FieldUpdatedAt:        {Type: field.TypeUint32, Column: coupon.FieldUpdatedAt},
			coupon.FieldDeletedAt:        {Type: field.TypeUint32, Column: coupon.FieldDeletedAt},
			coupon.FieldAppID:            {Type: field.TypeUUID, Column: coupon.FieldAppID},
			coupon.FieldUserID:           {Type: field.TypeUUID, Column: coupon.FieldUserID},
			coupon.FieldGoodID:           {Type: field.TypeUUID, Column: coupon.FieldGoodID},
			coupon.FieldDenomination:     {Type: field.TypeOther, Column: coupon.FieldDenomination},
			coupon.FieldCirculation:      {Type: field.TypeOther, Column: coupon.FieldCirculation},
			coupon.FieldRandom:           {Type: field.TypeBool, Column: coupon.FieldRandom},
			coupon.FieldIssuedBy:         {Type: field.TypeUUID, Column: coupon.FieldIssuedBy},
			coupon.FieldStartAt:          {Type: field.TypeUint32, Column: coupon.FieldStartAt},
			coupon.FieldDurationDays:     {Type: field.TypeUint32, Column: coupon.FieldDurationDays},
			coupon.FieldMessage:          {Type: field.TypeString, Column: coupon.FieldMessage},
			coupon.FieldName:             {Type: field.TypeString, Column: coupon.FieldName},
			coupon.FieldAllocated:        {Type: field.TypeOther, Column: coupon.FieldAllocated},
			coupon.FieldCouponType:       {Type: field.TypeString, Column: coupon.FieldCouponType},
			coupon.FieldThreshold:        {Type: field.TypeOther, Column: coupon.FieldThreshold},
			coupon.FieldCouponConstraint: {Type: field.TypeString, Column: coupon.FieldCouponConstraint},
		},
	}
	graph.Nodes[3] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   couponallocated.Table,
			Columns: couponallocated.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: couponallocated.FieldID,
			},
		},
		Type: "CouponAllocated",
		Fields: map[string]*sqlgraph.FieldSpec{
			couponallocated.FieldCreatedAt:     {Type: field.TypeUint32, Column: couponallocated.FieldCreatedAt},
			couponallocated.FieldUpdatedAt:     {Type: field.TypeUint32, Column: couponallocated.FieldUpdatedAt},
			couponallocated.FieldDeletedAt:     {Type: field.TypeUint32, Column: couponallocated.FieldDeletedAt},
			couponallocated.FieldAppID:         {Type: field.TypeUUID, Column: couponallocated.FieldAppID},
			couponallocated.FieldUserID:        {Type: field.TypeUUID, Column: couponallocated.FieldUserID},
			couponallocated.FieldCouponID:      {Type: field.TypeUUID, Column: couponallocated.FieldCouponID},
			couponallocated.FieldDenomination:  {Type: field.TypeOther, Column: couponallocated.FieldDenomination},
			couponallocated.FieldUsed:          {Type: field.TypeBool, Column: couponallocated.FieldUsed},
			couponallocated.FieldUsedAt:        {Type: field.TypeUint32, Column: couponallocated.FieldUsedAt},
			couponallocated.FieldUsedByOrderID: {Type: field.TypeUUID, Column: couponallocated.FieldUsedByOrderID},
			couponallocated.FieldStartAt:       {Type: field.TypeUint32, Column: couponallocated.FieldStartAt},
		},
	}
	graph.Nodes[4] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   coupondiscount.Table,
			Columns: coupondiscount.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: coupondiscount.FieldID,
			},
		},
		Type: "CouponDiscount",
		Fields: map[string]*sqlgraph.FieldSpec{
			coupondiscount.FieldCreatedAt:        {Type: field.TypeUint32, Column: coupondiscount.FieldCreatedAt},
			coupondiscount.FieldUpdatedAt:        {Type: field.TypeUint32, Column: coupondiscount.FieldUpdatedAt},
			coupondiscount.FieldDeletedAt:        {Type: field.TypeUint32, Column: coupondiscount.FieldDeletedAt},
			coupondiscount.FieldAppID:            {Type: field.TypeUUID, Column: coupondiscount.FieldAppID},
			coupondiscount.FieldDiscount:         {Type: field.TypeOther, Column: coupondiscount.FieldDiscount},
			coupondiscount.FieldCirculation:      {Type: field.TypeOther, Column: coupondiscount.FieldCirculation},
			coupondiscount.FieldReleasedByUserID: {Type: field.TypeUUID, Column: coupondiscount.FieldReleasedByUserID},
			coupondiscount.FieldStartAt:          {Type: field.TypeUint32, Column: coupondiscount.FieldStartAt},
			coupondiscount.FieldDurationDays:     {Type: field.TypeUint32, Column: coupondiscount.FieldDurationDays},
			coupondiscount.FieldMessage:          {Type: field.TypeString, Column: coupondiscount.FieldMessage},
			coupondiscount.FieldName:             {Type: field.TypeString, Column: coupondiscount.FieldName},
			coupondiscount.FieldAllocated:        {Type: field.TypeUint32, Column: coupondiscount.FieldAllocated},
		},
	}
	graph.Nodes[5] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   couponfixamount.Table,
			Columns: couponfixamount.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: couponfixamount.FieldID,
			},
		},
		Type: "CouponFixAmount",
		Fields: map[string]*sqlgraph.FieldSpec{
			couponfixamount.FieldCreatedAt:        {Type: field.TypeUint32, Column: couponfixamount.FieldCreatedAt},
			couponfixamount.FieldUpdatedAt:        {Type: field.TypeUint32, Column: couponfixamount.FieldUpdatedAt},
			couponfixamount.FieldDeletedAt:        {Type: field.TypeUint32, Column: couponfixamount.FieldDeletedAt},
			couponfixamount.FieldAppID:            {Type: field.TypeUUID, Column: couponfixamount.FieldAppID},
			couponfixamount.FieldDenomination:     {Type: field.TypeOther, Column: couponfixamount.FieldDenomination},
			couponfixamount.FieldCirculation:      {Type: field.TypeOther, Column: couponfixamount.FieldCirculation},
			couponfixamount.FieldReleasedByUserID: {Type: field.TypeUUID, Column: couponfixamount.FieldReleasedByUserID},
			couponfixamount.FieldStartAt:          {Type: field.TypeUint32, Column: couponfixamount.FieldStartAt},
			couponfixamount.FieldDurationDays:     {Type: field.TypeUint32, Column: couponfixamount.FieldDurationDays},
			couponfixamount.FieldMessage:          {Type: field.TypeString, Column: couponfixamount.FieldMessage},
			couponfixamount.FieldName:             {Type: field.TypeString, Column: couponfixamount.FieldName},
			couponfixamount.FieldAllocated:        {Type: field.TypeUint32, Column: couponfixamount.FieldAllocated},
		},
	}
	graph.Nodes[6] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   couponspecialoffer.Table,
			Columns: couponspecialoffer.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: couponspecialoffer.FieldID,
			},
		},
		Type: "CouponSpecialOffer",
		Fields: map[string]*sqlgraph.FieldSpec{
			couponspecialoffer.FieldCreatedAt:        {Type: field.TypeUint32, Column: couponspecialoffer.FieldCreatedAt},
			couponspecialoffer.FieldUpdatedAt:        {Type: field.TypeUint32, Column: couponspecialoffer.FieldUpdatedAt},
			couponspecialoffer.FieldDeletedAt:        {Type: field.TypeUint32, Column: couponspecialoffer.FieldDeletedAt},
			couponspecialoffer.FieldAppID:            {Type: field.TypeUUID, Column: couponspecialoffer.FieldAppID},
			couponspecialoffer.FieldUserID:           {Type: field.TypeUUID, Column: couponspecialoffer.FieldUserID},
			couponspecialoffer.FieldAmount:           {Type: field.TypeOther, Column: couponspecialoffer.FieldAmount},
			couponspecialoffer.FieldReleasedByUserID: {Type: field.TypeUUID, Column: couponspecialoffer.FieldReleasedByUserID},
			couponspecialoffer.FieldStartAt:          {Type: field.TypeUint32, Column: couponspecialoffer.FieldStartAt},
			couponspecialoffer.FieldDurationDays:     {Type: field.TypeUint32, Column: couponspecialoffer.FieldDurationDays},
			couponspecialoffer.FieldMessage:          {Type: field.TypeString, Column: couponspecialoffer.FieldMessage},
		},
	}
	graph.Nodes[7] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   event.Table,
			Columns: event.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: event.FieldID,
			},
		},
		Type: "Event",
		Fields: map[string]*sqlgraph.FieldSpec{
			event.FieldCreatedAt:      {Type: field.TypeUint32, Column: event.FieldCreatedAt},
			event.FieldUpdatedAt:      {Type: field.TypeUint32, Column: event.FieldUpdatedAt},
			event.FieldDeletedAt:      {Type: field.TypeUint32, Column: event.FieldDeletedAt},
			event.FieldAppID:          {Type: field.TypeUUID, Column: event.FieldAppID},
			event.FieldEventType:      {Type: field.TypeString, Column: event.FieldEventType},
			event.FieldCouponIds:      {Type: field.TypeJSON, Column: event.FieldCouponIds},
			event.FieldCredits:        {Type: field.TypeOther, Column: event.FieldCredits},
			event.FieldCreditsPerUsd:  {Type: field.TypeOther, Column: event.FieldCreditsPerUsd},
			event.FieldMaxConsecutive: {Type: field.TypeUint32, Column: event.FieldMaxConsecutive},
			event.FieldGoodID:         {Type: field.TypeUUID, Column: event.FieldGoodID},
			event.FieldInviterLayers:  {Type: field.TypeUint32, Column: event.FieldInviterLayers},
		},
	}
	graph.Nodes[8] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   goodorderpercent.Table,
			Columns: goodorderpercent.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: goodorderpercent.FieldID,
			},
		},
		Type: "GoodOrderPercent",
		Fields: map[string]*sqlgraph.FieldSpec{
			goodorderpercent.FieldCreatedAt: {Type: field.TypeUint32, Column: goodorderpercent.FieldCreatedAt},
			goodorderpercent.FieldUpdatedAt: {Type: field.TypeUint32, Column: goodorderpercent.FieldUpdatedAt},
			goodorderpercent.FieldDeletedAt: {Type: field.TypeUint32, Column: goodorderpercent.FieldDeletedAt},
			goodorderpercent.FieldAppID:     {Type: field.TypeUUID, Column: goodorderpercent.FieldAppID},
			goodorderpercent.FieldUserID:    {Type: field.TypeUUID, Column: goodorderpercent.FieldUserID},
			goodorderpercent.FieldGoodID:    {Type: field.TypeUUID, Column: goodorderpercent.FieldGoodID},
			goodorderpercent.FieldPercent:   {Type: field.TypeOther, Column: goodorderpercent.FieldPercent},
			goodorderpercent.FieldStartAt:   {Type: field.TypeUint32, Column: goodorderpercent.FieldStartAt},
			goodorderpercent.FieldEndAt:     {Type: field.TypeUint32, Column: goodorderpercent.FieldEndAt},
		},
	}
	graph.Nodes[9] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   goodordervaluepercent.Table,
			Columns: goodordervaluepercent.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: goodordervaluepercent.FieldID,
			},
		},
		Type: "GoodOrderValuePercent",
		Fields: map[string]*sqlgraph.FieldSpec{
			goodordervaluepercent.FieldCreatedAt: {Type: field.TypeUint32, Column: goodordervaluepercent.FieldCreatedAt},
			goodordervaluepercent.FieldUpdatedAt: {Type: field.TypeUint32, Column: goodordervaluepercent.FieldUpdatedAt},
			goodordervaluepercent.FieldDeletedAt: {Type: field.TypeUint32, Column: goodordervaluepercent.FieldDeletedAt},
			goodordervaluepercent.FieldAppID:     {Type: field.TypeUUID, Column: goodordervaluepercent.FieldAppID},
			goodordervaluepercent.FieldUserID:    {Type: field.TypeUUID, Column: goodordervaluepercent.FieldUserID},
			goodordervaluepercent.FieldGoodID:    {Type: field.TypeUUID, Column: goodordervaluepercent.FieldGoodID},
			goodordervaluepercent.FieldPercent:   {Type: field.TypeOther, Column: goodordervaluepercent.FieldPercent},
			goodordervaluepercent.FieldStartAt:   {Type: field.TypeUint32, Column: goodordervaluepercent.FieldStartAt},
			goodordervaluepercent.FieldEndAt:     {Type: field.TypeUint32, Column: goodordervaluepercent.FieldEndAt},
		},
	}
	graph.Nodes[10] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   invitationcode.Table,
			Columns: invitationcode.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: invitationcode.FieldID,
			},
		},
		Type: "InvitationCode",
		Fields: map[string]*sqlgraph.FieldSpec{
			invitationcode.FieldCreatedAt:      {Type: field.TypeUint32, Column: invitationcode.FieldCreatedAt},
			invitationcode.FieldUpdatedAt:      {Type: field.TypeUint32, Column: invitationcode.FieldUpdatedAt},
			invitationcode.FieldDeletedAt:      {Type: field.TypeUint32, Column: invitationcode.FieldDeletedAt},
			invitationcode.FieldAppID:          {Type: field.TypeUUID, Column: invitationcode.FieldAppID},
			invitationcode.FieldUserID:         {Type: field.TypeUUID, Column: invitationcode.FieldUserID},
			invitationcode.FieldInvitationCode: {Type: field.TypeString, Column: invitationcode.FieldInvitationCode},
			invitationcode.FieldDisabled:       {Type: field.TypeBool, Column: invitationcode.FieldDisabled},
		},
	}
	graph.Nodes[11] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   pubsubmessage.Table,
			Columns: pubsubmessage.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: pubsubmessage.FieldID,
			},
		},
		Type: "PubsubMessage",
		Fields: map[string]*sqlgraph.FieldSpec{
			pubsubmessage.FieldCreatedAt: {Type: field.TypeUint32, Column: pubsubmessage.FieldCreatedAt},
			pubsubmessage.FieldUpdatedAt: {Type: field.TypeUint32, Column: pubsubmessage.FieldUpdatedAt},
			pubsubmessage.FieldDeletedAt: {Type: field.TypeUint32, Column: pubsubmessage.FieldDeletedAt},
			pubsubmessage.FieldMessageID: {Type: field.TypeString, Column: pubsubmessage.FieldMessageID},
			pubsubmessage.FieldState:     {Type: field.TypeString, Column: pubsubmessage.FieldState},
			pubsubmessage.FieldRespToID:  {Type: field.TypeUUID, Column: pubsubmessage.FieldRespToID},
			pubsubmessage.FieldUndoID:    {Type: field.TypeUUID, Column: pubsubmessage.FieldUndoID},
			pubsubmessage.FieldArguments: {Type: field.TypeString, Column: pubsubmessage.FieldArguments},
		},
	}
	graph.Nodes[12] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   registration.Table,
			Columns: registration.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: registration.FieldID,
			},
		},
		Type: "Registration",
		Fields: map[string]*sqlgraph.FieldSpec{
			registration.FieldCreatedAt: {Type: field.TypeUint32, Column: registration.FieldCreatedAt},
			registration.FieldUpdatedAt: {Type: field.TypeUint32, Column: registration.FieldUpdatedAt},
			registration.FieldDeletedAt: {Type: field.TypeUint32, Column: registration.FieldDeletedAt},
			registration.FieldAppID:     {Type: field.TypeUUID, Column: registration.FieldAppID},
			registration.FieldInviterID: {Type: field.TypeUUID, Column: registration.FieldInviterID},
			registration.FieldInviteeID: {Type: field.TypeUUID, Column: registration.FieldInviteeID},
		},
	}
	graph.Nodes[13] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   statement.Table,
			Columns: statement.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: statement.FieldID,
			},
		},
		Type: "Statement",
		Fields: map[string]*sqlgraph.FieldSpec{
			statement.FieldCreatedAt:              {Type: field.TypeUint32, Column: statement.FieldCreatedAt},
			statement.FieldUpdatedAt:              {Type: field.TypeUint32, Column: statement.FieldUpdatedAt},
			statement.FieldDeletedAt:              {Type: field.TypeUint32, Column: statement.FieldDeletedAt},
			statement.FieldAppID:                  {Type: field.TypeUUID, Column: statement.FieldAppID},
			statement.FieldUserID:                 {Type: field.TypeUUID, Column: statement.FieldUserID},
			statement.FieldDirectContributorID:    {Type: field.TypeUUID, Column: statement.FieldDirectContributorID},
			statement.FieldGoodID:                 {Type: field.TypeUUID, Column: statement.FieldGoodID},
			statement.FieldOrderID:                {Type: field.TypeUUID, Column: statement.FieldOrderID},
			statement.FieldSelfOrder:              {Type: field.TypeBool, Column: statement.FieldSelfOrder},
			statement.FieldPaymentID:              {Type: field.TypeUUID, Column: statement.FieldPaymentID},
			statement.FieldCoinTypeID:             {Type: field.TypeUUID, Column: statement.FieldCoinTypeID},
			statement.FieldPaymentCoinTypeID:      {Type: field.TypeUUID, Column: statement.FieldPaymentCoinTypeID},
			statement.FieldPaymentCoinUsdCurrency: {Type: field.TypeOther, Column: statement.FieldPaymentCoinUsdCurrency},
			statement.FieldUnits:                  {Type: field.TypeUint32, Column: statement.FieldUnits},
			statement.FieldUnitsV1:                {Type: field.TypeOther, Column: statement.FieldUnitsV1},
			statement.FieldAmount:                 {Type: field.TypeOther, Column: statement.FieldAmount},
			statement.FieldUsdAmount:              {Type: field.TypeOther, Column: statement.FieldUsdAmount},
			statement.FieldCommission:             {Type: field.TypeOther, Column: statement.FieldCommission},
		},
	}
	return graph
}()

// predicateAdder wraps the addPredicate method.
// All update, update-one and query builders implement this interface.
type predicateAdder interface {
	addPredicate(func(s *sql.Selector))
}

// addPredicate implements the predicateAdder interface.
func (aq *AchivementQuery) addPredicate(pred func(s *sql.Selector)) {
	aq.predicates = append(aq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the AchivementQuery builder.
func (aq *AchivementQuery) Filter() *AchivementFilter {
	return &AchivementFilter{config: aq.config, predicateAdder: aq}
}

// addPredicate implements the predicateAdder interface.
func (m *AchivementMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the AchivementMutation builder.
func (m *AchivementMutation) Filter() *AchivementFilter {
	return &AchivementFilter{config: m.config, predicateAdder: m}
}

// AchivementFilter provides a generic filtering capability at runtime for AchivementQuery.
type AchivementFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *AchivementFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[0].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *AchivementFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(achivement.FieldID))
}

// WhereCreatedAt applies the entql uint32 predicate on the created_at field.
func (f *AchivementFilter) WhereCreatedAt(p entql.Uint32P) {
	f.Where(p.Field(achivement.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql uint32 predicate on the updated_at field.
func (f *AchivementFilter) WhereUpdatedAt(p entql.Uint32P) {
	f.Where(p.Field(achivement.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql uint32 predicate on the deleted_at field.
func (f *AchivementFilter) WhereDeletedAt(p entql.Uint32P) {
	f.Where(p.Field(achivement.FieldDeletedAt))
}

// WhereAppID applies the entql [16]byte predicate on the app_id field.
func (f *AchivementFilter) WhereAppID(p entql.ValueP) {
	f.Where(p.Field(achivement.FieldAppID))
}

// WhereUserID applies the entql [16]byte predicate on the user_id field.
func (f *AchivementFilter) WhereUserID(p entql.ValueP) {
	f.Where(p.Field(achivement.FieldUserID))
}

// WhereGoodID applies the entql [16]byte predicate on the good_id field.
func (f *AchivementFilter) WhereGoodID(p entql.ValueP) {
	f.Where(p.Field(achivement.FieldGoodID))
}

// WhereCoinTypeID applies the entql [16]byte predicate on the coin_type_id field.
func (f *AchivementFilter) WhereCoinTypeID(p entql.ValueP) {
	f.Where(p.Field(achivement.FieldCoinTypeID))
}

// WhereTotalUnitsV1 applies the entql other predicate on the total_units_v1 field.
func (f *AchivementFilter) WhereTotalUnitsV1(p entql.OtherP) {
	f.Where(p.Field(achivement.FieldTotalUnitsV1))
}

// WhereSelfUnitsV1 applies the entql other predicate on the self_units_v1 field.
func (f *AchivementFilter) WhereSelfUnitsV1(p entql.OtherP) {
	f.Where(p.Field(achivement.FieldSelfUnitsV1))
}

// WhereTotalAmount applies the entql other predicate on the total_amount field.
func (f *AchivementFilter) WhereTotalAmount(p entql.OtherP) {
	f.Where(p.Field(achivement.FieldTotalAmount))
}

// WhereSelfAmount applies the entql other predicate on the self_amount field.
func (f *AchivementFilter) WhereSelfAmount(p entql.OtherP) {
	f.Where(p.Field(achivement.FieldSelfAmount))
}

// WhereTotalCommission applies the entql other predicate on the total_commission field.
func (f *AchivementFilter) WhereTotalCommission(p entql.OtherP) {
	f.Where(p.Field(achivement.FieldTotalCommission))
}

// WhereSelfCommission applies the entql other predicate on the self_commission field.
func (f *AchivementFilter) WhereSelfCommission(p entql.OtherP) {
	f.Where(p.Field(achivement.FieldSelfCommission))
}

// addPredicate implements the predicateAdder interface.
func (cq *CommissionQuery) addPredicate(pred func(s *sql.Selector)) {
	cq.predicates = append(cq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the CommissionQuery builder.
func (cq *CommissionQuery) Filter() *CommissionFilter {
	return &CommissionFilter{config: cq.config, predicateAdder: cq}
}

// addPredicate implements the predicateAdder interface.
func (m *CommissionMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the CommissionMutation builder.
func (m *CommissionMutation) Filter() *CommissionFilter {
	return &CommissionFilter{config: m.config, predicateAdder: m}
}

// CommissionFilter provides a generic filtering capability at runtime for CommissionQuery.
type CommissionFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *CommissionFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[1].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *CommissionFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(commission.FieldID))
}

// WhereCreatedAt applies the entql uint32 predicate on the created_at field.
func (f *CommissionFilter) WhereCreatedAt(p entql.Uint32P) {
	f.Where(p.Field(commission.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql uint32 predicate on the updated_at field.
func (f *CommissionFilter) WhereUpdatedAt(p entql.Uint32P) {
	f.Where(p.Field(commission.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql uint32 predicate on the deleted_at field.
func (f *CommissionFilter) WhereDeletedAt(p entql.Uint32P) {
	f.Where(p.Field(commission.FieldDeletedAt))
}

// WhereAppID applies the entql [16]byte predicate on the app_id field.
func (f *CommissionFilter) WhereAppID(p entql.ValueP) {
	f.Where(p.Field(commission.FieldAppID))
}

// WhereUserID applies the entql [16]byte predicate on the user_id field.
func (f *CommissionFilter) WhereUserID(p entql.ValueP) {
	f.Where(p.Field(commission.FieldUserID))
}

// WhereGoodID applies the entql [16]byte predicate on the good_id field.
func (f *CommissionFilter) WhereGoodID(p entql.ValueP) {
	f.Where(p.Field(commission.FieldGoodID))
}

// WhereAmountOrPercent applies the entql other predicate on the amount_or_percent field.
func (f *CommissionFilter) WhereAmountOrPercent(p entql.OtherP) {
	f.Where(p.Field(commission.FieldAmountOrPercent))
}

// WhereStartAt applies the entql uint32 predicate on the start_at field.
func (f *CommissionFilter) WhereStartAt(p entql.Uint32P) {
	f.Where(p.Field(commission.FieldStartAt))
}

// WhereEndAt applies the entql uint32 predicate on the end_at field.
func (f *CommissionFilter) WhereEndAt(p entql.Uint32P) {
	f.Where(p.Field(commission.FieldEndAt))
}

// WhereSettleType applies the entql string predicate on the settle_type field.
func (f *CommissionFilter) WhereSettleType(p entql.StringP) {
	f.Where(p.Field(commission.FieldSettleType))
}

// WhereSettleMode applies the entql string predicate on the settle_mode field.
func (f *CommissionFilter) WhereSettleMode(p entql.StringP) {
	f.Where(p.Field(commission.FieldSettleMode))
}

// WhereSettleInterval applies the entql string predicate on the settle_interval field.
func (f *CommissionFilter) WhereSettleInterval(p entql.StringP) {
	f.Where(p.Field(commission.FieldSettleInterval))
}

// WhereThreshold applies the entql other predicate on the threshold field.
func (f *CommissionFilter) WhereThreshold(p entql.OtherP) {
	f.Where(p.Field(commission.FieldThreshold))
}

// WhereOrderLimit applies the entql uint32 predicate on the order_limit field.
func (f *CommissionFilter) WhereOrderLimit(p entql.Uint32P) {
	f.Where(p.Field(commission.FieldOrderLimit))
}

// addPredicate implements the predicateAdder interface.
func (cq *CouponQuery) addPredicate(pred func(s *sql.Selector)) {
	cq.predicates = append(cq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the CouponQuery builder.
func (cq *CouponQuery) Filter() *CouponFilter {
	return &CouponFilter{config: cq.config, predicateAdder: cq}
}

// addPredicate implements the predicateAdder interface.
func (m *CouponMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the CouponMutation builder.
func (m *CouponMutation) Filter() *CouponFilter {
	return &CouponFilter{config: m.config, predicateAdder: m}
}

// CouponFilter provides a generic filtering capability at runtime for CouponQuery.
type CouponFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *CouponFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[2].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *CouponFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(coupon.FieldID))
}

// WhereCreatedAt applies the entql uint32 predicate on the created_at field.
func (f *CouponFilter) WhereCreatedAt(p entql.Uint32P) {
	f.Where(p.Field(coupon.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql uint32 predicate on the updated_at field.
func (f *CouponFilter) WhereUpdatedAt(p entql.Uint32P) {
	f.Where(p.Field(coupon.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql uint32 predicate on the deleted_at field.
func (f *CouponFilter) WhereDeletedAt(p entql.Uint32P) {
	f.Where(p.Field(coupon.FieldDeletedAt))
}

// WhereAppID applies the entql [16]byte predicate on the app_id field.
func (f *CouponFilter) WhereAppID(p entql.ValueP) {
	f.Where(p.Field(coupon.FieldAppID))
}

// WhereUserID applies the entql [16]byte predicate on the user_id field.
func (f *CouponFilter) WhereUserID(p entql.ValueP) {
	f.Where(p.Field(coupon.FieldUserID))
}

// WhereGoodID applies the entql [16]byte predicate on the good_id field.
func (f *CouponFilter) WhereGoodID(p entql.ValueP) {
	f.Where(p.Field(coupon.FieldGoodID))
}

// WhereDenomination applies the entql other predicate on the denomination field.
func (f *CouponFilter) WhereDenomination(p entql.OtherP) {
	f.Where(p.Field(coupon.FieldDenomination))
}

// WhereCirculation applies the entql other predicate on the circulation field.
func (f *CouponFilter) WhereCirculation(p entql.OtherP) {
	f.Where(p.Field(coupon.FieldCirculation))
}

// WhereRandom applies the entql bool predicate on the random field.
func (f *CouponFilter) WhereRandom(p entql.BoolP) {
	f.Where(p.Field(coupon.FieldRandom))
}

// WhereIssuedBy applies the entql [16]byte predicate on the issued_by field.
func (f *CouponFilter) WhereIssuedBy(p entql.ValueP) {
	f.Where(p.Field(coupon.FieldIssuedBy))
}

// WhereStartAt applies the entql uint32 predicate on the start_at field.
func (f *CouponFilter) WhereStartAt(p entql.Uint32P) {
	f.Where(p.Field(coupon.FieldStartAt))
}

// WhereDurationDays applies the entql uint32 predicate on the duration_days field.
func (f *CouponFilter) WhereDurationDays(p entql.Uint32P) {
	f.Where(p.Field(coupon.FieldDurationDays))
}

// WhereMessage applies the entql string predicate on the message field.
func (f *CouponFilter) WhereMessage(p entql.StringP) {
	f.Where(p.Field(coupon.FieldMessage))
}

// WhereName applies the entql string predicate on the name field.
func (f *CouponFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(coupon.FieldName))
}

// WhereAllocated applies the entql other predicate on the allocated field.
func (f *CouponFilter) WhereAllocated(p entql.OtherP) {
	f.Where(p.Field(coupon.FieldAllocated))
}

// WhereCouponType applies the entql string predicate on the coupon_type field.
func (f *CouponFilter) WhereCouponType(p entql.StringP) {
	f.Where(p.Field(coupon.FieldCouponType))
}

// WhereThreshold applies the entql other predicate on the threshold field.
func (f *CouponFilter) WhereThreshold(p entql.OtherP) {
	f.Where(p.Field(coupon.FieldThreshold))
}

// WhereCouponConstraint applies the entql string predicate on the coupon_constraint field.
func (f *CouponFilter) WhereCouponConstraint(p entql.StringP) {
	f.Where(p.Field(coupon.FieldCouponConstraint))
}

// addPredicate implements the predicateAdder interface.
func (caq *CouponAllocatedQuery) addPredicate(pred func(s *sql.Selector)) {
	caq.predicates = append(caq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the CouponAllocatedQuery builder.
func (caq *CouponAllocatedQuery) Filter() *CouponAllocatedFilter {
	return &CouponAllocatedFilter{config: caq.config, predicateAdder: caq}
}

// addPredicate implements the predicateAdder interface.
func (m *CouponAllocatedMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the CouponAllocatedMutation builder.
func (m *CouponAllocatedMutation) Filter() *CouponAllocatedFilter {
	return &CouponAllocatedFilter{config: m.config, predicateAdder: m}
}

// CouponAllocatedFilter provides a generic filtering capability at runtime for CouponAllocatedQuery.
type CouponAllocatedFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *CouponAllocatedFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[3].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *CouponAllocatedFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(couponallocated.FieldID))
}

// WhereCreatedAt applies the entql uint32 predicate on the created_at field.
func (f *CouponAllocatedFilter) WhereCreatedAt(p entql.Uint32P) {
	f.Where(p.Field(couponallocated.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql uint32 predicate on the updated_at field.
func (f *CouponAllocatedFilter) WhereUpdatedAt(p entql.Uint32P) {
	f.Where(p.Field(couponallocated.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql uint32 predicate on the deleted_at field.
func (f *CouponAllocatedFilter) WhereDeletedAt(p entql.Uint32P) {
	f.Where(p.Field(couponallocated.FieldDeletedAt))
}

// WhereAppID applies the entql [16]byte predicate on the app_id field.
func (f *CouponAllocatedFilter) WhereAppID(p entql.ValueP) {
	f.Where(p.Field(couponallocated.FieldAppID))
}

// WhereUserID applies the entql [16]byte predicate on the user_id field.
func (f *CouponAllocatedFilter) WhereUserID(p entql.ValueP) {
	f.Where(p.Field(couponallocated.FieldUserID))
}

// WhereCouponID applies the entql [16]byte predicate on the coupon_id field.
func (f *CouponAllocatedFilter) WhereCouponID(p entql.ValueP) {
	f.Where(p.Field(couponallocated.FieldCouponID))
}

// WhereDenomination applies the entql other predicate on the denomination field.
func (f *CouponAllocatedFilter) WhereDenomination(p entql.OtherP) {
	f.Where(p.Field(couponallocated.FieldDenomination))
}

// WhereUsed applies the entql bool predicate on the used field.
func (f *CouponAllocatedFilter) WhereUsed(p entql.BoolP) {
	f.Where(p.Field(couponallocated.FieldUsed))
}

// WhereUsedAt applies the entql uint32 predicate on the used_at field.
func (f *CouponAllocatedFilter) WhereUsedAt(p entql.Uint32P) {
	f.Where(p.Field(couponallocated.FieldUsedAt))
}

// WhereUsedByOrderID applies the entql [16]byte predicate on the used_by_order_id field.
func (f *CouponAllocatedFilter) WhereUsedByOrderID(p entql.ValueP) {
	f.Where(p.Field(couponallocated.FieldUsedByOrderID))
}

// WhereStartAt applies the entql uint32 predicate on the start_at field.
func (f *CouponAllocatedFilter) WhereStartAt(p entql.Uint32P) {
	f.Where(p.Field(couponallocated.FieldStartAt))
}

// addPredicate implements the predicateAdder interface.
func (cdq *CouponDiscountQuery) addPredicate(pred func(s *sql.Selector)) {
	cdq.predicates = append(cdq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the CouponDiscountQuery builder.
func (cdq *CouponDiscountQuery) Filter() *CouponDiscountFilter {
	return &CouponDiscountFilter{config: cdq.config, predicateAdder: cdq}
}

// addPredicate implements the predicateAdder interface.
func (m *CouponDiscountMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the CouponDiscountMutation builder.
func (m *CouponDiscountMutation) Filter() *CouponDiscountFilter {
	return &CouponDiscountFilter{config: m.config, predicateAdder: m}
}

// CouponDiscountFilter provides a generic filtering capability at runtime for CouponDiscountQuery.
type CouponDiscountFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *CouponDiscountFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[4].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *CouponDiscountFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(coupondiscount.FieldID))
}

// WhereCreatedAt applies the entql uint32 predicate on the created_at field.
func (f *CouponDiscountFilter) WhereCreatedAt(p entql.Uint32P) {
	f.Where(p.Field(coupondiscount.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql uint32 predicate on the updated_at field.
func (f *CouponDiscountFilter) WhereUpdatedAt(p entql.Uint32P) {
	f.Where(p.Field(coupondiscount.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql uint32 predicate on the deleted_at field.
func (f *CouponDiscountFilter) WhereDeletedAt(p entql.Uint32P) {
	f.Where(p.Field(coupondiscount.FieldDeletedAt))
}

// WhereAppID applies the entql [16]byte predicate on the app_id field.
func (f *CouponDiscountFilter) WhereAppID(p entql.ValueP) {
	f.Where(p.Field(coupondiscount.FieldAppID))
}

// WhereDiscount applies the entql other predicate on the discount field.
func (f *CouponDiscountFilter) WhereDiscount(p entql.OtherP) {
	f.Where(p.Field(coupondiscount.FieldDiscount))
}

// WhereCirculation applies the entql other predicate on the circulation field.
func (f *CouponDiscountFilter) WhereCirculation(p entql.OtherP) {
	f.Where(p.Field(coupondiscount.FieldCirculation))
}

// WhereReleasedByUserID applies the entql [16]byte predicate on the released_by_user_id field.
func (f *CouponDiscountFilter) WhereReleasedByUserID(p entql.ValueP) {
	f.Where(p.Field(coupondiscount.FieldReleasedByUserID))
}

// WhereStartAt applies the entql uint32 predicate on the start_at field.
func (f *CouponDiscountFilter) WhereStartAt(p entql.Uint32P) {
	f.Where(p.Field(coupondiscount.FieldStartAt))
}

// WhereDurationDays applies the entql uint32 predicate on the duration_days field.
func (f *CouponDiscountFilter) WhereDurationDays(p entql.Uint32P) {
	f.Where(p.Field(coupondiscount.FieldDurationDays))
}

// WhereMessage applies the entql string predicate on the message field.
func (f *CouponDiscountFilter) WhereMessage(p entql.StringP) {
	f.Where(p.Field(coupondiscount.FieldMessage))
}

// WhereName applies the entql string predicate on the name field.
func (f *CouponDiscountFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(coupondiscount.FieldName))
}

// WhereAllocated applies the entql uint32 predicate on the allocated field.
func (f *CouponDiscountFilter) WhereAllocated(p entql.Uint32P) {
	f.Where(p.Field(coupondiscount.FieldAllocated))
}

// addPredicate implements the predicateAdder interface.
func (cfaq *CouponFixAmountQuery) addPredicate(pred func(s *sql.Selector)) {
	cfaq.predicates = append(cfaq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the CouponFixAmountQuery builder.
func (cfaq *CouponFixAmountQuery) Filter() *CouponFixAmountFilter {
	return &CouponFixAmountFilter{config: cfaq.config, predicateAdder: cfaq}
}

// addPredicate implements the predicateAdder interface.
func (m *CouponFixAmountMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the CouponFixAmountMutation builder.
func (m *CouponFixAmountMutation) Filter() *CouponFixAmountFilter {
	return &CouponFixAmountFilter{config: m.config, predicateAdder: m}
}

// CouponFixAmountFilter provides a generic filtering capability at runtime for CouponFixAmountQuery.
type CouponFixAmountFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *CouponFixAmountFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[5].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *CouponFixAmountFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(couponfixamount.FieldID))
}

// WhereCreatedAt applies the entql uint32 predicate on the created_at field.
func (f *CouponFixAmountFilter) WhereCreatedAt(p entql.Uint32P) {
	f.Where(p.Field(couponfixamount.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql uint32 predicate on the updated_at field.
func (f *CouponFixAmountFilter) WhereUpdatedAt(p entql.Uint32P) {
	f.Where(p.Field(couponfixamount.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql uint32 predicate on the deleted_at field.
func (f *CouponFixAmountFilter) WhereDeletedAt(p entql.Uint32P) {
	f.Where(p.Field(couponfixamount.FieldDeletedAt))
}

// WhereAppID applies the entql [16]byte predicate on the app_id field.
func (f *CouponFixAmountFilter) WhereAppID(p entql.ValueP) {
	f.Where(p.Field(couponfixamount.FieldAppID))
}

// WhereDenomination applies the entql other predicate on the denomination field.
func (f *CouponFixAmountFilter) WhereDenomination(p entql.OtherP) {
	f.Where(p.Field(couponfixamount.FieldDenomination))
}

// WhereCirculation applies the entql other predicate on the circulation field.
func (f *CouponFixAmountFilter) WhereCirculation(p entql.OtherP) {
	f.Where(p.Field(couponfixamount.FieldCirculation))
}

// WhereReleasedByUserID applies the entql [16]byte predicate on the released_by_user_id field.
func (f *CouponFixAmountFilter) WhereReleasedByUserID(p entql.ValueP) {
	f.Where(p.Field(couponfixamount.FieldReleasedByUserID))
}

// WhereStartAt applies the entql uint32 predicate on the start_at field.
func (f *CouponFixAmountFilter) WhereStartAt(p entql.Uint32P) {
	f.Where(p.Field(couponfixamount.FieldStartAt))
}

// WhereDurationDays applies the entql uint32 predicate on the duration_days field.
func (f *CouponFixAmountFilter) WhereDurationDays(p entql.Uint32P) {
	f.Where(p.Field(couponfixamount.FieldDurationDays))
}

// WhereMessage applies the entql string predicate on the message field.
func (f *CouponFixAmountFilter) WhereMessage(p entql.StringP) {
	f.Where(p.Field(couponfixamount.FieldMessage))
}

// WhereName applies the entql string predicate on the name field.
func (f *CouponFixAmountFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(couponfixamount.FieldName))
}

// WhereAllocated applies the entql uint32 predicate on the allocated field.
func (f *CouponFixAmountFilter) WhereAllocated(p entql.Uint32P) {
	f.Where(p.Field(couponfixamount.FieldAllocated))
}

// addPredicate implements the predicateAdder interface.
func (csoq *CouponSpecialOfferQuery) addPredicate(pred func(s *sql.Selector)) {
	csoq.predicates = append(csoq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the CouponSpecialOfferQuery builder.
func (csoq *CouponSpecialOfferQuery) Filter() *CouponSpecialOfferFilter {
	return &CouponSpecialOfferFilter{config: csoq.config, predicateAdder: csoq}
}

// addPredicate implements the predicateAdder interface.
func (m *CouponSpecialOfferMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the CouponSpecialOfferMutation builder.
func (m *CouponSpecialOfferMutation) Filter() *CouponSpecialOfferFilter {
	return &CouponSpecialOfferFilter{config: m.config, predicateAdder: m}
}

// CouponSpecialOfferFilter provides a generic filtering capability at runtime for CouponSpecialOfferQuery.
type CouponSpecialOfferFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *CouponSpecialOfferFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[6].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *CouponSpecialOfferFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(couponspecialoffer.FieldID))
}

// WhereCreatedAt applies the entql uint32 predicate on the created_at field.
func (f *CouponSpecialOfferFilter) WhereCreatedAt(p entql.Uint32P) {
	f.Where(p.Field(couponspecialoffer.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql uint32 predicate on the updated_at field.
func (f *CouponSpecialOfferFilter) WhereUpdatedAt(p entql.Uint32P) {
	f.Where(p.Field(couponspecialoffer.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql uint32 predicate on the deleted_at field.
func (f *CouponSpecialOfferFilter) WhereDeletedAt(p entql.Uint32P) {
	f.Where(p.Field(couponspecialoffer.FieldDeletedAt))
}

// WhereAppID applies the entql [16]byte predicate on the app_id field.
func (f *CouponSpecialOfferFilter) WhereAppID(p entql.ValueP) {
	f.Where(p.Field(couponspecialoffer.FieldAppID))
}

// WhereUserID applies the entql [16]byte predicate on the user_id field.
func (f *CouponSpecialOfferFilter) WhereUserID(p entql.ValueP) {
	f.Where(p.Field(couponspecialoffer.FieldUserID))
}

// WhereAmount applies the entql other predicate on the amount field.
func (f *CouponSpecialOfferFilter) WhereAmount(p entql.OtherP) {
	f.Where(p.Field(couponspecialoffer.FieldAmount))
}

// WhereReleasedByUserID applies the entql [16]byte predicate on the released_by_user_id field.
func (f *CouponSpecialOfferFilter) WhereReleasedByUserID(p entql.ValueP) {
	f.Where(p.Field(couponspecialoffer.FieldReleasedByUserID))
}

// WhereStartAt applies the entql uint32 predicate on the start_at field.
func (f *CouponSpecialOfferFilter) WhereStartAt(p entql.Uint32P) {
	f.Where(p.Field(couponspecialoffer.FieldStartAt))
}

// WhereDurationDays applies the entql uint32 predicate on the duration_days field.
func (f *CouponSpecialOfferFilter) WhereDurationDays(p entql.Uint32P) {
	f.Where(p.Field(couponspecialoffer.FieldDurationDays))
}

// WhereMessage applies the entql string predicate on the message field.
func (f *CouponSpecialOfferFilter) WhereMessage(p entql.StringP) {
	f.Where(p.Field(couponspecialoffer.FieldMessage))
}

// addPredicate implements the predicateAdder interface.
func (eq *EventQuery) addPredicate(pred func(s *sql.Selector)) {
	eq.predicates = append(eq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the EventQuery builder.
func (eq *EventQuery) Filter() *EventFilter {
	return &EventFilter{config: eq.config, predicateAdder: eq}
}

// addPredicate implements the predicateAdder interface.
func (m *EventMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the EventMutation builder.
func (m *EventMutation) Filter() *EventFilter {
	return &EventFilter{config: m.config, predicateAdder: m}
}

// EventFilter provides a generic filtering capability at runtime for EventQuery.
type EventFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *EventFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[7].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *EventFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(event.FieldID))
}

// WhereCreatedAt applies the entql uint32 predicate on the created_at field.
func (f *EventFilter) WhereCreatedAt(p entql.Uint32P) {
	f.Where(p.Field(event.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql uint32 predicate on the updated_at field.
func (f *EventFilter) WhereUpdatedAt(p entql.Uint32P) {
	f.Where(p.Field(event.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql uint32 predicate on the deleted_at field.
func (f *EventFilter) WhereDeletedAt(p entql.Uint32P) {
	f.Where(p.Field(event.FieldDeletedAt))
}

// WhereAppID applies the entql [16]byte predicate on the app_id field.
func (f *EventFilter) WhereAppID(p entql.ValueP) {
	f.Where(p.Field(event.FieldAppID))
}

// WhereEventType applies the entql string predicate on the event_type field.
func (f *EventFilter) WhereEventType(p entql.StringP) {
	f.Where(p.Field(event.FieldEventType))
}

// WhereCouponIds applies the entql json.RawMessage predicate on the coupon_ids field.
func (f *EventFilter) WhereCouponIds(p entql.BytesP) {
	f.Where(p.Field(event.FieldCouponIds))
}

// WhereCredits applies the entql other predicate on the credits field.
func (f *EventFilter) WhereCredits(p entql.OtherP) {
	f.Where(p.Field(event.FieldCredits))
}

// WhereCreditsPerUsd applies the entql other predicate on the credits_per_usd field.
func (f *EventFilter) WhereCreditsPerUsd(p entql.OtherP) {
	f.Where(p.Field(event.FieldCreditsPerUsd))
}

// WhereMaxConsecutive applies the entql uint32 predicate on the max_consecutive field.
func (f *EventFilter) WhereMaxConsecutive(p entql.Uint32P) {
	f.Where(p.Field(event.FieldMaxConsecutive))
}

// WhereGoodID applies the entql [16]byte predicate on the good_id field.
func (f *EventFilter) WhereGoodID(p entql.ValueP) {
	f.Where(p.Field(event.FieldGoodID))
}

// WhereInviterLayers applies the entql uint32 predicate on the inviter_layers field.
func (f *EventFilter) WhereInviterLayers(p entql.Uint32P) {
	f.Where(p.Field(event.FieldInviterLayers))
}

// addPredicate implements the predicateAdder interface.
func (gopq *GoodOrderPercentQuery) addPredicate(pred func(s *sql.Selector)) {
	gopq.predicates = append(gopq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the GoodOrderPercentQuery builder.
func (gopq *GoodOrderPercentQuery) Filter() *GoodOrderPercentFilter {
	return &GoodOrderPercentFilter{config: gopq.config, predicateAdder: gopq}
}

// addPredicate implements the predicateAdder interface.
func (m *GoodOrderPercentMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the GoodOrderPercentMutation builder.
func (m *GoodOrderPercentMutation) Filter() *GoodOrderPercentFilter {
	return &GoodOrderPercentFilter{config: m.config, predicateAdder: m}
}

// GoodOrderPercentFilter provides a generic filtering capability at runtime for GoodOrderPercentQuery.
type GoodOrderPercentFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *GoodOrderPercentFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[8].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *GoodOrderPercentFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(goodorderpercent.FieldID))
}

// WhereCreatedAt applies the entql uint32 predicate on the created_at field.
func (f *GoodOrderPercentFilter) WhereCreatedAt(p entql.Uint32P) {
	f.Where(p.Field(goodorderpercent.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql uint32 predicate on the updated_at field.
func (f *GoodOrderPercentFilter) WhereUpdatedAt(p entql.Uint32P) {
	f.Where(p.Field(goodorderpercent.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql uint32 predicate on the deleted_at field.
func (f *GoodOrderPercentFilter) WhereDeletedAt(p entql.Uint32P) {
	f.Where(p.Field(goodorderpercent.FieldDeletedAt))
}

// WhereAppID applies the entql [16]byte predicate on the app_id field.
func (f *GoodOrderPercentFilter) WhereAppID(p entql.ValueP) {
	f.Where(p.Field(goodorderpercent.FieldAppID))
}

// WhereUserID applies the entql [16]byte predicate on the user_id field.
func (f *GoodOrderPercentFilter) WhereUserID(p entql.ValueP) {
	f.Where(p.Field(goodorderpercent.FieldUserID))
}

// WhereGoodID applies the entql [16]byte predicate on the good_id field.
func (f *GoodOrderPercentFilter) WhereGoodID(p entql.ValueP) {
	f.Where(p.Field(goodorderpercent.FieldGoodID))
}

// WherePercent applies the entql other predicate on the percent field.
func (f *GoodOrderPercentFilter) WherePercent(p entql.OtherP) {
	f.Where(p.Field(goodorderpercent.FieldPercent))
}

// WhereStartAt applies the entql uint32 predicate on the start_at field.
func (f *GoodOrderPercentFilter) WhereStartAt(p entql.Uint32P) {
	f.Where(p.Field(goodorderpercent.FieldStartAt))
}

// WhereEndAt applies the entql uint32 predicate on the end_at field.
func (f *GoodOrderPercentFilter) WhereEndAt(p entql.Uint32P) {
	f.Where(p.Field(goodorderpercent.FieldEndAt))
}

// addPredicate implements the predicateAdder interface.
func (govpq *GoodOrderValuePercentQuery) addPredicate(pred func(s *sql.Selector)) {
	govpq.predicates = append(govpq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the GoodOrderValuePercentQuery builder.
func (govpq *GoodOrderValuePercentQuery) Filter() *GoodOrderValuePercentFilter {
	return &GoodOrderValuePercentFilter{config: govpq.config, predicateAdder: govpq}
}

// addPredicate implements the predicateAdder interface.
func (m *GoodOrderValuePercentMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the GoodOrderValuePercentMutation builder.
func (m *GoodOrderValuePercentMutation) Filter() *GoodOrderValuePercentFilter {
	return &GoodOrderValuePercentFilter{config: m.config, predicateAdder: m}
}

// GoodOrderValuePercentFilter provides a generic filtering capability at runtime for GoodOrderValuePercentQuery.
type GoodOrderValuePercentFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *GoodOrderValuePercentFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[9].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *GoodOrderValuePercentFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(goodordervaluepercent.FieldID))
}

// WhereCreatedAt applies the entql uint32 predicate on the created_at field.
func (f *GoodOrderValuePercentFilter) WhereCreatedAt(p entql.Uint32P) {
	f.Where(p.Field(goodordervaluepercent.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql uint32 predicate on the updated_at field.
func (f *GoodOrderValuePercentFilter) WhereUpdatedAt(p entql.Uint32P) {
	f.Where(p.Field(goodordervaluepercent.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql uint32 predicate on the deleted_at field.
func (f *GoodOrderValuePercentFilter) WhereDeletedAt(p entql.Uint32P) {
	f.Where(p.Field(goodordervaluepercent.FieldDeletedAt))
}

// WhereAppID applies the entql [16]byte predicate on the app_id field.
func (f *GoodOrderValuePercentFilter) WhereAppID(p entql.ValueP) {
	f.Where(p.Field(goodordervaluepercent.FieldAppID))
}

// WhereUserID applies the entql [16]byte predicate on the user_id field.
func (f *GoodOrderValuePercentFilter) WhereUserID(p entql.ValueP) {
	f.Where(p.Field(goodordervaluepercent.FieldUserID))
}

// WhereGoodID applies the entql [16]byte predicate on the good_id field.
func (f *GoodOrderValuePercentFilter) WhereGoodID(p entql.ValueP) {
	f.Where(p.Field(goodordervaluepercent.FieldGoodID))
}

// WherePercent applies the entql other predicate on the percent field.
func (f *GoodOrderValuePercentFilter) WherePercent(p entql.OtherP) {
	f.Where(p.Field(goodordervaluepercent.FieldPercent))
}

// WhereStartAt applies the entql uint32 predicate on the start_at field.
func (f *GoodOrderValuePercentFilter) WhereStartAt(p entql.Uint32P) {
	f.Where(p.Field(goodordervaluepercent.FieldStartAt))
}

// WhereEndAt applies the entql uint32 predicate on the end_at field.
func (f *GoodOrderValuePercentFilter) WhereEndAt(p entql.Uint32P) {
	f.Where(p.Field(goodordervaluepercent.FieldEndAt))
}

// addPredicate implements the predicateAdder interface.
func (icq *InvitationCodeQuery) addPredicate(pred func(s *sql.Selector)) {
	icq.predicates = append(icq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the InvitationCodeQuery builder.
func (icq *InvitationCodeQuery) Filter() *InvitationCodeFilter {
	return &InvitationCodeFilter{config: icq.config, predicateAdder: icq}
}

// addPredicate implements the predicateAdder interface.
func (m *InvitationCodeMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the InvitationCodeMutation builder.
func (m *InvitationCodeMutation) Filter() *InvitationCodeFilter {
	return &InvitationCodeFilter{config: m.config, predicateAdder: m}
}

// InvitationCodeFilter provides a generic filtering capability at runtime for InvitationCodeQuery.
type InvitationCodeFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *InvitationCodeFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[10].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *InvitationCodeFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(invitationcode.FieldID))
}

// WhereCreatedAt applies the entql uint32 predicate on the created_at field.
func (f *InvitationCodeFilter) WhereCreatedAt(p entql.Uint32P) {
	f.Where(p.Field(invitationcode.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql uint32 predicate on the updated_at field.
func (f *InvitationCodeFilter) WhereUpdatedAt(p entql.Uint32P) {
	f.Where(p.Field(invitationcode.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql uint32 predicate on the deleted_at field.
func (f *InvitationCodeFilter) WhereDeletedAt(p entql.Uint32P) {
	f.Where(p.Field(invitationcode.FieldDeletedAt))
}

// WhereAppID applies the entql [16]byte predicate on the app_id field.
func (f *InvitationCodeFilter) WhereAppID(p entql.ValueP) {
	f.Where(p.Field(invitationcode.FieldAppID))
}

// WhereUserID applies the entql [16]byte predicate on the user_id field.
func (f *InvitationCodeFilter) WhereUserID(p entql.ValueP) {
	f.Where(p.Field(invitationcode.FieldUserID))
}

// WhereInvitationCode applies the entql string predicate on the invitation_code field.
func (f *InvitationCodeFilter) WhereInvitationCode(p entql.StringP) {
	f.Where(p.Field(invitationcode.FieldInvitationCode))
}

// WhereDisabled applies the entql bool predicate on the disabled field.
func (f *InvitationCodeFilter) WhereDisabled(p entql.BoolP) {
	f.Where(p.Field(invitationcode.FieldDisabled))
}

// addPredicate implements the predicateAdder interface.
func (pmq *PubsubMessageQuery) addPredicate(pred func(s *sql.Selector)) {
	pmq.predicates = append(pmq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the PubsubMessageQuery builder.
func (pmq *PubsubMessageQuery) Filter() *PubsubMessageFilter {
	return &PubsubMessageFilter{config: pmq.config, predicateAdder: pmq}
}

// addPredicate implements the predicateAdder interface.
func (m *PubsubMessageMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the PubsubMessageMutation builder.
func (m *PubsubMessageMutation) Filter() *PubsubMessageFilter {
	return &PubsubMessageFilter{config: m.config, predicateAdder: m}
}

// PubsubMessageFilter provides a generic filtering capability at runtime for PubsubMessageQuery.
type PubsubMessageFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *PubsubMessageFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[11].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *PubsubMessageFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(pubsubmessage.FieldID))
}

// WhereCreatedAt applies the entql uint32 predicate on the created_at field.
func (f *PubsubMessageFilter) WhereCreatedAt(p entql.Uint32P) {
	f.Where(p.Field(pubsubmessage.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql uint32 predicate on the updated_at field.
func (f *PubsubMessageFilter) WhereUpdatedAt(p entql.Uint32P) {
	f.Where(p.Field(pubsubmessage.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql uint32 predicate on the deleted_at field.
func (f *PubsubMessageFilter) WhereDeletedAt(p entql.Uint32P) {
	f.Where(p.Field(pubsubmessage.FieldDeletedAt))
}

// WhereMessageID applies the entql string predicate on the message_id field.
func (f *PubsubMessageFilter) WhereMessageID(p entql.StringP) {
	f.Where(p.Field(pubsubmessage.FieldMessageID))
}

// WhereState applies the entql string predicate on the state field.
func (f *PubsubMessageFilter) WhereState(p entql.StringP) {
	f.Where(p.Field(pubsubmessage.FieldState))
}

// WhereRespToID applies the entql [16]byte predicate on the resp_to_id field.
func (f *PubsubMessageFilter) WhereRespToID(p entql.ValueP) {
	f.Where(p.Field(pubsubmessage.FieldRespToID))
}

// WhereUndoID applies the entql [16]byte predicate on the undo_id field.
func (f *PubsubMessageFilter) WhereUndoID(p entql.ValueP) {
	f.Where(p.Field(pubsubmessage.FieldUndoID))
}

// WhereArguments applies the entql string predicate on the arguments field.
func (f *PubsubMessageFilter) WhereArguments(p entql.StringP) {
	f.Where(p.Field(pubsubmessage.FieldArguments))
}

// addPredicate implements the predicateAdder interface.
func (rq *RegistrationQuery) addPredicate(pred func(s *sql.Selector)) {
	rq.predicates = append(rq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the RegistrationQuery builder.
func (rq *RegistrationQuery) Filter() *RegistrationFilter {
	return &RegistrationFilter{config: rq.config, predicateAdder: rq}
}

// addPredicate implements the predicateAdder interface.
func (m *RegistrationMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the RegistrationMutation builder.
func (m *RegistrationMutation) Filter() *RegistrationFilter {
	return &RegistrationFilter{config: m.config, predicateAdder: m}
}

// RegistrationFilter provides a generic filtering capability at runtime for RegistrationQuery.
type RegistrationFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *RegistrationFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[12].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *RegistrationFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(registration.FieldID))
}

// WhereCreatedAt applies the entql uint32 predicate on the created_at field.
func (f *RegistrationFilter) WhereCreatedAt(p entql.Uint32P) {
	f.Where(p.Field(registration.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql uint32 predicate on the updated_at field.
func (f *RegistrationFilter) WhereUpdatedAt(p entql.Uint32P) {
	f.Where(p.Field(registration.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql uint32 predicate on the deleted_at field.
func (f *RegistrationFilter) WhereDeletedAt(p entql.Uint32P) {
	f.Where(p.Field(registration.FieldDeletedAt))
}

// WhereAppID applies the entql [16]byte predicate on the app_id field.
func (f *RegistrationFilter) WhereAppID(p entql.ValueP) {
	f.Where(p.Field(registration.FieldAppID))
}

// WhereInviterID applies the entql [16]byte predicate on the inviter_id field.
func (f *RegistrationFilter) WhereInviterID(p entql.ValueP) {
	f.Where(p.Field(registration.FieldInviterID))
}

// WhereInviteeID applies the entql [16]byte predicate on the invitee_id field.
func (f *RegistrationFilter) WhereInviteeID(p entql.ValueP) {
	f.Where(p.Field(registration.FieldInviteeID))
}

// addPredicate implements the predicateAdder interface.
func (sq *StatementQuery) addPredicate(pred func(s *sql.Selector)) {
	sq.predicates = append(sq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the StatementQuery builder.
func (sq *StatementQuery) Filter() *StatementFilter {
	return &StatementFilter{config: sq.config, predicateAdder: sq}
}

// addPredicate implements the predicateAdder interface.
func (m *StatementMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the StatementMutation builder.
func (m *StatementMutation) Filter() *StatementFilter {
	return &StatementFilter{config: m.config, predicateAdder: m}
}

// StatementFilter provides a generic filtering capability at runtime for StatementQuery.
type StatementFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *StatementFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[13].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *StatementFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(statement.FieldID))
}

// WhereCreatedAt applies the entql uint32 predicate on the created_at field.
func (f *StatementFilter) WhereCreatedAt(p entql.Uint32P) {
	f.Where(p.Field(statement.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql uint32 predicate on the updated_at field.
func (f *StatementFilter) WhereUpdatedAt(p entql.Uint32P) {
	f.Where(p.Field(statement.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql uint32 predicate on the deleted_at field.
func (f *StatementFilter) WhereDeletedAt(p entql.Uint32P) {
	f.Where(p.Field(statement.FieldDeletedAt))
}

// WhereAppID applies the entql [16]byte predicate on the app_id field.
func (f *StatementFilter) WhereAppID(p entql.ValueP) {
	f.Where(p.Field(statement.FieldAppID))
}

// WhereUserID applies the entql [16]byte predicate on the user_id field.
func (f *StatementFilter) WhereUserID(p entql.ValueP) {
	f.Where(p.Field(statement.FieldUserID))
}

// WhereDirectContributorID applies the entql [16]byte predicate on the direct_contributor_id field.
func (f *StatementFilter) WhereDirectContributorID(p entql.ValueP) {
	f.Where(p.Field(statement.FieldDirectContributorID))
}

// WhereGoodID applies the entql [16]byte predicate on the good_id field.
func (f *StatementFilter) WhereGoodID(p entql.ValueP) {
	f.Where(p.Field(statement.FieldGoodID))
}

// WhereOrderID applies the entql [16]byte predicate on the order_id field.
func (f *StatementFilter) WhereOrderID(p entql.ValueP) {
	f.Where(p.Field(statement.FieldOrderID))
}

// WhereSelfOrder applies the entql bool predicate on the self_order field.
func (f *StatementFilter) WhereSelfOrder(p entql.BoolP) {
	f.Where(p.Field(statement.FieldSelfOrder))
}

// WherePaymentID applies the entql [16]byte predicate on the payment_id field.
func (f *StatementFilter) WherePaymentID(p entql.ValueP) {
	f.Where(p.Field(statement.FieldPaymentID))
}

// WhereCoinTypeID applies the entql [16]byte predicate on the coin_type_id field.
func (f *StatementFilter) WhereCoinTypeID(p entql.ValueP) {
	f.Where(p.Field(statement.FieldCoinTypeID))
}

// WherePaymentCoinTypeID applies the entql [16]byte predicate on the payment_coin_type_id field.
func (f *StatementFilter) WherePaymentCoinTypeID(p entql.ValueP) {
	f.Where(p.Field(statement.FieldPaymentCoinTypeID))
}

// WherePaymentCoinUsdCurrency applies the entql other predicate on the payment_coin_usd_currency field.
func (f *StatementFilter) WherePaymentCoinUsdCurrency(p entql.OtherP) {
	f.Where(p.Field(statement.FieldPaymentCoinUsdCurrency))
}

// WhereUnits applies the entql uint32 predicate on the units field.
func (f *StatementFilter) WhereUnits(p entql.Uint32P) {
	f.Where(p.Field(statement.FieldUnits))
}

// WhereUnitsV1 applies the entql other predicate on the units_v1 field.
func (f *StatementFilter) WhereUnitsV1(p entql.OtherP) {
	f.Where(p.Field(statement.FieldUnitsV1))
}

// WhereAmount applies the entql other predicate on the amount field.
func (f *StatementFilter) WhereAmount(p entql.OtherP) {
	f.Where(p.Field(statement.FieldAmount))
}

// WhereUsdAmount applies the entql other predicate on the usd_amount field.
func (f *StatementFilter) WhereUsdAmount(p entql.OtherP) {
	f.Where(p.Field(statement.FieldUsdAmount))
}

// WhereCommission applies the entql other predicate on the commission field.
func (f *StatementFilter) WhereCommission(p entql.OtherP) {
	f.Where(p.Field(statement.FieldCommission))
}
