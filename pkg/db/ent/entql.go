// Code generated by ent, DO NOT EDIT.

package ent

import (
	"github.com/NpoolPlatform/inspire-middleware/pkg/db/ent/achievement"
	"github.com/NpoolPlatform/inspire-middleware/pkg/db/ent/appgoodscope"
	"github.com/NpoolPlatform/inspire-middleware/pkg/db/ent/cashcontrol"
	"github.com/NpoolPlatform/inspire-middleware/pkg/db/ent/commission"
	"github.com/NpoolPlatform/inspire-middleware/pkg/db/ent/coupon"
	"github.com/NpoolPlatform/inspire-middleware/pkg/db/ent/couponallocated"
	"github.com/NpoolPlatform/inspire-middleware/pkg/db/ent/couponcoin"
	"github.com/NpoolPlatform/inspire-middleware/pkg/db/ent/couponscope"
	"github.com/NpoolPlatform/inspire-middleware/pkg/db/ent/event"
	"github.com/NpoolPlatform/inspire-middleware/pkg/db/ent/invitationcode"
	"github.com/NpoolPlatform/inspire-middleware/pkg/db/ent/pubsubmessage"
	"github.com/NpoolPlatform/inspire-middleware/pkg/db/ent/registration"
	"github.com/NpoolPlatform/inspire-middleware/pkg/db/ent/statement"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/entql"
	"entgo.io/ent/schema/field"
)

// schemaGraph holds a representation of ent/schema at runtime.
var schemaGraph = func() *sqlgraph.Schema {
	graph := &sqlgraph.Schema{Nodes: make([]*sqlgraph.Node, 13)}
	graph.Nodes[0] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   achievement.Table,
			Columns: achievement.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: achievement.FieldID,
			},
		},
		Type: "Achievement",
		Fields: map[string]*sqlgraph.FieldSpec{
			achievement.FieldCreatedAt:       {Type: field.TypeUint32, Column: achievement.FieldCreatedAt},
			achievement.FieldUpdatedAt:       {Type: field.TypeUint32, Column: achievement.FieldUpdatedAt},
			achievement.FieldDeletedAt:       {Type: field.TypeUint32, Column: achievement.FieldDeletedAt},
			achievement.FieldEntID:           {Type: field.TypeUUID, Column: achievement.FieldEntID},
			achievement.FieldAppID:           {Type: field.TypeUUID, Column: achievement.FieldAppID},
			achievement.FieldUserID:          {Type: field.TypeUUID, Column: achievement.FieldUserID},
			achievement.FieldGoodID:          {Type: field.TypeUUID, Column: achievement.FieldGoodID},
			achievement.FieldAppGoodID:       {Type: field.TypeUUID, Column: achievement.FieldAppGoodID},
			achievement.FieldCoinTypeID:      {Type: field.TypeUUID, Column: achievement.FieldCoinTypeID},
			achievement.FieldTotalUnitsV1:    {Type: field.TypeOther, Column: achievement.FieldTotalUnitsV1},
			achievement.FieldSelfUnitsV1:     {Type: field.TypeOther, Column: achievement.FieldSelfUnitsV1},
			achievement.FieldTotalAmount:     {Type: field.TypeOther, Column: achievement.FieldTotalAmount},
			achievement.FieldSelfAmount:      {Type: field.TypeOther, Column: achievement.FieldSelfAmount},
			achievement.FieldTotalCommission: {Type: field.TypeOther, Column: achievement.FieldTotalCommission},
			achievement.FieldSelfCommission:  {Type: field.TypeOther, Column: achievement.FieldSelfCommission},
		},
	}
	graph.Nodes[1] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   appgoodscope.Table,
			Columns: appgoodscope.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: appgoodscope.FieldID,
			},
		},
		Type: "AppGoodScope",
		Fields: map[string]*sqlgraph.FieldSpec{
			appgoodscope.FieldCreatedAt:   {Type: field.TypeUint32, Column: appgoodscope.FieldCreatedAt},
			appgoodscope.FieldUpdatedAt:   {Type: field.TypeUint32, Column: appgoodscope.FieldUpdatedAt},
			appgoodscope.FieldDeletedAt:   {Type: field.TypeUint32, Column: appgoodscope.FieldDeletedAt},
			appgoodscope.FieldEntID:       {Type: field.TypeUUID, Column: appgoodscope.FieldEntID},
			appgoodscope.FieldAppID:       {Type: field.TypeUUID, Column: appgoodscope.FieldAppID},
			appgoodscope.FieldAppGoodID:   {Type: field.TypeUUID, Column: appgoodscope.FieldAppGoodID},
			appgoodscope.FieldCouponID:    {Type: field.TypeUUID, Column: appgoodscope.FieldCouponID},
			appgoodscope.FieldCouponScope: {Type: field.TypeString, Column: appgoodscope.FieldCouponScope},
		},
	}
	graph.Nodes[2] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   cashcontrol.Table,
			Columns: cashcontrol.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: cashcontrol.FieldID,
			},
		},
		Type: "CashControl",
		Fields: map[string]*sqlgraph.FieldSpec{
			cashcontrol.FieldCreatedAt:   {Type: field.TypeUint32, Column: cashcontrol.FieldCreatedAt},
			cashcontrol.FieldUpdatedAt:   {Type: field.TypeUint32, Column: cashcontrol.FieldUpdatedAt},
			cashcontrol.FieldDeletedAt:   {Type: field.TypeUint32, Column: cashcontrol.FieldDeletedAt},
			cashcontrol.FieldEntID:       {Type: field.TypeUUID, Column: cashcontrol.FieldEntID},
			cashcontrol.FieldAppID:       {Type: field.TypeUUID, Column: cashcontrol.FieldAppID},
			cashcontrol.FieldCouponID:    {Type: field.TypeUUID, Column: cashcontrol.FieldCouponID},
			cashcontrol.FieldControlType: {Type: field.TypeString, Column: cashcontrol.FieldControlType},
			cashcontrol.FieldValue:       {Type: field.TypeOther, Column: cashcontrol.FieldValue},
		},
	}
	graph.Nodes[3] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   commission.Table,
			Columns: commission.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: commission.FieldID,
			},
		},
		Type: "Commission",
		Fields: map[string]*sqlgraph.FieldSpec{
			commission.FieldCreatedAt:        {Type: field.TypeUint32, Column: commission.FieldCreatedAt},
			commission.FieldUpdatedAt:        {Type: field.TypeUint32, Column: commission.FieldUpdatedAt},
			commission.FieldDeletedAt:        {Type: field.TypeUint32, Column: commission.FieldDeletedAt},
			commission.FieldEntID:            {Type: field.TypeUUID, Column: commission.FieldEntID},
			commission.FieldAppID:            {Type: field.TypeUUID, Column: commission.FieldAppID},
			commission.FieldUserID:           {Type: field.TypeUUID, Column: commission.FieldUserID},
			commission.FieldGoodID:           {Type: field.TypeUUID, Column: commission.FieldGoodID},
			commission.FieldAppGoodID:        {Type: field.TypeUUID, Column: commission.FieldAppGoodID},
			commission.FieldAmountOrPercent:  {Type: field.TypeOther, Column: commission.FieldAmountOrPercent},
			commission.FieldStartAt:          {Type: field.TypeUint32, Column: commission.FieldStartAt},
			commission.FieldEndAt:            {Type: field.TypeUint32, Column: commission.FieldEndAt},
			commission.FieldSettleType:       {Type: field.TypeString, Column: commission.FieldSettleType},
			commission.FieldSettleMode:       {Type: field.TypeString, Column: commission.FieldSettleMode},
			commission.FieldSettleInterval:   {Type: field.TypeString, Column: commission.FieldSettleInterval},
			commission.FieldSettleAmountType: {Type: field.TypeString, Column: commission.FieldSettleAmountType},
			commission.FieldThreshold:        {Type: field.TypeOther, Column: commission.FieldThreshold},
			commission.FieldOrderLimit:       {Type: field.TypeUint32, Column: commission.FieldOrderLimit},
		},
	}
	graph.Nodes[4] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   coupon.Table,
			Columns: coupon.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: coupon.FieldID,
			},
		},
		Type: "Coupon",
		Fields: map[string]*sqlgraph.FieldSpec{
			coupon.FieldCreatedAt:           {Type: field.TypeUint32, Column: coupon.FieldCreatedAt},
			coupon.FieldUpdatedAt:           {Type: field.TypeUint32, Column: coupon.FieldUpdatedAt},
			coupon.FieldDeletedAt:           {Type: field.TypeUint32, Column: coupon.FieldDeletedAt},
			coupon.FieldEntID:               {Type: field.TypeUUID, Column: coupon.FieldEntID},
			coupon.FieldAppID:               {Type: field.TypeUUID, Column: coupon.FieldAppID},
			coupon.FieldDenomination:        {Type: field.TypeOther, Column: coupon.FieldDenomination},
			coupon.FieldCirculation:         {Type: field.TypeOther, Column: coupon.FieldCirculation},
			coupon.FieldRandom:              {Type: field.TypeBool, Column: coupon.FieldRandom},
			coupon.FieldIssuedBy:            {Type: field.TypeUUID, Column: coupon.FieldIssuedBy},
			coupon.FieldStartAt:             {Type: field.TypeUint32, Column: coupon.FieldStartAt},
			coupon.FieldEndAt:               {Type: field.TypeUint32, Column: coupon.FieldEndAt},
			coupon.FieldDurationDays:        {Type: field.TypeUint32, Column: coupon.FieldDurationDays},
			coupon.FieldMessage:             {Type: field.TypeString, Column: coupon.FieldMessage},
			coupon.FieldName:                {Type: field.TypeString, Column: coupon.FieldName},
			coupon.FieldAllocated:           {Type: field.TypeOther, Column: coupon.FieldAllocated},
			coupon.FieldCouponType:          {Type: field.TypeString, Column: coupon.FieldCouponType},
			coupon.FieldThreshold:           {Type: field.TypeOther, Column: coupon.FieldThreshold},
			coupon.FieldCouponConstraint:    {Type: field.TypeString, Column: coupon.FieldCouponConstraint},
			coupon.FieldCouponScope:         {Type: field.TypeString, Column: coupon.FieldCouponScope},
			coupon.FieldCashableProbability: {Type: field.TypeOther, Column: coupon.FieldCashableProbability},
		},
	}
	graph.Nodes[5] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   couponallocated.Table,
			Columns: couponallocated.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: couponallocated.FieldID,
			},
		},
		Type: "CouponAllocated",
		Fields: map[string]*sqlgraph.FieldSpec{
			couponallocated.FieldCreatedAt:     {Type: field.TypeUint32, Column: couponallocated.FieldCreatedAt},
			couponallocated.FieldUpdatedAt:     {Type: field.TypeUint32, Column: couponallocated.FieldUpdatedAt},
			couponallocated.FieldDeletedAt:     {Type: field.TypeUint32, Column: couponallocated.FieldDeletedAt},
			couponallocated.FieldEntID:         {Type: field.TypeUUID, Column: couponallocated.FieldEntID},
			couponallocated.FieldAppID:         {Type: field.TypeUUID, Column: couponallocated.FieldAppID},
			couponallocated.FieldUserID:        {Type: field.TypeUUID, Column: couponallocated.FieldUserID},
			couponallocated.FieldCouponID:      {Type: field.TypeUUID, Column: couponallocated.FieldCouponID},
			couponallocated.FieldDenomination:  {Type: field.TypeOther, Column: couponallocated.FieldDenomination},
			couponallocated.FieldUsed:          {Type: field.TypeBool, Column: couponallocated.FieldUsed},
			couponallocated.FieldUsedAt:        {Type: field.TypeUint32, Column: couponallocated.FieldUsedAt},
			couponallocated.FieldUsedByOrderID: {Type: field.TypeUUID, Column: couponallocated.FieldUsedByOrderID},
			couponallocated.FieldStartAt:       {Type: field.TypeUint32, Column: couponallocated.FieldStartAt},
			couponallocated.FieldCouponScope:   {Type: field.TypeString, Column: couponallocated.FieldCouponScope},
			couponallocated.FieldCashable:      {Type: field.TypeBool, Column: couponallocated.FieldCashable},
		},
	}
	graph.Nodes[6] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   couponcoin.Table,
			Columns: couponcoin.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: couponcoin.FieldID,
			},
		},
		Type: "CouponCoin",
		Fields: map[string]*sqlgraph.FieldSpec{
			couponcoin.FieldCreatedAt:  {Type: field.TypeUint32, Column: couponcoin.FieldCreatedAt},
			couponcoin.FieldUpdatedAt:  {Type: field.TypeUint32, Column: couponcoin.FieldUpdatedAt},
			couponcoin.FieldDeletedAt:  {Type: field.TypeUint32, Column: couponcoin.FieldDeletedAt},
			couponcoin.FieldEntID:      {Type: field.TypeUUID, Column: couponcoin.FieldEntID},
			couponcoin.FieldAppID:      {Type: field.TypeUUID, Column: couponcoin.FieldAppID},
			couponcoin.FieldCoinTypeID: {Type: field.TypeUUID, Column: couponcoin.FieldCoinTypeID},
		},
	}
	graph.Nodes[7] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   couponscope.Table,
			Columns: couponscope.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: couponscope.FieldID,
			},
		},
		Type: "CouponScope",
		Fields: map[string]*sqlgraph.FieldSpec{
			couponscope.FieldCreatedAt:   {Type: field.TypeUint32, Column: couponscope.FieldCreatedAt},
			couponscope.FieldUpdatedAt:   {Type: field.TypeUint32, Column: couponscope.FieldUpdatedAt},
			couponscope.FieldDeletedAt:   {Type: field.TypeUint32, Column: couponscope.FieldDeletedAt},
			couponscope.FieldEntID:       {Type: field.TypeUUID, Column: couponscope.FieldEntID},
			couponscope.FieldCouponID:    {Type: field.TypeUUID, Column: couponscope.FieldCouponID},
			couponscope.FieldGoodID:      {Type: field.TypeUUID, Column: couponscope.FieldGoodID},
			couponscope.FieldCouponScope: {Type: field.TypeString, Column: couponscope.FieldCouponScope},
		},
	}
	graph.Nodes[8] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   event.Table,
			Columns: event.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: event.FieldID,
			},
		},
		Type: "Event",
		Fields: map[string]*sqlgraph.FieldSpec{
			event.FieldCreatedAt:      {Type: field.TypeUint32, Column: event.FieldCreatedAt},
			event.FieldUpdatedAt:      {Type: field.TypeUint32, Column: event.FieldUpdatedAt},
			event.FieldDeletedAt:      {Type: field.TypeUint32, Column: event.FieldDeletedAt},
			event.FieldEntID:          {Type: field.TypeUUID, Column: event.FieldEntID},
			event.FieldAppID:          {Type: field.TypeUUID, Column: event.FieldAppID},
			event.FieldEventType:      {Type: field.TypeString, Column: event.FieldEventType},
			event.FieldCouponIds:      {Type: field.TypeJSON, Column: event.FieldCouponIds},
			event.FieldCredits:        {Type: field.TypeOther, Column: event.FieldCredits},
			event.FieldCreditsPerUsd:  {Type: field.TypeOther, Column: event.FieldCreditsPerUsd},
			event.FieldMaxConsecutive: {Type: field.TypeUint32, Column: event.FieldMaxConsecutive},
			event.FieldGoodID:         {Type: field.TypeUUID, Column: event.FieldGoodID},
			event.FieldAppGoodID:      {Type: field.TypeUUID, Column: event.FieldAppGoodID},
			event.FieldInviterLayers:  {Type: field.TypeUint32, Column: event.FieldInviterLayers},
		},
	}
	graph.Nodes[9] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   invitationcode.Table,
			Columns: invitationcode.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: invitationcode.FieldID,
			},
		},
		Type: "InvitationCode",
		Fields: map[string]*sqlgraph.FieldSpec{
			invitationcode.FieldCreatedAt:      {Type: field.TypeUint32, Column: invitationcode.FieldCreatedAt},
			invitationcode.FieldUpdatedAt:      {Type: field.TypeUint32, Column: invitationcode.FieldUpdatedAt},
			invitationcode.FieldDeletedAt:      {Type: field.TypeUint32, Column: invitationcode.FieldDeletedAt},
			invitationcode.FieldEntID:          {Type: field.TypeUUID, Column: invitationcode.FieldEntID},
			invitationcode.FieldAppID:          {Type: field.TypeUUID, Column: invitationcode.FieldAppID},
			invitationcode.FieldUserID:         {Type: field.TypeUUID, Column: invitationcode.FieldUserID},
			invitationcode.FieldInvitationCode: {Type: field.TypeString, Column: invitationcode.FieldInvitationCode},
			invitationcode.FieldDisabled:       {Type: field.TypeBool, Column: invitationcode.FieldDisabled},
		},
	}
	graph.Nodes[10] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   pubsubmessage.Table,
			Columns: pubsubmessage.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: pubsubmessage.FieldID,
			},
		},
		Type: "PubsubMessage",
		Fields: map[string]*sqlgraph.FieldSpec{
			pubsubmessage.FieldCreatedAt: {Type: field.TypeUint32, Column: pubsubmessage.FieldCreatedAt},
			pubsubmessage.FieldUpdatedAt: {Type: field.TypeUint32, Column: pubsubmessage.FieldUpdatedAt},
			pubsubmessage.FieldDeletedAt: {Type: field.TypeUint32, Column: pubsubmessage.FieldDeletedAt},
			pubsubmessage.FieldEntID:     {Type: field.TypeUUID, Column: pubsubmessage.FieldEntID},
			pubsubmessage.FieldMessageID: {Type: field.TypeString, Column: pubsubmessage.FieldMessageID},
			pubsubmessage.FieldState:     {Type: field.TypeString, Column: pubsubmessage.FieldState},
			pubsubmessage.FieldRespToID:  {Type: field.TypeUUID, Column: pubsubmessage.FieldRespToID},
			pubsubmessage.FieldUndoID:    {Type: field.TypeUUID, Column: pubsubmessage.FieldUndoID},
			pubsubmessage.FieldArguments: {Type: field.TypeString, Column: pubsubmessage.FieldArguments},
		},
	}
	graph.Nodes[11] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   registration.Table,
			Columns: registration.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: registration.FieldID,
			},
		},
		Type: "Registration",
		Fields: map[string]*sqlgraph.FieldSpec{
			registration.FieldCreatedAt: {Type: field.TypeUint32, Column: registration.FieldCreatedAt},
			registration.FieldUpdatedAt: {Type: field.TypeUint32, Column: registration.FieldUpdatedAt},
			registration.FieldDeletedAt: {Type: field.TypeUint32, Column: registration.FieldDeletedAt},
			registration.FieldEntID:     {Type: field.TypeUUID, Column: registration.FieldEntID},
			registration.FieldAppID:     {Type: field.TypeUUID, Column: registration.FieldAppID},
			registration.FieldInviterID: {Type: field.TypeUUID, Column: registration.FieldInviterID},
			registration.FieldInviteeID: {Type: field.TypeUUID, Column: registration.FieldInviteeID},
		},
	}
	graph.Nodes[12] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   statement.Table,
			Columns: statement.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: statement.FieldID,
			},
		},
		Type: "Statement",
		Fields: map[string]*sqlgraph.FieldSpec{
			statement.FieldCreatedAt:              {Type: field.TypeUint32, Column: statement.FieldCreatedAt},
			statement.FieldUpdatedAt:              {Type: field.TypeUint32, Column: statement.FieldUpdatedAt},
			statement.FieldDeletedAt:              {Type: field.TypeUint32, Column: statement.FieldDeletedAt},
			statement.FieldEntID:                  {Type: field.TypeUUID, Column: statement.FieldEntID},
			statement.FieldAppID:                  {Type: field.TypeUUID, Column: statement.FieldAppID},
			statement.FieldUserID:                 {Type: field.TypeUUID, Column: statement.FieldUserID},
			statement.FieldDirectContributorID:    {Type: field.TypeUUID, Column: statement.FieldDirectContributorID},
			statement.FieldGoodID:                 {Type: field.TypeUUID, Column: statement.FieldGoodID},
			statement.FieldAppGoodID:              {Type: field.TypeUUID, Column: statement.FieldAppGoodID},
			statement.FieldOrderID:                {Type: field.TypeUUID, Column: statement.FieldOrderID},
			statement.FieldSelfOrder:              {Type: field.TypeBool, Column: statement.FieldSelfOrder},
			statement.FieldPaymentID:              {Type: field.TypeUUID, Column: statement.FieldPaymentID},
			statement.FieldCoinTypeID:             {Type: field.TypeUUID, Column: statement.FieldCoinTypeID},
			statement.FieldPaymentCoinTypeID:      {Type: field.TypeUUID, Column: statement.FieldPaymentCoinTypeID},
			statement.FieldPaymentCoinUsdCurrency: {Type: field.TypeOther, Column: statement.FieldPaymentCoinUsdCurrency},
			statement.FieldUnits:                  {Type: field.TypeUint32, Column: statement.FieldUnits},
			statement.FieldUnitsV1:                {Type: field.TypeOther, Column: statement.FieldUnitsV1},
			statement.FieldAmount:                 {Type: field.TypeOther, Column: statement.FieldAmount},
			statement.FieldUsdAmount:              {Type: field.TypeOther, Column: statement.FieldUsdAmount},
			statement.FieldCommission:             {Type: field.TypeOther, Column: statement.FieldCommission},
		},
	}
	return graph
}()

// predicateAdder wraps the addPredicate method.
// All update, update-one and query builders implement this interface.
type predicateAdder interface {
	addPredicate(func(s *sql.Selector))
}

// addPredicate implements the predicateAdder interface.
func (aq *AchievementQuery) addPredicate(pred func(s *sql.Selector)) {
	aq.predicates = append(aq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the AchievementQuery builder.
func (aq *AchievementQuery) Filter() *AchievementFilter {
	return &AchievementFilter{config: aq.config, predicateAdder: aq}
}

// addPredicate implements the predicateAdder interface.
func (m *AchievementMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the AchievementMutation builder.
func (m *AchievementMutation) Filter() *AchievementFilter {
	return &AchievementFilter{config: m.config, predicateAdder: m}
}

// AchievementFilter provides a generic filtering capability at runtime for AchievementQuery.
type AchievementFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *AchievementFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[0].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint32 predicate on the id field.
func (f *AchievementFilter) WhereID(p entql.Uint32P) {
	f.Where(p.Field(achievement.FieldID))
}

// WhereCreatedAt applies the entql uint32 predicate on the created_at field.
func (f *AchievementFilter) WhereCreatedAt(p entql.Uint32P) {
	f.Where(p.Field(achievement.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql uint32 predicate on the updated_at field.
func (f *AchievementFilter) WhereUpdatedAt(p entql.Uint32P) {
	f.Where(p.Field(achievement.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql uint32 predicate on the deleted_at field.
func (f *AchievementFilter) WhereDeletedAt(p entql.Uint32P) {
	f.Where(p.Field(achievement.FieldDeletedAt))
}

// WhereEntID applies the entql [16]byte predicate on the ent_id field.
func (f *AchievementFilter) WhereEntID(p entql.ValueP) {
	f.Where(p.Field(achievement.FieldEntID))
}

// WhereAppID applies the entql [16]byte predicate on the app_id field.
func (f *AchievementFilter) WhereAppID(p entql.ValueP) {
	f.Where(p.Field(achievement.FieldAppID))
}

// WhereUserID applies the entql [16]byte predicate on the user_id field.
func (f *AchievementFilter) WhereUserID(p entql.ValueP) {
	f.Where(p.Field(achievement.FieldUserID))
}

// WhereGoodID applies the entql [16]byte predicate on the good_id field.
func (f *AchievementFilter) WhereGoodID(p entql.ValueP) {
	f.Where(p.Field(achievement.FieldGoodID))
}

// WhereAppGoodID applies the entql [16]byte predicate on the app_good_id field.
func (f *AchievementFilter) WhereAppGoodID(p entql.ValueP) {
	f.Where(p.Field(achievement.FieldAppGoodID))
}

// WhereCoinTypeID applies the entql [16]byte predicate on the coin_type_id field.
func (f *AchievementFilter) WhereCoinTypeID(p entql.ValueP) {
	f.Where(p.Field(achievement.FieldCoinTypeID))
}

// WhereTotalUnitsV1 applies the entql other predicate on the total_units_v1 field.
func (f *AchievementFilter) WhereTotalUnitsV1(p entql.OtherP) {
	f.Where(p.Field(achievement.FieldTotalUnitsV1))
}

// WhereSelfUnitsV1 applies the entql other predicate on the self_units_v1 field.
func (f *AchievementFilter) WhereSelfUnitsV1(p entql.OtherP) {
	f.Where(p.Field(achievement.FieldSelfUnitsV1))
}

// WhereTotalAmount applies the entql other predicate on the total_amount field.
func (f *AchievementFilter) WhereTotalAmount(p entql.OtherP) {
	f.Where(p.Field(achievement.FieldTotalAmount))
}

// WhereSelfAmount applies the entql other predicate on the self_amount field.
func (f *AchievementFilter) WhereSelfAmount(p entql.OtherP) {
	f.Where(p.Field(achievement.FieldSelfAmount))
}

// WhereTotalCommission applies the entql other predicate on the total_commission field.
func (f *AchievementFilter) WhereTotalCommission(p entql.OtherP) {
	f.Where(p.Field(achievement.FieldTotalCommission))
}

// WhereSelfCommission applies the entql other predicate on the self_commission field.
func (f *AchievementFilter) WhereSelfCommission(p entql.OtherP) {
	f.Where(p.Field(achievement.FieldSelfCommission))
}

// addPredicate implements the predicateAdder interface.
func (agsq *AppGoodScopeQuery) addPredicate(pred func(s *sql.Selector)) {
	agsq.predicates = append(agsq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the AppGoodScopeQuery builder.
func (agsq *AppGoodScopeQuery) Filter() *AppGoodScopeFilter {
	return &AppGoodScopeFilter{config: agsq.config, predicateAdder: agsq}
}

// addPredicate implements the predicateAdder interface.
func (m *AppGoodScopeMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the AppGoodScopeMutation builder.
func (m *AppGoodScopeMutation) Filter() *AppGoodScopeFilter {
	return &AppGoodScopeFilter{config: m.config, predicateAdder: m}
}

// AppGoodScopeFilter provides a generic filtering capability at runtime for AppGoodScopeQuery.
type AppGoodScopeFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *AppGoodScopeFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[1].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint32 predicate on the id field.
func (f *AppGoodScopeFilter) WhereID(p entql.Uint32P) {
	f.Where(p.Field(appgoodscope.FieldID))
}

// WhereCreatedAt applies the entql uint32 predicate on the created_at field.
func (f *AppGoodScopeFilter) WhereCreatedAt(p entql.Uint32P) {
	f.Where(p.Field(appgoodscope.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql uint32 predicate on the updated_at field.
func (f *AppGoodScopeFilter) WhereUpdatedAt(p entql.Uint32P) {
	f.Where(p.Field(appgoodscope.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql uint32 predicate on the deleted_at field.
func (f *AppGoodScopeFilter) WhereDeletedAt(p entql.Uint32P) {
	f.Where(p.Field(appgoodscope.FieldDeletedAt))
}

// WhereEntID applies the entql [16]byte predicate on the ent_id field.
func (f *AppGoodScopeFilter) WhereEntID(p entql.ValueP) {
	f.Where(p.Field(appgoodscope.FieldEntID))
}

// WhereAppID applies the entql [16]byte predicate on the app_id field.
func (f *AppGoodScopeFilter) WhereAppID(p entql.ValueP) {
	f.Where(p.Field(appgoodscope.FieldAppID))
}

// WhereAppGoodID applies the entql [16]byte predicate on the app_good_id field.
func (f *AppGoodScopeFilter) WhereAppGoodID(p entql.ValueP) {
	f.Where(p.Field(appgoodscope.FieldAppGoodID))
}

// WhereCouponID applies the entql [16]byte predicate on the coupon_id field.
func (f *AppGoodScopeFilter) WhereCouponID(p entql.ValueP) {
	f.Where(p.Field(appgoodscope.FieldCouponID))
}

// WhereCouponScope applies the entql string predicate on the coupon_scope field.
func (f *AppGoodScopeFilter) WhereCouponScope(p entql.StringP) {
	f.Where(p.Field(appgoodscope.FieldCouponScope))
}

// addPredicate implements the predicateAdder interface.
func (ccq *CashControlQuery) addPredicate(pred func(s *sql.Selector)) {
	ccq.predicates = append(ccq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the CashControlQuery builder.
func (ccq *CashControlQuery) Filter() *CashControlFilter {
	return &CashControlFilter{config: ccq.config, predicateAdder: ccq}
}

// addPredicate implements the predicateAdder interface.
func (m *CashControlMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the CashControlMutation builder.
func (m *CashControlMutation) Filter() *CashControlFilter {
	return &CashControlFilter{config: m.config, predicateAdder: m}
}

// CashControlFilter provides a generic filtering capability at runtime for CashControlQuery.
type CashControlFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *CashControlFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[2].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint32 predicate on the id field.
func (f *CashControlFilter) WhereID(p entql.Uint32P) {
	f.Where(p.Field(cashcontrol.FieldID))
}

// WhereCreatedAt applies the entql uint32 predicate on the created_at field.
func (f *CashControlFilter) WhereCreatedAt(p entql.Uint32P) {
	f.Where(p.Field(cashcontrol.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql uint32 predicate on the updated_at field.
func (f *CashControlFilter) WhereUpdatedAt(p entql.Uint32P) {
	f.Where(p.Field(cashcontrol.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql uint32 predicate on the deleted_at field.
func (f *CashControlFilter) WhereDeletedAt(p entql.Uint32P) {
	f.Where(p.Field(cashcontrol.FieldDeletedAt))
}

// WhereEntID applies the entql [16]byte predicate on the ent_id field.
func (f *CashControlFilter) WhereEntID(p entql.ValueP) {
	f.Where(p.Field(cashcontrol.FieldEntID))
}

// WhereAppID applies the entql [16]byte predicate on the app_id field.
func (f *CashControlFilter) WhereAppID(p entql.ValueP) {
	f.Where(p.Field(cashcontrol.FieldAppID))
}

// WhereCouponID applies the entql [16]byte predicate on the coupon_id field.
func (f *CashControlFilter) WhereCouponID(p entql.ValueP) {
	f.Where(p.Field(cashcontrol.FieldCouponID))
}

// WhereControlType applies the entql string predicate on the control_type field.
func (f *CashControlFilter) WhereControlType(p entql.StringP) {
	f.Where(p.Field(cashcontrol.FieldControlType))
}

// WhereValue applies the entql other predicate on the value field.
func (f *CashControlFilter) WhereValue(p entql.OtherP) {
	f.Where(p.Field(cashcontrol.FieldValue))
}

// addPredicate implements the predicateAdder interface.
func (cq *CommissionQuery) addPredicate(pred func(s *sql.Selector)) {
	cq.predicates = append(cq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the CommissionQuery builder.
func (cq *CommissionQuery) Filter() *CommissionFilter {
	return &CommissionFilter{config: cq.config, predicateAdder: cq}
}

// addPredicate implements the predicateAdder interface.
func (m *CommissionMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the CommissionMutation builder.
func (m *CommissionMutation) Filter() *CommissionFilter {
	return &CommissionFilter{config: m.config, predicateAdder: m}
}

// CommissionFilter provides a generic filtering capability at runtime for CommissionQuery.
type CommissionFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *CommissionFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[3].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint32 predicate on the id field.
func (f *CommissionFilter) WhereID(p entql.Uint32P) {
	f.Where(p.Field(commission.FieldID))
}

// WhereCreatedAt applies the entql uint32 predicate on the created_at field.
func (f *CommissionFilter) WhereCreatedAt(p entql.Uint32P) {
	f.Where(p.Field(commission.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql uint32 predicate on the updated_at field.
func (f *CommissionFilter) WhereUpdatedAt(p entql.Uint32P) {
	f.Where(p.Field(commission.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql uint32 predicate on the deleted_at field.
func (f *CommissionFilter) WhereDeletedAt(p entql.Uint32P) {
	f.Where(p.Field(commission.FieldDeletedAt))
}

// WhereEntID applies the entql [16]byte predicate on the ent_id field.
func (f *CommissionFilter) WhereEntID(p entql.ValueP) {
	f.Where(p.Field(commission.FieldEntID))
}

// WhereAppID applies the entql [16]byte predicate on the app_id field.
func (f *CommissionFilter) WhereAppID(p entql.ValueP) {
	f.Where(p.Field(commission.FieldAppID))
}

// WhereUserID applies the entql [16]byte predicate on the user_id field.
func (f *CommissionFilter) WhereUserID(p entql.ValueP) {
	f.Where(p.Field(commission.FieldUserID))
}

// WhereGoodID applies the entql [16]byte predicate on the good_id field.
func (f *CommissionFilter) WhereGoodID(p entql.ValueP) {
	f.Where(p.Field(commission.FieldGoodID))
}

// WhereAppGoodID applies the entql [16]byte predicate on the app_good_id field.
func (f *CommissionFilter) WhereAppGoodID(p entql.ValueP) {
	f.Where(p.Field(commission.FieldAppGoodID))
}

// WhereAmountOrPercent applies the entql other predicate on the amount_or_percent field.
func (f *CommissionFilter) WhereAmountOrPercent(p entql.OtherP) {
	f.Where(p.Field(commission.FieldAmountOrPercent))
}

// WhereStartAt applies the entql uint32 predicate on the start_at field.
func (f *CommissionFilter) WhereStartAt(p entql.Uint32P) {
	f.Where(p.Field(commission.FieldStartAt))
}

// WhereEndAt applies the entql uint32 predicate on the end_at field.
func (f *CommissionFilter) WhereEndAt(p entql.Uint32P) {
	f.Where(p.Field(commission.FieldEndAt))
}

// WhereSettleType applies the entql string predicate on the settle_type field.
func (f *CommissionFilter) WhereSettleType(p entql.StringP) {
	f.Where(p.Field(commission.FieldSettleType))
}

// WhereSettleMode applies the entql string predicate on the settle_mode field.
func (f *CommissionFilter) WhereSettleMode(p entql.StringP) {
	f.Where(p.Field(commission.FieldSettleMode))
}

// WhereSettleInterval applies the entql string predicate on the settle_interval field.
func (f *CommissionFilter) WhereSettleInterval(p entql.StringP) {
	f.Where(p.Field(commission.FieldSettleInterval))
}

// WhereSettleAmountType applies the entql string predicate on the settle_amount_type field.
func (f *CommissionFilter) WhereSettleAmountType(p entql.StringP) {
	f.Where(p.Field(commission.FieldSettleAmountType))
}

// WhereThreshold applies the entql other predicate on the threshold field.
func (f *CommissionFilter) WhereThreshold(p entql.OtherP) {
	f.Where(p.Field(commission.FieldThreshold))
}

// WhereOrderLimit applies the entql uint32 predicate on the order_limit field.
func (f *CommissionFilter) WhereOrderLimit(p entql.Uint32P) {
	f.Where(p.Field(commission.FieldOrderLimit))
}

// addPredicate implements the predicateAdder interface.
func (cq *CouponQuery) addPredicate(pred func(s *sql.Selector)) {
	cq.predicates = append(cq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the CouponQuery builder.
func (cq *CouponQuery) Filter() *CouponFilter {
	return &CouponFilter{config: cq.config, predicateAdder: cq}
}

// addPredicate implements the predicateAdder interface.
func (m *CouponMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the CouponMutation builder.
func (m *CouponMutation) Filter() *CouponFilter {
	return &CouponFilter{config: m.config, predicateAdder: m}
}

// CouponFilter provides a generic filtering capability at runtime for CouponQuery.
type CouponFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *CouponFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[4].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint32 predicate on the id field.
func (f *CouponFilter) WhereID(p entql.Uint32P) {
	f.Where(p.Field(coupon.FieldID))
}

// WhereCreatedAt applies the entql uint32 predicate on the created_at field.
func (f *CouponFilter) WhereCreatedAt(p entql.Uint32P) {
	f.Where(p.Field(coupon.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql uint32 predicate on the updated_at field.
func (f *CouponFilter) WhereUpdatedAt(p entql.Uint32P) {
	f.Where(p.Field(coupon.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql uint32 predicate on the deleted_at field.
func (f *CouponFilter) WhereDeletedAt(p entql.Uint32P) {
	f.Where(p.Field(coupon.FieldDeletedAt))
}

// WhereEntID applies the entql [16]byte predicate on the ent_id field.
func (f *CouponFilter) WhereEntID(p entql.ValueP) {
	f.Where(p.Field(coupon.FieldEntID))
}

// WhereAppID applies the entql [16]byte predicate on the app_id field.
func (f *CouponFilter) WhereAppID(p entql.ValueP) {
	f.Where(p.Field(coupon.FieldAppID))
}

// WhereDenomination applies the entql other predicate on the denomination field.
func (f *CouponFilter) WhereDenomination(p entql.OtherP) {
	f.Where(p.Field(coupon.FieldDenomination))
}

// WhereCirculation applies the entql other predicate on the circulation field.
func (f *CouponFilter) WhereCirculation(p entql.OtherP) {
	f.Where(p.Field(coupon.FieldCirculation))
}

// WhereRandom applies the entql bool predicate on the random field.
func (f *CouponFilter) WhereRandom(p entql.BoolP) {
	f.Where(p.Field(coupon.FieldRandom))
}

// WhereIssuedBy applies the entql [16]byte predicate on the issued_by field.
func (f *CouponFilter) WhereIssuedBy(p entql.ValueP) {
	f.Where(p.Field(coupon.FieldIssuedBy))
}

// WhereStartAt applies the entql uint32 predicate on the start_at field.
func (f *CouponFilter) WhereStartAt(p entql.Uint32P) {
	f.Where(p.Field(coupon.FieldStartAt))
}

// WhereEndAt applies the entql uint32 predicate on the end_at field.
func (f *CouponFilter) WhereEndAt(p entql.Uint32P) {
	f.Where(p.Field(coupon.FieldEndAt))
}

// WhereDurationDays applies the entql uint32 predicate on the duration_days field.
func (f *CouponFilter) WhereDurationDays(p entql.Uint32P) {
	f.Where(p.Field(coupon.FieldDurationDays))
}

// WhereMessage applies the entql string predicate on the message field.
func (f *CouponFilter) WhereMessage(p entql.StringP) {
	f.Where(p.Field(coupon.FieldMessage))
}

// WhereName applies the entql string predicate on the name field.
func (f *CouponFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(coupon.FieldName))
}

// WhereAllocated applies the entql other predicate on the allocated field.
func (f *CouponFilter) WhereAllocated(p entql.OtherP) {
	f.Where(p.Field(coupon.FieldAllocated))
}

// WhereCouponType applies the entql string predicate on the coupon_type field.
func (f *CouponFilter) WhereCouponType(p entql.StringP) {
	f.Where(p.Field(coupon.FieldCouponType))
}

// WhereThreshold applies the entql other predicate on the threshold field.
func (f *CouponFilter) WhereThreshold(p entql.OtherP) {
	f.Where(p.Field(coupon.FieldThreshold))
}

// WhereCouponConstraint applies the entql string predicate on the coupon_constraint field.
func (f *CouponFilter) WhereCouponConstraint(p entql.StringP) {
	f.Where(p.Field(coupon.FieldCouponConstraint))
}

// WhereCouponScope applies the entql string predicate on the coupon_scope field.
func (f *CouponFilter) WhereCouponScope(p entql.StringP) {
	f.Where(p.Field(coupon.FieldCouponScope))
}

// WhereCashableProbability applies the entql other predicate on the cashable_probability field.
func (f *CouponFilter) WhereCashableProbability(p entql.OtherP) {
	f.Where(p.Field(coupon.FieldCashableProbability))
}

// addPredicate implements the predicateAdder interface.
func (caq *CouponAllocatedQuery) addPredicate(pred func(s *sql.Selector)) {
	caq.predicates = append(caq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the CouponAllocatedQuery builder.
func (caq *CouponAllocatedQuery) Filter() *CouponAllocatedFilter {
	return &CouponAllocatedFilter{config: caq.config, predicateAdder: caq}
}

// addPredicate implements the predicateAdder interface.
func (m *CouponAllocatedMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the CouponAllocatedMutation builder.
func (m *CouponAllocatedMutation) Filter() *CouponAllocatedFilter {
	return &CouponAllocatedFilter{config: m.config, predicateAdder: m}
}

// CouponAllocatedFilter provides a generic filtering capability at runtime for CouponAllocatedQuery.
type CouponAllocatedFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *CouponAllocatedFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[5].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint32 predicate on the id field.
func (f *CouponAllocatedFilter) WhereID(p entql.Uint32P) {
	f.Where(p.Field(couponallocated.FieldID))
}

// WhereCreatedAt applies the entql uint32 predicate on the created_at field.
func (f *CouponAllocatedFilter) WhereCreatedAt(p entql.Uint32P) {
	f.Where(p.Field(couponallocated.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql uint32 predicate on the updated_at field.
func (f *CouponAllocatedFilter) WhereUpdatedAt(p entql.Uint32P) {
	f.Where(p.Field(couponallocated.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql uint32 predicate on the deleted_at field.
func (f *CouponAllocatedFilter) WhereDeletedAt(p entql.Uint32P) {
	f.Where(p.Field(couponallocated.FieldDeletedAt))
}

// WhereEntID applies the entql [16]byte predicate on the ent_id field.
func (f *CouponAllocatedFilter) WhereEntID(p entql.ValueP) {
	f.Where(p.Field(couponallocated.FieldEntID))
}

// WhereAppID applies the entql [16]byte predicate on the app_id field.
func (f *CouponAllocatedFilter) WhereAppID(p entql.ValueP) {
	f.Where(p.Field(couponallocated.FieldAppID))
}

// WhereUserID applies the entql [16]byte predicate on the user_id field.
func (f *CouponAllocatedFilter) WhereUserID(p entql.ValueP) {
	f.Where(p.Field(couponallocated.FieldUserID))
}

// WhereCouponID applies the entql [16]byte predicate on the coupon_id field.
func (f *CouponAllocatedFilter) WhereCouponID(p entql.ValueP) {
	f.Where(p.Field(couponallocated.FieldCouponID))
}

// WhereDenomination applies the entql other predicate on the denomination field.
func (f *CouponAllocatedFilter) WhereDenomination(p entql.OtherP) {
	f.Where(p.Field(couponallocated.FieldDenomination))
}

// WhereUsed applies the entql bool predicate on the used field.
func (f *CouponAllocatedFilter) WhereUsed(p entql.BoolP) {
	f.Where(p.Field(couponallocated.FieldUsed))
}

// WhereUsedAt applies the entql uint32 predicate on the used_at field.
func (f *CouponAllocatedFilter) WhereUsedAt(p entql.Uint32P) {
	f.Where(p.Field(couponallocated.FieldUsedAt))
}

// WhereUsedByOrderID applies the entql [16]byte predicate on the used_by_order_id field.
func (f *CouponAllocatedFilter) WhereUsedByOrderID(p entql.ValueP) {
	f.Where(p.Field(couponallocated.FieldUsedByOrderID))
}

// WhereStartAt applies the entql uint32 predicate on the start_at field.
func (f *CouponAllocatedFilter) WhereStartAt(p entql.Uint32P) {
	f.Where(p.Field(couponallocated.FieldStartAt))
}

// WhereCouponScope applies the entql string predicate on the coupon_scope field.
func (f *CouponAllocatedFilter) WhereCouponScope(p entql.StringP) {
	f.Where(p.Field(couponallocated.FieldCouponScope))
}

// WhereCashable applies the entql bool predicate on the cashable field.
func (f *CouponAllocatedFilter) WhereCashable(p entql.BoolP) {
	f.Where(p.Field(couponallocated.FieldCashable))
}

// addPredicate implements the predicateAdder interface.
func (ccq *CouponCoinQuery) addPredicate(pred func(s *sql.Selector)) {
	ccq.predicates = append(ccq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the CouponCoinQuery builder.
func (ccq *CouponCoinQuery) Filter() *CouponCoinFilter {
	return &CouponCoinFilter{config: ccq.config, predicateAdder: ccq}
}

// addPredicate implements the predicateAdder interface.
func (m *CouponCoinMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the CouponCoinMutation builder.
func (m *CouponCoinMutation) Filter() *CouponCoinFilter {
	return &CouponCoinFilter{config: m.config, predicateAdder: m}
}

// CouponCoinFilter provides a generic filtering capability at runtime for CouponCoinQuery.
type CouponCoinFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *CouponCoinFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[6].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint32 predicate on the id field.
func (f *CouponCoinFilter) WhereID(p entql.Uint32P) {
	f.Where(p.Field(couponcoin.FieldID))
}

// WhereCreatedAt applies the entql uint32 predicate on the created_at field.
func (f *CouponCoinFilter) WhereCreatedAt(p entql.Uint32P) {
	f.Where(p.Field(couponcoin.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql uint32 predicate on the updated_at field.
func (f *CouponCoinFilter) WhereUpdatedAt(p entql.Uint32P) {
	f.Where(p.Field(couponcoin.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql uint32 predicate on the deleted_at field.
func (f *CouponCoinFilter) WhereDeletedAt(p entql.Uint32P) {
	f.Where(p.Field(couponcoin.FieldDeletedAt))
}

// WhereEntID applies the entql [16]byte predicate on the ent_id field.
func (f *CouponCoinFilter) WhereEntID(p entql.ValueP) {
	f.Where(p.Field(couponcoin.FieldEntID))
}

// WhereAppID applies the entql [16]byte predicate on the app_id field.
func (f *CouponCoinFilter) WhereAppID(p entql.ValueP) {
	f.Where(p.Field(couponcoin.FieldAppID))
}

// WhereCoinTypeID applies the entql [16]byte predicate on the coin_type_id field.
func (f *CouponCoinFilter) WhereCoinTypeID(p entql.ValueP) {
	f.Where(p.Field(couponcoin.FieldCoinTypeID))
}

// addPredicate implements the predicateAdder interface.
func (csq *CouponScopeQuery) addPredicate(pred func(s *sql.Selector)) {
	csq.predicates = append(csq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the CouponScopeQuery builder.
func (csq *CouponScopeQuery) Filter() *CouponScopeFilter {
	return &CouponScopeFilter{config: csq.config, predicateAdder: csq}
}

// addPredicate implements the predicateAdder interface.
func (m *CouponScopeMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the CouponScopeMutation builder.
func (m *CouponScopeMutation) Filter() *CouponScopeFilter {
	return &CouponScopeFilter{config: m.config, predicateAdder: m}
}

// CouponScopeFilter provides a generic filtering capability at runtime for CouponScopeQuery.
type CouponScopeFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *CouponScopeFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[7].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint32 predicate on the id field.
func (f *CouponScopeFilter) WhereID(p entql.Uint32P) {
	f.Where(p.Field(couponscope.FieldID))
}

// WhereCreatedAt applies the entql uint32 predicate on the created_at field.
func (f *CouponScopeFilter) WhereCreatedAt(p entql.Uint32P) {
	f.Where(p.Field(couponscope.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql uint32 predicate on the updated_at field.
func (f *CouponScopeFilter) WhereUpdatedAt(p entql.Uint32P) {
	f.Where(p.Field(couponscope.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql uint32 predicate on the deleted_at field.
func (f *CouponScopeFilter) WhereDeletedAt(p entql.Uint32P) {
	f.Where(p.Field(couponscope.FieldDeletedAt))
}

// WhereEntID applies the entql [16]byte predicate on the ent_id field.
func (f *CouponScopeFilter) WhereEntID(p entql.ValueP) {
	f.Where(p.Field(couponscope.FieldEntID))
}

// WhereCouponID applies the entql [16]byte predicate on the coupon_id field.
func (f *CouponScopeFilter) WhereCouponID(p entql.ValueP) {
	f.Where(p.Field(couponscope.FieldCouponID))
}

// WhereGoodID applies the entql [16]byte predicate on the good_id field.
func (f *CouponScopeFilter) WhereGoodID(p entql.ValueP) {
	f.Where(p.Field(couponscope.FieldGoodID))
}

// WhereCouponScope applies the entql string predicate on the coupon_scope field.
func (f *CouponScopeFilter) WhereCouponScope(p entql.StringP) {
	f.Where(p.Field(couponscope.FieldCouponScope))
}

// addPredicate implements the predicateAdder interface.
func (eq *EventQuery) addPredicate(pred func(s *sql.Selector)) {
	eq.predicates = append(eq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the EventQuery builder.
func (eq *EventQuery) Filter() *EventFilter {
	return &EventFilter{config: eq.config, predicateAdder: eq}
}

// addPredicate implements the predicateAdder interface.
func (m *EventMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the EventMutation builder.
func (m *EventMutation) Filter() *EventFilter {
	return &EventFilter{config: m.config, predicateAdder: m}
}

// EventFilter provides a generic filtering capability at runtime for EventQuery.
type EventFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *EventFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[8].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint32 predicate on the id field.
func (f *EventFilter) WhereID(p entql.Uint32P) {
	f.Where(p.Field(event.FieldID))
}

// WhereCreatedAt applies the entql uint32 predicate on the created_at field.
func (f *EventFilter) WhereCreatedAt(p entql.Uint32P) {
	f.Where(p.Field(event.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql uint32 predicate on the updated_at field.
func (f *EventFilter) WhereUpdatedAt(p entql.Uint32P) {
	f.Where(p.Field(event.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql uint32 predicate on the deleted_at field.
func (f *EventFilter) WhereDeletedAt(p entql.Uint32P) {
	f.Where(p.Field(event.FieldDeletedAt))
}

// WhereEntID applies the entql [16]byte predicate on the ent_id field.
func (f *EventFilter) WhereEntID(p entql.ValueP) {
	f.Where(p.Field(event.FieldEntID))
}

// WhereAppID applies the entql [16]byte predicate on the app_id field.
func (f *EventFilter) WhereAppID(p entql.ValueP) {
	f.Where(p.Field(event.FieldAppID))
}

// WhereEventType applies the entql string predicate on the event_type field.
func (f *EventFilter) WhereEventType(p entql.StringP) {
	f.Where(p.Field(event.FieldEventType))
}

// WhereCouponIds applies the entql json.RawMessage predicate on the coupon_ids field.
func (f *EventFilter) WhereCouponIds(p entql.BytesP) {
	f.Where(p.Field(event.FieldCouponIds))
}

// WhereCredits applies the entql other predicate on the credits field.
func (f *EventFilter) WhereCredits(p entql.OtherP) {
	f.Where(p.Field(event.FieldCredits))
}

// WhereCreditsPerUsd applies the entql other predicate on the credits_per_usd field.
func (f *EventFilter) WhereCreditsPerUsd(p entql.OtherP) {
	f.Where(p.Field(event.FieldCreditsPerUsd))
}

// WhereMaxConsecutive applies the entql uint32 predicate on the max_consecutive field.
func (f *EventFilter) WhereMaxConsecutive(p entql.Uint32P) {
	f.Where(p.Field(event.FieldMaxConsecutive))
}

// WhereGoodID applies the entql [16]byte predicate on the good_id field.
func (f *EventFilter) WhereGoodID(p entql.ValueP) {
	f.Where(p.Field(event.FieldGoodID))
}

// WhereAppGoodID applies the entql [16]byte predicate on the app_good_id field.
func (f *EventFilter) WhereAppGoodID(p entql.ValueP) {
	f.Where(p.Field(event.FieldAppGoodID))
}

// WhereInviterLayers applies the entql uint32 predicate on the inviter_layers field.
func (f *EventFilter) WhereInviterLayers(p entql.Uint32P) {
	f.Where(p.Field(event.FieldInviterLayers))
}

// addPredicate implements the predicateAdder interface.
func (icq *InvitationCodeQuery) addPredicate(pred func(s *sql.Selector)) {
	icq.predicates = append(icq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the InvitationCodeQuery builder.
func (icq *InvitationCodeQuery) Filter() *InvitationCodeFilter {
	return &InvitationCodeFilter{config: icq.config, predicateAdder: icq}
}

// addPredicate implements the predicateAdder interface.
func (m *InvitationCodeMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the InvitationCodeMutation builder.
func (m *InvitationCodeMutation) Filter() *InvitationCodeFilter {
	return &InvitationCodeFilter{config: m.config, predicateAdder: m}
}

// InvitationCodeFilter provides a generic filtering capability at runtime for InvitationCodeQuery.
type InvitationCodeFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *InvitationCodeFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[9].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint32 predicate on the id field.
func (f *InvitationCodeFilter) WhereID(p entql.Uint32P) {
	f.Where(p.Field(invitationcode.FieldID))
}

// WhereCreatedAt applies the entql uint32 predicate on the created_at field.
func (f *InvitationCodeFilter) WhereCreatedAt(p entql.Uint32P) {
	f.Where(p.Field(invitationcode.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql uint32 predicate on the updated_at field.
func (f *InvitationCodeFilter) WhereUpdatedAt(p entql.Uint32P) {
	f.Where(p.Field(invitationcode.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql uint32 predicate on the deleted_at field.
func (f *InvitationCodeFilter) WhereDeletedAt(p entql.Uint32P) {
	f.Where(p.Field(invitationcode.FieldDeletedAt))
}

// WhereEntID applies the entql [16]byte predicate on the ent_id field.
func (f *InvitationCodeFilter) WhereEntID(p entql.ValueP) {
	f.Where(p.Field(invitationcode.FieldEntID))
}

// WhereAppID applies the entql [16]byte predicate on the app_id field.
func (f *InvitationCodeFilter) WhereAppID(p entql.ValueP) {
	f.Where(p.Field(invitationcode.FieldAppID))
}

// WhereUserID applies the entql [16]byte predicate on the user_id field.
func (f *InvitationCodeFilter) WhereUserID(p entql.ValueP) {
	f.Where(p.Field(invitationcode.FieldUserID))
}

// WhereInvitationCode applies the entql string predicate on the invitation_code field.
func (f *InvitationCodeFilter) WhereInvitationCode(p entql.StringP) {
	f.Where(p.Field(invitationcode.FieldInvitationCode))
}

// WhereDisabled applies the entql bool predicate on the disabled field.
func (f *InvitationCodeFilter) WhereDisabled(p entql.BoolP) {
	f.Where(p.Field(invitationcode.FieldDisabled))
}

// addPredicate implements the predicateAdder interface.
func (pmq *PubsubMessageQuery) addPredicate(pred func(s *sql.Selector)) {
	pmq.predicates = append(pmq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the PubsubMessageQuery builder.
func (pmq *PubsubMessageQuery) Filter() *PubsubMessageFilter {
	return &PubsubMessageFilter{config: pmq.config, predicateAdder: pmq}
}

// addPredicate implements the predicateAdder interface.
func (m *PubsubMessageMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the PubsubMessageMutation builder.
func (m *PubsubMessageMutation) Filter() *PubsubMessageFilter {
	return &PubsubMessageFilter{config: m.config, predicateAdder: m}
}

// PubsubMessageFilter provides a generic filtering capability at runtime for PubsubMessageQuery.
type PubsubMessageFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *PubsubMessageFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[10].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint32 predicate on the id field.
func (f *PubsubMessageFilter) WhereID(p entql.Uint32P) {
	f.Where(p.Field(pubsubmessage.FieldID))
}

// WhereCreatedAt applies the entql uint32 predicate on the created_at field.
func (f *PubsubMessageFilter) WhereCreatedAt(p entql.Uint32P) {
	f.Where(p.Field(pubsubmessage.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql uint32 predicate on the updated_at field.
func (f *PubsubMessageFilter) WhereUpdatedAt(p entql.Uint32P) {
	f.Where(p.Field(pubsubmessage.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql uint32 predicate on the deleted_at field.
func (f *PubsubMessageFilter) WhereDeletedAt(p entql.Uint32P) {
	f.Where(p.Field(pubsubmessage.FieldDeletedAt))
}

// WhereEntID applies the entql [16]byte predicate on the ent_id field.
func (f *PubsubMessageFilter) WhereEntID(p entql.ValueP) {
	f.Where(p.Field(pubsubmessage.FieldEntID))
}

// WhereMessageID applies the entql string predicate on the message_id field.
func (f *PubsubMessageFilter) WhereMessageID(p entql.StringP) {
	f.Where(p.Field(pubsubmessage.FieldMessageID))
}

// WhereState applies the entql string predicate on the state field.
func (f *PubsubMessageFilter) WhereState(p entql.StringP) {
	f.Where(p.Field(pubsubmessage.FieldState))
}

// WhereRespToID applies the entql [16]byte predicate on the resp_to_id field.
func (f *PubsubMessageFilter) WhereRespToID(p entql.ValueP) {
	f.Where(p.Field(pubsubmessage.FieldRespToID))
}

// WhereUndoID applies the entql [16]byte predicate on the undo_id field.
func (f *PubsubMessageFilter) WhereUndoID(p entql.ValueP) {
	f.Where(p.Field(pubsubmessage.FieldUndoID))
}

// WhereArguments applies the entql string predicate on the arguments field.
func (f *PubsubMessageFilter) WhereArguments(p entql.StringP) {
	f.Where(p.Field(pubsubmessage.FieldArguments))
}

// addPredicate implements the predicateAdder interface.
func (rq *RegistrationQuery) addPredicate(pred func(s *sql.Selector)) {
	rq.predicates = append(rq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the RegistrationQuery builder.
func (rq *RegistrationQuery) Filter() *RegistrationFilter {
	return &RegistrationFilter{config: rq.config, predicateAdder: rq}
}

// addPredicate implements the predicateAdder interface.
func (m *RegistrationMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the RegistrationMutation builder.
func (m *RegistrationMutation) Filter() *RegistrationFilter {
	return &RegistrationFilter{config: m.config, predicateAdder: m}
}

// RegistrationFilter provides a generic filtering capability at runtime for RegistrationQuery.
type RegistrationFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *RegistrationFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[11].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint32 predicate on the id field.
func (f *RegistrationFilter) WhereID(p entql.Uint32P) {
	f.Where(p.Field(registration.FieldID))
}

// WhereCreatedAt applies the entql uint32 predicate on the created_at field.
func (f *RegistrationFilter) WhereCreatedAt(p entql.Uint32P) {
	f.Where(p.Field(registration.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql uint32 predicate on the updated_at field.
func (f *RegistrationFilter) WhereUpdatedAt(p entql.Uint32P) {
	f.Where(p.Field(registration.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql uint32 predicate on the deleted_at field.
func (f *RegistrationFilter) WhereDeletedAt(p entql.Uint32P) {
	f.Where(p.Field(registration.FieldDeletedAt))
}

// WhereEntID applies the entql [16]byte predicate on the ent_id field.
func (f *RegistrationFilter) WhereEntID(p entql.ValueP) {
	f.Where(p.Field(registration.FieldEntID))
}

// WhereAppID applies the entql [16]byte predicate on the app_id field.
func (f *RegistrationFilter) WhereAppID(p entql.ValueP) {
	f.Where(p.Field(registration.FieldAppID))
}

// WhereInviterID applies the entql [16]byte predicate on the inviter_id field.
func (f *RegistrationFilter) WhereInviterID(p entql.ValueP) {
	f.Where(p.Field(registration.FieldInviterID))
}

// WhereInviteeID applies the entql [16]byte predicate on the invitee_id field.
func (f *RegistrationFilter) WhereInviteeID(p entql.ValueP) {
	f.Where(p.Field(registration.FieldInviteeID))
}

// addPredicate implements the predicateAdder interface.
func (sq *StatementQuery) addPredicate(pred func(s *sql.Selector)) {
	sq.predicates = append(sq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the StatementQuery builder.
func (sq *StatementQuery) Filter() *StatementFilter {
	return &StatementFilter{config: sq.config, predicateAdder: sq}
}

// addPredicate implements the predicateAdder interface.
func (m *StatementMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the StatementMutation builder.
func (m *StatementMutation) Filter() *StatementFilter {
	return &StatementFilter{config: m.config, predicateAdder: m}
}

// StatementFilter provides a generic filtering capability at runtime for StatementQuery.
type StatementFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *StatementFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[12].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint32 predicate on the id field.
func (f *StatementFilter) WhereID(p entql.Uint32P) {
	f.Where(p.Field(statement.FieldID))
}

// WhereCreatedAt applies the entql uint32 predicate on the created_at field.
func (f *StatementFilter) WhereCreatedAt(p entql.Uint32P) {
	f.Where(p.Field(statement.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql uint32 predicate on the updated_at field.
func (f *StatementFilter) WhereUpdatedAt(p entql.Uint32P) {
	f.Where(p.Field(statement.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql uint32 predicate on the deleted_at field.
func (f *StatementFilter) WhereDeletedAt(p entql.Uint32P) {
	f.Where(p.Field(statement.FieldDeletedAt))
}

// WhereEntID applies the entql [16]byte predicate on the ent_id field.
func (f *StatementFilter) WhereEntID(p entql.ValueP) {
	f.Where(p.Field(statement.FieldEntID))
}

// WhereAppID applies the entql [16]byte predicate on the app_id field.
func (f *StatementFilter) WhereAppID(p entql.ValueP) {
	f.Where(p.Field(statement.FieldAppID))
}

// WhereUserID applies the entql [16]byte predicate on the user_id field.
func (f *StatementFilter) WhereUserID(p entql.ValueP) {
	f.Where(p.Field(statement.FieldUserID))
}

// WhereDirectContributorID applies the entql [16]byte predicate on the direct_contributor_id field.
func (f *StatementFilter) WhereDirectContributorID(p entql.ValueP) {
	f.Where(p.Field(statement.FieldDirectContributorID))
}

// WhereGoodID applies the entql [16]byte predicate on the good_id field.
func (f *StatementFilter) WhereGoodID(p entql.ValueP) {
	f.Where(p.Field(statement.FieldGoodID))
}

// WhereAppGoodID applies the entql [16]byte predicate on the app_good_id field.
func (f *StatementFilter) WhereAppGoodID(p entql.ValueP) {
	f.Where(p.Field(statement.FieldAppGoodID))
}

// WhereOrderID applies the entql [16]byte predicate on the order_id field.
func (f *StatementFilter) WhereOrderID(p entql.ValueP) {
	f.Where(p.Field(statement.FieldOrderID))
}

// WhereSelfOrder applies the entql bool predicate on the self_order field.
func (f *StatementFilter) WhereSelfOrder(p entql.BoolP) {
	f.Where(p.Field(statement.FieldSelfOrder))
}

// WherePaymentID applies the entql [16]byte predicate on the payment_id field.
func (f *StatementFilter) WherePaymentID(p entql.ValueP) {
	f.Where(p.Field(statement.FieldPaymentID))
}

// WhereCoinTypeID applies the entql [16]byte predicate on the coin_type_id field.
func (f *StatementFilter) WhereCoinTypeID(p entql.ValueP) {
	f.Where(p.Field(statement.FieldCoinTypeID))
}

// WherePaymentCoinTypeID applies the entql [16]byte predicate on the payment_coin_type_id field.
func (f *StatementFilter) WherePaymentCoinTypeID(p entql.ValueP) {
	f.Where(p.Field(statement.FieldPaymentCoinTypeID))
}

// WherePaymentCoinUsdCurrency applies the entql other predicate on the payment_coin_usd_currency field.
func (f *StatementFilter) WherePaymentCoinUsdCurrency(p entql.OtherP) {
	f.Where(p.Field(statement.FieldPaymentCoinUsdCurrency))
}

// WhereUnits applies the entql uint32 predicate on the units field.
func (f *StatementFilter) WhereUnits(p entql.Uint32P) {
	f.Where(p.Field(statement.FieldUnits))
}

// WhereUnitsV1 applies the entql other predicate on the units_v1 field.
func (f *StatementFilter) WhereUnitsV1(p entql.OtherP) {
	f.Where(p.Field(statement.FieldUnitsV1))
}

// WhereAmount applies the entql other predicate on the amount field.
func (f *StatementFilter) WhereAmount(p entql.OtherP) {
	f.Where(p.Field(statement.FieldAmount))
}

// WhereUsdAmount applies the entql other predicate on the usd_amount field.
func (f *StatementFilter) WhereUsdAmount(p entql.OtherP) {
	f.Where(p.Field(statement.FieldUsdAmount))
}

// WhereCommission applies the entql other predicate on the commission field.
func (f *StatementFilter) WhereCommission(p entql.OtherP) {
	f.Where(p.Field(statement.FieldCommission))
}
