// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/inspire-middleware/pkg/db/ent/coinconfig"
	"github.com/NpoolPlatform/inspire-middleware/pkg/db/ent/predicate"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// CoinConfigUpdate is the builder for updating CoinConfig entities.
type CoinConfigUpdate struct {
	config
	hooks     []Hook
	mutation  *CoinConfigMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the CoinConfigUpdate builder.
func (ccu *CoinConfigUpdate) Where(ps ...predicate.CoinConfig) *CoinConfigUpdate {
	ccu.mutation.Where(ps...)
	return ccu
}

// SetCreatedAt sets the "created_at" field.
func (ccu *CoinConfigUpdate) SetCreatedAt(u uint32) *CoinConfigUpdate {
	ccu.mutation.ResetCreatedAt()
	ccu.mutation.SetCreatedAt(u)
	return ccu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ccu *CoinConfigUpdate) SetNillableCreatedAt(u *uint32) *CoinConfigUpdate {
	if u != nil {
		ccu.SetCreatedAt(*u)
	}
	return ccu
}

// AddCreatedAt adds u to the "created_at" field.
func (ccu *CoinConfigUpdate) AddCreatedAt(u int32) *CoinConfigUpdate {
	ccu.mutation.AddCreatedAt(u)
	return ccu
}

// SetUpdatedAt sets the "updated_at" field.
func (ccu *CoinConfigUpdate) SetUpdatedAt(u uint32) *CoinConfigUpdate {
	ccu.mutation.ResetUpdatedAt()
	ccu.mutation.SetUpdatedAt(u)
	return ccu
}

// AddUpdatedAt adds u to the "updated_at" field.
func (ccu *CoinConfigUpdate) AddUpdatedAt(u int32) *CoinConfigUpdate {
	ccu.mutation.AddUpdatedAt(u)
	return ccu
}

// SetDeletedAt sets the "deleted_at" field.
func (ccu *CoinConfigUpdate) SetDeletedAt(u uint32) *CoinConfigUpdate {
	ccu.mutation.ResetDeletedAt()
	ccu.mutation.SetDeletedAt(u)
	return ccu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ccu *CoinConfigUpdate) SetNillableDeletedAt(u *uint32) *CoinConfigUpdate {
	if u != nil {
		ccu.SetDeletedAt(*u)
	}
	return ccu
}

// AddDeletedAt adds u to the "deleted_at" field.
func (ccu *CoinConfigUpdate) AddDeletedAt(u int32) *CoinConfigUpdate {
	ccu.mutation.AddDeletedAt(u)
	return ccu
}

// SetEntID sets the "ent_id" field.
func (ccu *CoinConfigUpdate) SetEntID(u uuid.UUID) *CoinConfigUpdate {
	ccu.mutation.SetEntID(u)
	return ccu
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (ccu *CoinConfigUpdate) SetNillableEntID(u *uuid.UUID) *CoinConfigUpdate {
	if u != nil {
		ccu.SetEntID(*u)
	}
	return ccu
}

// SetAppID sets the "app_id" field.
func (ccu *CoinConfigUpdate) SetAppID(u uuid.UUID) *CoinConfigUpdate {
	ccu.mutation.SetAppID(u)
	return ccu
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (ccu *CoinConfigUpdate) SetNillableAppID(u *uuid.UUID) *CoinConfigUpdate {
	if u != nil {
		ccu.SetAppID(*u)
	}
	return ccu
}

// ClearAppID clears the value of the "app_id" field.
func (ccu *CoinConfigUpdate) ClearAppID() *CoinConfigUpdate {
	ccu.mutation.ClearAppID()
	return ccu
}

// SetCoinTypeID sets the "coin_type_id" field.
func (ccu *CoinConfigUpdate) SetCoinTypeID(u uuid.UUID) *CoinConfigUpdate {
	ccu.mutation.SetCoinTypeID(u)
	return ccu
}

// SetNillableCoinTypeID sets the "coin_type_id" field if the given value is not nil.
func (ccu *CoinConfigUpdate) SetNillableCoinTypeID(u *uuid.UUID) *CoinConfigUpdate {
	if u != nil {
		ccu.SetCoinTypeID(*u)
	}
	return ccu
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (ccu *CoinConfigUpdate) ClearCoinTypeID() *CoinConfigUpdate {
	ccu.mutation.ClearCoinTypeID()
	return ccu
}

// SetMaxValue sets the "max_value" field.
func (ccu *CoinConfigUpdate) SetMaxValue(d decimal.Decimal) *CoinConfigUpdate {
	ccu.mutation.SetMaxValue(d)
	return ccu
}

// SetNillableMaxValue sets the "max_value" field if the given value is not nil.
func (ccu *CoinConfigUpdate) SetNillableMaxValue(d *decimal.Decimal) *CoinConfigUpdate {
	if d != nil {
		ccu.SetMaxValue(*d)
	}
	return ccu
}

// ClearMaxValue clears the value of the "max_value" field.
func (ccu *CoinConfigUpdate) ClearMaxValue() *CoinConfigUpdate {
	ccu.mutation.ClearMaxValue()
	return ccu
}

// SetAllocated sets the "allocated" field.
func (ccu *CoinConfigUpdate) SetAllocated(d decimal.Decimal) *CoinConfigUpdate {
	ccu.mutation.SetAllocated(d)
	return ccu
}

// SetNillableAllocated sets the "allocated" field if the given value is not nil.
func (ccu *CoinConfigUpdate) SetNillableAllocated(d *decimal.Decimal) *CoinConfigUpdate {
	if d != nil {
		ccu.SetAllocated(*d)
	}
	return ccu
}

// ClearAllocated clears the value of the "allocated" field.
func (ccu *CoinConfigUpdate) ClearAllocated() *CoinConfigUpdate {
	ccu.mutation.ClearAllocated()
	return ccu
}

// Mutation returns the CoinConfigMutation object of the builder.
func (ccu *CoinConfigUpdate) Mutation() *CoinConfigMutation {
	return ccu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ccu *CoinConfigUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if err := ccu.defaults(); err != nil {
		return 0, err
	}
	if len(ccu.hooks) == 0 {
		affected, err = ccu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CoinConfigMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ccu.mutation = mutation
			affected, err = ccu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ccu.hooks) - 1; i >= 0; i-- {
			if ccu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ccu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ccu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ccu *CoinConfigUpdate) SaveX(ctx context.Context) int {
	affected, err := ccu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ccu *CoinConfigUpdate) Exec(ctx context.Context) error {
	_, err := ccu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccu *CoinConfigUpdate) ExecX(ctx context.Context) {
	if err := ccu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ccu *CoinConfigUpdate) defaults() error {
	if _, ok := ccu.mutation.UpdatedAt(); !ok {
		if coinconfig.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized coinconfig.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := coinconfig.UpdateDefaultUpdatedAt()
		ccu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ccu *CoinConfigUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *CoinConfigUpdate {
	ccu.modifiers = append(ccu.modifiers, modifiers...)
	return ccu
}

func (ccu *CoinConfigUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   coinconfig.Table,
			Columns: coinconfig.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: coinconfig.FieldID,
			},
		},
	}
	if ps := ccu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ccu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: coinconfig.FieldCreatedAt,
		})
	}
	if value, ok := ccu.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: coinconfig.FieldCreatedAt,
		})
	}
	if value, ok := ccu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: coinconfig.FieldUpdatedAt,
		})
	}
	if value, ok := ccu.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: coinconfig.FieldUpdatedAt,
		})
	}
	if value, ok := ccu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: coinconfig.FieldDeletedAt,
		})
	}
	if value, ok := ccu.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: coinconfig.FieldDeletedAt,
		})
	}
	if value, ok := ccu.mutation.EntID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: coinconfig.FieldEntID,
		})
	}
	if value, ok := ccu.mutation.AppID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: coinconfig.FieldAppID,
		})
	}
	if ccu.mutation.AppIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: coinconfig.FieldAppID,
		})
	}
	if value, ok := ccu.mutation.CoinTypeID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: coinconfig.FieldCoinTypeID,
		})
	}
	if ccu.mutation.CoinTypeIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: coinconfig.FieldCoinTypeID,
		})
	}
	if value, ok := ccu.mutation.MaxValue(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: coinconfig.FieldMaxValue,
		})
	}
	if ccu.mutation.MaxValueCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Column: coinconfig.FieldMaxValue,
		})
	}
	if value, ok := ccu.mutation.Allocated(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: coinconfig.FieldAllocated,
		})
	}
	if ccu.mutation.AllocatedCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Column: coinconfig.FieldAllocated,
		})
	}
	_spec.Modifiers = ccu.modifiers
	if n, err = sqlgraph.UpdateNodes(ctx, ccu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{coinconfig.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// CoinConfigUpdateOne is the builder for updating a single CoinConfig entity.
type CoinConfigUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *CoinConfigMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetCreatedAt sets the "created_at" field.
func (ccuo *CoinConfigUpdateOne) SetCreatedAt(u uint32) *CoinConfigUpdateOne {
	ccuo.mutation.ResetCreatedAt()
	ccuo.mutation.SetCreatedAt(u)
	return ccuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ccuo *CoinConfigUpdateOne) SetNillableCreatedAt(u *uint32) *CoinConfigUpdateOne {
	if u != nil {
		ccuo.SetCreatedAt(*u)
	}
	return ccuo
}

// AddCreatedAt adds u to the "created_at" field.
func (ccuo *CoinConfigUpdateOne) AddCreatedAt(u int32) *CoinConfigUpdateOne {
	ccuo.mutation.AddCreatedAt(u)
	return ccuo
}

// SetUpdatedAt sets the "updated_at" field.
func (ccuo *CoinConfigUpdateOne) SetUpdatedAt(u uint32) *CoinConfigUpdateOne {
	ccuo.mutation.ResetUpdatedAt()
	ccuo.mutation.SetUpdatedAt(u)
	return ccuo
}

// AddUpdatedAt adds u to the "updated_at" field.
func (ccuo *CoinConfigUpdateOne) AddUpdatedAt(u int32) *CoinConfigUpdateOne {
	ccuo.mutation.AddUpdatedAt(u)
	return ccuo
}

// SetDeletedAt sets the "deleted_at" field.
func (ccuo *CoinConfigUpdateOne) SetDeletedAt(u uint32) *CoinConfigUpdateOne {
	ccuo.mutation.ResetDeletedAt()
	ccuo.mutation.SetDeletedAt(u)
	return ccuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ccuo *CoinConfigUpdateOne) SetNillableDeletedAt(u *uint32) *CoinConfigUpdateOne {
	if u != nil {
		ccuo.SetDeletedAt(*u)
	}
	return ccuo
}

// AddDeletedAt adds u to the "deleted_at" field.
func (ccuo *CoinConfigUpdateOne) AddDeletedAt(u int32) *CoinConfigUpdateOne {
	ccuo.mutation.AddDeletedAt(u)
	return ccuo
}

// SetEntID sets the "ent_id" field.
func (ccuo *CoinConfigUpdateOne) SetEntID(u uuid.UUID) *CoinConfigUpdateOne {
	ccuo.mutation.SetEntID(u)
	return ccuo
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (ccuo *CoinConfigUpdateOne) SetNillableEntID(u *uuid.UUID) *CoinConfigUpdateOne {
	if u != nil {
		ccuo.SetEntID(*u)
	}
	return ccuo
}

// SetAppID sets the "app_id" field.
func (ccuo *CoinConfigUpdateOne) SetAppID(u uuid.UUID) *CoinConfigUpdateOne {
	ccuo.mutation.SetAppID(u)
	return ccuo
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (ccuo *CoinConfigUpdateOne) SetNillableAppID(u *uuid.UUID) *CoinConfigUpdateOne {
	if u != nil {
		ccuo.SetAppID(*u)
	}
	return ccuo
}

// ClearAppID clears the value of the "app_id" field.
func (ccuo *CoinConfigUpdateOne) ClearAppID() *CoinConfigUpdateOne {
	ccuo.mutation.ClearAppID()
	return ccuo
}

// SetCoinTypeID sets the "coin_type_id" field.
func (ccuo *CoinConfigUpdateOne) SetCoinTypeID(u uuid.UUID) *CoinConfigUpdateOne {
	ccuo.mutation.SetCoinTypeID(u)
	return ccuo
}

// SetNillableCoinTypeID sets the "coin_type_id" field if the given value is not nil.
func (ccuo *CoinConfigUpdateOne) SetNillableCoinTypeID(u *uuid.UUID) *CoinConfigUpdateOne {
	if u != nil {
		ccuo.SetCoinTypeID(*u)
	}
	return ccuo
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (ccuo *CoinConfigUpdateOne) ClearCoinTypeID() *CoinConfigUpdateOne {
	ccuo.mutation.ClearCoinTypeID()
	return ccuo
}

// SetMaxValue sets the "max_value" field.
func (ccuo *CoinConfigUpdateOne) SetMaxValue(d decimal.Decimal) *CoinConfigUpdateOne {
	ccuo.mutation.SetMaxValue(d)
	return ccuo
}

// SetNillableMaxValue sets the "max_value" field if the given value is not nil.
func (ccuo *CoinConfigUpdateOne) SetNillableMaxValue(d *decimal.Decimal) *CoinConfigUpdateOne {
	if d != nil {
		ccuo.SetMaxValue(*d)
	}
	return ccuo
}

// ClearMaxValue clears the value of the "max_value" field.
func (ccuo *CoinConfigUpdateOne) ClearMaxValue() *CoinConfigUpdateOne {
	ccuo.mutation.ClearMaxValue()
	return ccuo
}

// SetAllocated sets the "allocated" field.
func (ccuo *CoinConfigUpdateOne) SetAllocated(d decimal.Decimal) *CoinConfigUpdateOne {
	ccuo.mutation.SetAllocated(d)
	return ccuo
}

// SetNillableAllocated sets the "allocated" field if the given value is not nil.
func (ccuo *CoinConfigUpdateOne) SetNillableAllocated(d *decimal.Decimal) *CoinConfigUpdateOne {
	if d != nil {
		ccuo.SetAllocated(*d)
	}
	return ccuo
}

// ClearAllocated clears the value of the "allocated" field.
func (ccuo *CoinConfigUpdateOne) ClearAllocated() *CoinConfigUpdateOne {
	ccuo.mutation.ClearAllocated()
	return ccuo
}

// Mutation returns the CoinConfigMutation object of the builder.
func (ccuo *CoinConfigUpdateOne) Mutation() *CoinConfigMutation {
	return ccuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ccuo *CoinConfigUpdateOne) Select(field string, fields ...string) *CoinConfigUpdateOne {
	ccuo.fields = append([]string{field}, fields...)
	return ccuo
}

// Save executes the query and returns the updated CoinConfig entity.
func (ccuo *CoinConfigUpdateOne) Save(ctx context.Context) (*CoinConfig, error) {
	var (
		err  error
		node *CoinConfig
	)
	if err := ccuo.defaults(); err != nil {
		return nil, err
	}
	if len(ccuo.hooks) == 0 {
		node, err = ccuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CoinConfigMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ccuo.mutation = mutation
			node, err = ccuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ccuo.hooks) - 1; i >= 0; i-- {
			if ccuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ccuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, ccuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*CoinConfig)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from CoinConfigMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ccuo *CoinConfigUpdateOne) SaveX(ctx context.Context) *CoinConfig {
	node, err := ccuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ccuo *CoinConfigUpdateOne) Exec(ctx context.Context) error {
	_, err := ccuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccuo *CoinConfigUpdateOne) ExecX(ctx context.Context) {
	if err := ccuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ccuo *CoinConfigUpdateOne) defaults() error {
	if _, ok := ccuo.mutation.UpdatedAt(); !ok {
		if coinconfig.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized coinconfig.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := coinconfig.UpdateDefaultUpdatedAt()
		ccuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ccuo *CoinConfigUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *CoinConfigUpdateOne {
	ccuo.modifiers = append(ccuo.modifiers, modifiers...)
	return ccuo
}

func (ccuo *CoinConfigUpdateOne) sqlSave(ctx context.Context) (_node *CoinConfig, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   coinconfig.Table,
			Columns: coinconfig.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: coinconfig.FieldID,
			},
		},
	}
	id, ok := ccuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "CoinConfig.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ccuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, coinconfig.FieldID)
		for _, f := range fields {
			if !coinconfig.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != coinconfig.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ccuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ccuo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: coinconfig.FieldCreatedAt,
		})
	}
	if value, ok := ccuo.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: coinconfig.FieldCreatedAt,
		})
	}
	if value, ok := ccuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: coinconfig.FieldUpdatedAt,
		})
	}
	if value, ok := ccuo.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: coinconfig.FieldUpdatedAt,
		})
	}
	if value, ok := ccuo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: coinconfig.FieldDeletedAt,
		})
	}
	if value, ok := ccuo.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: coinconfig.FieldDeletedAt,
		})
	}
	if value, ok := ccuo.mutation.EntID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: coinconfig.FieldEntID,
		})
	}
	if value, ok := ccuo.mutation.AppID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: coinconfig.FieldAppID,
		})
	}
	if ccuo.mutation.AppIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: coinconfig.FieldAppID,
		})
	}
	if value, ok := ccuo.mutation.CoinTypeID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: coinconfig.FieldCoinTypeID,
		})
	}
	if ccuo.mutation.CoinTypeIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: coinconfig.FieldCoinTypeID,
		})
	}
	if value, ok := ccuo.mutation.MaxValue(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: coinconfig.FieldMaxValue,
		})
	}
	if ccuo.mutation.MaxValueCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Column: coinconfig.FieldMaxValue,
		})
	}
	if value, ok := ccuo.mutation.Allocated(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: coinconfig.FieldAllocated,
		})
	}
	if ccuo.mutation.AllocatedCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Column: coinconfig.FieldAllocated,
		})
	}
	_spec.Modifiers = ccuo.modifiers
	_node = &CoinConfig{config: ccuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ccuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{coinconfig.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
