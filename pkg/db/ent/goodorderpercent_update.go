// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/inspire-middleware/pkg/db/ent/goodorderpercent"
	"github.com/NpoolPlatform/inspire-middleware/pkg/db/ent/predicate"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// GoodOrderPercentUpdate is the builder for updating GoodOrderPercent entities.
type GoodOrderPercentUpdate struct {
	config
	hooks    []Hook
	mutation *GoodOrderPercentMutation
}

// Where appends a list predicates to the GoodOrderPercentUpdate builder.
func (gopu *GoodOrderPercentUpdate) Where(ps ...predicate.GoodOrderPercent) *GoodOrderPercentUpdate {
	gopu.mutation.Where(ps...)
	return gopu
}

// SetCreatedAt sets the "created_at" field.
func (gopu *GoodOrderPercentUpdate) SetCreatedAt(u uint32) *GoodOrderPercentUpdate {
	gopu.mutation.ResetCreatedAt()
	gopu.mutation.SetCreatedAt(u)
	return gopu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (gopu *GoodOrderPercentUpdate) SetNillableCreatedAt(u *uint32) *GoodOrderPercentUpdate {
	if u != nil {
		gopu.SetCreatedAt(*u)
	}
	return gopu
}

// AddCreatedAt adds u to the "created_at" field.
func (gopu *GoodOrderPercentUpdate) AddCreatedAt(u int32) *GoodOrderPercentUpdate {
	gopu.mutation.AddCreatedAt(u)
	return gopu
}

// SetUpdatedAt sets the "updated_at" field.
func (gopu *GoodOrderPercentUpdate) SetUpdatedAt(u uint32) *GoodOrderPercentUpdate {
	gopu.mutation.ResetUpdatedAt()
	gopu.mutation.SetUpdatedAt(u)
	return gopu
}

// AddUpdatedAt adds u to the "updated_at" field.
func (gopu *GoodOrderPercentUpdate) AddUpdatedAt(u int32) *GoodOrderPercentUpdate {
	gopu.mutation.AddUpdatedAt(u)
	return gopu
}

// SetDeletedAt sets the "deleted_at" field.
func (gopu *GoodOrderPercentUpdate) SetDeletedAt(u uint32) *GoodOrderPercentUpdate {
	gopu.mutation.ResetDeletedAt()
	gopu.mutation.SetDeletedAt(u)
	return gopu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (gopu *GoodOrderPercentUpdate) SetNillableDeletedAt(u *uint32) *GoodOrderPercentUpdate {
	if u != nil {
		gopu.SetDeletedAt(*u)
	}
	return gopu
}

// AddDeletedAt adds u to the "deleted_at" field.
func (gopu *GoodOrderPercentUpdate) AddDeletedAt(u int32) *GoodOrderPercentUpdate {
	gopu.mutation.AddDeletedAt(u)
	return gopu
}

// SetAppID sets the "app_id" field.
func (gopu *GoodOrderPercentUpdate) SetAppID(u uuid.UUID) *GoodOrderPercentUpdate {
	gopu.mutation.SetAppID(u)
	return gopu
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (gopu *GoodOrderPercentUpdate) SetNillableAppID(u *uuid.UUID) *GoodOrderPercentUpdate {
	if u != nil {
		gopu.SetAppID(*u)
	}
	return gopu
}

// ClearAppID clears the value of the "app_id" field.
func (gopu *GoodOrderPercentUpdate) ClearAppID() *GoodOrderPercentUpdate {
	gopu.mutation.ClearAppID()
	return gopu
}

// SetUserID sets the "user_id" field.
func (gopu *GoodOrderPercentUpdate) SetUserID(u uuid.UUID) *GoodOrderPercentUpdate {
	gopu.mutation.SetUserID(u)
	return gopu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (gopu *GoodOrderPercentUpdate) SetNillableUserID(u *uuid.UUID) *GoodOrderPercentUpdate {
	if u != nil {
		gopu.SetUserID(*u)
	}
	return gopu
}

// ClearUserID clears the value of the "user_id" field.
func (gopu *GoodOrderPercentUpdate) ClearUserID() *GoodOrderPercentUpdate {
	gopu.mutation.ClearUserID()
	return gopu
}

// SetGoodID sets the "good_id" field.
func (gopu *GoodOrderPercentUpdate) SetGoodID(u uuid.UUID) *GoodOrderPercentUpdate {
	gopu.mutation.SetGoodID(u)
	return gopu
}

// SetNillableGoodID sets the "good_id" field if the given value is not nil.
func (gopu *GoodOrderPercentUpdate) SetNillableGoodID(u *uuid.UUID) *GoodOrderPercentUpdate {
	if u != nil {
		gopu.SetGoodID(*u)
	}
	return gopu
}

// ClearGoodID clears the value of the "good_id" field.
func (gopu *GoodOrderPercentUpdate) ClearGoodID() *GoodOrderPercentUpdate {
	gopu.mutation.ClearGoodID()
	return gopu
}

// SetPercent sets the "percent" field.
func (gopu *GoodOrderPercentUpdate) SetPercent(d decimal.Decimal) *GoodOrderPercentUpdate {
	gopu.mutation.SetPercent(d)
	return gopu
}

// SetNillablePercent sets the "percent" field if the given value is not nil.
func (gopu *GoodOrderPercentUpdate) SetNillablePercent(d *decimal.Decimal) *GoodOrderPercentUpdate {
	if d != nil {
		gopu.SetPercent(*d)
	}
	return gopu
}

// ClearPercent clears the value of the "percent" field.
func (gopu *GoodOrderPercentUpdate) ClearPercent() *GoodOrderPercentUpdate {
	gopu.mutation.ClearPercent()
	return gopu
}

// SetStartAt sets the "start_at" field.
func (gopu *GoodOrderPercentUpdate) SetStartAt(u uint32) *GoodOrderPercentUpdate {
	gopu.mutation.ResetStartAt()
	gopu.mutation.SetStartAt(u)
	return gopu
}

// SetNillableStartAt sets the "start_at" field if the given value is not nil.
func (gopu *GoodOrderPercentUpdate) SetNillableStartAt(u *uint32) *GoodOrderPercentUpdate {
	if u != nil {
		gopu.SetStartAt(*u)
	}
	return gopu
}

// AddStartAt adds u to the "start_at" field.
func (gopu *GoodOrderPercentUpdate) AddStartAt(u int32) *GoodOrderPercentUpdate {
	gopu.mutation.AddStartAt(u)
	return gopu
}

// ClearStartAt clears the value of the "start_at" field.
func (gopu *GoodOrderPercentUpdate) ClearStartAt() *GoodOrderPercentUpdate {
	gopu.mutation.ClearStartAt()
	return gopu
}

// SetEndAt sets the "end_at" field.
func (gopu *GoodOrderPercentUpdate) SetEndAt(u uint32) *GoodOrderPercentUpdate {
	gopu.mutation.ResetEndAt()
	gopu.mutation.SetEndAt(u)
	return gopu
}

// SetNillableEndAt sets the "end_at" field if the given value is not nil.
func (gopu *GoodOrderPercentUpdate) SetNillableEndAt(u *uint32) *GoodOrderPercentUpdate {
	if u != nil {
		gopu.SetEndAt(*u)
	}
	return gopu
}

// AddEndAt adds u to the "end_at" field.
func (gopu *GoodOrderPercentUpdate) AddEndAt(u int32) *GoodOrderPercentUpdate {
	gopu.mutation.AddEndAt(u)
	return gopu
}

// ClearEndAt clears the value of the "end_at" field.
func (gopu *GoodOrderPercentUpdate) ClearEndAt() *GoodOrderPercentUpdate {
	gopu.mutation.ClearEndAt()
	return gopu
}

// Mutation returns the GoodOrderPercentMutation object of the builder.
func (gopu *GoodOrderPercentUpdate) Mutation() *GoodOrderPercentMutation {
	return gopu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (gopu *GoodOrderPercentUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if err := gopu.defaults(); err != nil {
		return 0, err
	}
	if len(gopu.hooks) == 0 {
		affected, err = gopu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*GoodOrderPercentMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			gopu.mutation = mutation
			affected, err = gopu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(gopu.hooks) - 1; i >= 0; i-- {
			if gopu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = gopu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, gopu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (gopu *GoodOrderPercentUpdate) SaveX(ctx context.Context) int {
	affected, err := gopu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (gopu *GoodOrderPercentUpdate) Exec(ctx context.Context) error {
	_, err := gopu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gopu *GoodOrderPercentUpdate) ExecX(ctx context.Context) {
	if err := gopu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (gopu *GoodOrderPercentUpdate) defaults() error {
	if _, ok := gopu.mutation.UpdatedAt(); !ok {
		if goodorderpercent.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized goodorderpercent.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := goodorderpercent.UpdateDefaultUpdatedAt()
		gopu.mutation.SetUpdatedAt(v)
	}
	return nil
}

func (gopu *GoodOrderPercentUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   goodorderpercent.Table,
			Columns: goodorderpercent.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: goodorderpercent.FieldID,
			},
		},
	}
	if ps := gopu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := gopu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: goodorderpercent.FieldCreatedAt,
		})
	}
	if value, ok := gopu.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: goodorderpercent.FieldCreatedAt,
		})
	}
	if value, ok := gopu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: goodorderpercent.FieldUpdatedAt,
		})
	}
	if value, ok := gopu.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: goodorderpercent.FieldUpdatedAt,
		})
	}
	if value, ok := gopu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: goodorderpercent.FieldDeletedAt,
		})
	}
	if value, ok := gopu.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: goodorderpercent.FieldDeletedAt,
		})
	}
	if value, ok := gopu.mutation.AppID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: goodorderpercent.FieldAppID,
		})
	}
	if gopu.mutation.AppIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: goodorderpercent.FieldAppID,
		})
	}
	if value, ok := gopu.mutation.UserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: goodorderpercent.FieldUserID,
		})
	}
	if gopu.mutation.UserIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: goodorderpercent.FieldUserID,
		})
	}
	if value, ok := gopu.mutation.GoodID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: goodorderpercent.FieldGoodID,
		})
	}
	if gopu.mutation.GoodIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: goodorderpercent.FieldGoodID,
		})
	}
	if value, ok := gopu.mutation.Percent(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: goodorderpercent.FieldPercent,
		})
	}
	if gopu.mutation.PercentCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Column: goodorderpercent.FieldPercent,
		})
	}
	if value, ok := gopu.mutation.StartAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: goodorderpercent.FieldStartAt,
		})
	}
	if value, ok := gopu.mutation.AddedStartAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: goodorderpercent.FieldStartAt,
		})
	}
	if gopu.mutation.StartAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Column: goodorderpercent.FieldStartAt,
		})
	}
	if value, ok := gopu.mutation.EndAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: goodorderpercent.FieldEndAt,
		})
	}
	if value, ok := gopu.mutation.AddedEndAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: goodorderpercent.FieldEndAt,
		})
	}
	if gopu.mutation.EndAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Column: goodorderpercent.FieldEndAt,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, gopu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{goodorderpercent.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// GoodOrderPercentUpdateOne is the builder for updating a single GoodOrderPercent entity.
type GoodOrderPercentUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *GoodOrderPercentMutation
}

// SetCreatedAt sets the "created_at" field.
func (gopuo *GoodOrderPercentUpdateOne) SetCreatedAt(u uint32) *GoodOrderPercentUpdateOne {
	gopuo.mutation.ResetCreatedAt()
	gopuo.mutation.SetCreatedAt(u)
	return gopuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (gopuo *GoodOrderPercentUpdateOne) SetNillableCreatedAt(u *uint32) *GoodOrderPercentUpdateOne {
	if u != nil {
		gopuo.SetCreatedAt(*u)
	}
	return gopuo
}

// AddCreatedAt adds u to the "created_at" field.
func (gopuo *GoodOrderPercentUpdateOne) AddCreatedAt(u int32) *GoodOrderPercentUpdateOne {
	gopuo.mutation.AddCreatedAt(u)
	return gopuo
}

// SetUpdatedAt sets the "updated_at" field.
func (gopuo *GoodOrderPercentUpdateOne) SetUpdatedAt(u uint32) *GoodOrderPercentUpdateOne {
	gopuo.mutation.ResetUpdatedAt()
	gopuo.mutation.SetUpdatedAt(u)
	return gopuo
}

// AddUpdatedAt adds u to the "updated_at" field.
func (gopuo *GoodOrderPercentUpdateOne) AddUpdatedAt(u int32) *GoodOrderPercentUpdateOne {
	gopuo.mutation.AddUpdatedAt(u)
	return gopuo
}

// SetDeletedAt sets the "deleted_at" field.
func (gopuo *GoodOrderPercentUpdateOne) SetDeletedAt(u uint32) *GoodOrderPercentUpdateOne {
	gopuo.mutation.ResetDeletedAt()
	gopuo.mutation.SetDeletedAt(u)
	return gopuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (gopuo *GoodOrderPercentUpdateOne) SetNillableDeletedAt(u *uint32) *GoodOrderPercentUpdateOne {
	if u != nil {
		gopuo.SetDeletedAt(*u)
	}
	return gopuo
}

// AddDeletedAt adds u to the "deleted_at" field.
func (gopuo *GoodOrderPercentUpdateOne) AddDeletedAt(u int32) *GoodOrderPercentUpdateOne {
	gopuo.mutation.AddDeletedAt(u)
	return gopuo
}

// SetAppID sets the "app_id" field.
func (gopuo *GoodOrderPercentUpdateOne) SetAppID(u uuid.UUID) *GoodOrderPercentUpdateOne {
	gopuo.mutation.SetAppID(u)
	return gopuo
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (gopuo *GoodOrderPercentUpdateOne) SetNillableAppID(u *uuid.UUID) *GoodOrderPercentUpdateOne {
	if u != nil {
		gopuo.SetAppID(*u)
	}
	return gopuo
}

// ClearAppID clears the value of the "app_id" field.
func (gopuo *GoodOrderPercentUpdateOne) ClearAppID() *GoodOrderPercentUpdateOne {
	gopuo.mutation.ClearAppID()
	return gopuo
}

// SetUserID sets the "user_id" field.
func (gopuo *GoodOrderPercentUpdateOne) SetUserID(u uuid.UUID) *GoodOrderPercentUpdateOne {
	gopuo.mutation.SetUserID(u)
	return gopuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (gopuo *GoodOrderPercentUpdateOne) SetNillableUserID(u *uuid.UUID) *GoodOrderPercentUpdateOne {
	if u != nil {
		gopuo.SetUserID(*u)
	}
	return gopuo
}

// ClearUserID clears the value of the "user_id" field.
func (gopuo *GoodOrderPercentUpdateOne) ClearUserID() *GoodOrderPercentUpdateOne {
	gopuo.mutation.ClearUserID()
	return gopuo
}

// SetGoodID sets the "good_id" field.
func (gopuo *GoodOrderPercentUpdateOne) SetGoodID(u uuid.UUID) *GoodOrderPercentUpdateOne {
	gopuo.mutation.SetGoodID(u)
	return gopuo
}

// SetNillableGoodID sets the "good_id" field if the given value is not nil.
func (gopuo *GoodOrderPercentUpdateOne) SetNillableGoodID(u *uuid.UUID) *GoodOrderPercentUpdateOne {
	if u != nil {
		gopuo.SetGoodID(*u)
	}
	return gopuo
}

// ClearGoodID clears the value of the "good_id" field.
func (gopuo *GoodOrderPercentUpdateOne) ClearGoodID() *GoodOrderPercentUpdateOne {
	gopuo.mutation.ClearGoodID()
	return gopuo
}

// SetPercent sets the "percent" field.
func (gopuo *GoodOrderPercentUpdateOne) SetPercent(d decimal.Decimal) *GoodOrderPercentUpdateOne {
	gopuo.mutation.SetPercent(d)
	return gopuo
}

// SetNillablePercent sets the "percent" field if the given value is not nil.
func (gopuo *GoodOrderPercentUpdateOne) SetNillablePercent(d *decimal.Decimal) *GoodOrderPercentUpdateOne {
	if d != nil {
		gopuo.SetPercent(*d)
	}
	return gopuo
}

// ClearPercent clears the value of the "percent" field.
func (gopuo *GoodOrderPercentUpdateOne) ClearPercent() *GoodOrderPercentUpdateOne {
	gopuo.mutation.ClearPercent()
	return gopuo
}

// SetStartAt sets the "start_at" field.
func (gopuo *GoodOrderPercentUpdateOne) SetStartAt(u uint32) *GoodOrderPercentUpdateOne {
	gopuo.mutation.ResetStartAt()
	gopuo.mutation.SetStartAt(u)
	return gopuo
}

// SetNillableStartAt sets the "start_at" field if the given value is not nil.
func (gopuo *GoodOrderPercentUpdateOne) SetNillableStartAt(u *uint32) *GoodOrderPercentUpdateOne {
	if u != nil {
		gopuo.SetStartAt(*u)
	}
	return gopuo
}

// AddStartAt adds u to the "start_at" field.
func (gopuo *GoodOrderPercentUpdateOne) AddStartAt(u int32) *GoodOrderPercentUpdateOne {
	gopuo.mutation.AddStartAt(u)
	return gopuo
}

// ClearStartAt clears the value of the "start_at" field.
func (gopuo *GoodOrderPercentUpdateOne) ClearStartAt() *GoodOrderPercentUpdateOne {
	gopuo.mutation.ClearStartAt()
	return gopuo
}

// SetEndAt sets the "end_at" field.
func (gopuo *GoodOrderPercentUpdateOne) SetEndAt(u uint32) *GoodOrderPercentUpdateOne {
	gopuo.mutation.ResetEndAt()
	gopuo.mutation.SetEndAt(u)
	return gopuo
}

// SetNillableEndAt sets the "end_at" field if the given value is not nil.
func (gopuo *GoodOrderPercentUpdateOne) SetNillableEndAt(u *uint32) *GoodOrderPercentUpdateOne {
	if u != nil {
		gopuo.SetEndAt(*u)
	}
	return gopuo
}

// AddEndAt adds u to the "end_at" field.
func (gopuo *GoodOrderPercentUpdateOne) AddEndAt(u int32) *GoodOrderPercentUpdateOne {
	gopuo.mutation.AddEndAt(u)
	return gopuo
}

// ClearEndAt clears the value of the "end_at" field.
func (gopuo *GoodOrderPercentUpdateOne) ClearEndAt() *GoodOrderPercentUpdateOne {
	gopuo.mutation.ClearEndAt()
	return gopuo
}

// Mutation returns the GoodOrderPercentMutation object of the builder.
func (gopuo *GoodOrderPercentUpdateOne) Mutation() *GoodOrderPercentMutation {
	return gopuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (gopuo *GoodOrderPercentUpdateOne) Select(field string, fields ...string) *GoodOrderPercentUpdateOne {
	gopuo.fields = append([]string{field}, fields...)
	return gopuo
}

// Save executes the query and returns the updated GoodOrderPercent entity.
func (gopuo *GoodOrderPercentUpdateOne) Save(ctx context.Context) (*GoodOrderPercent, error) {
	var (
		err  error
		node *GoodOrderPercent
	)
	if err := gopuo.defaults(); err != nil {
		return nil, err
	}
	if len(gopuo.hooks) == 0 {
		node, err = gopuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*GoodOrderPercentMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			gopuo.mutation = mutation
			node, err = gopuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(gopuo.hooks) - 1; i >= 0; i-- {
			if gopuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = gopuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, gopuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*GoodOrderPercent)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from GoodOrderPercentMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (gopuo *GoodOrderPercentUpdateOne) SaveX(ctx context.Context) *GoodOrderPercent {
	node, err := gopuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (gopuo *GoodOrderPercentUpdateOne) Exec(ctx context.Context) error {
	_, err := gopuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gopuo *GoodOrderPercentUpdateOne) ExecX(ctx context.Context) {
	if err := gopuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (gopuo *GoodOrderPercentUpdateOne) defaults() error {
	if _, ok := gopuo.mutation.UpdatedAt(); !ok {
		if goodorderpercent.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized goodorderpercent.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := goodorderpercent.UpdateDefaultUpdatedAt()
		gopuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

func (gopuo *GoodOrderPercentUpdateOne) sqlSave(ctx context.Context) (_node *GoodOrderPercent, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   goodorderpercent.Table,
			Columns: goodorderpercent.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: goodorderpercent.FieldID,
			},
		},
	}
	id, ok := gopuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "GoodOrderPercent.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := gopuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, goodorderpercent.FieldID)
		for _, f := range fields {
			if !goodorderpercent.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != goodorderpercent.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := gopuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := gopuo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: goodorderpercent.FieldCreatedAt,
		})
	}
	if value, ok := gopuo.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: goodorderpercent.FieldCreatedAt,
		})
	}
	if value, ok := gopuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: goodorderpercent.FieldUpdatedAt,
		})
	}
	if value, ok := gopuo.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: goodorderpercent.FieldUpdatedAt,
		})
	}
	if value, ok := gopuo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: goodorderpercent.FieldDeletedAt,
		})
	}
	if value, ok := gopuo.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: goodorderpercent.FieldDeletedAt,
		})
	}
	if value, ok := gopuo.mutation.AppID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: goodorderpercent.FieldAppID,
		})
	}
	if gopuo.mutation.AppIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: goodorderpercent.FieldAppID,
		})
	}
	if value, ok := gopuo.mutation.UserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: goodorderpercent.FieldUserID,
		})
	}
	if gopuo.mutation.UserIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: goodorderpercent.FieldUserID,
		})
	}
	if value, ok := gopuo.mutation.GoodID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: goodorderpercent.FieldGoodID,
		})
	}
	if gopuo.mutation.GoodIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: goodorderpercent.FieldGoodID,
		})
	}
	if value, ok := gopuo.mutation.Percent(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: goodorderpercent.FieldPercent,
		})
	}
	if gopuo.mutation.PercentCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Column: goodorderpercent.FieldPercent,
		})
	}
	if value, ok := gopuo.mutation.StartAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: goodorderpercent.FieldStartAt,
		})
	}
	if value, ok := gopuo.mutation.AddedStartAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: goodorderpercent.FieldStartAt,
		})
	}
	if gopuo.mutation.StartAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Column: goodorderpercent.FieldStartAt,
		})
	}
	if value, ok := gopuo.mutation.EndAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: goodorderpercent.FieldEndAt,
		})
	}
	if value, ok := gopuo.mutation.AddedEndAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: goodorderpercent.FieldEndAt,
		})
	}
	if gopuo.mutation.EndAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Column: goodorderpercent.FieldEndAt,
		})
	}
	_node = &GoodOrderPercent{config: gopuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, gopuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{goodorderpercent.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
