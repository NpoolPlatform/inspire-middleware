// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/inspire-middleware/pkg/db/ent/archivementgeneral"
	"github.com/NpoolPlatform/inspire-middleware/pkg/db/ent/predicate"
)

// ArchivementGeneralDelete is the builder for deleting a ArchivementGeneral entity.
type ArchivementGeneralDelete struct {
	config
	hooks    []Hook
	mutation *ArchivementGeneralMutation
}

// Where appends a list predicates to the ArchivementGeneralDelete builder.
func (agd *ArchivementGeneralDelete) Where(ps ...predicate.ArchivementGeneral) *ArchivementGeneralDelete {
	agd.mutation.Where(ps...)
	return agd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (agd *ArchivementGeneralDelete) Exec(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(agd.hooks) == 0 {
		affected, err = agd.sqlExec(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ArchivementGeneralMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			agd.mutation = mutation
			affected, err = agd.sqlExec(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(agd.hooks) - 1; i >= 0; i-- {
			if agd.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = agd.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, agd.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// ExecX is like Exec, but panics if an error occurs.
func (agd *ArchivementGeneralDelete) ExecX(ctx context.Context) int {
	n, err := agd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (agd *ArchivementGeneralDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := &sqlgraph.DeleteSpec{
		Node: &sqlgraph.NodeSpec{
			Table: archivementgeneral.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: archivementgeneral.FieldID,
			},
		},
	}
	if ps := agd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, agd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	return affected, err
}

// ArchivementGeneralDeleteOne is the builder for deleting a single ArchivementGeneral entity.
type ArchivementGeneralDeleteOne struct {
	agd *ArchivementGeneralDelete
}

// Exec executes the deletion query.
func (agdo *ArchivementGeneralDeleteOne) Exec(ctx context.Context) error {
	n, err := agdo.agd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{archivementgeneral.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (agdo *ArchivementGeneralDeleteOne) ExecX(ctx context.Context) {
	agdo.agd.ExecX(ctx)
}
