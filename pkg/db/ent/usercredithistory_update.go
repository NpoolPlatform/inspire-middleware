// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/inspire-middleware/pkg/db/ent/predicate"
	"github.com/NpoolPlatform/inspire-middleware/pkg/db/ent/usercredithistory"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// UserCreditHistoryUpdate is the builder for updating UserCreditHistory entities.
type UserCreditHistoryUpdate struct {
	config
	hooks     []Hook
	mutation  *UserCreditHistoryMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the UserCreditHistoryUpdate builder.
func (uchu *UserCreditHistoryUpdate) Where(ps ...predicate.UserCreditHistory) *UserCreditHistoryUpdate {
	uchu.mutation.Where(ps...)
	return uchu
}

// SetCreatedAt sets the "created_at" field.
func (uchu *UserCreditHistoryUpdate) SetCreatedAt(u uint32) *UserCreditHistoryUpdate {
	uchu.mutation.ResetCreatedAt()
	uchu.mutation.SetCreatedAt(u)
	return uchu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (uchu *UserCreditHistoryUpdate) SetNillableCreatedAt(u *uint32) *UserCreditHistoryUpdate {
	if u != nil {
		uchu.SetCreatedAt(*u)
	}
	return uchu
}

// AddCreatedAt adds u to the "created_at" field.
func (uchu *UserCreditHistoryUpdate) AddCreatedAt(u int32) *UserCreditHistoryUpdate {
	uchu.mutation.AddCreatedAt(u)
	return uchu
}

// SetUpdatedAt sets the "updated_at" field.
func (uchu *UserCreditHistoryUpdate) SetUpdatedAt(u uint32) *UserCreditHistoryUpdate {
	uchu.mutation.ResetUpdatedAt()
	uchu.mutation.SetUpdatedAt(u)
	return uchu
}

// AddUpdatedAt adds u to the "updated_at" field.
func (uchu *UserCreditHistoryUpdate) AddUpdatedAt(u int32) *UserCreditHistoryUpdate {
	uchu.mutation.AddUpdatedAt(u)
	return uchu
}

// SetDeletedAt sets the "deleted_at" field.
func (uchu *UserCreditHistoryUpdate) SetDeletedAt(u uint32) *UserCreditHistoryUpdate {
	uchu.mutation.ResetDeletedAt()
	uchu.mutation.SetDeletedAt(u)
	return uchu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (uchu *UserCreditHistoryUpdate) SetNillableDeletedAt(u *uint32) *UserCreditHistoryUpdate {
	if u != nil {
		uchu.SetDeletedAt(*u)
	}
	return uchu
}

// AddDeletedAt adds u to the "deleted_at" field.
func (uchu *UserCreditHistoryUpdate) AddDeletedAt(u int32) *UserCreditHistoryUpdate {
	uchu.mutation.AddDeletedAt(u)
	return uchu
}

// SetEntID sets the "ent_id" field.
func (uchu *UserCreditHistoryUpdate) SetEntID(u uuid.UUID) *UserCreditHistoryUpdate {
	uchu.mutation.SetEntID(u)
	return uchu
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (uchu *UserCreditHistoryUpdate) SetNillableEntID(u *uuid.UUID) *UserCreditHistoryUpdate {
	if u != nil {
		uchu.SetEntID(*u)
	}
	return uchu
}

// SetAppID sets the "app_id" field.
func (uchu *UserCreditHistoryUpdate) SetAppID(u uuid.UUID) *UserCreditHistoryUpdate {
	uchu.mutation.SetAppID(u)
	return uchu
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (uchu *UserCreditHistoryUpdate) SetNillableAppID(u *uuid.UUID) *UserCreditHistoryUpdate {
	if u != nil {
		uchu.SetAppID(*u)
	}
	return uchu
}

// ClearAppID clears the value of the "app_id" field.
func (uchu *UserCreditHistoryUpdate) ClearAppID() *UserCreditHistoryUpdate {
	uchu.mutation.ClearAppID()
	return uchu
}

// SetUserID sets the "user_id" field.
func (uchu *UserCreditHistoryUpdate) SetUserID(u uuid.UUID) *UserCreditHistoryUpdate {
	uchu.mutation.SetUserID(u)
	return uchu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (uchu *UserCreditHistoryUpdate) SetNillableUserID(u *uuid.UUID) *UserCreditHistoryUpdate {
	if u != nil {
		uchu.SetUserID(*u)
	}
	return uchu
}

// ClearUserID clears the value of the "user_id" field.
func (uchu *UserCreditHistoryUpdate) ClearUserID() *UserCreditHistoryUpdate {
	uchu.mutation.ClearUserID()
	return uchu
}

// SetTaskID sets the "task_id" field.
func (uchu *UserCreditHistoryUpdate) SetTaskID(u uuid.UUID) *UserCreditHistoryUpdate {
	uchu.mutation.SetTaskID(u)
	return uchu
}

// SetNillableTaskID sets the "task_id" field if the given value is not nil.
func (uchu *UserCreditHistoryUpdate) SetNillableTaskID(u *uuid.UUID) *UserCreditHistoryUpdate {
	if u != nil {
		uchu.SetTaskID(*u)
	}
	return uchu
}

// ClearTaskID clears the value of the "task_id" field.
func (uchu *UserCreditHistoryUpdate) ClearTaskID() *UserCreditHistoryUpdate {
	uchu.mutation.ClearTaskID()
	return uchu
}

// SetEventID sets the "event_id" field.
func (uchu *UserCreditHistoryUpdate) SetEventID(u uuid.UUID) *UserCreditHistoryUpdate {
	uchu.mutation.SetEventID(u)
	return uchu
}

// SetNillableEventID sets the "event_id" field if the given value is not nil.
func (uchu *UserCreditHistoryUpdate) SetNillableEventID(u *uuid.UUID) *UserCreditHistoryUpdate {
	if u != nil {
		uchu.SetEventID(*u)
	}
	return uchu
}

// ClearEventID clears the value of the "event_id" field.
func (uchu *UserCreditHistoryUpdate) ClearEventID() *UserCreditHistoryUpdate {
	uchu.mutation.ClearEventID()
	return uchu
}

// SetCredits sets the "credits" field.
func (uchu *UserCreditHistoryUpdate) SetCredits(d decimal.Decimal) *UserCreditHistoryUpdate {
	uchu.mutation.SetCredits(d)
	return uchu
}

// SetNillableCredits sets the "credits" field if the given value is not nil.
func (uchu *UserCreditHistoryUpdate) SetNillableCredits(d *decimal.Decimal) *UserCreditHistoryUpdate {
	if d != nil {
		uchu.SetCredits(*d)
	}
	return uchu
}

// ClearCredits clears the value of the "credits" field.
func (uchu *UserCreditHistoryUpdate) ClearCredits() *UserCreditHistoryUpdate {
	uchu.mutation.ClearCredits()
	return uchu
}

// Mutation returns the UserCreditHistoryMutation object of the builder.
func (uchu *UserCreditHistoryUpdate) Mutation() *UserCreditHistoryMutation {
	return uchu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uchu *UserCreditHistoryUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if err := uchu.defaults(); err != nil {
		return 0, err
	}
	if len(uchu.hooks) == 0 {
		affected, err = uchu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserCreditHistoryMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			uchu.mutation = mutation
			affected, err = uchu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(uchu.hooks) - 1; i >= 0; i-- {
			if uchu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = uchu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, uchu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (uchu *UserCreditHistoryUpdate) SaveX(ctx context.Context) int {
	affected, err := uchu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uchu *UserCreditHistoryUpdate) Exec(ctx context.Context) error {
	_, err := uchu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uchu *UserCreditHistoryUpdate) ExecX(ctx context.Context) {
	if err := uchu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uchu *UserCreditHistoryUpdate) defaults() error {
	if _, ok := uchu.mutation.UpdatedAt(); !ok {
		if usercredithistory.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized usercredithistory.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := usercredithistory.UpdateDefaultUpdatedAt()
		uchu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (uchu *UserCreditHistoryUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *UserCreditHistoryUpdate {
	uchu.modifiers = append(uchu.modifiers, modifiers...)
	return uchu
}

func (uchu *UserCreditHistoryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   usercredithistory.Table,
			Columns: usercredithistory.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: usercredithistory.FieldID,
			},
		},
	}
	if ps := uchu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uchu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: usercredithistory.FieldCreatedAt,
		})
	}
	if value, ok := uchu.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: usercredithistory.FieldCreatedAt,
		})
	}
	if value, ok := uchu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: usercredithistory.FieldUpdatedAt,
		})
	}
	if value, ok := uchu.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: usercredithistory.FieldUpdatedAt,
		})
	}
	if value, ok := uchu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: usercredithistory.FieldDeletedAt,
		})
	}
	if value, ok := uchu.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: usercredithistory.FieldDeletedAt,
		})
	}
	if value, ok := uchu.mutation.EntID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: usercredithistory.FieldEntID,
		})
	}
	if value, ok := uchu.mutation.AppID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: usercredithistory.FieldAppID,
		})
	}
	if uchu.mutation.AppIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: usercredithistory.FieldAppID,
		})
	}
	if value, ok := uchu.mutation.UserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: usercredithistory.FieldUserID,
		})
	}
	if uchu.mutation.UserIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: usercredithistory.FieldUserID,
		})
	}
	if value, ok := uchu.mutation.TaskID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: usercredithistory.FieldTaskID,
		})
	}
	if uchu.mutation.TaskIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: usercredithistory.FieldTaskID,
		})
	}
	if value, ok := uchu.mutation.EventID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: usercredithistory.FieldEventID,
		})
	}
	if uchu.mutation.EventIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: usercredithistory.FieldEventID,
		})
	}
	if value, ok := uchu.mutation.Credits(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: usercredithistory.FieldCredits,
		})
	}
	if uchu.mutation.CreditsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Column: usercredithistory.FieldCredits,
		})
	}
	_spec.Modifiers = uchu.modifiers
	if n, err = sqlgraph.UpdateNodes(ctx, uchu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{usercredithistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// UserCreditHistoryUpdateOne is the builder for updating a single UserCreditHistory entity.
type UserCreditHistoryUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *UserCreditHistoryMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetCreatedAt sets the "created_at" field.
func (uchuo *UserCreditHistoryUpdateOne) SetCreatedAt(u uint32) *UserCreditHistoryUpdateOne {
	uchuo.mutation.ResetCreatedAt()
	uchuo.mutation.SetCreatedAt(u)
	return uchuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (uchuo *UserCreditHistoryUpdateOne) SetNillableCreatedAt(u *uint32) *UserCreditHistoryUpdateOne {
	if u != nil {
		uchuo.SetCreatedAt(*u)
	}
	return uchuo
}

// AddCreatedAt adds u to the "created_at" field.
func (uchuo *UserCreditHistoryUpdateOne) AddCreatedAt(u int32) *UserCreditHistoryUpdateOne {
	uchuo.mutation.AddCreatedAt(u)
	return uchuo
}

// SetUpdatedAt sets the "updated_at" field.
func (uchuo *UserCreditHistoryUpdateOne) SetUpdatedAt(u uint32) *UserCreditHistoryUpdateOne {
	uchuo.mutation.ResetUpdatedAt()
	uchuo.mutation.SetUpdatedAt(u)
	return uchuo
}

// AddUpdatedAt adds u to the "updated_at" field.
func (uchuo *UserCreditHistoryUpdateOne) AddUpdatedAt(u int32) *UserCreditHistoryUpdateOne {
	uchuo.mutation.AddUpdatedAt(u)
	return uchuo
}

// SetDeletedAt sets the "deleted_at" field.
func (uchuo *UserCreditHistoryUpdateOne) SetDeletedAt(u uint32) *UserCreditHistoryUpdateOne {
	uchuo.mutation.ResetDeletedAt()
	uchuo.mutation.SetDeletedAt(u)
	return uchuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (uchuo *UserCreditHistoryUpdateOne) SetNillableDeletedAt(u *uint32) *UserCreditHistoryUpdateOne {
	if u != nil {
		uchuo.SetDeletedAt(*u)
	}
	return uchuo
}

// AddDeletedAt adds u to the "deleted_at" field.
func (uchuo *UserCreditHistoryUpdateOne) AddDeletedAt(u int32) *UserCreditHistoryUpdateOne {
	uchuo.mutation.AddDeletedAt(u)
	return uchuo
}

// SetEntID sets the "ent_id" field.
func (uchuo *UserCreditHistoryUpdateOne) SetEntID(u uuid.UUID) *UserCreditHistoryUpdateOne {
	uchuo.mutation.SetEntID(u)
	return uchuo
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (uchuo *UserCreditHistoryUpdateOne) SetNillableEntID(u *uuid.UUID) *UserCreditHistoryUpdateOne {
	if u != nil {
		uchuo.SetEntID(*u)
	}
	return uchuo
}

// SetAppID sets the "app_id" field.
func (uchuo *UserCreditHistoryUpdateOne) SetAppID(u uuid.UUID) *UserCreditHistoryUpdateOne {
	uchuo.mutation.SetAppID(u)
	return uchuo
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (uchuo *UserCreditHistoryUpdateOne) SetNillableAppID(u *uuid.UUID) *UserCreditHistoryUpdateOne {
	if u != nil {
		uchuo.SetAppID(*u)
	}
	return uchuo
}

// ClearAppID clears the value of the "app_id" field.
func (uchuo *UserCreditHistoryUpdateOne) ClearAppID() *UserCreditHistoryUpdateOne {
	uchuo.mutation.ClearAppID()
	return uchuo
}

// SetUserID sets the "user_id" field.
func (uchuo *UserCreditHistoryUpdateOne) SetUserID(u uuid.UUID) *UserCreditHistoryUpdateOne {
	uchuo.mutation.SetUserID(u)
	return uchuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (uchuo *UserCreditHistoryUpdateOne) SetNillableUserID(u *uuid.UUID) *UserCreditHistoryUpdateOne {
	if u != nil {
		uchuo.SetUserID(*u)
	}
	return uchuo
}

// ClearUserID clears the value of the "user_id" field.
func (uchuo *UserCreditHistoryUpdateOne) ClearUserID() *UserCreditHistoryUpdateOne {
	uchuo.mutation.ClearUserID()
	return uchuo
}

// SetTaskID sets the "task_id" field.
func (uchuo *UserCreditHistoryUpdateOne) SetTaskID(u uuid.UUID) *UserCreditHistoryUpdateOne {
	uchuo.mutation.SetTaskID(u)
	return uchuo
}

// SetNillableTaskID sets the "task_id" field if the given value is not nil.
func (uchuo *UserCreditHistoryUpdateOne) SetNillableTaskID(u *uuid.UUID) *UserCreditHistoryUpdateOne {
	if u != nil {
		uchuo.SetTaskID(*u)
	}
	return uchuo
}

// ClearTaskID clears the value of the "task_id" field.
func (uchuo *UserCreditHistoryUpdateOne) ClearTaskID() *UserCreditHistoryUpdateOne {
	uchuo.mutation.ClearTaskID()
	return uchuo
}

// SetEventID sets the "event_id" field.
func (uchuo *UserCreditHistoryUpdateOne) SetEventID(u uuid.UUID) *UserCreditHistoryUpdateOne {
	uchuo.mutation.SetEventID(u)
	return uchuo
}

// SetNillableEventID sets the "event_id" field if the given value is not nil.
func (uchuo *UserCreditHistoryUpdateOne) SetNillableEventID(u *uuid.UUID) *UserCreditHistoryUpdateOne {
	if u != nil {
		uchuo.SetEventID(*u)
	}
	return uchuo
}

// ClearEventID clears the value of the "event_id" field.
func (uchuo *UserCreditHistoryUpdateOne) ClearEventID() *UserCreditHistoryUpdateOne {
	uchuo.mutation.ClearEventID()
	return uchuo
}

// SetCredits sets the "credits" field.
func (uchuo *UserCreditHistoryUpdateOne) SetCredits(d decimal.Decimal) *UserCreditHistoryUpdateOne {
	uchuo.mutation.SetCredits(d)
	return uchuo
}

// SetNillableCredits sets the "credits" field if the given value is not nil.
func (uchuo *UserCreditHistoryUpdateOne) SetNillableCredits(d *decimal.Decimal) *UserCreditHistoryUpdateOne {
	if d != nil {
		uchuo.SetCredits(*d)
	}
	return uchuo
}

// ClearCredits clears the value of the "credits" field.
func (uchuo *UserCreditHistoryUpdateOne) ClearCredits() *UserCreditHistoryUpdateOne {
	uchuo.mutation.ClearCredits()
	return uchuo
}

// Mutation returns the UserCreditHistoryMutation object of the builder.
func (uchuo *UserCreditHistoryUpdateOne) Mutation() *UserCreditHistoryMutation {
	return uchuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uchuo *UserCreditHistoryUpdateOne) Select(field string, fields ...string) *UserCreditHistoryUpdateOne {
	uchuo.fields = append([]string{field}, fields...)
	return uchuo
}

// Save executes the query and returns the updated UserCreditHistory entity.
func (uchuo *UserCreditHistoryUpdateOne) Save(ctx context.Context) (*UserCreditHistory, error) {
	var (
		err  error
		node *UserCreditHistory
	)
	if err := uchuo.defaults(); err != nil {
		return nil, err
	}
	if len(uchuo.hooks) == 0 {
		node, err = uchuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserCreditHistoryMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			uchuo.mutation = mutation
			node, err = uchuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(uchuo.hooks) - 1; i >= 0; i-- {
			if uchuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = uchuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, uchuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*UserCreditHistory)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from UserCreditHistoryMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (uchuo *UserCreditHistoryUpdateOne) SaveX(ctx context.Context) *UserCreditHistory {
	node, err := uchuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uchuo *UserCreditHistoryUpdateOne) Exec(ctx context.Context) error {
	_, err := uchuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uchuo *UserCreditHistoryUpdateOne) ExecX(ctx context.Context) {
	if err := uchuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uchuo *UserCreditHistoryUpdateOne) defaults() error {
	if _, ok := uchuo.mutation.UpdatedAt(); !ok {
		if usercredithistory.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized usercredithistory.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := usercredithistory.UpdateDefaultUpdatedAt()
		uchuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (uchuo *UserCreditHistoryUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *UserCreditHistoryUpdateOne {
	uchuo.modifiers = append(uchuo.modifiers, modifiers...)
	return uchuo
}

func (uchuo *UserCreditHistoryUpdateOne) sqlSave(ctx context.Context) (_node *UserCreditHistory, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   usercredithistory.Table,
			Columns: usercredithistory.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: usercredithistory.FieldID,
			},
		},
	}
	id, ok := uchuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "UserCreditHistory.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := uchuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, usercredithistory.FieldID)
		for _, f := range fields {
			if !usercredithistory.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != usercredithistory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uchuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uchuo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: usercredithistory.FieldCreatedAt,
		})
	}
	if value, ok := uchuo.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: usercredithistory.FieldCreatedAt,
		})
	}
	if value, ok := uchuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: usercredithistory.FieldUpdatedAt,
		})
	}
	if value, ok := uchuo.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: usercredithistory.FieldUpdatedAt,
		})
	}
	if value, ok := uchuo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: usercredithistory.FieldDeletedAt,
		})
	}
	if value, ok := uchuo.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: usercredithistory.FieldDeletedAt,
		})
	}
	if value, ok := uchuo.mutation.EntID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: usercredithistory.FieldEntID,
		})
	}
	if value, ok := uchuo.mutation.AppID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: usercredithistory.FieldAppID,
		})
	}
	if uchuo.mutation.AppIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: usercredithistory.FieldAppID,
		})
	}
	if value, ok := uchuo.mutation.UserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: usercredithistory.FieldUserID,
		})
	}
	if uchuo.mutation.UserIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: usercredithistory.FieldUserID,
		})
	}
	if value, ok := uchuo.mutation.TaskID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: usercredithistory.FieldTaskID,
		})
	}
	if uchuo.mutation.TaskIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: usercredithistory.FieldTaskID,
		})
	}
	if value, ok := uchuo.mutation.EventID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: usercredithistory.FieldEventID,
		})
	}
	if uchuo.mutation.EventIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: usercredithistory.FieldEventID,
		})
	}
	if value, ok := uchuo.mutation.Credits(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: usercredithistory.FieldCredits,
		})
	}
	if uchuo.mutation.CreditsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Column: usercredithistory.FieldCredits,
		})
	}
	_spec.Modifiers = uchuo.modifiers
	_node = &UserCreditHistory{config: uchuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uchuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{usercredithistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
